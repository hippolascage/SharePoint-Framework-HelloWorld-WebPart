{"version":3,"sources":["SassTask.ts"],"names":[],"mappings":"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","file":"SassTask.js","sourcesContent":["import { GulpTask } from 'gulp-core-build';\nimport gulp = require('gulp');\nimport { EOL } from 'os';\n\nconst scssTsExtName = '.scss.ts';\n\nexport interface ISassTaskConfig {\n  sassMatch?: string[];\n  useCSSModules?: boolean;\n  dropCssFiles?: boolean;\n}\n\nconst _classMaps = {};\n\nconst merge = require('merge2');\n\nexport class SassTask extends GulpTask<ISassTaskConfig> {\n  public name = 'sass';\n\n  public taskConfig: ISassTaskConfig = {\n    sassMatch: [\n      'src/**/*.scss'\n    ],\n    useCSSModules: false,\n    dropCssFiles: false\n  };\n\n  public nukeMatch = [\n    'src/**/*.scss.ts'\n  ];\n\n  public executeTask(\n    gulp: gulp.Gulp,\n    completeCallback?: (result?: string) => void\n  ): Promise<any> | NodeJS.ReadWriteStream | void {\n\n    const autoprefixer = require('autoprefixer');\n    const cssModules = require('postcss-modules');\n    const postCSSPlugins = [\n      autoprefixer({ browsers: ['> 1%', 'last 2 versions', 'ie >= 10'] })\n    ];\n    const modulePostCssPlugins = postCSSPlugins.slice(0);\n\n    modulePostCssPlugins.push(cssModules({\n      getJSON: this._generateModuleStub.bind(this),\n      generateScopedName: this.generateScopedName.bind(this)\n    }));\n\n    const srcPattern = this.taskConfig.sassMatch.slice(0);\n    const moduleSrcPattern = srcPattern.map((value: string) => value.replace('.scss', '.module.scss'));\n\n    if (this.taskConfig.useCSSModules) {\n      return this._processFiles(gulp, srcPattern, completeCallback, modulePostCssPlugins);\n    } else {\n      moduleSrcPattern.forEach((value: string) => srcPattern.push(`!${value}`));\n\n      return merge(this._processFiles(gulp, srcPattern, completeCallback, postCSSPlugins),\n                   this._processFiles(gulp, moduleSrcPattern, completeCallback, modulePostCssPlugins));\n    }\n  }\n\n  private _processFiles(\n    gulp: gulp.Gulp,\n    srcPattern: string[],\n    completeCallback: (result?: any) => void,\n    postCSSPlugins: any[]\n  ): NodeJS.ReadWriteStream {\n    const changed = require('gulp-changed');\n    const cleancss = require('gulp-clean-css');\n    const clipEmptyFiles = require('gulp-clip-empty-files');\n    const clone = require('gulp-clone');\n    const path = require('path');\n    const postcss = require('gulp-postcss');\n    const sass = require('gulp-sass');\n    const texttojs = require('gulp-texttojs');\n    const tasks: NodeJS.ReadWriteStream[] = [];\n\n    const baseTask = gulp.src(srcPattern)\n      .pipe(changed('src', { extension: scssTsExtName }))\n      .pipe(sass.sync({\n        importer: (url, prev, done) => ({ file: _patchSassUrl(url) })\n      }).on('error', function(error: Error) {\n        sass.logError.call(this, error);\n        completeCallback('Errors found in sass file(s).');\n      }))\n      .pipe(postcss(postCSSPlugins))\n      .pipe(cleancss({\n        advanced: false\n      }))\n      .pipe(clipEmptyFiles());\n\n    if (this.taskConfig.dropCssFiles) {\n      tasks.push(baseTask.pipe(clone())\n        .pipe(gulp.dest(this.buildConfig.libFolder)));\n    }\n\n    tasks.push(baseTask.pipe(clone())\n      .pipe(texttojs({\n        ext: scssTsExtName,\n        isExtensionAppended: false,\n        template: (file) => {\n          const content = file.contents.toString('utf8');\n          const classNames: { [key: string]: string } = _classMaps[file.path];\n          let exportClassNames: string = '';\n\n          if (classNames) {\n            const classNamesLines = [\n              '/* tslint:disable */',\n              'const styles = {'\n            ];\n\n            const classKeys: string[] = Object.keys(classNames);\n            classKeys.forEach((key: string, index: number) => {\n              const value = classNames[key];\n              let line: string = '';\n              if (key.indexOf('-') !== -1) {\n                this.logWarning(`The local CSS class '${key}' is not camelCase and will not be type-safe.`);\n                line = `  '${key}': '${value}'`;\n              } else {\n                line = `  ${key}: '${value}'`;\n              }\n\n              if ((index + 1) <= classKeys.length) {\n                line += ',';\n              }\n\n              classNamesLines.push(line);\n            });\n\n            classNamesLines.push(\n              '};',\n              '',\n              'export default styles;',\n              '/* tslint:enable */');\n\n            exportClassNames = classNamesLines.join(EOL);\n          }\n\n          let lines = [];\n          if (this.taskConfig.dropCssFiles) {\n            lines = [\n              `require('${path.basename(file.path, scssTsExtName)}.css');`,\n              '',\n              exportClassNames,\n              ''\n            ];\n          } else if (!!content) {\n            lines = [\n              'import { loadStyles } from \\'load-themed-styles\\';',\n              '',\n              exportClassNames,\n              '',\n              '/* tslint:disable:max-line-length */',\n              `loadStyles(${_flipDoubleQuotes(JSON.stringify(content))});`,\n              '/* tslint:enable:max-line-length */',\n              ''\n            ];\n          }\n\n          return lines.join(EOL).replace(new RegExp(`${EOL}(${EOL})+`), `${EOL}${EOL}`);\n        }\n      }))\n      .pipe(gulp.dest('src')));\n\n    return merge(tasks);\n  }\n\n  private _generateModuleStub(cssFileName: string, json: any) {\n    cssFileName = cssFileName.replace('.css', '.scss.ts');\n    _classMaps[cssFileName] = json;\n  }\n\n  private generateScopedName(name: string, fileName: string ) {\n    const crypto = require('crypto');\n\n    return name + '_' + crypto.createHmac('sha1', fileName).update(name).digest('hex').substring(0, 8);\n  }\n}\n\nfunction _patchSassUrl(url: string) {\n  if (url[0] === '~') {\n    url = 'node_modules/' + url.substr(1);\n  } else if (url === 'stdin') {\n    url = '';\n  }\n\n  return url;\n}\n\nfunction _flipDoubleQuotes(str: string) {\n  return str ? (\n    str\n      .replace(/\\\\\"/g, '`')\n      .replace(/'/g, '\\\\\\'')\n      .replace(/\"/g, `'`)\n      .replace(/`/g, '\"')\n  ) : str;\n}\n"],"sourceRoot":"/source/"}