"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var gulp_core_build_1 = require('gulp-core-build');
var os_1 = require('os');
var scssTsExtName = '.scss.ts';
var _classMaps = {};
var merge = require('merge2');
var SassTask = (function (_super) {
    __extends(SassTask, _super);
    function SassTask() {
        _super.apply(this, arguments);
        this.name = 'sass';
        this.taskConfig = {
            sassMatch: [
                'src/**/*.scss'
            ],
            useCSSModules: false,
            dropCssFiles: false
        };
        this.nukeMatch = [
            'src/**/*.scss.ts'
        ];
    }
    SassTask.prototype.executeTask = function (gulp, completeCallback) {
        var autoprefixer = require('autoprefixer');
        var cssModules = require('postcss-modules');
        var postCSSPlugins = [
            autoprefixer({ browsers: ['> 1%', 'last 2 versions', 'ie >= 10'] })
        ];
        var modulePostCssPlugins = postCSSPlugins.slice(0);
        modulePostCssPlugins.push(cssModules({
            getJSON: this._generateModuleStub.bind(this),
            generateScopedName: this.generateScopedName.bind(this)
        }));
        var srcPattern = this.taskConfig.sassMatch.slice(0);
        var moduleSrcPattern = srcPattern.map(function (value) { return value.replace('.scss', '.module.scss'); });
        if (this.taskConfig.useCSSModules) {
            return this._processFiles(gulp, srcPattern, completeCallback, modulePostCssPlugins);
        }
        else {
            moduleSrcPattern.forEach(function (value) { return srcPattern.push("!" + value); });
            return merge(this._processFiles(gulp, srcPattern, completeCallback, postCSSPlugins), this._processFiles(gulp, moduleSrcPattern, completeCallback, modulePostCssPlugins));
        }
    };
    SassTask.prototype._processFiles = function (gulp, srcPattern, completeCallback, postCSSPlugins) {
        var _this = this;
        var changed = require('gulp-changed');
        var cleancss = require('gulp-clean-css');
        var clipEmptyFiles = require('gulp-clip-empty-files');
        var clone = require('gulp-clone');
        var path = require('path');
        var postcss = require('gulp-postcss');
        var sass = require('gulp-sass');
        var texttojs = require('gulp-texttojs');
        var tasks = [];
        var baseTask = gulp.src(srcPattern)
            .pipe(changed('src', { extension: scssTsExtName }))
            .pipe(sass.sync({
            importer: function (url, prev, done) { return ({ file: _patchSassUrl(url) }); }
        }).on('error', function (error) {
            sass.logError.call(this, error);
            completeCallback('Errors found in sass file(s).');
        }))
            .pipe(postcss(postCSSPlugins))
            .pipe(cleancss({
            advanced: false
        }))
            .pipe(clipEmptyFiles());
        if (this.taskConfig.dropCssFiles) {
            tasks.push(baseTask.pipe(clone())
                .pipe(gulp.dest(this.buildConfig.libFolder)));
        }
        tasks.push(baseTask.pipe(clone())
            .pipe(texttojs({
            ext: scssTsExtName,
            isExtensionAppended: false,
            template: function (file) {
                var content = file.contents.toString('utf8');
                var classNames = _classMaps[file.path];
                var exportClassNames = '';
                if (classNames) {
                    var classNamesLines_1 = [
                        '/* tslint:disable */',
                        'const styles = {'
                    ];
                    var classKeys_1 = Object.keys(classNames);
                    classKeys_1.forEach(function (key, index) {
                        var value = classNames[key];
                        var line = '';
                        if (key.indexOf('-') !== -1) {
                            _this.logWarning("The local CSS class '" + key + "' is not camelCase and will not be type-safe.");
                            line = "  '" + key + "': '" + value + "'";
                        }
                        else {
                            line = "  " + key + ": '" + value + "'";
                        }
                        if ((index + 1) <= classKeys_1.length) {
                            line += ',';
                        }
                        classNamesLines_1.push(line);
                    });
                    classNamesLines_1.push('};', '', 'export default styles;', '/* tslint:enable */');
                    exportClassNames = classNamesLines_1.join(os_1.EOL);
                }
                var lines = [];
                if (_this.taskConfig.dropCssFiles) {
                    lines = [
                        ("require('" + path.basename(file.path, scssTsExtName) + ".css');"),
                        '',
                        exportClassNames,
                        ''
                    ];
                }
                else if (!!content) {
                    lines = [
                        'import { loadStyles } from \'load-themed-styles\';',
                        '',
                        exportClassNames,
                        '',
                        '/* tslint:disable:max-line-length */',
                        ("loadStyles(" + _flipDoubleQuotes(JSON.stringify(content)) + ");"),
                        '/* tslint:enable:max-line-length */',
                        ''
                    ];
                }
                return lines.join(os_1.EOL).replace(new RegExp(os_1.EOL + "(" + os_1.EOL + ")+"), "" + os_1.EOL + os_1.EOL);
            }
        }))
            .pipe(gulp.dest('src')));
        return merge(tasks);
    };
    SassTask.prototype._generateModuleStub = function (cssFileName, json) {
        cssFileName = cssFileName.replace('.css', '.scss.ts');
        _classMaps[cssFileName] = json;
    };
    SassTask.prototype.generateScopedName = function (name, fileName) {
        var crypto = require('crypto');
        return name + '_' + crypto.createHmac('sha1', fileName).update(name).digest('hex').substring(0, 8);
    };
    return SassTask;
}(gulp_core_build_1.GulpTask));
exports.SassTask = SassTask;
function _patchSassUrl(url) {
    if (url[0] === '~') {
        url = 'node_modules/' + url.substr(1);
    }
    else if (url === 'stdin') {
        url = '';
    }
    return url;
}
function _flipDoubleQuotes(str) {
    return str ? (str
        .replace(/\\"/g, '`')
        .replace(/'/g, '\\\'')
        .replace(/"/g, "'")
        .replace(/`/g, '"')) : str;
}

//# sourceMappingURL=SassTask.js.map
