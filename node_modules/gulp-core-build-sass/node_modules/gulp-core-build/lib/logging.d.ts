import * as gulp from 'gulp';
export declare function logSummary(value: string): void;
export declare function log(...args: Array<string | Chalk.ChalkChain>): void;
export declare function reset(): void;
export declare enum TestResultState {
    Passed = 0,
    Failed = 1,
    FlakyFailed = 2,
    Skipped = 3,
}
export declare function functionalTestRun(name: string, result: TestResultState, duration: number): void;
export declare function endTaskSrc(taskName: string, startHrtime: number[], fileCount: number): void;
export declare function coverageData(coverage: number, threshold: number, filePath: string): void;
export declare function addSupression(str: string): void;
export declare function warn(...args: Array<string | Chalk.ChalkChain>): void;
export declare function error(...args: Array<string | Chalk.ChalkChain>): void;
export declare function fileError(taskName: string, filePath: string, line: number, column: number, errorCode: string, message: string): void;
export declare function verbose(...args: Array<string | Chalk.ChalkChain>): void;
export declare function generateGulpError(error: any): any;
export declare function writeError(e: any): void;
export declare function getWarnings(): string[];
export declare function getErrors(): string[];
export declare function getStart(): number[];
export declare function setWatchMode(): void;
export declare function getWatchMode(): boolean;
export declare function setExitCode(exitCode: number): void;
export declare function logStartSubtask(name: string): void;
export declare function logEndSubtask(name: string, startTime: number[], errorObject?: any): void;
export declare function initialize(gulp: gulp.Gulp, gulpErrorCallback?: (err: any) => void, gulpStopCallback?: (err: any) => void): void;
export declare function markTaskCreationTime(): void;
