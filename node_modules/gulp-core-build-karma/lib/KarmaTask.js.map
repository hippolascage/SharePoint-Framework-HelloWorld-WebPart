{"version":3,"sources":["KarmaTask.ts"],"names":[],"mappings":";;;;;;AAAA,gCAEO,iBAAiB,CAAC,CAAA;AAOzB;IAA+B,6BAA0B;IAAzD;QAA+B,8BAA0B;QAChD,SAAI,GAAG,OAAO,CAAC;QACf,eAAU,GAAqB;YACpC,eAAe,EAAE,mBAAmB;SACrC,CAAC;QAEK,cAAS,GAAG;YACjB,gBAAgB,EAAE,OAAO,CAAC,OAAO,CAAC,qCAAqC,CAAC;YACxE,8BAA8B,EAAE,OAAO,CAAC,OAAO,CAAC,8BAA8B,CAAC;YAC/E,OAAO,EAAE;gBACP,OAAO,CAAC,eAAe,CAAC;gBACxB,OAAO,CAAC,aAAa,CAAC;gBACtB,OAAO,CAAC,gBAAgB,CAAC;gBACzB,OAAO,CAAC,4BAA4B,CAAC;gBACrC,OAAO,CAAC,0BAA0B,CAAC;gBACnC,OAAO,CAAC,kBAAkB,CAAC;aAC5B;SACF,CAAC;IAgDJ,CAAC;IA9CQ,+BAAW,GAAlB,UAAmB,IAAe,EAAE,gBAAwC;QACpE,qDAAe,CAAqB;QAE1C,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YACtC,IAAI,eAAe,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAEjE,EAAE,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;gBACrB,IAAI,CAAC,UAAU,CACb,iCAA+B,eAAe,uBAAoB;oBAClE,yDAAyD,CAAC,CAAC;YAC/D,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;gBAE3B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,oBAAoB,CAAC,CAAC,CAAC;gBAC7D,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,aAAa,CAAC,EAAE,cAAc,CAAC,CAAC;YAMxE,CAAC;YAED,gBAAgB,EAAE,CAAC;QACrB,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,MAAM,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC;YACrC,IAAI,SAAS,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACzD,IAAI,UAAU,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC;YACnD,IAAI,WAAW,GAAG,CAAC,UAAU,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;YAE1E,IAAI,MAAM,CAAC;gBACT,MAAM,EAAE;oBACN,KAAK,EAAE;wBACL,IAAI,EAAE,WAAW;qBAClB;iBACF;gBACD,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC;gBAC7C,SAAS,EAAE,SAAS;aACrB,EAAE,UAAC,QAAQ;gBACV,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;oBACb,gBAAgB,CAAC,gCAAgC,CAAC,CAAC;gBACrD,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,gBAAgB,EAAE,CAAC;gBACrB,CAAC;YACH,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;QACb,CAAC;IACH,CAAC;IACH,gBAAC;AAAD,CAjEA,AAiEC,CAjE8B,0BAAQ,GAiEtC;AAjEY,iBAAS,YAiErB,CAAA","file":"KarmaTask.js","sourcesContent":["import {\nGulpTask\n} from 'gulp-core-build';\nimport gulp = require('gulp');\n\nexport interface IKarmaTaskConfig {\n  karmaConfigPath: string;\n}\n\nexport class KarmaTask extends GulpTask<IKarmaTaskConfig> {\n  public name = 'karma';\n  public taskConfig: IKarmaTaskConfig = {\n    karmaConfigPath: './karma.config.js'\n  };\n\n  public resources = {\n    bindPolyfillPath: require.resolve('phantomjs-polyfill/bind-polyfill.js'),\n    istanbulInstrumenterLoaderPath: require.resolve('istanbul-instrumenter-loader'),\n    plugins: [\n      require('karma-webpack'),\n      require('karma-mocha'),\n      require('karma-coverage'),\n      require('karma-mocha-clean-reporter'),\n      require('karma-phantomjs-launcher'),\n      require('karma-sinon-chai')\n    ]\n  };\n\n  public executeTask(gulp: gulp.Gulp, completeCallback: (result?: any) => void): void {\n    let { karmaConfigPath } = this.taskConfig;\n\n    if (!this.fileExists(karmaConfigPath)) {\n      let shouldInitKarma = (process.argv.indexOf('--initkarma') > -1);\n\n      if (!shouldInitKarma) {\n        this.logWarning(\n          `The karma config location '${ karmaConfigPath }' doesn't exist. ` +\n          `Run again using --initkarma to create a default config.`);\n      } else {\n        let path = require('path');\n\n        this.copyFile(path.resolve(__dirname, '../karma.config.js'));\n        this.copyFile(path.resolve(__dirname, '../tests.js'), 'src/tests.js');\n\n        // install dev dependencies?\n        // phantomjs-polyfill?\n        //\n        // install typings for mocha/chai/sinon?\n      }\n\n      completeCallback();\n    } else {\n      let server = require('karma').Server;\n      let singleRun = (process.argv.indexOf('--debug') === -1);\n      let matchIndex = (process.argv.indexOf('--match'));\n      let matchString = (matchIndex === -1) ? '' : process.argv[matchIndex + 1];\n\n      new server({\n        client: {\n          mocha: {\n            grep: matchString\n          }\n        },\n        configFile: this.resolvePath(karmaConfigPath),\n        singleRun: singleRun\n      }, (exitCode) => {\n        if (exitCode) {\n          completeCallback('Error(s) occured during karma.');\n        } else {\n          completeCallback();\n        }\n      }).start();\n    }\n  }\n}\n"],"sourceRoot":"/source/"}