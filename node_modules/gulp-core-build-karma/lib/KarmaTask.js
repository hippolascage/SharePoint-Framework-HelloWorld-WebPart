"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var gulp_core_build_1 = require('gulp-core-build');
var KarmaTask = (function (_super) {
    __extends(KarmaTask, _super);
    function KarmaTask() {
        _super.apply(this, arguments);
        this.name = 'karma';
        this.taskConfig = {
            karmaConfigPath: './karma.config.js'
        };
        this.resources = {
            bindPolyfillPath: require.resolve('phantomjs-polyfill/bind-polyfill.js'),
            istanbulInstrumenterLoaderPath: require.resolve('istanbul-instrumenter-loader'),
            plugins: [
                require('karma-webpack'),
                require('karma-mocha'),
                require('karma-coverage'),
                require('karma-mocha-clean-reporter'),
                require('karma-phantomjs-launcher'),
                require('karma-sinon-chai')
            ]
        };
    }
    KarmaTask.prototype.executeTask = function (gulp, completeCallback) {
        var karmaConfigPath = this.taskConfig.karmaConfigPath;
        if (!this.fileExists(karmaConfigPath)) {
            var shouldInitKarma = (process.argv.indexOf('--initkarma') > -1);
            if (!shouldInitKarma) {
                this.logWarning(("The karma config location '" + karmaConfigPath + "' doesn't exist. ") +
                    "Run again using --initkarma to create a default config.");
            }
            else {
                var path = require('path');
                this.copyFile(path.resolve(__dirname, '../karma.config.js'));
                this.copyFile(path.resolve(__dirname, '../tests.js'), 'src/tests.js');
            }
            completeCallback();
        }
        else {
            var server = require('karma').Server;
            var singleRun = (process.argv.indexOf('--debug') === -1);
            var matchIndex = (process.argv.indexOf('--match'));
            var matchString = (matchIndex === -1) ? '' : process.argv[matchIndex + 1];
            new server({
                client: {
                    mocha: {
                        grep: matchString
                    }
                },
                configFile: this.resolvePath(karmaConfigPath),
                singleRun: singleRun
            }, function (exitCode) {
                if (exitCode) {
                    completeCallback('Error(s) occured during karma.');
                }
                else {
                    completeCallback();
                }
            }).start();
        }
    };
    return KarmaTask;
}(gulp_core_build_1.GulpTask));
exports.KarmaTask = KarmaTask;

//# sourceMappingURL=KarmaTask.js.map
