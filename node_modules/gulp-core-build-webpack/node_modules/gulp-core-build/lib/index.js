'use strict';
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
/* tslint:disable:max-line-length */
var GulpProxy_1 = require('./GulpProxy');
var NukeTask_1 = require('./NukeTask');
var State_1 = require('./State');
var logging_1 = require('./logging');
var config_1 = require('./config');
__export(require('./GulpTask'));
__export(require('./CopyTask'));
__export(require('./NukeTask'));
__export(require('./logging'));
/* tslint:disable:variable-name */
require('es6-promise').polyfill();
/* tslint:enable:variable-name */
var path = require('path');
var packageJSON = require(path.resolve(process.cwd(), 'package.json'));
var _taskMap = {};
var _uniqueTasks = [];
var _buildConfig = {
    distFolder: 'dist',
    libAMDFolder: null,
    libFolder: 'lib',
    tempFolder: 'temp',
    properties: {},
    relogIssues: config_1.getFlagValue('relogIssues', true),
    showToast: config_1.getFlagValue('showToast', true),
    buildSuccessIconPath: path.resolve(__dirname, 'pass.png'),
    buildErrorIconPath: path.resolve(__dirname, 'fail.png'),
    verbose: config_1.getFlagValue('verbose', false),
    production: config_1.getFlagValue('production', false),
    args: State_1.args
};
/**
 * Merges the given build config settings into existing settings.
 *
 * @param  {IBuildConfig} The build config settings.
 */
function setConfig(config) {
    var merge = require('lodash.merge');
    _buildConfig = merge({}, _buildConfig, config);
}
exports.setConfig = setConfig;
/**
 * Replaces the build config.
 *
 * @param  {IBuildConfig} config
 */
function replaceConfig(config) {
    _buildConfig = config;
}
exports.replaceConfig = replaceConfig;
/**
 * Defines a gulp task and maps it to a given IExecutable.
 *
 * @param  {string} taskName
 * @param  {IExecutable} task
 * @returns IExecutable
 */
function task(taskName, task) {
    _taskMap[taskName] = task;
    _trackTask(task);
    return task;
}
exports.task = task;
/**
 * Defines a gulp watch and maps it to a given IExecutable.
 *
 * @param  {string} watchMatch
 * @param  {IExecutable} task
 * @returns IExecutable
 */
function watch(watchMatch, task) {
    var notifier = require('node-notifier');
    _trackTask(task);
    var isWatchRunning = false;
    var shouldRerunWatch = false;
    var lastError = null;
    return {
        execute: function (buildConfig) {
            logging_1.setWatchMode();
            buildConfig.gulp.watch(watchMatch, _runWatch);
            function _runWatch() {
                if (isWatchRunning) {
                    shouldRerunWatch = true;
                }
                else {
                    isWatchRunning = true;
                    _executeTask(task, buildConfig)
                        .then(function () {
                        if (buildConfig.showToast && lastError) {
                            lastError = null;
                            notifier.notify({
                                title: 'Build succeeded',
                                message: packageJSON.name,
                                icon: buildConfig.buildSuccessIconPath
                            });
                        }
                        _finalizeWatch();
                    })
                        .catch(function (error) {
                        if (buildConfig.showToast) {
                            if (!lastError || lastError !== error) {
                                lastError = error;
                                notifier.notify({
                                    title: 'Build failed',
                                    message: error,
                                    icon: buildConfig.buildErrorIconPath
                                });
                            }
                        }
                        _finalizeWatch();
                    });
                }
            }
            function _finalizeWatch() {
                isWatchRunning = false;
                if (shouldRerunWatch) {
                    shouldRerunWatch = false;
                    _runWatch();
                }
            }
            return Promise.resolve();
        }
    };
}
exports.watch = watch;
/**
 * Takes in IExecutables as arguments and returns an IExecutable that will execute them in serial.
 *
 * @param  {IExecutable[]} ...tasks
 * @returns IExecutable
 */
function serial() {
    var tasks = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        tasks[_i - 0] = arguments[_i];
    }
    var flatTasks = _flatten(tasks);
    for (var _a = 0, flatTasks_1 = flatTasks; _a < flatTasks_1.length; _a++) {
        var task_1 = flatTasks_1[_a];
        _trackTask(task_1);
    }
    return {
        execute: function (buildConfig) {
            var output = Promise.resolve();
            var _loop_1 = function(task_2) {
                output = output.then(function () { return _executeTask(task_2, buildConfig); });
            };
            for (var _i = 0, flatTasks_2 = flatTasks; _i < flatTasks_2.length; _i++) {
                var task_2 = flatTasks_2[_i];
                _loop_1(task_2);
            }
            return output;
        }
    };
}
exports.serial = serial;
/**
 * Takes in IExecutables as arguments and returns an IExecutable that will execute them in parallel.
 *
 * @param  {IExecutable[]} ...tasks
 * @returns IExecutable
 */
function parallel() {
    var tasks = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        tasks[_i - 0] = arguments[_i];
    }
    var flattenTasks = _flatten(tasks);
    for (var _a = 0, flattenTasks_1 = flattenTasks; _a < flattenTasks_1.length; _a++) {
        var task_3 = flattenTasks_1[_a];
        _trackTask(task_3);
    }
    return {
        execute: function (buildConfig) {
            return new Promise(function (resolve, reject) {
                var promises = [];
                for (var _i = 0, flattenTasks_2 = flattenTasks; _i < flattenTasks_2.length; _i++) {
                    var task_4 = flattenTasks_2[_i];
                    promises.push(_executeTask(task_4, buildConfig));
                }
                // Use promise all to make sure errors are propagated correctly
                Promise.all(promises).then(resolve, reject);
            });
        }
    };
}
exports.parallel = parallel;
/**
 * Initializes the gulp tasks.
 *
 * @param  {any} gulp
 */
function initialize(gulp) {
    _buildConfig.rootPath = process.cwd();
    _buildConfig.gulp = new GulpProxy_1.GulpProxy(gulp);
    _buildConfig.uniqueTasks = _uniqueTasks;
    config_1.setConfigDefaults(_buildConfig);
    logging_1.initialize(gulp, null, null);
    Object.keys(_taskMap).forEach(function (taskName) { return _registerTask(gulp, taskName, _taskMap[taskName]); });
    logging_1.markTaskCreationTime();
}
exports.initialize = initialize;
/**
 * Registers a given gulp task given a name and an IExecutable.
 *
 * @param  {any} gulp
 * @param  {string} taskName
 * @param  {IExecutable} task
 */
function _registerTask(gulp, taskName, task) {
    gulp.task(taskName, function (cb) {
        _executeTask(task, _buildConfig)
            .then(function () {
            cb();
        }, function (error) {
            cb(logging_1.generateGulpError(error));
        });
    });
}
/**
 * Executes a given IExecutable.
 *
 * @param  {IExecutable} task
 * @param  {IBuildConfig} buildConfig
 * @returns Promise
 */
function _executeTask(task, buildConfig) {
    // Try to fallback to the default task if provided.
    if (task && !task.execute) {
        if (task.default) {
            task = task.default;
        }
    }
    // If the task is missing, throw a meaningful error.
    if (!task || !task.execute) {
        return Promise.reject(new Error("A task was scheduled, but the task was null. This probably means the task wasn't imported correctly."));
    }
    if (task.isEnabled === undefined || task.isEnabled()) {
        var startTime_1 = process.hrtime();
        if (buildConfig.onTaskStart && task.name) {
            buildConfig.onTaskStart(task.name);
        }
        var taskPromise = task.execute(buildConfig)
            .then(function () {
            if (buildConfig.onTaskEnd && task.name) {
                buildConfig.onTaskEnd(task.name, process.hrtime(startTime_1));
            }
        }, function (error) {
            if (buildConfig.onTaskEnd && task.name) {
                buildConfig.onTaskEnd(task.name, process.hrtime(startTime_1), error);
            }
            return Promise.reject(error);
        });
        return taskPromise;
    }
    // No-op otherwise.
    return Promise.resolve();
}
function _trackTask(task) {
    if (_uniqueTasks.indexOf(task) < 0) {
        _uniqueTasks.push(task);
    }
}
/**
 * Flattens a set of arrays into a single array.
 *
 * @param  {any} arr
 */
function _flatten(arr) {
    var output = [];
    for (var _i = 0, arr_1 = arr; _i < arr_1.length; _i++) {
        var toFlatten = arr_1[_i];
        if (Array.isArray(toFlatten)) {
            output = output.concat(toFlatten);
        }
        else {
            output.push(toFlatten);
        }
    }
    return output;
}
exports.nuke = new NukeTask_1.NukeTask();
// Register default nuke task.
task('nuke', exports.nuke);

//# sourceMappingURL=index.js.map
