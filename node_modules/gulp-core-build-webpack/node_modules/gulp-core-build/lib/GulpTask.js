"use strict";
var logging_1 = require('./logging');
var gutil = require('gulp-util');
var through2 = require('through2');
var eos = require('end-of-stream');
var GulpTask = (function () {
    function GulpTask() {
    }
    GulpTask.prototype.setConfig = function (taskConfig) {
        var merge = require('lodash.merge');
        this.taskConfig = merge({}, this.taskConfig, taskConfig);
    };
    GulpTask.prototype.replaceConfig = function (taskConfig) {
        this.taskConfig = taskConfig;
    };
    GulpTask.prototype.isEnabled = function () {
        return true;
    };
    GulpTask.prototype.log = function (message) {
        logging_1.log("[" + gutil.colors.cyan(this.name) + "] " + message);
    };
    GulpTask.prototype.logVerbose = function (message) {
        logging_1.verbose("[" + gutil.colors.cyan(this.name) + "] " + message);
    };
    GulpTask.prototype.logWarning = function (message) {
        logging_1.warn("[" + gutil.colors.cyan(this.name) + "] " + message);
    };
    GulpTask.prototype.logError = function (message) {
        logging_1.error("[" + gutil.colors.cyan(this.name) + "] " + message);
    };
    GulpTask.prototype.fileError = function (filePath, line, column, errorCode, message) {
        logging_1.fileError(this.name, filePath, line, column, errorCode, message);
    };
    GulpTask.prototype.getNukeMatch = function () {
        return this.nukeMatch;
    };
    GulpTask.prototype.execute = function (config) {
        var _this = this;
        this.buildConfig = config;
        var startTime = process.hrtime();
        logging_1.logStartSubtask(this.name);
        return new Promise(function (resolve, reject) {
            var stream;
            try {
                if (!_this.executeTask) {
                    throw new Error('The task subclass is missing the "executeTask" method.');
                }
                stream = _this.executeTask(_this.buildConfig.gulp, function (result) {
                    if (!result) {
                        resolve();
                    }
                    else {
                        reject(result);
                    }
                });
            }
            catch (e) {
                _this.logError(e);
                reject(e);
            }
            if (stream) {
                if (stream.then) {
                    stream.then(resolve, reject);
                }
                else if (stream.pipe) {
                    // wait for stream to end
                    eos(stream, {
                        error: true,
                        readable: stream.readable,
                        writable: stream.writable && !stream.readable
                    }, function (err) {
                        if (err) {
                            reject(err);
                        }
                        else {
                            resolve();
                        }
                    });
                    // Make sure the stream is completly read
                    stream.pipe(through2.obj(function (file, encoding, callback) {
                        'use strict';
                        callback();
                    }, function (callback) {
                        'use strict';
                        callback();
                    }));
                }
                else if (_this.executeTask.length === 1) {
                    resolve(stream);
                }
            }
            else if (_this.executeTask.length === 1) {
                resolve(stream);
            }
        })
            .then(function () {
            logging_1.logEndSubtask(_this.name, startTime);
        }, function (ex) {
            logging_1.logEndSubtask(_this.name, startTime, ex);
            throw ex;
        });
    };
    GulpTask.prototype.resolvePath = function (localPath) {
        var path = require('path');
        if (path.isAbsolute(localPath)) {
            return path.resolve(localPath);
        }
        return path.resolve(path.join(this.buildConfig.rootPath, localPath));
    };
    GulpTask.prototype.fileExists = function (localPath) {
        var fs = require('fs');
        var doesExist = false;
        var fullPath = this.resolvePath(localPath);
        try {
            var stats = fs.statSync(fullPath);
            doesExist = stats.isFile();
        }
        catch (e) { }
        return doesExist;
    };
    GulpTask.prototype.copyFile = function (localSourcePath, localDestPath) {
        var path = require('path');
        var fs = require('fs-extra');
        var fullSourcePath = path.resolve(__dirname, localSourcePath);
        var fullDestPath = path.resolve(this.buildConfig.rootPath, (localDestPath || path.basename(localSourcePath)));
        fs.copySync(fullSourcePath, fullDestPath);
    };
    GulpTask.prototype.readJSONSync = function (localPath) {
        var fullPath = this.resolvePath(localPath);
        var result = null;
        var fs = require('fs');
        try {
            var content = fs.readFileSync(fullPath, 'utf8');
            result = JSON.parse(content);
        }
        catch (e) { }
        return result;
    };
    return GulpTask;
}());
exports.GulpTask = GulpTask;

//# sourceMappingURL=GulpTask.js.map
