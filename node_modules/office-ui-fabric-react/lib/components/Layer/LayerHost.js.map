{"version":3,"sources":["components/Layer/LayerHost.tsx"],"names":[],"mappings":";;;;;;AAAA,IAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAC/B,uBAAuB,cAAc,CAAC,CAAA;AAiBtC;IAA+B,6BAAwD;IAOrF,mBAAY,KAAS;QACnB,kBAAM,KAAK,CAAC,CAAC;QAEb,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QAClB,IAAI,CAAC,KAAK,GAAG;YACX,MAAM,EAAE,IAAI,CAAC,OAAO;SACrB,CAAC;IACJ,CAAC;IAEM,mCAAe,GAAtB;QACE,MAAM,CAAC;YACL,SAAS,EAAE,IAAI;SAChB,CAAC;IACJ,CAAC;IAEM,0BAAM,GAAb;QACE,IAAI,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,UAAC,KAAa,EAAE,KAAa;YAC9D,MAAM,CAAC,CACL,qBAAC,GAAG,IAAC,SAAS,EAAC,oBAAoB,EAAC,GAAG,EAAG,KAAK,CAAC,EAAI,GAChD,KAAK,CAAC,QAAU,CACd,CACP,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,CACL,oBAAC,eAAM,GAAC,SAAS,EAAC,cAAc,GAC5B,MAAQ,CACH,CACV,CAAC;IACJ,CAAC;IAEM,4BAAQ,GAAf,UAAgB,UAAkB,EAAE,UAAuB;QACzD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAE9B,IAAI,CAAC,QAAQ,CAAC;YACZ,MAAM,EAAE,IAAI,CAAC,OAAO;SACrB,EAAE;YACD,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;gBACf,UAAU,EAAE,CAAC;YACf,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,+BAAW,GAAlB,UAAmB,aAAqB;QACtC,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAEM,+BAAW,GAAlB,UAAmB,aAAqB;QACtC,IAAI,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;QAEhD,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YACf,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YAC9B,IAAI,CAAC,WAAW,EAAE,CAAC;QACrB,CAAC;IACH,CAAC;IA5Da,2BAAiB,GAAG;QAChC,SAAS,EAAE,KAAK,CAAC,SAAS,CAAC,IAAI;KAChC,CAAC;IA4DJ,gBAAC;AAAD,CA/DA,AA+DC,CA/D8B,KAAK,CAAC,SAAS,GA+D7C;AA/DY,iBAAS,YA+DrB,CAAA","file":"components/Layer/LayerHost.js","sourcesContent":["import * as React from 'react';\nimport { Fabric } from '../../Fabric';\n\nexport interface ILayer {\n  /**\n   * The React children of the layer.\n   */\n  children: any;\n  /**\n   * The unique id for the layer.\n   */\n  id: string;\n}\n\nexport interface ILayerHostState extends React.Props<LayerHost> {\n  layers: ILayer[];\n}\n\nexport class LayerHost extends React.Component<React.Props<LayerHost>, ILayerHostState> {\n  public static childContextTypes = {\n    isInLayer: React.PropTypes.bool\n  };\n\n  private _layers: ILayer[];\n\n  constructor(props: {}) {\n    super(props);\n\n    this._layers = [];\n    this.state = {\n      layers: this._layers\n    };\n  }\n\n  public getChildContext() {\n    return {\n      isInLayer: true\n    };\n  }\n\n  public render() {\n    let layers = this.state.layers.map((layer: ILayer, index: number) => {\n      return (\n        <div className='ms-LayerHost-layer' key={ layer.id }>\n          { layer.children }\n        </div>\n      );\n    });\n\n    return (\n      <Fabric className='ms-LayerHost'>\n        { layers }\n      </Fabric>\n    );\n  }\n\n  public addLayer(layerToAdd: ILayer, onComplete?: () => void) {\n    this._layers.push(layerToAdd);\n\n    this.setState({\n      layers: this._layers\n    }, () => {\n      if (onComplete) {\n        onComplete();\n      }\n    });\n  }\n\n  public updateLayer(layerToUpdate: ILayer) {\n    this.forceUpdate();\n  }\n\n  public removeLayer(layerToRemove: ILayer) {\n    let index = this._layers.indexOf(layerToRemove);\n\n    if (index > -1) {\n      this._layers.splice(index, 1);\n      this.forceUpdate();\n    }\n  }\n\n}"],"sourceRoot":"/src"}