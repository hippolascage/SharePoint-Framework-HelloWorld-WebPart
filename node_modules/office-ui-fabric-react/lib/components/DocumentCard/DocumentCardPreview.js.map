{"version":3,"sources":["components/DocumentCard/DocumentCardPreview.tsx"],"names":[],"mappings":";;;;;;AAAA,IAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAE/B,sBAAsB,aAAa,CAAC,CAAA;AACpC,sBAAsB,6BAA6B,CAAC,CAAA;AACpD,QAAO,4BAA4B,CAAC,CAAA;AAEpC,IAAM,cAAc,GAAW,IAAI,CAAC;AAEpC;IAAyC,uCAA+C;IAKtF,6BAAY,KAAgC;QAL9C,iBAuEC;QAjEG,kBAAM,KAAK,CAAC,CAAC;QACb,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACzD,IAAI,CAAC,MAAM,GAAG,IAAI,aAAK,CAAC,IAAI,CAAC,CAAC;QAE9B,oCAAoC;QACpC,IAAI,CAAC,KAAK,GAAG;YACX,mBAAmB,EAAE,CAAC;SACvB,CAAC;QAEF,6FAA6F;QAC7F,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YACxC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,cAAQ,KAAI,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC;QAC/F,CAAC;IACH,CAAC;IAEM,kDAAoB,GAA3B;QACE,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;IACxB,CAAC;IAEM,oCAAM,GAAb;QACQ,4CAAa,CAAgB;QAC7B,wDAAmB,CAAgB;QACzC,IAAI,YAAY,GAAG,aAAa,CAAC,mBAAmB,CAAC,CAAC;QAChD,0CAAW,EAAE,0BAAK,EAAE,4BAAM,EAAE,gCAAQ,CAAkB;QAC5D,IAAI,KAAK,CAAC;QACV,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;YAChB,KAAK,GAAG;gBACN,iBAAiB,EAAE,WAAW;aAC/B,CAAC;QACJ,CAAC;QAED,IAAI,IAAI,CAAC;QACT,EAAE,CAAC,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC;YACzB,IAAI,GAAG,oBAAC,aAAK,GAAC,SAAS,EAAC,6BAA6B,EAAC,GAAG,EAAG,YAAY,CAAC,OAAS,EAAC,IAAI,EAAC,cAAc,EAAE,CAAC;QAC3G,CAAC;QAED,MAAM,CAAC,CACL,qBAAC,GAAG,IAAC,SAAS,EAAC,wBAAwB,EAAC,KAAK,EAAG,KAAO,GACrD,oBAAC,aAAK,GACJ,KAAK,EAAG,KAAO,EACf,MAAM,EAAG,MAAQ,EACjB,QAAQ,EAAG,QAAU,EACrB,GAAG,EAAG,YAAY,CAAC,eAAiB,EACpC,QAAQ,EAAG,YAAY,CAAC,aAAe,EACvC,IAAI,EAAC,cAAc,EAAE,EACrB,IAAM,CACJ,CACP,CAAC;IACJ,CAAC;IAEO,8CAAgB,GAAxB;QACE,IAAI,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC;QACvD,IAAI,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC;QAElD,IAAI,QAAQ,CAAC;QACb,EAAE,CAAC,CAAC,YAAY,GAAG,YAAY,CAAC,CAAC,CAAC;YAChC,QAAQ,GAAG,YAAY,GAAG,CAAC,CAAC;QAC9B,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,QAAQ,GAAG,CAAC,CAAC;QACf,CAAC;QAED,IAAI,CAAC,QAAQ,CAAC;YACZ,mBAAmB,EAAE,QAAQ;SAC9B,CAAC,CAAC;IACL,CAAC;IACH,0BAAC;AAAD,CAvEA,AAuEC,CAvEwC,KAAK,CAAC,SAAS,GAuEvD;AAvEY,2BAAmB,sBAuE/B,CAAA","file":"components/DocumentCard/DocumentCardPreview.js","sourcesContent":["import * as React from 'react';\nimport { IDocumentCardPreviewProps } from './DocumentCard.Props';\nimport { Image } from '../../Image';\nimport { Async } from '../../utilities/Async/Async';\nimport './DocumentCardPreview.scss';\n\nconst INTERVAL_DELAY: number = 3000;\n\nexport class DocumentCardPreview extends React.Component<IDocumentCardPreviewProps, any> {\n\n  private _async: Async;\n  private _interval: number;\n\n  constructor(props: IDocumentCardPreviewProps) {\n    super(props);\n    this._showNextPreview = this._showNextPreview.bind(this);\n    this._async = new Async(this);\n\n    // Show the first preview by default\n    this.state = {\n      visiblePreviewIndex: 0\n    };\n\n    // If more than one preview has been provided, set an interval to start flipping through them\n    if (this.props.previewImages.length > 1) {\n      this._interval = this._async.setInterval(() => { this._showNextPreview(); }, INTERVAL_DELAY);\n    }\n  }\n\n  public componentWillUnmount() {\n    this._async.dispose();\n  }\n\n  public render() {\n    let { previewImages } = this.props;\n    let { visiblePreviewIndex } = this.state;\n    let previewImage = previewImages[visiblePreviewIndex];\n    let { accentColor, width, height, imageFit } = previewImage;\n    let style;\n    if (accentColor) {\n      style = {\n        borderBottomColor: accentColor\n      };\n    }\n\n    let icon;\n    if (previewImage.iconSrc) {\n      icon = <Image className='ms-DocumentCardPreview-icon' src={ previewImage.iconSrc } role='presentation'/>;\n    }\n\n    return (\n      <div className='ms-DocumentCardPreview' style={ style }>\n        <Image\n          width={ width }\n          height={ height }\n          imageFit={ imageFit }\n          src={ previewImage.previewImageSrc }\n          errorSrc={ previewImage.errorImageSrc }\n          role='presentation'/>\n        { icon }\n      </div>\n    );\n  }\n\n  private _showNextPreview() {\n    let maximumIndex = this.props.previewImages.length - 1;\n    let currentIndex = this.state.visiblePreviewIndex;\n\n    let newIndex;\n    if (currentIndex < maximumIndex) {\n      newIndex = currentIndex + 1;\n    } else {\n      newIndex = 0;\n    }\n\n    this.setState({\n      visiblePreviewIndex: newIndex\n    });\n  }\n}\n"],"sourceRoot":"/src"}