{"version":3,"sources":["components/Toggle/Toggle.test.tsx"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,IAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAC/B,sCAAsC;AAEtC,IAAY,QAAQ,WAAM,WAAW,CAAC,CAAA;AACtC,IAAY,cAAc,WAAM,yBAAyB,CAAC,CAAA;AAEpD,wBAAM,CAAU;AAEtB,uBAAuB,UAAU,CAAC,CAAA;AAElC,QAAQ,CAAC,QAAQ,EAAE;IAEjB,EAAE,CAAC,iBAAiB,EAAE;QACpB,IAAI,SAAS,GAAG,cAAc,CAAC,kBAAkB,CAC/C,oBAAC,eAAM,GACL,KAAK,EAAC,OAAO,EACb,CACH,CAAC;QACF,IAAI,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QAClD,IAAI,YAAY,GAAG,WAAW,CAAC,aAAa,CAAC,kBAAkB,CAAC,CAAC;QAEjE,MAAM,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6CAA6C,EAAE;QAChD,IAAI,cAAc,CAAC;QACnB,IAAI,QAAQ,GAAG,UAAC,SAAS;YACvB,cAAc,GAAG,SAAS,CAAC;QAC7B,CAAC,CAAC;QACF,IAAI,SAAS,GAAG,cAAc,CAAC,kBAAkB,CAC/C,oBAAC,eAAM,GACL,KAAK,EAAC,OAAO,EACb,SAAS,EAAG,QAAU,EACtB,CACH,CAAC;QACF,IAAI,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QAClD,IAAI,MAAM,GAAG,WAAW,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC;QAE5D,cAAc,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QACtC,MAAM,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACtC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IACnD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uDAAuD,EAAE;QAC1D,IAAI,SAAS,GAAG,cAAc,CAAC,kBAAkB,CAC/C,oBAAC,eAAM,GACL,KAAK,EAAC,OAAO,EACb,OAAO,EAAG,KAAO,EACjB,CACH,CAAC;QACF,IAAI,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QAClD,IAAI,MAAM,GAAG,WAAW,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC;QAE5D,cAAc,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAEtC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IACpD,CAAC,CAAC,CAAC;AAEL,CAAC,CAAC,CAAC","file":"components/Toggle/Toggle.test.js","sourcesContent":["/* tslint:disable:no-unused-variable */\nimport * as React from 'react';\n/* tslint:enable:no-unused-variable */\n\nimport * as ReactDOM from 'react-dom';\nimport * as ReactTestUtils from 'react-addons-test-utils';\n\nlet { expect } = chai;\n\nimport { Toggle } from './Toggle';\n\ndescribe('Toggle', () => {\n\n  it('renders a label', () => {\n    let component = ReactTestUtils.renderIntoDocument(\n      <Toggle\n        label='Label'\n      />\n    );\n    let renderedDOM = ReactDOM.findDOMNode(component);\n    let labelElement = renderedDOM.querySelector('.ms-Toggle-label');\n\n    expect(labelElement.textContent).to.equal('Label');\n  });\n\n  it('can call the callback on a change of toggle', () => {\n    let isToggledValue;\n    let callback = (isToggled) => {\n      isToggledValue = isToggled;\n    };\n    let component = ReactTestUtils.renderIntoDocument(\n      <Toggle\n        label='Label'\n        onChanged={ callback }\n      />\n    );\n    let renderedDOM = ReactDOM.findDOMNode(component);\n    let button = renderedDOM.querySelector('.ms-Toggle-button');\n\n    ReactTestUtils.Simulate.click(button);\n    expect(isToggledValue).to.equal(true);\n    expect(component.state.isChecked).to.equal(true);\n  });\n\n  it(`doesn't update the state if the user provides checked`, () => {\n    let component = ReactTestUtils.renderIntoDocument(\n      <Toggle\n        label='Label'\n        checked={ false }\n      />\n    );\n    let renderedDOM = ReactDOM.findDOMNode(component);\n    let button = renderedDOM.querySelector('.ms-Toggle-button');\n\n    ReactTestUtils.Simulate.click(button);\n\n    expect(component.state.isChecked).to.equal(false);\n  });\n\n});\n"],"sourceRoot":"/src"}