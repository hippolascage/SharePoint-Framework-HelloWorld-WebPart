{"version":3,"sources":["components/Toggle/Toggle.tsx"],"names":[],"mappings":"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","file":"components/Toggle/Toggle.js","sourcesContent":["import * as React from 'react';\nimport { IToggleProps } from './Toggle.Props';\nimport { css } from '../../utilities/css';\nimport { Label } from '../../Label';\nimport { getId } from '../../utilities/object';\nimport './Toggle.scss';\n\nexport interface IToggleState {\n  isChecked: boolean;\n}\n\nexport class Toggle extends React.Component<IToggleProps, IToggleState> {\n\n  public static initialProps = {\n    label: '',\n    onText: 'On',\n    offText: 'Off'\n  };\n\n  private _id: string;\n  private _toggleButton: HTMLButtonElement;\n\n  constructor(props: IToggleProps) {\n    super();\n\n    this.state = {\n      isChecked: !!(props.checked || props.defaultChecked)\n    };\n\n    this._id = getId('Toggle');\n    this._onClick = this._onClick.bind(this);\n  }\n\n  /**\n   * Gets the current checked state of the toggle.\n   */\n  public get checked(): boolean {\n    return this.state.isChecked;\n  }\n\n  public componentWillReceiveProps(newProps: IToggleProps) {\n    if (newProps.checked !== undefined) {\n      this.setState({\n        isChecked: newProps.checked\n      });\n    }\n  }\n\n  public render() {\n    let { label, onText, offText, className, disabled } = this.props;\n    let { isChecked } = this.state;\n    let stateText = isChecked ? onText : offText;\n\n    return (\n      <div className={\n        css('ms-Toggle', {\n          'is-checked': isChecked,\n          'is-enabled': !disabled,\n          'is-disabled': disabled\n        })\n      }>\n        <div className='ms-Toggle-innerContainer'>\n          <Label className='ms-Toggle-label' htmlFor={ this._id }>{ label }</Label>\n\n          <div className='ms-Toggle-slider'>\n            <button\n              ref={ (c): HTMLButtonElement => this._toggleButton = c }\n              id={ this._id }\n              name={ this._id }\n              className={ css('ms-Toggle-button', className) }\n              disabled={ disabled }\n              role='checkbox'\n              aria-checked={ isChecked }\n              onClick={ this._onClick }\n            />\n            <div className='ms-Toggle-background'>\n              <div className='ms-Toggle-focus' />\n              <div className='ms-Toggle-thumb' />\n            </div>\n            <Label className='ms-Toggle-stateText'>{ stateText }</Label>\n          </div>\n\n        </div>\n      </div>\n    );\n  }\n\n  public focus() {\n      if (this._toggleButton) {\n          this._toggleButton.focus();\n      }\n  }\n\n  private _onClick() {\n    let { checked, onChanged } = this.props;\n    let { isChecked } = this.state;\n\n    // Only update the state if the user hasn't provided it.\n    if (checked === undefined) {\n      this.setState({\n        isChecked: !isChecked\n      });\n    }\n\n    if (onChanged) {\n      onChanged(!isChecked);\n    }\n  }\n}\n"],"sourceRoot":"/src"}