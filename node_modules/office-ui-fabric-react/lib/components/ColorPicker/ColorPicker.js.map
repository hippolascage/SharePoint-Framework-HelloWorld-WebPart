{"version":3,"sources":["components/ColorPicker/ColorPicker.tsx"],"names":[],"mappings":"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","file":"components/ColorPicker/ColorPicker.js","sourcesContent":["import * as React from 'react';\nimport { IColorPickerProps } from './ColorPicker.Props';\nimport { TextField } from '../../TextField';\nimport { ColorRectangle } from './ColorRectangle';\nimport { ColorSlider } from './ColorSlider';\nimport {\n  IColor,\n  MAX_COLOR_HUE,\n  getColorFromString,\n  updateA,\n  updateH,\n  updateSV\n} from './colors';\nimport './ColorPicker.scss';\n\nexport interface IColorPickerState {\n  isOpen: boolean;\n  color: IColor;\n}\n\nexport interface IColor {\n  r: number;\n  g: number;\n  b: number;\n  a: number;\n  h: number;\n  s: number;\n  v: number;\n  hex: string;\n  str: string;\n}\n\nexport class ColorPicker extends React.Component<IColorPickerProps, any> {\n  constructor(props: IColorPickerProps) {\n    super(props);\n\n    this._onPickerClick = this._onPickerClick.bind(this);\n    this._onSVChanged = this._onSVChanged.bind(this);\n    this._onHChanged = this._onHChanged.bind(this);\n    this._onAChanged = this._onAChanged.bind(this);\n\n    this.state = {\n      color: getColorFromString(props.color)\n    };\n  }\n\n  public render() {\n    let { color } = this.state;\n\n    return (\n      <div className='ms-ColorPicker'>\n        <div className='ms-ColorPicker-panel'>\n          <ColorRectangle color={ color } onSVChanged={ this._onSVChanged }/>\n          <ColorSlider\n            className='is-hue'\n            minValue={ 0 }\n            maxValue={ MAX_COLOR_HUE }\n            initialValue={ color.h }\n            onChanged={ this._onHChanged }\n          />\n          <ColorSlider\n            className='is-alpha'\n            overlayStyle={ { background: `linear-gradient(to right, transparent 0, ${color.str} 100%)` } }\n            minValue={ 0 }\n            maxValue={ 100 }\n            initialValue={ color.a }\n            onChanged={ this._onAChanged }\n          />\n          <table className='ms-ColorPicker-table' cellPadding='0' cellSpacing='0'>\n            <thead>\n              <tr className='ms-font-s'>\n                <td>Hex</td>\n                <td>Red</td>\n                <td>Green</td>\n                <td>Blue</td>\n                <td>Alpha</td>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td><TextField className='ms-ColorPicker-input' value={ color.hex } /></td>\n                <td style={ { width: '18%' } }><TextField className='ms-ColorPicker-input' value={ color.r }/></td>\n                <td style={ { width: '18%' } }><TextField className='ms-ColorPicker-input' value={ color.g } /></td>\n                <td style={ { width: '18%' } }><TextField className='ms-ColorPicker-input' value={ color.b } /></td>\n                <td style={ { width: '18%' } }><TextField className='ms-ColorPicker-input' value={ color.a } /></td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n\n  private _onPickerClick() {\n    this.setState({\n      isOpen: !this.state.isOpen\n    });\n  }\n\n  private _onSVChanged(s: number, v: number) {\n    this._updateColor(updateSV(this.state.color, s, v));\n  }\n\n  private _onHChanged(h: number) {\n    this._updateColor(updateH(this.state.color, h));\n  }\n\n  private _onAChanged(a: number) {\n    this._updateColor(updateA(this.state.color, a));\n  }\n\n  private _updateColor(newColor: IColor) {\n    let { onColorChanged } = this.props;\n\n    if (newColor.str !== this.state.color.str) {\n      this.setState({\n        color: newColor\n      });\n\n      if (onColorChanged) {\n        onColorChanged(newColor.str);\n      }\n    }\n  }\n\n}\n"],"sourceRoot":"/src"}