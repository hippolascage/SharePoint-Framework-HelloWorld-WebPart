{"version":3,"sources":["components/ColorPicker/colors.ts"],"names":[],"mappings":"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","file":"components/ColorPicker/colors.js","sourcesContent":["import { IColor } from './IColor';\nimport { assign } from '../../utilities/object';\n\nlet cssColor = require('color-functions/lib/css-color');\nlet rgb2hex = require('color-functions/lib/rgb2hex');\nlet hsv2hex = require('color-functions/lib/hsv2hex');\nlet rgb2hsv = require('color-functions/lib/rgb2hsv');\nlet hsv2rgb = require('color-functions/lib/hsv2rgb');\n\nexport const MAX_COLOR_SATURATION = 100;\nexport const MAX_COLOR_HUE = 359;\nexport const MAX_COLOR_VALUE = 100;\n\nexport interface IColor {\n  a: number;\n  b: number;\n  g: number;\n  h: number;\n  hex: string;\n  r: number;\n  s: number;\n  str: string;\n  v: number;\n}\n\nexport function getColorFromString(color: string): IColor {\n  let { a, b, g, r } = cssColor(color);\n  let { h, s, v } = rgb2hsv(r, g, b);\n\n  return {\n    a: a,\n    b: b,\n    g: g,\n    h: h,\n    hex: rgb2hex(r, g, b),\n    r: r,\n    s: s,\n    str: color,\n    v: v\n  };\n\n}\n\nexport function getFullColorString(color: IColor): string {\n  return `#${ hsv2hex(color.h, MAX_COLOR_SATURATION, MAX_COLOR_VALUE) }`;\n}\n\nexport function updateSV(color: IColor, s: number, v: number): IColor {\n  let { r, g, b } = hsv2rgb(color.h, s, v);\n  let hex = rgb2hex(r, g, b);\n\n  return {\n    a: color.a,\n    b: b,\n    g: g,\n    h: color.h,\n    hex: hex,\n    r: r,\n    s: s,\n    str: (color.a === 100) ? `#${ hex }` : `rgba(${r}, ${g}, ${b}, ${color.a / 100})`,\n    v: v\n   };\n}\n\nexport function updateH(color: IColor, h: number): IColor {\n  let { r, g, b } = hsv2rgb(h, color.s, color.v);\n  let hex = rgb2hex(r, g, b);\n\n  return {\n    a: color.a,\n    b: b,\n    g: g,\n    h: h,\n    hex: hex,\n    r: r,\n    s: color.s,\n    str: (color.a === 100) ? `#${ hex }` : `rgba(${r}, ${g}, ${b}, ${color.a / 100})`,\n    v: color.v\n   };\n}\n\nexport function updateA(color: IColor, a: number): IColor {\n  return assign({}, color, {\n    a: a,\n    str: (a === 100) ? `#${ color.hex }` : `rgba(${color.r}, ${color.g}, ${color.b}, ${a / 100})`\n   });\n}\n"],"sourceRoot":"/src"}