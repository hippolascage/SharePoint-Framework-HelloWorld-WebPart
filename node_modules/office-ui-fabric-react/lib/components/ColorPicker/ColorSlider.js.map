{"version":3,"sources":["components/ColorPicker/ColorSlider.tsx"],"names":[],"mappings":"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","file":"components/ColorPicker/ColorSlider.js","sourcesContent":["import * as React from 'react';\nimport { css } from '../../utilities/css';\nimport { EventGroup } from '../../utilities/eventGroup/EventGroup';\n\nexport interface IColorSliderProps {\n  minValue?: number;\n  maxValue?: number;\n  initialValue?: number;\n  thumbColor?: string;\n  overlayStyle?: any;\n  onChanged?: (newValue: number) => void;\n\n  className?: string;\n  style?: any;\n}\n\nexport interface IColorSliderState {\n  isAdjusting?: boolean;\n  origin?: { x: number, originalValue: number };\n  currentValue?: number;\n}\n\nexport class ColorSlider extends React.Component<IColorSliderProps, IColorSliderState> {\n  public static defaultProps = {\n    minValue: 0,\n    maxValue: 100,\n    thumbColor: 'inherit',\n    initialValue: 0\n  };\n\n  public refs: {\n    [key: string]: React.ReactInstance;\n    root: HTMLElement;\n  };\n\n  private _events: EventGroup;\n\n  constructor(props: IColorSliderProps) {\n    super(props);\n\n    let { initialValue } = this.props;\n\n    this._events = new EventGroup(this);\n    this._onMouseDown = this._onMouseDown.bind(this);\n    this._onMouseMove = this._onMouseMove.bind(this);\n    this._onMouseUp = this._onMouseUp.bind(this);\n\n    this.state = {\n      isAdjusting: false,\n      origin: null,\n      currentValue: initialValue\n    };\n  }\n\n  public componentWillUnmount() {\n    this._events.dispose();\n  }\n\n  public render() {\n    let { className, minValue, maxValue, overlayStyle } = this.props;\n    let { currentValue, isAdjusting } = this.state;\n\n    let currentPercentage = 100 * (currentValue - minValue) / (maxValue - minValue);\n\n    return (\n      <div\n        ref='root'\n        className={ css('ms-ColorPicker-slider', className, {\n          'is-adjusting': isAdjusting\n        })}\n        onMouseDown={ this._onMouseDown }>\n        <div className='ms-ColorPicker-sliderOverlay' style={ overlayStyle } />\n        <div className='ms-ColorPicker-thumb is-slider' style={ { left: currentPercentage + '%' } }/>\n      </div>\n    );\n  }\n\n  private _onMouseDown(ev: React.MouseEvent) {\n    this._events.on(window, 'mousemove', this._onMouseMove, true);\n    this._events.on(window, 'mouseup', this._onMouseUp, true);\n\n    this._onMouseMove(ev);\n  }\n\n  private _onMouseMove(ev: React.MouseEvent) {\n    let { onChanged, minValue, maxValue } = this.props;\n    let rectSize = this.refs.root.getBoundingClientRect();\n\n    let currentPercentage = (ev.clientX - rectSize.left) / rectSize.width;\n    let newValue = Math.min(maxValue, Math.max(minValue, currentPercentage * maxValue));\n\n    this.setState({\n      isAdjusting: true,\n      currentValue: newValue\n    });\n\n    if (onChanged) {\n      onChanged(newValue);\n    }\n\n    ev.preventDefault();\n    ev.stopPropagation();\n  }\n\n  private _onMouseUp(ev: React.MouseEvent) {\n    this._events.off();\n\n    this.setState({\n      isAdjusting: false,\n      origin: null\n    });\n  }\n\n}\n"],"sourceRoot":"/src"}