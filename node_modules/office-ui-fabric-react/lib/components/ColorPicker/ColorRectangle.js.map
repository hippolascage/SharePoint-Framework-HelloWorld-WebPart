{"version":3,"sources":["components/ColorPicker/ColorRectangle.tsx"],"names":[],"mappings":"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","file":"components/ColorPicker/ColorRectangle.js","sourcesContent":["import * as React from 'react';\nimport {\n  IColor,\n  MAX_COLOR_SATURATION,\n  MAX_COLOR_VALUE,\n  getFullColorString\n } from './colors';\nimport { assign } from '../../utilities/object';\nimport { EventGroup } from '../../utilities/eventGroup/EventGroup';\n\nlet hsv2hex = require('color-functions/lib/hsv2hex');\n\nexport interface IColorRectangleProps {\n  color: IColor;\n  minSize?: number;\n\n  onSVChanged? (s: number, v: number): void;\n}\n\nexport interface IColorPickerState {\n  isAdjusting?: boolean;\n  origin?: { x: number, y: number, color: IColor };\n  color?: IColor;\n  fullColorString?: string;\n}\n\nexport class ColorRectangle extends React.Component<IColorRectangleProps, IColorPickerState> {\n  public static defaultProps = {\n    minSize: 220\n  };\n\n  public refs: {\n    [key: string]: React.ReactInstance;\n    root: HTMLElement;\n  };\n\n  private _events: EventGroup;\n\n  constructor(props: IColorRectangleProps) {\n    super(props);\n\n    let { color } = this.props;\n\n    this._events = new EventGroup(this);\n    this._onMouseDown = this._onMouseDown.bind(this);\n    this._onMouseMove = this._onMouseMove.bind(this);\n    this._onMouseUp = this._onMouseUp.bind(this);\n\n    this.state = {\n      isAdjusting: false,\n      origin: null,\n      color: color,\n      fullColorString: getFullColorString(color)\n    };\n  }\n\n  public componentWillUnmount() {\n    this._events.dispose();\n  }\n\n  public componentWillReceiveProps(newProps: IColorRectangleProps) {\n    let { color } = newProps;\n\n    this.setState({\n      color: color,\n      fullColorString: getFullColorString(color)\n    });\n  }\n\n  public render() {\n    let { minSize } = this.props;\n    let { color, fullColorString } = this.state;\n\n    return (\n      <div ref='root' className='ms-ColorPicker-colorRect' style={ { minWidth: minSize, minHeight: minSize, backgroundColor: fullColorString } } onMouseDown={ this._onMouseDown }>\n        <div className='ms-ColorPicker-light' />\n        <div className='ms-ColorPicker-dark' />\n        <div className='ms-ColorPicker-thumb' style={ { left: color.s + '%', top: (MAX_COLOR_VALUE - color.v) + '%', backgroundColor: color.str } }/>\n      </div>\n    );\n  }\n\n  private _onMouseDown(ev: React.MouseEvent) {\n    this._events.on(window, 'mousemove', this._onMouseMove, true);\n    this._events.on(window, 'mouseup', this._onMouseUp, true);\n\n    this._onMouseMove(ev);\n  }\n\n  private _onMouseMove(ev: React.MouseEvent) {\n    let { color, onSVChanged } = this.props;\n    let rectSize = this.refs.root.getBoundingClientRect();\n\n    let sPercentage = (ev.clientX - rectSize.left) / rectSize.width;\n    let vPercentage = (ev.clientY - rectSize.top) / rectSize.height;\n\n    let newColor = assign({}, color, {\n        s: Math.min(MAX_COLOR_SATURATION, Math.max(0, sPercentage * MAX_COLOR_SATURATION)),\n        v: Math.min(MAX_COLOR_VALUE, Math.max(0, MAX_COLOR_VALUE - (vPercentage * MAX_COLOR_VALUE))),\n      });\n\n    newColor.hex = hsv2hex(newColor.h, newColor.s, newColor.v);\n    newColor.str = newColor.a === 100 ? '#' + newColor.hex : `rgba(${newColor.r}, ${newColor.g}, ${newColor.b}, ${ newColor.a / 100 })`;\n\n    this.setState({\n      isAdjusting: true,\n      color: newColor\n    });\n\n    if (onSVChanged) {\n      onSVChanged(newColor.s, newColor.v);\n    }\n    ev.preventDefault();\n    ev.stopPropagation();\n  }\n\n  private _onMouseUp(ev: React.MouseEvent) {\n    this._events.off();\n\n    this.setState({\n      isAdjusting: false,\n      origin: null\n    });\n  }\n\n}\n"],"sourceRoot":"/src"}