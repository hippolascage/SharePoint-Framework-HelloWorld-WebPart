{"version":3,"sources":["components/DetailsList/DetailsList.tsx"],"names":[],"mappings":"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","file":"components/DetailsList/DetailsList.js","sourcesContent":["import * as React from 'react';\nimport {\n  IDetailsListProps,\n  ColumnActionsMode,\n  ConstrainMode,\n  DetailsListLayoutMode,\n  IColumn,\n  IDetailsList,\n  CheckboxVisibility\n} from '../DetailsList/DetailsList.Props';\nimport { DetailsHeader, SelectAllVisibility } from '../DetailsList/DetailsHeader';\nimport { DetailsRow } from '../DetailsList/DetailsRow';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { GroupedList } from '../../GroupedList';\nimport { List } from '../../List';\nimport { withViewport } from '../../utilities/decorators/withViewport';\nimport { assign } from '../../utilities/object';\nimport { css } from '../../utilities/css';\nimport {\n  IObjectWithKey,\n  ISelection,\n  Selection,\n  SelectionMode,\n  SelectionZone\n} from '../../utilities/selection/index';\nimport { EventGroup } from '../../utilities/eventGroup/EventGroup';\nimport { getRTLSafeKeyCode } from '../../utilities/rtl';\nimport { KeyCodes } from '../../utilities/KeyCodes';\nimport { DragDropHelper } from '../../utilities/dragdrop/DragDropHelper';\nimport './DetailsList.scss';\n\nexport interface IDetailsListState {\n  lastWidth?: number;\n  lastSelectionMode?: SelectionMode;\n  adjustedColumns?: IColumn[];\n  layoutMode?: DetailsListLayoutMode;\n  isCollapsed?: boolean;\n  isSizing?: boolean;\n  isDropping?: boolean;\n  isSomeGroupExpanded?: boolean;\n}\n\nconst MIN_COLUMN_WIDTH = 100; // this is the global min width\nconst CHECKBOX_WIDTH = 36;\nconst GROUP_EXPAND_WIDTH = 36;\nconst DEFAULT_INNER_PADDING = 16;\n\nconst DEFAULT_RENDERED_WINDOWS_AHEAD = 2;\nconst DEFAULT_RENDERED_WINDOWS_BEHIND = 2;\n\n@withViewport\nexport class DetailsList extends React.Component<IDetailsListProps, IDetailsListState> implements IDetailsList {\n  public static defaultProps = {\n    layoutMode: DetailsListLayoutMode.justified,\n    selectionMode: SelectionMode.multiple,\n    constrainMode: ConstrainMode.horizontalConstrained,\n    checkboxVisibility: CheckboxVisibility.onHover,\n    isHeaderVisible: true\n  };\n\n  public refs: {\n    [ key: string]: React.ReactInstance,\n    header: DetailsHeader,\n    root: HTMLElement,\n    groupedList: GroupedList,\n    list: List,\n    focusZone: FocusZone,\n    selectionZone: SelectionZone\n  };\n\n  private _events: EventGroup;\n  private _selection: ISelection;\n  private _activeRows: { [key: string]: DetailsRow };\n  private _dragDropHelper: DragDropHelper;\n  private _initialFocusedIndex: number;\n\n  private _columnOverrides: {\n    [key: string]: IColumn;\n  };\n\n  constructor(props: IDetailsListProps) {\n    super(props);\n\n    this._activeRows = {};\n    this._columnOverrides = {};\n    this._onColumnIsSizingChanged = this._onColumnIsSizingChanged.bind(this);\n    this._onColumnResized = this._onColumnResized.bind(this);\n    this._onColumnAutoResized = this._onColumnAutoResized.bind(this);\n    this._onRowDidMount = this._onRowDidMount.bind(this);\n    this._onRowWillUnmount = this._onRowWillUnmount.bind(this);\n    this._onToggleCollapse = this._onToggleCollapse.bind(this);\n    this._onActiveRowChanged = this._onActiveRowChanged.bind(this);\n    this._onHeaderKeyDown = this._onHeaderKeyDown.bind(this);\n    this._onContentKeyDown = this._onContentKeyDown.bind(this);\n    this._onRenderCell = this._onRenderCell.bind(this);\n    this._onGroupExpandStateChanged = this._onGroupExpandStateChanged.bind(this);\n\n    this.state = {\n      lastWidth: 0,\n      adjustedColumns: this._getAdjustedColumns(props),\n      layoutMode: props.layoutMode,\n      isSizing: false,\n      isDropping: false,\n      isCollapsed: props.groupProps && props.groupProps.isAllGroupsCollapsed,\n      isSomeGroupExpanded: props.groupProps && !props.groupProps.isAllGroupsCollapsed\n    };\n\n    this._events = new EventGroup(this);\n    this._selection = props.selection || new Selection({ onSelectionChanged: null, getKey: props.getKey });\n    this._selection.setItems(props.items as IObjectWithKey[], false);\n    this._dragDropHelper = props.dragDropEvents ? new DragDropHelper({ selection: this._selection }) : null;\n    this._initialFocusedIndex = props.initialFocusedIndex;\n  }\n\n  public componentWillUnmount() {\n    this._events.dispose();\n    if (this._dragDropHelper) {\n      this._dragDropHelper.dispose();\n    }\n  }\n\n  public componentDidUpdate(prevProps: any, prevState: any) {\n    if (this.props.onDidUpdate) {\n      this.props.onDidUpdate(this);\n    }\n  }\n\n  public componentWillReceiveProps(newProps: IDetailsListProps) {\n    let {\n      items,\n      setKey,\n      selectionMode,\n      columns,\n      viewport\n    } = this.props;\n    let { layoutMode } = this.state;\n    let shouldResetSelection = (newProps.setKey !== setKey) || newProps.setKey === undefined;\n    let shouldForceUpdates = false;\n\n    if (newProps.layoutMode !== this.props.layoutMode) {\n      layoutMode = newProps.layoutMode;\n      this.setState({ layoutMode: layoutMode });\n      shouldForceUpdates = true;\n    }\n\n    if (shouldResetSelection) {\n      this._initialFocusedIndex = newProps.initialFocusedIndex;\n    }\n\n    if (newProps.items !== items) {\n      this._selection.setItems(newProps.items, shouldResetSelection);\n    }\n\n    if (\n      newProps.columns !== columns ||\n      newProps.viewport.width !== viewport.width\n    ) {\n      shouldForceUpdates = true;\n    }\n\n    this._adjustColumns(newProps, true, layoutMode);\n\n    if (newProps.selectionMode !== selectionMode) {\n      shouldForceUpdates = true;\n    }\n\n    if (shouldForceUpdates) {\n      this._forceListUpdates();\n    }\n  }\n\n  public render() {\n    let {\n      ariaLabelForListHeader,\n      ariaLabelForSelectAllCheckbox,\n      className,\n      constrainMode,\n      dragDropEvents,\n      groups,\n      groupProps,\n      items,\n      isHeaderVisible,\n      onItemInvoked,\n      onColumnHeaderClick,\n      onColumnHeaderContextMenu,\n      selectionMode,\n      ariaLabel,\n      ariaLabelForGrid,\n      rowElementEventMap,\n      shouldApplyApplicationRole = false\n    } = this.props;\n    let {\n      adjustedColumns,\n      isCollapsed,\n      layoutMode,\n      isSizing,\n      isSomeGroupExpanded\n    } = this.state;\n    let {\n      _selection: selection,\n      _dragDropHelper: dragDropHelper\n    } = this;\n    let groupNestingDepth = this._getGroupNestingDepth();\n    let additionalListProps = {\n      renderedWindowsAhead: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_AHEAD,\n      renderedWindowsBehind: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_BEHIND\n    };\n    let selectAllVisibility = SelectAllVisibility.none; // for SelectionMode.none\n    if (selectionMode === SelectionMode.single) {\n      selectAllVisibility = SelectAllVisibility.hidden;\n    }\n    if (selectionMode === SelectionMode.multiple) {\n      // if isCollapsedGroupSelectVisible is false, disable select all when the list has all collapsed groups\n      let isCollapsedGroupSelectVisible = groupProps && groupProps.headerProps && groupProps.headerProps.isCollapsedGroupSelectVisible;\n      if (isCollapsedGroupSelectVisible === undefined) {\n        isCollapsedGroupSelectVisible = true;\n      }\n      let isSelectAllVisible = isCollapsedGroupSelectVisible || !groups || isSomeGroupExpanded;\n      selectAllVisibility = isSelectAllVisible ? SelectAllVisibility.visible : SelectAllVisibility.hidden;\n    }\n\n    return (\n      // If shouldApplyApplicationRole is true, role application will be applied to make arrow keys work\n      // with JAWS.\n      <div\n        ref='root'\n        className={css('ms-DetailsList', className, {\n          'is-fixed': layoutMode === DetailsListLayoutMode.fixedColumns,\n          'is-horizontalConstrained': constrainMode === ConstrainMode.horizontalConstrained\n        }) }\n        data-automationid='DetailsList'\n        data-is-scrollable='false'\n        aria-label={ ariaLabel }\n        role={ shouldApplyApplicationRole ? 'application' : '' }>\n        <div role='grid' aria-label={ ariaLabelForGrid }>\n          <div onKeyDown={ this._onHeaderKeyDown } role='presentation'>\n            { isHeaderVisible && (\n              <DetailsHeader\n                ref='header'\n                selectionMode={ selectionMode }\n                layoutMode={ layoutMode }\n                selection={ selection }\n                columns={ adjustedColumns }\n                onColumnClick={ onColumnHeaderClick }\n                onColumnContextMenu={ onColumnHeaderContextMenu }\n                onColumnResized={ this._onColumnResized }\n                onColumnIsSizingChanged={ this._onColumnIsSizingChanged }\n                onColumnAutoResized={ this._onColumnAutoResized }\n                groupNestingDepth={ groupNestingDepth }\n                isAllCollapsed={ isCollapsed }\n                onToggleCollapseAll={ this._onToggleCollapse }\n                ariaLabel={ ariaLabelForListHeader }\n                ariaLabelForSelectAllCheckbox={ ariaLabelForSelectAllCheckbox }\n                selectAllVisibility={ selectAllVisibility }\n                />\n            ) }\n          </div>\n          <div ref='contentContainer' onKeyDown={ this._onContentKeyDown } role='presentation'>\n            <FocusZone\n              ref='focusZone'\n              direction={ FocusZoneDirection.vertical }\n              isInnerZoneKeystroke={ (ev) => (ev.which === getRTLSafeKeyCode(KeyCodes.right)) }\n              onActiveElementChanged={ this._onActiveRowChanged }\n              >\n              <SelectionZone\n                ref='selectionZone'\n                selection={ selection }\n                selectionMode={ selectionMode }\n                onItemInvoked={ onItemInvoked }>\n                { groups ? (\n                  <GroupedList\n                    groups={ groups }\n                    groupProps={ groupProps }\n                    items={ items }\n                    onRenderCell={ this._onRenderCell }\n                    selection={ selection }\n                    selectionMode={ selectionMode }\n                    dragDropEvents={ dragDropEvents }\n                    dragDropHelper={ dragDropHelper }\n                    eventsToRegister={ rowElementEventMap }\n                    listProps={ additionalListProps }\n                    onGroupExpandStateChanged={ this._onGroupExpandStateChanged }\n                    ref='groupedList'\n                    />\n                ) : (\n                    <List\n                      items={ items }\n                      onRenderCell={ (item, itemIndex) => this._onRenderCell(0, item, itemIndex) }\n                      { ...additionalListProps }\n                      ref='list'\n                      />\n                  )\n                }\n              </SelectionZone>\n            </FocusZone>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  public forceUpdate() {\n    super.forceUpdate();\n    this._forceListUpdates();\n  }\n\n  private _onRenderCell(nestingDepth: number, item: any, index: number): React.ReactNode {\n    let {\n      dragDropEvents,\n      rowElementEventMap: eventsToRegister,\n      onRenderMissingItem,\n      onRenderItemColumn,\n      selectionMode,\n      viewport,\n      checkboxVisibility,\n      getRowAriaLabel,\n      checkButtonAriaLabel\n    } = this.props;\n    let selection = this._selection;\n    let dragDropHelper = this._dragDropHelper;\n    let {\n      adjustedColumns: columns\n    } = this.state;\n\n    if (!item) {\n      if (onRenderMissingItem) {\n        onRenderMissingItem(index);\n      }\n\n      return null;\n    }\n\n    return (\n      <DetailsRow\n        item={ item }\n        itemIndex={ index }\n        columns={ columns }\n        groupNestingDepth={ nestingDepth }\n        selectionMode={ selectionMode }\n        selection={ selection }\n        onDidMount={ this._onRowDidMount }\n        onWillUnmount={ this._onRowWillUnmount }\n        onRenderItemColumn={ onRenderItemColumn }\n        eventsToRegister={ eventsToRegister }\n        dragDropEvents={ dragDropEvents }\n        dragDropHelper={ dragDropHelper }\n        viewport={ viewport }\n        checkboxVisibility={ checkboxVisibility }\n        getRowAriaLabel={ getRowAriaLabel }\n        checkButtonAriaLabel={ checkButtonAriaLabel }\n        />\n    );\n  }\n\n  private _onGroupExpandStateChanged(isSomeGroupExpanded: boolean) {\n    this.setState({ isSomeGroupExpanded: isSomeGroupExpanded });\n  }\n\n  private _onColumnIsSizingChanged(column: IColumn, isSizing: boolean) {\n    this.setState({ isSizing: isSizing });\n  }\n\n  private _onHeaderKeyDown(ev: React.KeyboardEvent) {\n    if (ev.which === KeyCodes.down) {\n      if (this.refs.focusZone.focus()) {\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    }\n  }\n\n  private _onContentKeyDown(ev: React.KeyboardEvent) {\n    if (ev.which === KeyCodes.up) {\n      if (this.refs.header.focus()) {\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    }\n  }\n\n  private _getGroupNestingDepth(): number {\n    let { groups } = this.props;\n    let level = 0;\n    let groupsInLevel = groups;\n\n    while (groupsInLevel && groupsInLevel.length > 0) {\n      level++;\n      groupsInLevel = groupsInLevel[0].children;\n    }\n\n    return level;\n  }\n\n  private _onRowDidMount(row: DetailsRow) {\n    let { onRowDidMount } = this.props;\n    let index = row.props.itemIndex;\n\n    this._activeRows[index] = row; // this is used for column auto resize\n\n    // Set focus to the row if it should receive focus.\n    if (this._initialFocusedIndex !== undefined && index === this._initialFocusedIndex) {\n      if (this.refs.selectionZone) {\n        this.refs.selectionZone.setEnabled(false);\n      }\n\n      row.focus();\n\n      if (this.refs.selectionZone) {\n        this.refs.selectionZone.setEnabled(true);\n      }\n\n      delete this._initialFocusedIndex;\n    }\n\n    if (onRowDidMount) {\n      onRowDidMount(row.props.item, index);\n    }\n  }\n\n  private _onRowWillUnmount(row: DetailsRow) {\n    let { onRowWillUnmount } = this.props;\n    let index = row.props.itemIndex;\n\n    delete this._activeRows[index];\n    this._events.off(row.refs.root);\n    if (onRowWillUnmount) {\n      onRowWillUnmount(row.props.item, index);\n    }\n  }\n\n  private _onToggleCollapse(collapsed: boolean) {\n    this.setState({\n      isCollapsed: collapsed\n    });\n    if (this.refs.groupedList) {\n      this.refs.groupedList.toggleCollapseAll(collapsed);\n    }\n  }\n\n  private _forceListUpdates() {\n    if (this.refs.groupedList) {\n      this.refs.groupedList.forceUpdate();\n    }\n    if (this.refs.list) {\n      this.refs.list.forceUpdate();\n    }\n  }\n\n  private _adjustColumns(newProps: IDetailsListProps, forceUpdate?: boolean, layoutMode?: DetailsListLayoutMode) {\n    let adjustedColumns = this._getAdjustedColumns(newProps, forceUpdate, layoutMode);\n    let { viewport: { width: viewportWidth } } = this.props;\n\n    if (adjustedColumns) {\n      this.setState({\n        adjustedColumns: adjustedColumns,\n        lastWidth: viewportWidth,\n        layoutMode: layoutMode\n      });\n    }\n  }\n\n  /** Returns adjusted columns, given the viewport size and layout mode. */\n  private _getAdjustedColumns(newProps: IDetailsListProps, forceUpdate?: boolean, layoutMode?: DetailsListLayoutMode): IColumn[] {\n    let { columns: newColumns, items: newItems, viewport: { width: viewportWidth }, selectionMode } = newProps;\n\n    if (layoutMode === undefined) {\n      layoutMode = newProps.layoutMode;\n    }\n\n    let columns = this.props ? this.props.columns : [];\n    let lastWidth = this.state ? this.state.lastWidth : -1;\n    let lastSelectionMode = this.state ? this.state.lastSelectionMode : undefined;\n\n    if (viewportWidth !== undefined) {\n      if (!forceUpdate &&\n        lastWidth === viewportWidth &&\n        lastSelectionMode === selectionMode &&\n        (!columns || newColumns === columns)) {\n        return;\n      }\n    } else {\n      viewportWidth = this.props.viewport.width;\n    }\n\n    newColumns = newColumns || buildColumns(newItems, true);\n\n    let adjustedColumns: IColumn[];\n\n    if (layoutMode === DetailsListLayoutMode.fixedColumns) {\n      adjustedColumns = this._getFixedColumns(newColumns);\n    } else {\n      adjustedColumns = this._getJustifiedColumns(newColumns, viewportWidth);\n    }\n\n    // Preserve adjusted column calculated widths.\n    adjustedColumns.forEach(column => {\n      let overrides = this._columnOverrides[column.key] = this._columnOverrides[column.key] || {} as IColumn;\n      overrides.calculatedWidth = column.calculatedWidth;\n    });\n\n    return adjustedColumns;\n  }\n\n  /** Builds a set of columns based on the given columns mixed with the current overrides. */\n  private _getFixedColumns(newColumns: IColumn[]) {\n    return newColumns.map(column => {\n      let newColumn = assign({}, column, this._columnOverrides[column.key]);\n\n      if (!newColumn.calculatedWidth) {\n        newColumn.calculatedWidth = newColumn.maxWidth || newColumn.minWidth || MIN_COLUMN_WIDTH;\n      }\n\n      return newColumn;\n    });\n  }\n\n  /** Builds a set of columns to fix within the viewport width. */\n  private _getJustifiedColumns(newColumns: IColumn[], viewportWidth: number) {\n    let {\n      selectionMode,\n      groups\n    } = this.props;\n    let outerPadding = DEFAULT_INNER_PADDING;\n    let rowCheckWidth = (selectionMode !== SelectionMode.none) ? CHECKBOX_WIDTH : 0;\n    let groupExpandWidth = groups ? GROUP_EXPAND_WIDTH : 0;\n    let totalWidth = 0; // offset because we have one less inner padding.\n    let availableWidth = viewportWidth - outerPadding - rowCheckWidth - groupExpandWidth;\n    let adjustedColumns: IColumn[] = newColumns.map((column, i) => {\n      let newColumn = assign(\n        {},\n        column,\n        {\n          calculatedWidth: column.minWidth || MIN_COLUMN_WIDTH\n        });\n\n      totalWidth += newColumn.calculatedWidth + (i > 0 ? DEFAULT_INNER_PADDING : 0);\n\n      return newColumn;\n    });\n\n    let lastIndex = adjustedColumns.length - 1;\n\n    // Remove collapsable columns.\n    while (lastIndex > 1 && totalWidth > availableWidth) {\n      let column = adjustedColumns[lastIndex];\n\n      if (column.isCollapsable) {\n        totalWidth -= column.calculatedWidth + DEFAULT_INNER_PADDING;\n        adjustedColumns.splice(lastIndex, 1);\n      }\n      lastIndex--;\n    }\n\n    // Then expand columns starting at the beginning, until we've filled the width.\n    for (let i = 0; i < adjustedColumns.length && totalWidth < availableWidth; i++) {\n      let column = adjustedColumns[i];\n      let maxWidth = column.maxWidth;\n      let minWidth = column.minWidth || maxWidth || MIN_COLUMN_WIDTH;\n      let spaceLeft = availableWidth - totalWidth;\n      let increment = Math.min(spaceLeft, maxWidth - minWidth);\n\n      // Add remaining space to the last column.\n      if (i === (adjustedColumns.length - 1)) {\n        increment = spaceLeft;\n      }\n\n      column.calculatedWidth += increment;\n      totalWidth += increment;\n    }\n\n    // Mark the last column as not resizable to avoid extra scrolling issues.\n    if (adjustedColumns.length) {\n      adjustedColumns[adjustedColumns.length - 1].isResizable = false;\n    }\n\n    return adjustedColumns;\n  }\n\n  private _onColumnResized(resizingColumn: IColumn, newWidth: number) {\n    this._columnOverrides[resizingColumn.key].calculatedWidth = Math.max(\n      resizingColumn.minWidth || MIN_COLUMN_WIDTH,\n      newWidth);\n    this._adjustColumns(this.props, true, DetailsListLayoutMode.fixedColumns);\n    this._forceListUpdates();\n  }\n\n  /**\n   * Callback function when double clicked on the details header column resizer\n   * which will measure the column cells of all the active rows and resize the\n   * column to the max cell width.\n   *\n   * @private\n   * @param {IColumn} column (double clicked column definition)\n   * @param {number} columnIndex (double clicked column index)\n   * @todo min width 100 should be changed to const value and should be consistent with the value used on _onSizerMove method in DetailsHeader\n   */\n  private _onColumnAutoResized(column: IColumn, columnIndex: number) {\n    let max = 0;\n    let count = 0;\n    let totalCount = Object.keys(this._activeRows).length;\n\n    for (let key in this._activeRows) {\n      if (this._activeRows.hasOwnProperty(key)) {\n        let currentRow = this._activeRows[key];\n        currentRow.measureCell(columnIndex, (width: number) => {\n          max = Math.max(max, width);\n          count++;\n          if (count === totalCount) {\n            this._onColumnResized(column, max);\n          }\n        });\n      }\n    }\n  }\n\n  /**\n   * Call back function when an element in FocusZone becomes active. It will transalate it into item\n   * and call onActiveItemChanged callback if specified.\n   *\n   * @private\n   * @param {el} row element that became active in Focus Zone\n   * @param {ev} focus event from Focus Zone\n   */\n  private _onActiveRowChanged(el?: HTMLElement, ev?: React.FocusEvent) {\n    let { items, onActiveItemChanged } = this.props;\n\n    if (!onActiveItemChanged || !el) {\n      return;\n    }\n    let index = Number(el.getAttribute('data-item-index'));\n    if (index >= 0) {\n      onActiveItemChanged(items[index], index, ev);\n    }\n  };\n}\n\nexport function buildColumns(\n  items: any[],\n  canResizeColumns?: boolean,\n  onColumnClick?: (column: IColumn, ev: React.MouseEvent) => any,\n  sortedColumnKey?: string,\n  isSortedDescending?: boolean,\n  groupedColumnKey?: string,\n  isMultiline?: boolean) {\n  let columns: IColumn[] = [];\n\n  if (items && items.length) {\n    let firstItem = items[0];\n    let isFirstColumn = true;\n\n    for (let propName in firstItem) {\n      if (firstItem.hasOwnProperty(propName)) {\n        columns.push({\n          key: propName,\n          name: propName,\n          fieldName: propName,\n          minWidth: MIN_COLUMN_WIDTH,\n          maxWidth: 300,\n          isCollapsable: !!columns.length,\n          isMultiline: (isMultiline === undefined) ? false : isMultiline,\n          isSorted: sortedColumnKey === propName,\n          isSortedDescending: !!isSortedDescending,\n          isRowHeader: false,\n          columnActionsMode: ColumnActionsMode.clickable,\n          isResizable: canResizeColumns,\n          onColumnClick: onColumnClick,\n          isGrouped: groupedColumnKey === propName\n        });\n\n        isFirstColumn = false;\n      }\n    }\n  }\n\n  return columns;\n}\n"],"sourceRoot":"/src"}