{"version":3,"sources":["components/DetailsList/DetailsRow.tsx"],"names":[],"mappings":"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","file":"components/DetailsList/DetailsRow.js","sourcesContent":["import * as React from 'react';\nimport { IColumn, CheckboxVisibility } from './DetailsList.Props';\nimport { Check } from '../Check/Check';\nimport { GroupSpacer } from '../GroupedList/GroupSpacer';\nimport { DetailsRowFields } from './DetailsRowFields';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { ISelection, SelectionMode, SELECTION_CHANGE } from '../../utilities/selection/interfaces';\nimport { EventGroup } from '../../utilities/eventGroup/EventGroup';\nimport { shallowCompare, assign } from '../../utilities/object';\nimport { css } from '../../utilities/css';\nimport {\n  IDragDropHelper,\n  IDragDropEvents,\n  IDragDropOptions,\n} from './../../utilities/dragdrop/interfaces';\nimport { IViewport } from '../../utilities/decorators/withViewport';\nimport './DetailsRow.scss';\n\nexport interface IDetailsRowProps extends React.Props<DetailsRow> {\n  item: any;\n  itemIndex: number;\n  columns: IColumn[];\n  selectionMode: SelectionMode;\n  selection: ISelection;\n  eventsToRegister?: [{ eventName: string, callback: (item?: any, index?: number, event?: any) => void }];\n  onDidMount?: (row?: DetailsRow) => void;\n  onWillUnmount?: (row?: DetailsRow) => void;\n  onRenderItemColumn?: (item?: any, index?: number, column?: IColumn) => any;\n  dragDropEvents?: IDragDropEvents;\n  dragDropHelper?: IDragDropHelper;\n  groupNestingDepth?: number;\n  viewport?: IViewport;\n  checkboxVisibility?: CheckboxVisibility;\n  getRowAriaLabel?: (item: any) => string;\n  checkButtonAriaLabel?: string;\n}\n\nexport interface IDetailsRowSelectionState {\n  isSelected: boolean;\n}\n\nexport interface IDetailsRowState {\n  selectionState?: IDetailsRowSelectionState;\n  columnMeasureInfo?: {\n    index: number;\n    column: IColumn;\n    onMeasureDone: (measuredWidth: number) => void;\n  };\n  isDropping?: boolean;\n  groupNestingDepth?: number;\n}\n\nconst DEFAULT_DROPPING_CSS_CLASS = 'is-dropping';\n\nexport class DetailsRow extends React.Component<IDetailsRowProps, IDetailsRowState> {\n  public refs: {\n    [key: string]: React.ReactInstance,\n    root: HTMLElement,\n    cellMeasurer: HTMLElement\n  };\n\n  private _events: EventGroup;\n  private _hasSetFocus: boolean;\n  private _droppingClassNames: string;\n  private _hasMounted: boolean;\n  private _dragDropKey: string;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selectionState: this._getSelectionState(props),\n      columnMeasureInfo: null,\n      isDropping: false,\n      groupNestingDepth: props.groupNestingDepth\n    };\n\n    this._hasSetFocus = false;\n\n    this._events = new EventGroup(this);\n    this._droppingClassNames = '';\n    this._updateDroppingState = this._updateDroppingState.bind(this);\n  }\n\n  public componentDidMount() {\n    let { dragDropHelper } = this.props;\n    if (dragDropHelper) {\n      dragDropHelper.subscribe(this.refs.root, this._events, this._getRowDragDropOptions());\n    }\n\n    this._events.on(this.props.selection, SELECTION_CHANGE, this._onSelectionChanged);\n\n    if (this.props.onDidMount && this.props.item) {\n      // If the item appears later, we should wait for it before calling this method.\n      this._hasMounted = true;\n      this.props.onDidMount(this);\n    }\n  }\n\n  public componentDidUpdate() {\n    let state = this.state;\n    let { item, onDidMount } = this.props;\n    let { columnMeasureInfo } = state;\n\n    if (columnMeasureInfo && columnMeasureInfo.index >= 0) {\n      let newWidth = this.refs.cellMeasurer.getBoundingClientRect().width;\n\n      columnMeasureInfo.onMeasureDone(newWidth);\n\n      this.setState({\n        columnMeasureInfo: null\n      });\n    }\n\n    if (item && onDidMount && !this._hasMounted) {\n      this._hasMounted = true;\n      onDidMount(this);\n    }\n  }\n\n  public componentWillUnmount() {\n    let { item, onWillUnmount, dragDropHelper } = this.props;\n\n    this._events.dispose();\n\n    // Only call the onWillUnmount callback if we have an item.\n    if (onWillUnmount && item) {\n      onWillUnmount(this);\n    }\n\n    if (dragDropHelper) {\n      dragDropHelper.unsubscribe(this.refs.root, this._dragDropKey);\n    }\n  }\n\n  public componentWillReceiveProps(newProps: IDetailsRowProps) {\n    this.setState({\n      selectionState: this._getSelectionState(newProps),\n      groupNestingDepth: newProps.groupNestingDepth\n    });\n  }\n\n  public render() {\n    let {\n      columns,\n      dragDropEvents,\n      item,\n      itemIndex,\n      onRenderItemColumn,\n      selectionMode,\n      viewport,\n      checkboxVisibility,\n      getRowAriaLabel,\n      checkButtonAriaLabel,\n      selection\n    } = this.props;\n    let { selectionState: { isSelected }, columnMeasureInfo, isDropping, groupNestingDepth } = this.state;\n    let isDraggable = Boolean(dragDropEvents && dragDropEvents.canDrag && dragDropEvents.canDrag(item));\n    let droppingClassName = isDropping ? (this._droppingClassNames ? this._droppingClassNames : DEFAULT_DROPPING_CSS_CLASS) : '';\n    let ariaLabel = getRowAriaLabel ? getRowAriaLabel(item) : null;\n    let canSelect = selection.canSelectItem(item);\n\n    return (\n      <div\n        ref='root'\n        role='row'\n        aria-label= { ariaLabel }\n        className={ css('ms-DetailsRow ms-u-fadeIn400', droppingClassName, {\n          'is-selected': isSelected,\n          'is-check-visible': checkboxVisibility === CheckboxVisibility.always\n        }) }\n        data-is-focusable={ true }\n        data-selection-index={ itemIndex }\n        data-item-index={ itemIndex }\n        data-is-draggable={ isDraggable }\n        data-automationid='DetailsRow'\n        style={ { minWidth: viewport ? viewport.width : 0 } }\n        aria-selected={ isSelected }\n        >\n        <FocusZone direction={ FocusZoneDirection.horizontal }>\n          { (selectionMode !== SelectionMode.none) && (\n            <span role='gridcell'>\n              <button\n                className='ms-DetailsRow-check'\n                role='button'\n                aria-pressed={ isSelected }\n                data-selection-toggle={ true }\n                data-automationid='DetailsRowCheck'\n                aria-label={ checkButtonAriaLabel }\n                >\n                { canSelect ?\n                  <Check isChecked={ isSelected } /> :\n                  <div className='ms-DetailsRow-checkSpacer' />\n                }\n              </button>\n            </span>\n          ) }\n\n          { GroupSpacer({ count: groupNestingDepth }) }\n\n          { item && (\n            <DetailsRowFields\n              columns={ columns }\n              item={ item }\n              itemIndex={ itemIndex }\n              onRenderItemColumn={ onRenderItemColumn } />\n          ) }\n\n          { columnMeasureInfo && (\n            <span className='ms-DetailsRow-cellMeasurer ms-DetailsRow-cell' ref='cellMeasurer'>\n              <DetailsRowFields\n                columns={ [ columnMeasureInfo.column ] }\n                item={ item }\n                itemIndex={ itemIndex }\n                onRenderItemColumn={ onRenderItemColumn } />\n            </span>\n          ) }\n        </FocusZone>\n      </div>\n    );\n  }\n\n  /**\n   * measure cell at index. and call the call back with the measured cell width when finish measure\n   *\n   * @param {number} index (the cell index)\n   * @param {(width: number) => void} onMeasureDone (the call back function when finish measure)\n   */\n  public measureCell(index: number, onMeasureDone: (width: number) => void) {\n    let column = assign({}, this.props.columns[index]) as IColumn;\n\n    column.minWidth = 0;\n    column.maxWidth = 999999;\n\n    delete column.calculatedWidth;\n\n    this.setState({\n      columnMeasureInfo: {\n        index,\n        column,\n        onMeasureDone\n      }\n    });\n  }\n\n  public focus() {\n    if (this.refs && this.refs.root) {\n      this.refs.root.tabIndex = 0;\n      this.refs.root.focus();\n    }\n  }\n\n  private _getSelectionState(props: IDetailsRowProps): IDetailsRowSelectionState {\n    let { itemIndex, selection } = props;\n\n    return {\n      isSelected: selection.isIndexSelected(itemIndex)\n    };\n  }\n\n  private _onSelectionChanged() {\n    let selectionState = this._getSelectionState(this.props);\n\n    if (!shallowCompare(selectionState, this.state.selectionState)) {\n      this.setState({\n        selectionState: selectionState\n      });\n    }\n  }\n\n  private _getRowDragDropOptions(): IDragDropOptions {\n    let { item, itemIndex, dragDropEvents, eventsToRegister } = this.props;\n    this._dragDropKey = 'row-' + itemIndex;\n    let options = {\n      key: this._dragDropKey,\n      eventMap: eventsToRegister,\n      selectionIndex: itemIndex,\n      context: { data: item, index: itemIndex },\n      canDrag: dragDropEvents.canDrag,\n      canDrop: dragDropEvents.canDrop,\n      onDragStart: dragDropEvents.onDragStart,\n      updateDropState: this._updateDroppingState\n    };\n    return options;\n  }\n\n  /**\n   * update isDropping state based on the input value, which is used to change style during drag and drop\n   *\n   * when change to true, that means drag enter. we will add default dropping class name\n   * or the custom dropping class name (return result from onDragEnter) to the root elemet.\n   *\n   * when change to false, that means drag leave. we will remove the dropping class name from root element.\n   *\n   * @private\n   * @param {boolean} newValue (new isDropping state value)\n   * @param {DragEvent} event (the event trigger dropping state change which can be dragenter, dragleave etc)\n   */\n  private _updateDroppingState(newValue: boolean, event: DragEvent) {\n    let { selectionState, isDropping } = this.state;\n    let { dragDropEvents, item } = this.props;\n\n    if (!newValue) {\n      if (dragDropEvents.onDragLeave) {\n        dragDropEvents.onDragLeave(item, event);\n      }\n    } else {\n      if (dragDropEvents.onDragEnter) {\n        this._droppingClassNames = dragDropEvents.onDragEnter(item, event);\n      }\n    }\n\n    if (isDropping !== newValue) {\n      this.setState({ selectionState: selectionState, isDropping: newValue });\n    }\n  }\n}\n"],"sourceRoot":"/src"}