{"version":3,"sources":["components/Checkbox/Checkbox.tsx"],"names":[],"mappings":";;;;;;AAAA,IAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAK/B,oBAAoB,qBAAqB,CAAC,CAAA;AAC1C,uBAAsB,wBAAwB,CAAC,CAAA;AAE/C,QAAO,iBAAiB,CAAC,CAAA;AAEzB;IAA8B,4BAAmC;IAO/D,kBAAY,KAAqB;QAC/B,kBAAM,KAAK,CAAC,CAAC;QAEb,IAAI,CAAC,GAAG,GAAG,cAAK,CAAC,WAAW,CAAC,CAAC;QAC9B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC7C,CAAC;IAEM,yBAAM,GAAb;QAAA,iBA+BC;QA9BC,IAAA,eAOc,EANZ,oBAAO,EACP,wBAAS,EACT,kCAAc,EACd,sBAAQ,EACR,0BAAU,EACV,gBAAK,CACQ;QAEf,MAAM,CAAC,CACL,qBAAC,GAAG,IAAC,SAAS,EAAG,SAAG,CAAC,gBAAgB,EAAE,SAAS,CAAG,GACjD,qBAAC,KAAK,sBACC,UAAU,EACV,CAAC,OAAO,KAAK,SAAS,IAAI,EAAE,SAAA,OAAO,EAAE,CAAC,EACtC,CAAC,cAAc,KAAK,SAAS,IAAI,EAAE,gBAAA,cAAc,EAAE,CAAC,GACzD,QAAQ,EAAG,QAAU,EACrB,GAAG,EAAG,UAAC,EAAE,IAAuB,OAAA,KAAI,CAAC,SAAS,GAAG,EAAE,EAAnB,CAAqB,EACrD,EAAE,EAAG,IAAI,CAAC,GAAK,EACf,IAAI,EAAG,IAAI,CAAC,GAAK,EACjB,SAAS,EAAC,sBAAsB,EAChC,IAAI,EAAC,UAAU,EACf,IAAI,EAAC,UAAU,EACf,QAAQ,EAAG,IAAI,CAAC,SAAW,GAC3B,YAAY,GAAG,OAAS,GACxB,EACF,qBAAC,KAAK,IAAC,OAAO,EAAG,IAAI,CAAC,GAAK,EAAC,SAAS,EAAC,sBAAsB,GACxD,KAAK,IAAI,qBAAC,IAAI,IAAC,SAAS,EAAC,UAAU,GAAG,KAAO,CAAS,CAClD,CACJ,CACP,CAAC;IACJ,CAAC;IAED,sBAAW,6BAAO;aAAlB;YACE,MAAM,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,GAAG,KAAK,CAAC;QACzD,CAAC;;;OAAA;IAEM,wBAAK,GAAZ;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACjB,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;QAC3B,CAAC;IACL,CAAC;IAEO,4BAAS,GAAjB,UAAkB,EAAmB;QAC3B,kCAAQ,CAAgB;QAChC,IAAM,SAAS,GAAI,EAAE,CAAC,MAA2B,CAAC,OAAO,CAAC;QAE1D,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACb,QAAQ,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC;QAC1B,CAAC;IACH,CAAC;IA/Da,qBAAY,GAAmB,EAC5C,CAAC;IA+DJ,eAAC;AAAD,CAjEA,AAiEC,CAjE6B,KAAK,CAAC,SAAS,GAiE5C;AAjEY,gBAAQ,WAiEpB,CAAA","file":"components/Checkbox/Checkbox.js","sourcesContent":["import * as React from 'react';\nimport {\n  ICheckbox,\n  ICheckboxProps\n} from './Checkbox.Props';\nimport { css } from '../../utilities/css';\nimport { getId } from '../../utilities/object';\n\nimport './Checkbox.scss';\n\nexport class Checkbox extends React.Component<ICheckboxProps, {}> implements ICheckbox {\n  public static defaultProps: ICheckboxProps = {\n  };\n\n  private _id: string;\n  private _checkBox: HTMLInputElement;\n\n  constructor(props: ICheckboxProps) {\n    super(props);\n\n    this._id = getId('checkbox-');\n    this._onChange = this._onChange.bind(this);\n  }\n\n  public render() {\n    const {\n      checked,\n      className,\n      defaultChecked,\n      disabled,\n      inputProps,\n      label\n    } = this.props;\n\n    return (\n      <div className={ css('ms-ChoiceField', className) }>\n        <input\n          { ...inputProps }\n          { ...(checked !== undefined && { checked }) }\n          { ...(defaultChecked !== undefined && { defaultChecked }) }\n          disabled={ disabled }\n          ref={ (el): HTMLInputElement => this._checkBox = el }\n          id={ this._id }\n          name={ this._id }\n          className='ms-ChoiceField-input'\n          type='checkbox'\n          role='checkbox'\n          onChange={ this._onChange }\n          aria-checked={ checked }\n        />\n        <label htmlFor={ this._id } className='ms-ChoiceField-field'>\n          { label && <span className='ms-Label'>{ label }</span> }\n        </label>\n      </div>\n    );\n  }\n\n  public get checked(): boolean {\n    return this._checkBox ? this._checkBox.checked : false;\n  }\n\n  public focus() {\n      if (this._checkBox) {\n          this._checkBox.focus();\n      }\n  }\n\n  private _onChange(ev: React.FormEvent) {\n    const { onChange } = this.props;\n    const isChecked = (ev.target as HTMLInputElement).checked;\n\n    if (onChange) {\n      onChange(ev, isChecked);\n    }\n  }\n}\n"],"sourceRoot":"/src"}