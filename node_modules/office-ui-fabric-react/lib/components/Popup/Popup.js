"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var React = require('react');
var KeyCodes_1 = require('../../utilities/KeyCodes');
var BaseComponent_1 = require('../../common/BaseComponent');
/**
 * This adds accessibility to Dialog and Panel controls
 **/
var Popup = (function (_super) {
    __extends(Popup, _super);
    function Popup() {
        _super.apply(this, arguments);
    }
    Popup.prototype.componentDidMount = function () {
        var _this = this;
        this._originalFocusedElement = document.activeElement;
        this._events.on(this.refs.root, 'keydown', this._onKeyDown);
        this._events.on(this.refs.root, 'focus', function () { return _this._containsFocus = true; }, true);
        this._events.on(this.refs.root, 'blur', function () { return _this._containsFocus = false; }, true);
    };
    Popup.prototype.componentWillUnmount = function () {
        if (this.props.shouldRestoreFocus &&
            this._originalFocusedElement &&
            this._containsFocus &&
            this._originalFocusedElement !== window) {
            this._originalFocusedElement.focus();
        }
    };
    Popup.prototype.render = function () {
        var _a = this.props, role = _a.role, className = _a.className, ariaLabelledBy = _a.ariaLabelledBy, ariaDescribedBy = _a.ariaDescribedBy;
        return (React.createElement("div", React.__spread({}, this.props, {ref: 'root', className: className, role: role, "aria-labelledby": ariaLabelledBy, "aria-desribedby": ariaDescribedBy})));
    };
    Popup.prototype._onKeyDown = function (ev) {
        switch (ev.which) {
            case KeyCodes_1.KeyCodes.escape:
                if (this.props.onDismiss) {
                    this.props.onDismiss();
                    ev.preventDefault();
                    ev.stopPropagation();
                }
                break;
        }
    };
    Popup.defaultProps = {
        shouldRestoreFocus: true
    };
    return Popup;
}(BaseComponent_1.BaseComponent));
exports.Popup = Popup;

//# sourceMappingURL=Popup.js.map
