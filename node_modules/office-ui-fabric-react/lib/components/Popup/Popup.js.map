{"version":3,"sources":["components/Popup/Popup.tsx"],"names":[],"mappings":";;;;;;AAAA,IAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAE/B,yBAAyB,0BAA0B,CAAC,CAAA;AACpD,8BAA8B,4BAA4B,CAAC,CAAA;AAE3D;;IAEI;AACJ;IAA2B,yBAA8B;IAAzD;QAA2B,8BAA8B;IA8DzD,CAAC;IAhDQ,iCAAiB,GAAxB;QAAA,iBAOC;QANC,IAAI,CAAC,uBAAuB,GAAG,QAAQ,CAAC,aAA4B,CAAC;QAErE,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,SAAS,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QAE5D,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,cAAM,OAAA,KAAI,CAAC,cAAc,GAAG,IAAI,EAA1B,CAA0B,EAAE,IAAI,CAAC,CAAC;QACjF,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,cAAM,OAAA,KAAI,CAAC,cAAc,GAAG,KAAK,EAA3B,CAA2B,EAAE,IAAI,CAAC,CAAC;IACnF,CAAC;IAEM,oCAAoB,GAA3B;QACE,EAAE,CAAC,CACD,IAAI,CAAC,KAAK,CAAC,kBAAkB;YAC7B,IAAI,CAAC,uBAAuB;YAC5B,IAAI,CAAC,cAAc;YACnB,IAAI,CAAC,uBAA8B,KAAK,MAAM,CAAC,CAAC,CAAC;YAEjD,IAAI,CAAC,uBAAuB,CAAC,KAAK,EAAE,CAAC;QACvC,CAAC;IACH,CAAC;IAEM,sBAAM,GAAb;QACE,IAAA,eAAqE,EAA/D,cAAI,EAAE,wBAAS,EAAE,kCAAc,EAAE,oCAAe,CAAgB;QAEtE,MAAM,CAAC,CACL,qBAAC,GAAG,sBACG,IAAI,CAAC,KAAY,GACtB,GAAG,EAAC,MAAM,EACV,SAAS,EAAG,SAAW,EACvB,IAAI,EAAG,IAAM,GACb,eAAe,GAAG,cAAgB,GAClC,eAAe,GAAG,eAAiB,GAAG,CACzC,CAAC;IACJ,CAAC;IAEO,0BAAU,GAAlB,UAAmB,EAAuB;QACxC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;YACjB,KAAK,mBAAQ,CAAC,MAAM;gBAElB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;oBACzB,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC;oBAEvB,EAAE,CAAC,cAAc,EAAE,CAAC;oBACpB,EAAE,CAAC,eAAe,EAAE,CAAC;gBACvB,CAAC;gBAED,KAAK,CAAC;QACV,CAAC;IACH,CAAC;IA3Da,kBAAY,GAAgB;QACxC,kBAAkB,EAAE,IAAI;KACzB,CAAC;IA0DJ,YAAC;AAAD,CA9DA,AA8DC,CA9D0B,6BAAa,GA8DvC;AA9DY,aAAK,QA8DjB,CAAA","file":"components/Popup/Popup.js","sourcesContent":["import * as React from 'react';\nimport { IPopupProps } from './Popup.Props';\nimport { KeyCodes } from '../../utilities/KeyCodes';\nimport { BaseComponent } from '../../common/BaseComponent';\n\n/**\n * This adds accessibility to Dialog and Panel controls\n **/\nexport class Popup extends BaseComponent<IPopupProps, {}> {\n\n  public static defaultProps: IPopupProps = {\n    shouldRestoreFocus: true\n  };\n\n  public refs: {\n    [key: string]: React.ReactInstance;\n    root: HTMLElement;\n  };\n\n  private _originalFocusedElement: HTMLElement;\n  private _containsFocus: boolean;\n\n  public componentDidMount(): void {\n    this._originalFocusedElement = document.activeElement as HTMLElement;\n\n    this._events.on(this.refs.root, 'keydown', this._onKeyDown);\n\n    this._events.on(this.refs.root, 'focus', () => this._containsFocus = true, true);\n    this._events.on(this.refs.root, 'blur', () => this._containsFocus = false, true);\n  }\n\n  public componentWillUnmount(): void {\n    if (\n      this.props.shouldRestoreFocus &&\n      this._originalFocusedElement &&\n      this._containsFocus &&\n      this._originalFocusedElement as any !== window) {\n\n      this._originalFocusedElement.focus();\n    }\n  }\n\n  public render() {\n    let { role, className, ariaLabelledBy, ariaDescribedBy } = this.props;\n\n    return (\n      <div\n        { ...this.props as any }\n        ref='root'\n        className={ className }\n        role={ role }\n        aria-labelledby={ ariaLabelledBy }\n        aria-desribedby={ ariaDescribedBy } />\n    );\n  }\n\n  private _onKeyDown(ev: React.KeyboardEvent) {\n    switch (ev.which) {\n      case KeyCodes.escape:\n\n        if (this.props.onDismiss) {\n          this.props.onDismiss();\n\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n\n        break;\n    }\n  }\n}\n"],"sourceRoot":"/src"}