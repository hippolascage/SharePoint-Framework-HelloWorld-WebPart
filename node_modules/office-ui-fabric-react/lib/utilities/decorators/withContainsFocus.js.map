{"version":3,"sources":["utilities/decorators/withContainsFocus.tsx"],"names":[],"mappings":";;;;;;AAAA,IAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAC/B,sBAAsB,gBAAgB,CAAC,CAAA;AAEvC,2BAAwC,iBAAsB;IAE5D,MAAM,CAAC;QAAyC,8CAAuB;QAWrE;YACE,iBAAO,CAAC;YAER,IAAI,CAAC,MAAM,GAAG,IAAI,aAAK,CAAC,IAAI,CAAC,CAAC;YAC9B,IAAI,CAAC,KAAK,GAAG;gBACX,aAAa,EAAE,KAAK;aACrB,CAAC;YAEF,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAAC;QACnF,CAAC;QAEM,yDAAoB,GAA3B;YACE,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;QACxB,CAAC;QAEM,2CAAM,GAAb;YACQ,4CAAa,CAAgB;YAEnC,MAAM,CAAC,CACL,qBAAC,GAAG,IAAC,GAAG,EAAC,MAAM,EAAC,OAAO,EAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAG,EAAC,MAAM,EAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAG,GAC7F,oBAAC,iBAAiB,kBAAC,GAAG,EAAC,UAAU,EAAC,aAAa,EAAG,aAAe,GAAK,IAAI,CAAC,KAAK,EAAI,CAChF,CACP,CAAC;QACJ,CAAC;QAEM,gDAAW,GAAlB;YACE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;QACnC,CAAC;QAEO,iDAAY,GAApB,UAAqB,EAAE;YACrB,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;YAC9B,IAAI,CAAC,wBAAwB,EAAE,CAAC;QAClC,CAAC;QAEO,gDAAW,GAAnB,UAAoB,EAAE;YACpB,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;YAC/B,IAAI,CAAC,wBAAwB,EAAE,CAAC;QAClC,CAAC;QAEO,sDAAiB,GAAzB;YACE,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,KAAK,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;gBACxD,IAAI,CAAC,QAAQ,CAAC,EAAE,aAAa,EAAE,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC;YAC3D,CAAC;QACH,CAAC;QAEH,iCAAC;IAAD,CAxDO,AAwDN,CAxD+C,KAAK,CAAC,SAAS,EAwD9D,CAAC;AAEJ,CAAC;AA5De,yBAAiB,oBA4DhC,CAAA","file":"utilities/decorators/withContainsFocus.js","sourcesContent":["import * as React from 'react';\nimport { Async } from '../Async/Async';\n\nexport function withContainsFocus<P, S>(ComposedComponent: any): any {\n\n  return class WithContainsFocusComponent extends React.Component<P, any> {\n    public refs: {\n      [key: string]: React.ReactInstance,\n      composed: any\n    };\n\n    private _async: Async;\n    private _newContainsFocus: boolean;\n\n    private _delayedSetContainsFocus: () => void;\n\n    constructor() {\n      super();\n\n      this._async = new Async(this);\n      this.state = {\n        containsFocus: false\n      };\n\n      this._delayedSetContainsFocus = this._async.debounce(this._setContainsFocus, 20);\n    }\n\n    public componentWillUnmount() {\n      this._async.dispose();\n    }\n\n    public render() {\n      let { containsFocus } = this.state;\n\n      return (\n        <div ref='root' onFocus={ this._handleFocus.bind(this) } onBlur={ this._handleBlur.bind(this) }>\n          <ComposedComponent ref='composed' containsFocus={ containsFocus } {...this.props} />\n        </div>\n      );\n    }\n\n    public forceUpdate() {\n      this.refs.composed.forceUpdate();\n    }\n\n    private _handleFocus(ev) {\n      this._newContainsFocus = true;\n      this._delayedSetContainsFocus();\n    }\n\n    private _handleBlur(ev) {\n      this._newContainsFocus = false;\n      this._delayedSetContainsFocus();\n    }\n\n    private _setContainsFocus() {\n      if (this.state.containsFocus !== this._newContainsFocus) {\n        this.setState({ containsFocus: this._newContainsFocus });\n      }\n    }\n\n  };\n\n}\n"],"sourceRoot":"/src"}