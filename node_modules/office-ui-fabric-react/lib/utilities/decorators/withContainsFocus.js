"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var React = require('react');
var Async_1 = require('../Async/Async');
function withContainsFocus(ComposedComponent) {
    return (function (_super) {
        __extends(WithContainsFocusComponent, _super);
        function WithContainsFocusComponent() {
            _super.call(this);
            this._async = new Async_1.Async(this);
            this.state = {
                containsFocus: false
            };
            this._delayedSetContainsFocus = this._async.debounce(this._setContainsFocus, 20);
        }
        WithContainsFocusComponent.prototype.componentWillUnmount = function () {
            this._async.dispose();
        };
        WithContainsFocusComponent.prototype.render = function () {
            var containsFocus = this.state.containsFocus;
            return (React.createElement("div", {ref: 'root', onFocus: this._handleFocus.bind(this), onBlur: this._handleBlur.bind(this)}, React.createElement(ComposedComponent, React.__spread({ref: 'composed', containsFocus: containsFocus}, this.props))));
        };
        WithContainsFocusComponent.prototype.forceUpdate = function () {
            this.refs.composed.forceUpdate();
        };
        WithContainsFocusComponent.prototype._handleFocus = function (ev) {
            this._newContainsFocus = true;
            this._delayedSetContainsFocus();
        };
        WithContainsFocusComponent.prototype._handleBlur = function (ev) {
            this._newContainsFocus = false;
            this._delayedSetContainsFocus();
        };
        WithContainsFocusComponent.prototype._setContainsFocus = function () {
            if (this.state.containsFocus !== this._newContainsFocus) {
                this.setState({ containsFocus: this._newContainsFocus });
            }
        };
        return WithContainsFocusComponent;
    }(React.Component));
}
exports.withContainsFocus = withContainsFocus;

//# sourceMappingURL=withContainsFocus.js.map
