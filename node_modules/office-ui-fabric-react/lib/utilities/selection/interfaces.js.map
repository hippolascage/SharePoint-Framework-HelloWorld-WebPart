{"version":3,"sources":["utilities/selection/interfaces.ts"],"names":[],"mappings":";AAIa,wBAAgB,GAAG,QAAQ,CAAC;AAEzC,WAAY,aAAa;IACvB,iDAAI,CAAA;IACJ,qDAAM,CAAA;IACN,yDAAQ,CAAA;AACV,CAAC,EAJW,qBAAa,KAAb,qBAAa,QAIxB;AAJD,IAAY,aAAa,GAAb,qBAIX,CAAA;AAgDD,WAAY,kBAAkB;IAC5B,uEAAc,CAAA;IACd,mEAAY,CAAA;AACd,CAAC,EAHW,0BAAkB,KAAlB,0BAAkB,QAG7B;AAHD,IAAY,kBAAkB,GAAlB,0BAGX,CAAA","file":"utilities/selection/interfaces.js","sourcesContent":["export interface IObjectWithKey {\n  key?: string;\n}\n\nexport const SELECTION_CHANGE = 'change';\n\nexport enum SelectionMode {\n  none,\n  single,\n  multiple\n}\n\nexport interface ISelection {\n  count: number;\n  canSelectItem?: (item: IObjectWithKey) => boolean;\n\n  // Obesrvable methods.\n  setChangeEvents(isEnabled: boolean, suppressChange?: boolean);\n\n  // Initialization methods.\n\n  setItems(items: IObjectWithKey[], shouldClear: boolean);\n  getItems(): IObjectWithKey[];\n\n  // Read selection methods.\n\n  getSelection(): IObjectWithKey[];\n  getSelectedCount(): number;\n\n  isAllSelected(): boolean;\n  isKeySelected(key: string): boolean;\n  isIndexSelected(index: number): boolean;\n\n  // Write selection methods.\n\n  setAllSelected(isAllSelected: boolean);\n  setKeySelected(key: string, isSelected: boolean, shouldAnchor: boolean);\n  setIndexSelected(index: number, isSelected: boolean, shouldAnchor: boolean);\n\n  // Write range selection methods.\n\n  selectToKey(key: string);\n  selectToIndex(index: number);\n\n  // Toggle helpers.\n\n  toggleAllSelected();\n  toggleKeySelected(key: string);\n  toggleIndexSelected(index: number);\n}\n\nexport interface ISelectionLayout {\n  getItemIndexAbove(index: number, items: any[]): number;\n  getItemIndexBelow(index: number, items: any[]): number;\n  getItemIndexLeft(index: number, items: any[]): number;\n  getItemIndexRight(index: number, items: any[]): number;\n}\n\nexport enum SelectionDirection {\n  horizontal = 0,\n  vertical = 1\n}\n"],"sourceRoot":"/src"}