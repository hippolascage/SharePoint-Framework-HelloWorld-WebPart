{"version":3,"sources":["utilities/selection/SelectionZone.tsx"],"names":[],"mappings":"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","file":"utilities/selection/SelectionZone.js","sourcesContent":["import * as React from 'react';\nimport { EventGroup } from '../eventGroup/EventGroup';\nimport { SelectionLayout } from './SelectionLayout';\nimport { KeyCodes } from '../KeyCodes';\nimport {\n  ISelection,\n  ISelectionLayout,\n  SelectionDirection,\n  SelectionMode\n} from './interfaces';\n\n// Selection definitions:\n//\n// Anchor index: the point from which a range selection starts.\n// Focus index: the point from which layout movement originates from.\n//\n// These two can differ. Tests:\n//\n// If you start at index 5\n// Shift click to index 10\n//    The focus is 10, the anchor is 5.\n// If you shift click at index 0\n//    The anchor remains at 5, the items between 0 and 5 are selected and everything else is cleared.\n// If you click index 8\n//    The anchor and focus are set to 8.\n\nconst SELECTION_INDEX_ATTRIBUTE_NAME = 'data-selection-index';\nconst SELECTION_TOGGLE_ATTRIBUTE_NAME = 'data-selection-toggle';\nconst SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME = 'data-selection-all-toggle';\n\nexport interface ISelectionZoneProps extends React.Props<SelectionZone> {\n  selection: ISelection;\n  layout?: ISelectionLayout;\n  selectionMode: SelectionMode;\n  isSelectedOnFocus?: boolean;\n  onItemInvoked?: (item?: any, index?: number, ev?: Event) => void;\n}\n\nexport class SelectionZone extends React.Component<ISelectionZoneProps, any> {\n  public static defaultProps = {\n    layout: new SelectionLayout(SelectionDirection.vertical),\n    isMultiSelectEnabled: true,\n    isSelectedOnFocus: true\n  };\n\n  public refs: {\n    [key: string]: React.ReactInstance,\n    root: HTMLElement\n  };\n\n  private _events: EventGroup;\n\n  private _isCtrlPressed: boolean;\n  private _isShiftPressed: boolean;\n  private _isMetaPressed: boolean;\n  private _hasClickedOnItem: boolean;\n  private _isEnabled: boolean;\n\n  constructor() {\n    super();\n\n    this._isEnabled = true;\n    this._events = new EventGroup(this);\n  }\n\n  public componentDidMount() {\n    let element = this.refs.root;\n\n    this._events.onAll(element, {\n      'keydown': this._onKeyDown,\n      'mousedown': this._onMouseDown,\n      'click': this._onClick,\n      'dblclick': this._onDoubleClick\n    });\n\n    // Always know what the state of shift/ctrl/meta are.\n    this._events.on(element, 'focus', this._onFocus, true);\n    this._events.on(window, 'keydown', this._onKeyChangeCapture, true);\n    this._events.on(window, 'keyup', this._onKeyChangeCapture, true);\n  }\n\n  public componentWillUnmount() {\n    this._events.dispose();\n  }\n\n  public render() {\n    return (\n      <div\n        className='ms-SelectionZone'\n        ref='root'\n        >\n        {this.props.children }\n      </div>\n    );\n  }\n\n  /**\n   * In some cases, the consuming scenario requires to disable the behaviors of selection zone. For\n   * example, the caller wants to set focus onto an item without selecting it. They can use this\n   * method to temporarily disable the selection changes.\n   */\n  public setEnabled(isEnabled: boolean) {\n    this._isEnabled = isEnabled;\n  }\n\n  private _onFocus(ev: FocusEvent) {\n    if (!this._isEnabled) {\n      return;\n    }\n\n    let { selection, selectionMode } = this.props;\n    let index = this._getIndexFromElement(ev.target as HTMLElement);\n\n    if (index >= 0 && selectionMode !== SelectionMode.none && !this._hasClickedOnItem) {\n      selection.setChangeEvents(false);\n\n      if (this._isShiftPressed && selectionMode === SelectionMode.multiple) {\n        if (!this._isCtrlPressed && !this._isMetaPressed) {\n          selection.setAllSelected(false);\n        }\n        selection.selectToIndex(index);\n      } else if (!this._isCtrlPressed && !this._isMetaPressed) {\n        selection.setAllSelected(false);\n        selection.setIndexSelected(index, true, true);\n      }\n\n      selection.setChangeEvents(true);\n    }\n\n    this._hasClickedOnItem = false;\n  }\n\n  private _onMouseDown(ev: MouseEvent) {\n    if (!this._isEnabled) {\n      return;\n    }\n\n    // We need to reset the key states for ctrl/meta/etc.\n    this._onKeyChangeCapture(ev as any);\n\n    let target = ev.target as HTMLElement;\n    let { selectionMode } = this.props;\n    let index = this._getIndexFromElement(target, true);\n\n    if (index >= 0 && selectionMode !== SelectionMode.none) {\n      this._hasClickedOnItem = true;\n    }\n  }\n\n  private _onClick(ev: MouseEvent) {\n    if (!this._isEnabled) {\n      return;\n    }\n\n    let target = ev.target as HTMLElement;\n    let { selection, selectionMode, onItemInvoked } = this.props;\n    let isToggleElement = this._isToggleElement(target, SELECTION_TOGGLE_ATTRIBUTE_NAME) || ev.ctrlKey || ev.metaKey;\n    let index = this._getIndexFromElement(target, true);\n\n    if (index >= 0 && selectionMode !== SelectionMode.none) {\n      let isSelected = selection.isIndexSelected(index);\n\n      // Disable change events.\n      selection.setChangeEvents(false);\n\n      if (ev.shiftKey && selectionMode === SelectionMode.multiple) {\n        if (!ev.ctrlKey && !ev.metaKey) {\n          selection.setAllSelected(false);\n        }\n        selection.selectToIndex(index);\n      } else {\n        if (selectionMode === SelectionMode.single || !isToggleElement) {\n          selection.setAllSelected(false);\n        }\n\n        selection.setIndexSelected(index, isToggleElement ? !isSelected : true, !ev.shiftKey);\n      }\n\n      // Re-enabled change events.\n      selection.setChangeEvents(true);\n    } else if (onItemInvoked) {\n      onItemInvoked(selection.getItems()[index], index, ev);\n    }\n  }\n\n  private _onDoubleClick(ev: MouseEvent) {\n    if (!this._isEnabled) {\n      return;\n    }\n\n    let { onItemInvoked, selection } = this.props;\n    let index = this._getIndexFromElement(ev.target as HTMLElement, true);\n\n    if (onItemInvoked) {\n      onItemInvoked(selection.getItems()[index], index, ev);\n    }\n  }\n\n  private _onKeyChangeCapture(ev: KeyboardEvent) {\n    this._isShiftPressed = ev.shiftKey;\n    this._isCtrlPressed = ev.ctrlKey;\n    this._isMetaPressed = ev.metaKey;\n  }\n\n  private _onKeyDown(ev: KeyboardEvent) {\n    if (!this._isEnabled) {\n      return;\n    }\n\n    let target = ev.target as HTMLElement;\n    let { selection, selectionMode, onItemInvoked } = this.props;\n    let isToggleElement = this._isToggleElement(target, SELECTION_TOGGLE_ATTRIBUTE_NAME);\n    let isToggleAllElement = !isToggleElement && this._isToggleElement(target, SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME);\n    let index = this._getIndexFromElement(target, true);\n\n    if (index >= 0 && !this._isInputElement(target) && selectionMode !== SelectionMode.none) {\n      let isSelected = selection.isIndexSelected(index);\n\n      if (ev.which === KeyCodes.space) {\n        if (isToggleAllElement) {\n          if (selectionMode === SelectionMode.multiple) {\n            selection.toggleAllSelected();\n          }\n        } else { // an item\n          selection.setChangeEvents(false);\n          if (selectionMode === SelectionMode.single) {\n            selection.setAllSelected(false);\n          }\n          selection.setIndexSelected(index, !isSelected, true);\n          selection.setChangeEvents(true);\n        }\n      } else if (ev.which === KeyCodes.enter) {\n        if (isToggleAllElement) {\n          selection.toggleAllSelected();\n        } else if (isToggleElement) {\n          selection.setChangeEvents(false);\n          if (selectionMode === SelectionMode.single) {\n            selection.setAllSelected(false);\n          }\n          selection.setIndexSelected(index, !isSelected, true);\n          selection.setChangeEvents(true);\n        } else if (this._getIndexFromElement(target) >= 0 && onItemInvoked) {\n          // if the target IS the item, and not a link inside, then call the invoke method.\n          onItemInvoked(selection.getItems()[index], index, ev);\n        } else {\n          return;\n        }\n      } else if (ev.which === KeyCodes.a && (ev.ctrlKey || ev.metaKey) && selectionMode === SelectionMode.multiple) {\n        selection.setAllSelected(true);\n      } else if (ev.which === KeyCodes.escape) {\n        if (selection.getSelectedCount() > 0) {\n          selection.setAllSelected(false);\n        } else {\n          return;\n        }\n      } else {\n        return;\n      }\n    } else {\n      return;\n    }\n\n    ev.preventDefault();\n    ev.stopPropagation();\n  }\n\n  private _isToggleElement(element: HTMLElement, attributeName: string) {\n    let isToggle = false;\n\n    while (!isToggle && element !== this.refs.root) {\n      isToggle = element.getAttribute(attributeName) === 'true';\n      element = element.parentElement;\n    }\n\n    return isToggle;\n  }\n\n  private _isInputElement(element: HTMLElement) {\n    return element.tagName === 'INPUT' || element.tagName === 'TEXTAREA';\n  }\n\n  private _getIndexFromElement(element: HTMLElement, traverseParents?: boolean): number {\n    let index = -1;\n\n    do {\n      let indexString = element.getAttribute(SELECTION_INDEX_ATTRIBUTE_NAME);\n\n      if (indexString) {\n        index = Number(indexString);\n        break;\n      }\n      if (element !== this.refs.root) {\n        element = element.parentElement;\n      }\n    } while (traverseParents && element !== this.refs.root);\n\n    return index;\n  }\n\n}\n"],"sourceRoot":"/src"}