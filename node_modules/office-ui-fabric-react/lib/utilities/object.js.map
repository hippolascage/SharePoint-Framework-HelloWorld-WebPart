{"version":3,"sources":["utilities/object.ts"],"names":[],"mappings":";AAAA,+BAA+B;AAC/B,IAAM,mBAAmB,GAAG,eAAe,CAAC;AAE5C,IAAI,OAAO,GAAG,MAAM,IAAI,OAAO,CAAC;AAEhC,EAAE,CAAC,CAAC,OAAO,CAAC,mBAAmB,CAAC,KAAK,SAAS,CAAC,CAAC,CAAC;IAC/C,OAAO,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;AACnC,CAAC;AAED,yBAAyB,CAAC,EAAE,CAAC;IAC3B,GAAG,CAAC,CAAC,IAAI,QAAQ,IAAI,CAAC,CAAC,CAAC,CAAC;QACvB,EAAE,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YAC/B,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;gBACjE,MAAM,CAAC,KAAK,CAAC;YACf,CAAC;QACH,CAAC;IACH,CAAC;IAED,MAAM,CAAC,IAAI,CAAC;AACd,CAAC;AAED,4BAA4B;AAC5B,wBAA+B,CAAC,EAAE,CAAC;IACjC,MAAM,CAAC,eAAe,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,eAAe,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACxD,CAAC;AAFe,sBAAc,iBAE7B,CAAA;AAED,mBAAmB;AACnB,gBAAuB,MAAW;IAAE,cAAO;SAAP,WAAO,CAAP,sBAAO,CAAP,IAAO;QAAP,6BAAO;;IACzC,MAAM,GAAG,MAAM,IAAI,EAAE,CAAC;IAEtB,GAAG,CAAC,CAAqB,UAAI,EAAJ,aAAI,EAAJ,kBAAI,EAAJ,IAAI,CAAC;QAAzB,IAAI,YAAY,aAAA;QACnB,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;YACjB,GAAG,CAAC,CAAC,IAAI,QAAQ,IAAI,YAAY,CAAC,CAAC,CAAC;gBAClC,EAAE,CAAC,CAAC,YAAY,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;oBAC1C,MAAM,CAAC,QAAQ,CAAC,GAAG,YAAY,CAAC,QAAQ,CAAC,CAAC;gBAC5C,CAAC;YACH,CAAC;QACH,CAAC;KACF;IAED,MAAM,CAAC,MAAM,CAAC;AAChB,CAAC;AAde,cAAM,SAcrB,CAAA;AAED,0GAA0G;AAC1G,eAAsB,MAAe;IACnC,IAAI,KAAK,GAAG,OAAO,CAAC,mBAAmB,CAAC,EAAE,CAAC;IAE3C,MAAM,CAAC,CAAC,MAAM,IAAI,EAAE,CAAC,GAAG,KAAK,CAAC;AAChC,CAAC;AAJe,aAAK,QAIpB,CAAA","file":"utilities/object.js","sourcesContent":["// Initialize global window id.\nconst CURRENT_ID_PROPERTY = '__currentId__';\n\nlet _global = window || process;\n\nif (_global[CURRENT_ID_PROPERTY] === undefined) {\n  _global[CURRENT_ID_PROPERTY] = 0;\n}\n\nfunction checkProperties(a, b) {\n  for (let propName in a) {\n    if (a.hasOwnProperty(propName)) {\n      if (!b.hasOwnProperty(propName) || (b[propName] !== a[propName])) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\n// Compare a to b and b to a\nexport function shallowCompare(a, b) {\n  return checkProperties(a, b) && checkProperties(b, a);\n}\n\n// Assign function.\nexport function assign(target: any, ...args) {\n  target = target || {};\n\n  for (let sourceObject of args) {\n    if (sourceObject) {\n      for (let propName in sourceObject) {\n        if (sourceObject.hasOwnProperty(propName)) {\n          target[propName] = sourceObject[propName];\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\n/** Generates a unique id in the global scope (this spans across duplicate copies of the same library.) */\nexport function getId(prefix?: string): string {\n  let index = _global[CURRENT_ID_PROPERTY]++;\n\n  return (prefix || '') + index;\n}\n"],"sourceRoot":"/src"}