{"version":3,"sources":["common/BaseComponent.test.ts"],"names":[],"mappings":";;;;;;AAEA,sCAAsC;AAEtC,8BAA8B,iBAAiB,CAAC,CAAA;AAE1C,wBAAM,CAAU;AAEtB;IAA4B,iCAAqB;IAAjD;QAA4B,8BAAqB;IAyCjD,CAAC;IAvCQ,0CAAkB,GAAzB;QACE,IAAI,CAAC,cAAc,EAAE,CAAC;IACxB,CAAC;IAEM,yCAAiB,GAAxB;QACE,IAAI,CAAC,cAAc,EAAE,CAAC;IACxB,CAAC;IAEM,6CAAqB,GAA5B;QACE,IAAI,CAAC,cAAc,EAAE,CAAC;IACxB,CAAC;IAEM,2CAAmB,GAA1B;QACE,IAAI,CAAC,cAAc,EAAE,CAAC;IACxB,CAAC;IAEM,iDAAyB,GAAhC;QACE,IAAI,CAAC,cAAc,EAAE,CAAC;IACxB,CAAC;IAEM,8BAAM,GAAb;QACE,IAAI,CAAC,cAAc,EAAE,CAAC;QACtB,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAEM,0CAAkB,GAAzB;QACE,IAAI,CAAC,cAAc,EAAE,CAAC;IACxB,CAAC;IAEM,4CAAoB,GAA3B;QACE,IAAI,CAAC,cAAc,EAAE,CAAC;IACxB,CAAC;IAEO,sCAAc,GAAtB;QACE,IAAI,GAAG,GAAe,IAAI,CAAC;QAE3B,iBAAiB;QACjB,GAAG,EAAE,CAAC;IACR,CAAC;IACH,oBAAC;AAAD,CAzCA,AAyCC,CAzC2B,6BAAa,GAyCxC;AAED,QAAQ,CAAC,eAAe,EAAE;IACxB,aAAa,CAAC,oBAAoB,CAAC,CAAC;IACpC,aAAa,CAAC,mBAAmB,CAAC,CAAC;IACnC,aAAa,CAAC,uBAAuB,CAAC,CAAC;IACvC,aAAa,CAAC,qBAAqB,CAAC,CAAC;IACrC,aAAa,CAAC,2BAA2B,CAAC,CAAC;IAC3C,aAAa,CAAC,QAAQ,CAAC,CAAC;IACxB,aAAa,CAAC,oBAAoB,CAAC,CAAC;IACpC,aAAa,CAAC,sBAAsB,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC;AAEH,uBAAuB,UAAU;IAC/B,EAAE,CAAC,+BAA8B,UAAU,eAAa,EAAE;QACxD,IAAI,gBAAgB,GAAG,IAAI,CAAC;QAE5B,6BAAa,CAAC,OAAO,GAAG,UAAC,YAAY,EAAE,EAAE,IAAK,OAAA,gBAAgB,GAAG,YAAY,EAA/B,CAA+B,CAAC;QAE9E,IAAI,CAAC,GAAG,IAAI,aAAa,EAAE,CAAC;QAE5B,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC;QAEhB,MAAM,CAAC,gBAAgB,KAAK,IAAI,EAAE,2BAA2B,CAAC,CAAC;IACjE,CAAC,CAAC,CAAC;AACL,CAAC","file":"common/BaseComponent.test.js","sourcesContent":["/* tslint:disable:no-unused-variable */\nimport * as React from 'react';\n/* tslint:enable:no-unused-variable */\n\nimport { BaseComponent } from './BaseComponent';\n\nlet { assert } = chai;\n\nclass TestComponent extends BaseComponent<{}, {}> {\n\n  public componentWillMount(): void {\n    this._createNullRef();\n  }\n\n  public componentDidMount(): void {\n    this._createNullRef();\n  }\n\n  public shouldComponentUpdate(): void {\n    this._createNullRef();\n  }\n\n  public componentWillUpdate(): void {\n    this._createNullRef();\n  }\n\n  public componentWillReceiveProps(): void {\n    this._createNullRef();\n  }\n\n  public render(): JSX.Element {\n    this._createNullRef();\n    return null;\n  }\n\n  public componentDidUpdate(): void {\n    this._createNullRef();\n  }\n\n  public componentWillUnmount(): void {\n    this._createNullRef();\n  }\n\n  private _createNullRef() {\n    let foo: () => void = null;\n\n    // Calling a null\n    foo();\n  }\n}\n\ndescribe('BaseComponent', () => {\n  _buildTestFor('componentWillMount');\n  _buildTestFor('componentDidMount');\n  _buildTestFor('shouldComponentUpdate');\n  _buildTestFor('componentWillUpdate');\n  _buildTestFor('componentWillReceiveProps');\n  _buildTestFor('render');\n  _buildTestFor('componentDidUpdate');\n  _buildTestFor('componentWillUnmount');\n});\n\nfunction _buildTestFor(methodName) {\n  it(`calls the error logger on ${ methodName } exception`, () => {\n    let lastErrorMessage = null;\n\n    BaseComponent.onError = (errorMessage, ex) => lastErrorMessage = errorMessage;\n\n    let c = new TestComponent();\n\n    c[methodName]();\n\n    assert(lastErrorMessage !== null, 'Error callback not called');\n  });\n}"],"sourceRoot":"/src"}