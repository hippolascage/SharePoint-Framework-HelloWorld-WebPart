{"version":3,"sources":["demo/components/ExampleCard/ExampleCard.tsx"],"names":[],"mappings":";;;;;;AAAA,IAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAC/B,QAAO,oBAAoB,CAAC,CAAA;AAC5B,uBAAmC,iBAAiB,CAAC,CAAA;AACrD,oBAAoB,wBAAwB,CAAC,CAAA;AAE7C,IAAM,SAAS,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;AAe7C;IAAiC,+BAAqD;IAEpF,qBAAY,KAAwB;QAClC,kBAAM,KAAK,CAAC,CAAC;QAEb,IAAI,CAAC,KAAK,GAAG;YACX,aAAa,EAAE,KAAK;YACpB,cAAc,EAAE,KAAK,CAAC,OAAO,GAAG,KAAK,GAAG,IAAI;SAC7C,CAAC;QAEF,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC7D,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACjE,CAAC;IAEM,4BAAM,GAAb;QACE,IAAA,eAA4D,EAApD,gBAAK,EAAE,cAAI,EAAE,sBAAQ,EAAE,kCAAc,CAAgB;QAC7D,IAAA,eAAoD,EAA5C,gCAAa,EAAE,kCAAc,CAAgB;QACrD,IAAI,SAAS,GAAG,aAAa,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,GAAG,iBAAiB,GAAG,EAAE,CAAC,CAAC;QAEpF,MAAM,CAAC,CACL,qBAAC,GAAG,IAAC,SAAS,EAAG,SAAW,GAC1B,qBAAC,GAAG,IAAC,SAAS,EAAC,oBAAoB,GACjC,qBAAC,IAAI,IAAC,SAAS,EAAC,6BAA6B,GAAG,KAAO,CAAO,EAC9D,qBAAC,IAAI,IAAC,SAAS,EAAC,qCAAqC,GACnD,oBAAC,eAAM,GAAC,UAAU,EAAG,mBAAU,CAAC,OAAS,EAAC,OAAO,EAAG,IAAI,CAAC,mBAAqB,GAAG,cAAc,GAAG,cAAc,GAAG,cAAgB,CAAS,EAC1I,IAAI,GAAG,CACT,oBAAC,eAAM,GAAC,UAAU,EAAG,mBAAU,CAAC,OAAS,EAAC,OAAO,EAAG,IAAI,CAAC,kBAAoB,GAAG,aAAa,GAAG,WAAW,GAAG,WAAa,CAAS,CACnI,GAAG,CAAE,IAAI,CAAI,CACT,CACH,EACN,qBAAC,GAAG,IAAC,SAAS,EAAG,SAAG,CAAC,qBAAqB,EAAE,EAAE,qBAAqB,EAAE,CAAC,aAAa,CAAC,EAAE,CAAG,GAErF,aAAa,IAAI,CACnB,qBAAC,GAAG,IAAC,SAAS,EAAC,qCAAqC,GAClD,oBAAC,SAAS,GAAC,SAAS,EAAC,YAAY,GAC7B,IAAM,CACE,CACR,CACH,EAED,cAAc,IAAI,CACpB,qBAAC,GAAG,IAAC,SAAS,EAAG,SAAG,CAAC,qBAAqB,EAAE,EAAE,mBAAmB,EAAE,CAAC,cAAc,CAAC,EAAE,CAAG,GACpF,QAAU,CACR,CACH,CAEC,CACF,CACP,CAAC;IACJ,CAAC;IAEO,wCAAkB,GAA1B;QACE,IAAI,CAAC,QAAQ,CAAC;YACZ,aAAa,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa;SACzC,CAAC,CAAC;IACL,CAAC;IAEO,yCAAmB,GAA3B;QACE,IAAI,CAAC,QAAQ,CAAC;YACZ,cAAc,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc;SAC3C,CAAC,CAAC;IACL,CAAC;IACH,kBAAC;AAAD,CA9DA,AA8DC,CA9DgC,KAAK,CAAC,SAAS,GA8D/C;AA9DY,mBAAW,cA8DvB,CAAA","file":"demo/components/ExampleCard/ExampleCard.js","sourcesContent":["import * as React from 'react';\nimport './ExampleCard.scss';\nimport { Button, ButtonType } from '../../../Button';\nimport { css } from '../../../utilities/css';\n\nconst Highlight = require('react-highlight');\n\nexport interface IExampleCardProps {\n  title: string;\n  isOptIn?: boolean;\n  code?: string;\n  children?: any;\n  isRightAligned?: boolean;\n}\n\nexport interface IExampleCardState {\n  isCodeVisible?: boolean;\n  isExampleShown?: boolean;\n}\n\nexport class ExampleCard extends React.Component<IExampleCardProps, IExampleCardState> {\n\n  constructor(props: IExampleCardProps) {\n    super(props);\n\n    this.state = {\n      isCodeVisible: false,\n      isExampleShown: props.isOptIn ? false : true\n    };\n\n    this._onToggleCodeClick = this._onToggleCodeClick.bind(this);\n    this._onShowExampleClick = this._onShowExampleClick.bind(this);\n  }\n\n  public render() {\n    const { title, code, children, isRightAligned } = this.props;\n    const { isCodeVisible, isExampleShown } = this.state;\n    let rootClass = 'ExampleCard' + (this.state.isCodeVisible ? ' is-codeVisible' : '');\n\n    return (\n      <div className={ rootClass }>\n        <div className='ExampleCard-header'>\n          <span className='ExampleCard-title ms-font-l'>{ title }</span>\n          <span className='ExampleCard-toggleButtons ms-font-l'>\n            <Button buttonType={ ButtonType.primary } onClick={ this._onShowExampleClick }>{ isExampleShown ? 'Hide example' : 'Show example' }</Button>\n            { code ? (\n            <Button buttonType={ ButtonType.primary } onClick={ this._onToggleCodeClick }>{ isCodeVisible ? 'Hide code' : 'Show code' }</Button>\n            ) : ( null ) }\n          </span>\n        </div>\n        <div className={ css('ExampleCard-content', { ' ms-u-slideDownIn20': (isCodeVisible) }) }>\n\n          { isCodeVisible && (\n          <div className='ExampleCard-code ms-u-slideDownIn20'>\n            <Highlight className='javascript'>\n              { code }\n            </Highlight>\n          </div>\n          ) }\n\n          { isExampleShown && (\n          <div className={ css('ExampleCard-example', { ' is-right-aligned': (isRightAligned) }) }>\n            { children }\n          </div>\n          ) }\n\n        </div>\n      </div>\n    );\n  }\n\n  private _onToggleCodeClick() {\n    this.setState({\n      isCodeVisible: !this.state.isCodeVisible\n    });\n  }\n\n  private _onShowExampleClick() {\n    this.setState({\n      isExampleShown: !this.state.isExampleShown\n    });\n  }\n}\n"],"sourceRoot":"/src"}