{"version":3,"sources":["demo/components/PropertiesTable/PropertiesTableSet.tsx"],"names":[],"mappings":";;;;;;AAAA,IAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAC/B,gCAAyD,mBAAmB,CAAC,CAAA;AAE7E,sBAAsB,8BAA8B,CAAC,CAAA;AAMrD;IAAwC,sCAAmE;IAKzG,4BAAY,KAA+B;QACzC,kBAAM,KAAK,CAAC,CAAC;QACP,uCAAa,EAAE,mCAAa,CAAW;QAC7C,IAAI,GAAG,CAAC;QACR,IAAI,UAAU,GAAgB,EAAE,CAAC;QAEjC,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;YAClB,GAAG,GAAG,OAAO,CAAC,WAAW,GAAG,aAAa,GAAG,aAAa,GAAG,WAAW,CAAC,CAAC;QAC3E,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,GAAG,GAAG,OAAO,CAAC,sBAAsB,GAAG,aAAa,GAAG,GAAG,GAAG,aAAa,GAAG,WAAW,CAAC,CAAC;QAC5F,CAAC;QAED,EAAE,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC;YACrB,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC,UAAC,IAAY;gBACpC,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,aAAK,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;YACnD,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,UAAU,GAAG,aAAK,CAAC,GAAG,CAAC,CAAC;QAC1B,CAAC;QAED,IAAI,CAAC,KAAK,GAAG;YACX,UAAU,EAAE,UAAU;SACvB,CAAC;IACJ,CAAC;IAEM,uCAAU,GAAjB;QAAA,iBAOC;QANC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,UAAC,IAAe;YAC/C,OAAA,CAAC,oBAAC,iCAAe,GACf,GAAG,EAAG,IAAI,CAAC,YAAc,EACzB,KAAK,EAAG,IAAI,CAAC,IAAI,KAAK,CAAC,GAAG,GAAG,KAAI,CAAC,KAAK,CAAC,aAAa,CAAC,GAAG,CAAC,KAAI,CAAC,KAAK,CAAC,aAAa,GAAG,QAAQ,CAAC,GAAG,IAAI,CAAC,YAAa,EACnH,UAAU,EAAG,IAAI,CAAC,QAAU,EAC5B,YAAY,EAAG,IAAI,CAAC,YAAY,KAAK,8BAAY,CAAC,IAAM,EAAG,CAAC;QAJ9D,CAI8D,CAAC,CAAC;IACpE,CAAC;IAEM,mCAAM,GAAb;QACE,MAAM,CAAC,CACL,qBAAC,GAAG,SACA,IAAI,CAAC,UAAU,EAAI,CACjB,CACP,CAAC;IACJ,CAAC;IA5Ca,+BAAY,GAAG;QAC3B,KAAK,EAAE,YAAY;KACpB,CAAC;IA2CJ,yBAAC;AAAD,CA9CA,AA8CC,CA9CuC,KAAK,CAAC,SAAS,GA8CtD;AA9CY,0BAAkB,qBA8C9B,CAAA","file":"demo/components/PropertiesTable/PropertiesTableSet.js","sourcesContent":["import * as React from 'react';\nimport { IProperty, PropertyType, PropertiesTable } from './PropertiesTable';\nimport { IPropertiesTableSetProps } from './PropertiesTableSet.Props';\nimport { parse } from '../../utilities/parser/index';\n\nexport interface IPropertiesTableSetState {\n  properties: Array<IProperty>;\n}\n\nexport class PropertiesTableSet extends React.Component<IPropertiesTableSetProps, IPropertiesTableSetState> {\n  public static defaultProps = {\n    title: 'Properties'\n  };\n\n  constructor(props: IPropertiesTableSetProps) {\n    super(props);\n    let { componentName, componentPath } = props;\n    let src;\n    let properties: IProperty[] = [];\n\n    if (componentPath) {\n      src = require('../../../' + componentPath + componentName + '.Props.ts');\n    } else {\n      src = require('../../../components/' + componentName + '/' + componentName + '.Props.ts');\n    }\n\n    if (props.renderOnly) {\n      props.renderOnly.forEach((item: string) => {\n        properties = properties.concat(parse(src, item));\n      });\n    } else {\n      properties = parse(src);\n    }\n\n    this.state = {\n      properties: properties\n    };\n  }\n\n  public renderEach() {\n    return this.state.properties.map((item: IProperty) =>\n      (<PropertiesTable\n        key={ item.propertyName }\n        title={ item.name === ('I' + this.props.componentName) ? (this.props.componentName + ' class') : item.propertyName}\n        properties={ item.property }\n        renderAsEnum={ item.propertyType === PropertyType.enum } />));\n  }\n\n  public render() {\n    return (\n      <div>\n        { this.renderEach() }\n      </div>\n    );\n  }\n}\n"],"sourceRoot":"/src"}