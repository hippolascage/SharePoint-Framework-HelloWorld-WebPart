import * as React from 'react';
import { Async } from '../utilities/Async/Async';
import { EventGroup } from '../utilities/eventGroup/EventGroup';
import { IDisposable } from './IDisposable';
export declare class BaseComponent<P, S> extends React.Component<P, S> {
    /**
     * External consumers should override BaseComponent.onError to hook into error messages that occur from
     * exceptions thrown from within components.
     */
    static onError: ((errorMessage?: string, ex?: Error) => void);
    private __async;
    private __events;
    private __disposables;
    constructor(props?: P);
    /** If we have disposables, dispose them automatically on unmount. */
    componentWillUnmount(): void;
    /** Gets the object's class name. */
    className: string;
    /** Allows subclasses to push things to this._disposables to be auto disposed. */
    protected _disposables: IDisposable[];
    /**
     * Gets the async instance associated with the component, created on demand. The async instance gives
     * subclasses a way to execute setTimeout/setInterval async calls safely, where the callbacks
     * will be cleared/ignored automatically after unmounting. The helpers within the async object also
     * preserve the this pointer so that you don't need to "bind" the callbacks.
     */
    protected _async: Async;
    /**
     * Gets the event group instance assocaited with the component, created on demand. The event instance
     * provides on/off methods for listening to DOM (or regular javascript object) events. The event callbacks
     * will be automatically disconnected after unmounting. The helpers within the events object also
     * preserve the this reference so that you don't need to "bind" the callbacks.
     */
    protected _events: EventGroup;
}
