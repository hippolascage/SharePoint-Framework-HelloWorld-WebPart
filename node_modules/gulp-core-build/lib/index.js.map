{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["'use strict';\n\n/* tslint:disable:max-line-length */\n\nimport { GulpProxy } from './GulpProxy';\nimport { IExecutable } from './IExecutable';\nimport { IBuildConfig } from './IBuildConfig';\nimport { NukeTask } from './NukeTask';\nimport { args } from './State';\nexport { IExecutable } from './IExecutable';\nimport { initialize as initializeLogging, markTaskCreationTime, generateGulpError, setWatchMode } from './logging';\nimport { getFlagValue, setConfigDefaults } from './config';\nimport * as gulp from 'gulp';\n\nexport * from './IBuildConfig';\nexport * from './GulpTask';\nexport * from './CopyTask';\nexport * from './NukeTask';\nexport * from './logging';\n\n/* tslint:disable:variable-name */\nrequire('es6-promise').polyfill();\n/* tslint:enable:variable-name */\n\n/* tslint:disable:typedef */\nconst path = require('path');\n/* tslint:enable:typedef */\n\n/* tslint:disable:no-any */\nconst packageJSON: any = require(path.resolve(process.cwd(), 'package.json'));\n/* tslint:enable:no-any */\n\nconst _taskMap: { [key: string]: IExecutable } = {};\nconst _uniqueTasks: IExecutable[]  = [];\n\nlet _buildConfig: IBuildConfig = {\n  srcFolder: 'src',\n  distFolder: 'dist',\n  libAMDFolder: undefined,\n  libFolder: 'lib',\n  tempFolder: 'temp',\n  properties: {},\n  relogIssues: getFlagValue('relogIssues', true),\n  showToast: getFlagValue('showToast', true),\n  buildSuccessIconPath: path.resolve(__dirname, 'pass.png'),\n  buildErrorIconPath: path.resolve(__dirname, 'fail.png'),\n  verbose: getFlagValue('verbose', false),\n  production: getFlagValue('production', false),\n  args: args\n};\n\n/**\n * Merges the given build config settings into existing settings.\n *\n * @param  {IBuildConfig} The build config settings.\n */\nexport function setConfig(config: IBuildConfig): void {\n  /* tslint:disable:typedef */\n  const merge = require('lodash.merge');\n  /* tslint:enable:typedef */\n\n  _buildConfig = merge({}, _buildConfig, config);\n}\n\n/**\n * Replaces the build config.\n *\n * @param  {IBuildConfig} config\n */\nexport function replaceConfig(config: IBuildConfig): void {\n  _buildConfig = config;\n}\n\n/**\n * Gets the current config.\n *\n * @returns IBuildConfig\n */\nexport function getConfig(): IBuildConfig {\n  return _buildConfig;\n}\n\n/**\n * Defines a gulp task and maps it to a given IExecutable.\n *\n * @param  {string} taskName\n * @param  {IExecutable} task\n * @returns IExecutable\n */\nexport function task(taskName: string, task: IExecutable): IExecutable {\n  _taskMap[taskName] = task;\n\n  _trackTask(task);\n\n  return task;\n}\n\n/**\n * Defines a gulp watch and maps it to a given IExecutable.\n *\n * @param  {string} watchMatch\n * @param  {IExecutable} task\n * @returns IExecutable\n */\nexport function watch(watchMatch: string | string[], task: IExecutable): IExecutable {\n  /* tslint:disable:typedef */\n  const notifier = require('node-notifier');\n  /* tslint:enable:typedef */\n\n  _trackTask(task);\n\n  let isWatchRunning: boolean = false;\n  let shouldRerunWatch: boolean = false;\n  let lastError: boolean = undefined;\n\n  return {\n    execute: (buildConfig: IBuildConfig): Promise<void> => {\n\n      setWatchMode();\n      buildConfig.gulp.watch(watchMatch, _runWatch);\n\n      function _runWatch(): void {\n        if (isWatchRunning) {\n          shouldRerunWatch = true;\n        } else {\n          isWatchRunning = true;\n\n          _executeTask(task, buildConfig)\n            .then(() => {\n              if (buildConfig.showToast && lastError) {\n                lastError = undefined;\n\n                notifier.notify({\n                  title: 'Build succeeded',\n                  message: packageJSON.name,\n                  icon: buildConfig.buildSuccessIconPath\n                });\n              }\n              _finalizeWatch();\n            })\n            .catch((error) => {\n              if (buildConfig.showToast) {\n                if (!lastError || lastError !== error) {\n                  lastError = error;\n                  notifier.notify({\n                    title: 'Build failed',\n                    message: error,\n                    icon: buildConfig.buildErrorIconPath\n                  });\n                }\n              }\n              _finalizeWatch();\n            });\n        }\n      }\n\n      function _finalizeWatch(): void {\n        isWatchRunning = false;\n\n        if (shouldRerunWatch) {\n          shouldRerunWatch = false;\n          _runWatch();\n        }\n      }\n\n      return Promise.resolve<void>();\n    }\n  };\n}\n\n/**\n * Takes in IExecutables as arguments and returns an IExecutable that will execute them in serial.\n *\n * @param  {IExecutable[]} ...tasks\n * @returns IExecutable\n */\nexport function serial(...tasks: Array<IExecutable[] | IExecutable>): IExecutable {\n  const flatTasks: IExecutable[] = <IExecutable[]>_flatten(tasks);\n\n  for (const task of flatTasks) {\n    _trackTask(task);\n  }\n\n  return {\n    execute: (buildConfig: IBuildConfig): Promise<void> => {\n      let output: Promise<void> = Promise.resolve<void>();\n\n      for (let task of flatTasks) {\n        output = output.then(() => _executeTask(task, buildConfig));\n      }\n\n      return output;\n    }\n  };\n}\n\n/**\n * Takes in IExecutables as arguments and returns an IExecutable that will execute them in parallel.\n *\n * @param  {IExecutable[]} ...tasks\n * @returns IExecutable\n */\nexport function parallel(...tasks: Array<IExecutable[] | IExecutable>): IExecutable {\n  const flattenTasks: IExecutable[] = _flatten(tasks);\n\n  for (const task of flattenTasks) {\n    _trackTask(task);\n  }\n\n  return {\n    /* tslint:disable:no-any */\n    execute: (buildConfig: IBuildConfig): Promise<any> => {\n    /* tslint:enable:no-any */\n      return new Promise<void[]>((resolve, reject) => {\n        const promises: Promise<void>[] = [];\n        for (const task of flattenTasks) {\n          promises.push(_executeTask(task, buildConfig));\n        }\n\n        // Use promise all to make sure errors are propagated correctly\n      Promise.all<void>(promises).then(resolve, reject);\n      });\n    }\n  };\n}\n\n/**\n * Initializes the gulp tasks.\n *\n * @param  {any} gulp\n */\nexport function initialize(gulp: gulp.Gulp): void {\n  _buildConfig.rootPath = process.cwd();\n  _buildConfig.gulp = new GulpProxy(gulp);\n  _buildConfig.uniqueTasks = _uniqueTasks;\n\n  setConfigDefaults(_buildConfig);\n\n  initializeLogging(gulp, undefined, undefined);\n\n  Object.keys(_taskMap).forEach(taskName => _registerTask(gulp, taskName, _taskMap[taskName]));\n\n  markTaskCreationTime();\n}\n\n/**\n * Registers a given gulp task given a name and an IExecutable.\n *\n * @param  {any} gulp\n * @param  {string} taskName\n * @param  {IExecutable} task\n */\nfunction _registerTask(gulp: gulp.Gulp, taskName: string, task: IExecutable): void {\n  gulp.task(taskName, (cb) => {\n    _executeTask(task, _buildConfig)\n      .then(() => {\n        cb();\n      },\n      (error: Error) => {\n        cb(generateGulpError(error));\n      });\n  });\n}\n\n/**\n * Executes a given IExecutable.\n *\n * @param  {IExecutable} task\n * @param  {IBuildConfig} buildConfig\n * @returns Promise\n */\nfunction _executeTask(task: IExecutable, buildConfig: IBuildConfig): Promise<void> {\n  // Try to fallback to the default task if provided.\n  /* tslint:disable:no-any */\n  if (task && !task.execute) {\n    if ((task as any).default) {\n      task = (task as any).default;\n    }\n  }\n  /* tslint:enable:no-any */\n\n  // If the task is missing, throw a meaningful error.\n  if (!task || !task.execute) {\n    return Promise.reject(new Error(`A task was scheduled, but the task was null. This probably means the task wasn't imported correctly.`));\n  }\n\n  if (task.isEnabled === undefined || task.isEnabled()) {\n    const startTime: number[] = process.hrtime();\n\n    if (buildConfig.onTaskStart && task.name) {\n      buildConfig.onTaskStart(task.name);\n    }\n\n    const taskPromise: Promise<void> = task.execute(buildConfig)\n      .then(() => {\n        if (buildConfig.onTaskEnd && task.name) {\n          buildConfig.onTaskEnd(task.name, process.hrtime(startTime));\n        }\n      },\n      /* tslint:disable:no-any */\n      (error: any) => {\n      /* tslint:enable:no-any */\n        if (buildConfig.onTaskEnd && task.name) {\n          buildConfig.onTaskEnd(task.name, process.hrtime(startTime), error);\n        }\n\n        return Promise.reject(error);\n      });\n\n    return taskPromise;\n  }\n\n  // No-op otherwise.\n  return Promise.resolve<void>();\n}\n\nfunction _trackTask(task: IExecutable): void {\n  if (_uniqueTasks.indexOf(task) < 0) {\n    _uniqueTasks.push(task);\n  }\n}\n\n/**\n * Flattens a set of arrays into a single array.\n *\n * @param  {any} arr\n */\nfunction _flatten<T>(arr: Array<T | T[]>): T[] {\n  let output: T[] = [];\n\n  for (let toFlatten of arr) {\n    if (Array.isArray(toFlatten)) {\n      output = output.concat(toFlatten);\n    } else {\n      output.push(toFlatten);\n    }\n  }\n\n  return output;\n}\n\nexport const nuke: IExecutable = new NukeTask();\n\n// Register default nuke task.\ntask('nuke', nuke);\n"],"sourceRoot":"/source/"}