import { IExecutable } from './IExecutable';
import { IBuildConfig } from './IBuildConfig';
export { IExecutable } from './IExecutable';
import * as gulp from 'gulp';
export * from './IBuildConfig';
export * from './GulpTask';
export * from './CopyTask';
export * from './NukeTask';
export * from './logging';
/**
 * Merges the given build config settings into existing settings.
 *
 * @param  {IBuildConfig} The build config settings.
 */
export declare function setConfig(config: IBuildConfig): void;
/**
 * Replaces the build config.
 *
 * @param  {IBuildConfig} config
 */
export declare function replaceConfig(config: IBuildConfig): void;
/**
 * Gets the current config.
 *
 * @returns IBuildConfig
 */
export declare function getConfig(): IBuildConfig;
/**
 * Defines a gulp task and maps it to a given IExecutable.
 *
 * @param  {string} taskName
 * @param  {IExecutable} task
 * @returns IExecutable
 */
export declare function task(taskName: string, task: IExecutable): IExecutable;
/**
 * Defines a gulp watch and maps it to a given IExecutable.
 *
 * @param  {string} watchMatch
 * @param  {IExecutable} task
 * @returns IExecutable
 */
export declare function watch(watchMatch: string | string[], task: IExecutable): IExecutable;
/**
 * Takes in IExecutables as arguments and returns an IExecutable that will execute them in serial.
 *
 * @param  {IExecutable[]} ...tasks
 * @returns IExecutable
 */
export declare function serial(...tasks: Array<IExecutable[] | IExecutable>): IExecutable;
/**
 * Takes in IExecutables as arguments and returns an IExecutable that will execute them in parallel.
 *
 * @param  {IExecutable[]} ...tasks
 * @returns IExecutable
 */
export declare function parallel(...tasks: Array<IExecutable[] | IExecutable>): IExecutable;
/**
 * Initializes the gulp tasks.
 *
 * @param  {any} gulp
 */
export declare function initialize(gulp: gulp.Gulp): void;
export declare const nuke: IExecutable;
