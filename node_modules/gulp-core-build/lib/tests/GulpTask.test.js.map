{"version":3,"sources":["tests/GulpTask.test.ts"],"names":[],"mappings":"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","file":"tests/GulpTask.test.js","sourcesContent":["'use strict';\n/// <reference path='../../typings/main.d.ts' />\n\nimport 'es6-promise';\nimport { expect } from 'chai';\nimport { serial, parallel, GulpTask } from '../index';\nimport gutil = require('gulp-util');\nimport gulp = require('gulp');\nimport { Readable } from 'stream';\n\ninterface IConfig {\n}\n\nlet testArray: string[] = [];\n\nclass PromiseTask extends GulpTask<IConfig> {\n  public name: string = 'promise';\n\n  public taskConfig: IConfig = {\n  };\n\n  /* tslint:disable:no-any */\n  public executeTask(gulp: gulp.Gulp): Promise<any> {\n  /* tslint:enable:no-any */\n    return new Promise<void>((resolve: () => void, reject: () => void) => {\n      testArray.push(this.name);\n      resolve();\n    });\n  }\n}\n\nclass StreamTask extends GulpTask<IConfig> {\n  public name: string = 'stream';\n\n  public taskConfig: IConfig = {\n  };\n\n  /* tslint:disable:no-any */\n  public executeTask(gulp: gulp.Gulp): any {\n  /* tslint:enable:no-any */\n    const stream: Readable = new Readable({ objectMode: true });\n\n    // Add no opt function to make it compat with through\n    stream._read = () => {\n      // Do Nothing\n     };\n\n    setTimeout(() => {\n\n      let file: gutil.File = new gutil.File({\n        path: 'test.js',\n        contents: new Buffer('test')\n      });\n\n      stream.push(file);\n\n      testArray.push(this.name);\n\n      stream.emit('end');\n    }, 100);\n\n    return stream;\n  }\n}\n\nclass SyncTask extends GulpTask<IConfig> {\n  public name: string = 'sync';\n\n  public taskConfig: IConfig = {\n  };\n\n  public executeTask(gulp: gulp.Gulp): void {\n    testArray.push(this.name);\n  }\n}\n\nclass SyncWithReturnTask extends GulpTask<IConfig> {\n  public name: string = 'sync-with-return';\n\n  public taskConfig: IConfig = {\n  };\n\n  public executeTask(gulp: gulp.Gulp): void {\n    testArray.push(this.name);\n  }\n}\n\nclass CallbackTask extends GulpTask<IConfig> {\n  public name: string = 'callback';\n\n  public taskConfig: IConfig = {\n  };\n\n  public executeTask(gulp: gulp.Gulp, callback: (result?: Object) => void): void {\n    testArray.push(this.name);\n    callback();\n  }\n}\n\nlet tasks: GulpTask<IConfig>[] = [\n];\n\ntasks.push(new PromiseTask());\ntasks.push(new StreamTask());\ntasks.push(new SyncTask());\ntasks.push(new SyncWithReturnTask());\ntasks.push(new CallbackTask());\n\ndescribe('GulpTask', () => {\n  for (const task of tasks) {\n    it(`${task.name} serial`, (done) => {\n      testArray = [];\n      task.setConfig({ addToMe: testArray });\n      serial(task).execute({}).then(() => {\n        expect(testArray).to.deep.equal([task.name]);\n        done();\n      }).catch(error => done(error));\n    });\n\n    it(`${task.name} parallel`, (done) => {\n      testArray = [];\n      task.setConfig({ addToMe: testArray });\n      parallel(task).execute({}).then(() => {\n        expect(testArray).to.deep.equal([task.name]);\n        done();\n      }).catch(error => done(error));\n    });\n  }\n\n  it(`all tasks serial`, (done) => {\n    testArray = [];\n    for (const task of tasks) {\n      task.setConfig({ addToMe: testArray });\n    }\n    serial(tasks).execute({}).then(() => {\n      for (const task of tasks) {\n        expect(testArray.indexOf(task.name)).to.be.greaterThan(-1);\n      }\n      done();\n    }).catch(error => done(error));\n  });\n\n  it(`all tasks parallel`, (done) => {\n    testArray = [];\n    for (const task of tasks) {\n      task.setConfig({ addToMe: testArray });\n    }\n    parallel(tasks).execute({}).then(() => {\n      for (const task of tasks) {\n        expect(testArray.indexOf(task.name)).to.be.greaterThan(-1);\n      }\n      done();\n    }).catch(error => done(error));\n  });\n\n});\n\n"],"sourceRoot":"/source/"}