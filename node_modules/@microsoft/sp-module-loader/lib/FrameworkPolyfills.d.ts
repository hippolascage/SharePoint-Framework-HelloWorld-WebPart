/**
 * @copyright Microsoft Corporation. All rights reserved.
 *
 * @file This file contains an inventory of all of our framework's polyfills.
 * All webpart and application code can rely on these libraries being polyfilled by our framework.
 */
/**
 * ES6 Harmony Collections Polyfill
 * ES6 Harmony Collections  was added as a polyfill to provide a lightweight unobtrusive shim for
 * ES2015 collections. The implementations of Map, Set, and WeakMap provided by this polyfill
 * adhere to the ES2015 standard. Functions that abide by the ES2015 standard such as Map.get()
 * and Set.has() are guaranteed to run in sublinear time rather than the expected constant time
 * for a standard hashmap implementation. (See http://stackoverflow.com/a/31092145) The alternative
 * popular library to ES6 Harmony Collections is ES6 shim. After running some samples tests, we have
 * determined that ES6 Harmony Collections performs better on a larger set of operations than
 * the es6-shim. (Tests were run here: https://jsperf.com/es6-shim-vs-es6-collections/2 ).
 * ES6 shim is also a much larger library in size, so the decision stick with ES6 collections
 * was easy to make.
 * https://github.com/WebReflection/es6-collections
 */
import 'es6-collections';
/**
 * ES6 Promise Polyfill
 * Adds an implementation of the ES2015-Promise to the browser. The implementation is a subset
 * of rsvp.js.
 * (See: https://github.com/tildeio/rsvp.js) ES6 Promise is compliant with Promises/A+
 * (See: https://promisesaplus.com/)
 * Very useful for using Promise in the Safari/IE/Edge (already supported by Chrome/Firefox)
 * https://github.com/jakearchibald/es6-promise
 */
import 'es6-promise';
/**
 * Window.Fetch PolyFill
 * Adds an implementation of the Fetch standard to the browser.
 * Very useful for using the fetch api in the Safari/IE (already supported by Chrome/Firefox/Edge)
 * https://github.com/github/fetch
 */
import 'whatwg-fetch';
