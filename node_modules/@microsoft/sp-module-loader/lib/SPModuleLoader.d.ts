import * as Combokeys from 'combokeys';
import { IClientSideComponentManifest, IStandardLibraryModule } from '@microsoft/sp-module-interfaces';
export interface ISPModuleLoader {
    combokeys: typeof Combokeys;
    loadScript(scriptSource: string, globalExportsName?: string): Promise<any>;
    loadStandardLibraryModule(standardLibraryModule: IStandardLibraryModule): Promise<any>;
    loadManifestModules(idOrManifest: string | IClientSideComponentManifest): Promise<any>;
    importManifests(manifests: IClientSideComponentManifest[], overwriteExisting: boolean): void;
    forceLoadDebugManifests(): Promise<void>;
    getManifests(): IClientSideComponentManifest[];
    loadCss(url: string): void;
}
export interface IPartialSpPageContextInfo {
    currentUICultureName: string;
}
export interface IApplicationPreloadedData {
    clientSideApplicationId: string;
    clientSideApplicationManifest: IClientSideComponentManifest;
    manifests: IClientSideComponentManifest[];
    spPageContextInfo: IPartialSpPageContextInfo;
}
export declare function ensureDebugAllowed(ask?: boolean): boolean;
/**
 * The global module loader for SP client-side applications and webparts.
 *
 * This is an API that lives in a global variable on the window, similar to how systemJS works.
 *
 * @public
 */
export default class SPModuleLoader implements ISPModuleLoader {
    private static _instance;
    private static _headElement;
    static instance: SPModuleLoader;
    /**
     * @public
     *
     * Combokeys reference. Placed here so any other component can use it without having to bundle it again.
     */
    combokeys: typeof Combokeys;
    private _developerTools;
    constructor();
    initialize(preloadedData: IApplicationPreloadedData): Promise<void>;
    /**
     * Get the component manifest by id.
     *
     * @param id - GUID id of the component.
     */
    getManifestById(id: string): any;
    /**
     * This is called by the page scripts to start loading the framework. Do not call it from your own code.
     */
    start(preloadedData: IApplicationPreloadedData): void;
    /**
     * Given a URL, load a script.
     *
     * @param {scriptSource} The script URL.
     * @param {globalExportsName} (optional) If the script isn't an AMD mdoule and loads a global member on the page,
     *                  specify the global member's name.
     * @returns A promse containing the loaded module.
     */
    loadScript(scriptSource: string, globalExportsName?: string): Promise<any>;
    /**
     * Load a standard library manifest.
     *
     * @param {standardLibraryModule} The standard library module object.
     * @returns A promse containing the loaded module.
     */
    loadStandardLibraryModule(standardLibraryModule: IStandardLibraryModule, moduleName?: string): Promise<any>;
    /**
     * Load a manifest, or resolve a manifest ID and load it.
     *
     * @param {idOrManifest} The ID of a manifest, the manifest payload, or an array of IDs. In the case of an array
     *                        of IDs, all of the IDs are considered equally valid, so pick the first one that's resolvable
     *                        to a manifest.
     * @returns A promse containing the loaded module.
     */
    loadManifestModules(idOrManifest: string | IClientSideComponentManifest): Promise<any>;
    /**
     * Loads additional manifests into the manifest store, updating existing manifests.
     *
     * @param {manifests} The manifests to load into the store.
     */
    importManifests(manifests: IClientSideComponentManifest[], overwriteExisting?: boolean): void;
    /**
     * If debug manfiests haven't already been loaded, force them to load without prompting the user.
     *
     * @returns A promise that is fulfilled when the manifests are loaded.
     */
    forceLoadDebugManifests(): Promise<void>;
    /**
     * Get all registered manifests.
     *
     * @returns All registered manifests.
     */
    getManifests(): IClientSideComponentManifest[];
    /**
     * Inserts a <link ... /> tag for a stylesheet.
     *
     * @param {url} - The CSS file URL.
     */
    loadCss(url: string): void;
    private _loadDebugManifests(noPrompt?, noCache?, alternativeManifestsFile?);
    private _internalLoadManifestModules(referenceOrManifest);
    private _toggleDeveloperTools();
    /**
     * This function contains some magic to load special packages (React, React-DOM, and Flux) while we're serving
     *  from a local workbench without bunding any of them.
     */
    private _npmLoadPackage(packageName);
}
