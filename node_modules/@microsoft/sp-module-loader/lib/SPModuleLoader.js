/**
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * @file SPModuleLoader.ts
 */
"use strict";
require('set-webpack-public-path!');
var Combokeys = require('combokeys');
var sp_module_interfaces_1 = require('@microsoft/sp-module-interfaces');
var SystemJsWrapper_1 = require('./SystemJsWrapper');
var ManifestStore_1 = require('./ManifestStore');
var DebugManifestProvider_1 = require('./DebugManifestProvider');
var _allowDebug = undefined;
function ensureDebugAllowed(ask) {
    if (ask === void 0) { ask = true; }
    if (!ask || _allowDebug !== undefined) {
        return !!_allowDebug;
    }
    else {
        // Inform the user that they might be loading debug manifests
        _allowDebug = confirm('WARNING: This page is requesting to load unsafe scripts, which could potentially harm ' +
            'your computer! Do not proceed unless you trust the developer and understand the risks.\n\n' +
            'If you are unsure, click "Cancel."');
        return _allowDebug;
    }
}
exports.ensureDebugAllowed = ensureDebugAllowed;
/**
 * The global module loader for SP client-side applications and webparts.
 *
 * This is an API that lives in a global variable on the window, similar to how systemJS works.
 *
 * @public
 */
var SPModuleLoader = (function () {
    function SPModuleLoader() {
        var _this = this;
        /**
         * @public
         *
         * Combokeys reference. Placed here so any other component can use it without having to bundle it again.
         */
        this.combokeys = Combokeys;
        // Watching for hotkeys on the whole document.
        var fullWindowCombokeys = new Combokeys(document.documentElement);
        // Bind the debugger to "ctrl+shift+`"
        fullWindowCombokeys.bind('ctrl+shift+`', function () { return _this._toggleDeveloperTools(); });
        // Easter egg - Konami code. Obfuscate, so it's not obvious from looking at the minimized source.
        var keyMap = require('combokeys/helpers/special-keys-map');
        fullWindowCombokeys.bind([keyMap[38], keyMap[38], keyMap[40], keyMap[40], keyMap[37],
            keyMap[39], keyMap[37], keyMap[39], 'b', 'a', keyMap[13]].join(' '), function () {
            var audio = new Audio(require('file?name=[sha512:hash:base32:7]_[hash:16].[ext]!./Windows_95_Startup.mp3'));
            audio.volume = 0.25;
            audio.play();
        });
        if (!SPModuleLoader._headElement) {
            SPModuleLoader._headElement = document.getElementsByTagName('head')[0];
        }
    }
    Object.defineProperty(SPModuleLoader, "instance", {
        get: function () {
            if (!this._instance) {
                this._instance = new SPModuleLoader();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    SPModuleLoader.prototype.initialize = function (preloadedData) {
        var _this = this;
        return new Promise(function (resolve) {
            ManifestStore_1.default.instance.populateManifests(preloadedData);
            _this._loadDebugManifests().then(function () {
                if (preloadedData && preloadedData.spPageContextInfo) {
                    SystemJsWrapper_1.default.instance.currentLocale = preloadedData.spPageContextInfo.currentUICultureName;
                }
                resolve();
            });
        });
    };
    /**
     * Get the component manifest by id.
     *
     * @param id - GUID id of the component.
     */
    /* tslint:disable:no-any */
    SPModuleLoader.prototype.getManifestById = function (id) {
        /* tslint:enable:no-any */
        return ManifestStore_1.default.instance.getManifestById(id);
    };
    /**
     * This is called by the page scripts to start loading the framework. Do not call it from your own code.
     */
    SPModuleLoader.prototype.start = function (preloadedData) {
        var _this = this;
        this.initialize(preloadedData).then(function () {
            if (preloadedData) {
                var applicationManifestId = preloadedData.clientSideApplicationId
                    ? preloadedData.clientSideApplicationId
                    : (preloadedData.clientSideApplicationManifest
                        ? preloadedData.clientSideApplicationManifest.id
                        : undefined);
                var manifest_1 = ManifestStore_1.default.instance.getManifestById(applicationManifestId);
                if (manifest_1) {
                    var platformModule = sp_module_interfaces_1.standardLibraryModules['@microsoft/sp-client-preview'];
                    var loadingComplete_1 = false;
                    Promise.all([
                        _this.loadStandardLibraryModule(platformModule),
                        SystemJsWrapper_1.default.instance.loadManifestModules(manifest_1.id, manifest_1.loaderConfig)
                    ])
                        .then(function (modules) {
                        /* tslint:enable:no-any */
                        loadingComplete_1 = true;
                        /* tslint:disable:no-any */
                        var platform = modules[0];
                        /* tslint:enable:no-any */
                        var application = modules[1];
                        if (!platform || !application) {
                            throw new Error(("@microsoft/sp-client-preview or " + manifest_1.loaderConfig.entryModuleId + " failed ") +
                                'to load.');
                        }
                        else {
                            try {
                                platform._spShell.start(application, preloadedData);
                            }
                            catch (e) {
                                console.error("Error loading application. Error: " + e);
                                throw e;
                            }
                        }
                        // @todo VSO #210443: preload WebPart manifests
                    }).catch(function (e) {
                        if (!loadingComplete_1) {
                            console.error(manifest_1.loaderConfig.entryModuleId + " failed to load. Error: " + e);
                        }
                        throw e;
                    });
                }
                else {
                    throw new Error('Invalid manifest.');
                }
            }
            else {
                throw new Error('Invalid preloaded data.');
            }
        });
    };
    /**
     * Given a URL, load a script.
     *
     * @param {scriptSource} The script URL.
     * @param {globalExportsName} (optional) If the script isn't an AMD mdoule and loads a global member on the page,
     *                  specify the global member's name.
     * @returns A promse containing the loaded module.
     */
    /* tslint:disable:no-any */
    SPModuleLoader.prototype.loadScript = function (scriptSource, globalExportsName) {
        /* tslint:enable:no-any */
        return SystemJsWrapper_1.default.instance.loadScript(scriptSource, globalExportsName);
    };
    /**
     * Load a standard library manifest.
     *
     * @param {standardLibraryModule} The standard library module object.
     * @returns A promse containing the loaded module.
     */
    /* tslint:disable:no-any */
    SPModuleLoader.prototype.loadStandardLibraryModule = function (standardLibraryModule, moduleName) {
        /* tslint:enable:no-any */
        if (NPM_BUILD) {
            // Special case for NPM modules to resolve React, React-DOM, and Flux
            /* tslint:disable:no-any */
            var resultPromise = this._npmLoadPackage(moduleName);
            /* tslint:enable:no-any */
            if (resultPromise) {
                return resultPromise;
            }
        }
        var references = [standardLibraryModule.bundleReference].concat(standardLibraryModule.aliases || []);
        return this._internalLoadManifestModules(references);
    };
    /**
     * Load a manifest, or resolve a manifest ID and load it.
     *
     * @param {idOrManifest} The ID of a manifest, the manifest payload, or an array of IDs. In the case of an array
     *                        of IDs, all of the IDs are considered equally valid, so pick the first one that's resolvable
     *                        to a manifest.
     * @returns A promse containing the loaded module.
     */
    /* tslint:disable:no-any */
    SPModuleLoader.prototype.loadManifestModules = function (idOrManifest) {
        /* tslint:enable:no-any */
        if (typeof idOrManifest === 'string') {
            return this._internalLoadManifestModules([{
                    id: idOrManifest
                }]);
        }
        else {
            var manifest = idOrManifest;
            return this._internalLoadManifestModules(manifest);
        }
    };
    /**
     * Loads additional manifests into the manifest store, updating existing manifests.
     *
     * @param {manifests} The manifests to load into the store.
     */
    SPModuleLoader.prototype.importManifests = function (manifests, overwriteExisting) {
        if (overwriteExisting === void 0) { overwriteExisting = false; }
        ManifestStore_1.default.instance.importManifests(manifests, overwriteExisting);
    };
    /**
     * If debug manfiests haven't already been loaded, force them to load without prompting the user.
     *
     * @returns A promise that is fulfilled when the manifests are loaded.
     */
    SPModuleLoader.prototype.forceLoadDebugManifests = function () {
        return this._loadDebugManifests(true, true, 'http://localhost:4321/temp/manifests.js');
    };
    /**
     * Get all registered manifests.
     *
     * @returns All registered manifests.
     */
    SPModuleLoader.prototype.getManifests = function () {
        return ManifestStore_1.default.instance.getAllManifests();
    };
    /**
     * Inserts a <link ... /> tag for a stylesheet.
     *
     * @param {url} - The CSS file URL.
     */
    SPModuleLoader.prototype.loadCss = function (url) {
        var linkTag = document.createElement('link');
        linkTag.rel = 'stylesheet';
        linkTag.type = 'text/css';
        linkTag.href = url;
        SPModuleLoader._headElement.appendChild(linkTag);
    };
    SPModuleLoader.prototype._loadDebugManifests = function (noPrompt, noCache, alternativeManifestsFile) {
        if (noPrompt === void 0) { noPrompt = false; }
        if (noCache === void 0) { noCache = false; }
        if (noPrompt) {
            _allowDebug = true;
        }
        return DebugManifestProvider_1.default.instance.getDebugManifests(noCache, alternativeManifestsFile).then(function (debugManifests) {
            ManifestStore_1.default.instance.populateDebugManifests(debugManifests);
            ensureDebugAllowed(debugManifests && Object.keys(debugManifests).length > 0);
        });
    };
    SPModuleLoader.prototype._internalLoadManifestModules = function (referenceOrManifest) {
        /* tslint:enable:no-any */
        var references = referenceOrManifest;
        var manifest;
        var entryName;
        if (references.length) {
            // We have an array of manifests, so find the first one that matches
            for (var _i = 0, references_1 = references; _i < references_1.length; _i++) {
                var reference = references_1[_i];
                manifest = ManifestStore_1.default.instance.getManifestById(reference.id);
                if (manifest) {
                    entryName = reference.entryName;
                    break;
                }
            }
        }
        else {
            manifest = referenceOrManifest;
        }
        if (manifest) {
            return SystemJsWrapper_1.default.instance.loadManifestModules(manifest.id, manifest.loaderConfig, entryName);
        }
        else {
            throw new Error("Manifest \"" + JSON.stringify(referenceOrManifest) + "\" not found.");
        }
    };
    SPModuleLoader.prototype._toggleDeveloperTools = function () {
        var _this = this;
        if (this._developerTools) {
            this._developerTools.toggleDeveloperTools();
        }
        else {
            var loadDeveloperTools_1 = function () {
                require.ensure(['./DeveloperTools/DeveloperTools'], function (require) {
                    var developerToolsClass = require('./DeveloperTools/DeveloperTools').default;
                    _this._developerTools = developerToolsClass.instance;
                    _this._developerTools.initialize();
                    _this._developerTools.showHideDeveloperTools(true);
                }, 'developer-tools');
            };
            // If we're building an NPM module, we need to make sure React, Flux, and React-DOM aren't bundled. Instead,
            // we'll load them from node_modules.
            if (NPM_BUILD) {
                // Ensure the fake react, flux, and react-dom modules are included in this chunk
                require('react');
                require('flux');
                require('react-dom');
                /* tslint:disable:no-any */
                var reactPromise = this._npmLoadPackage('react');
                var fluxPromise = this._npmLoadPackage('flux');
                var reactDomPromise = this._npmLoadPackage('react-dom');
                /* tslint:enable:no-any */
                Promise.all([reactPromise, reactDomPromise, fluxPromise])
                    .then(function (results) {
                    /* tslint:disable:no-any */
                    var react = results[0];
                    var reactDom = results[1];
                    var flux = results[2];
                    /* tslint:enable:no-any */
                    // Inject react, react-dom, and flux into the module cache
                    require.cache[require.resolveWeak('react')].exports = react;
                    require.cache[require.resolveWeak('react-dom')].exports = reactDom;
                    require.cache[require.resolveWeak('flux')].exports = flux;
                    loadDeveloperTools_1();
                });
            }
            else {
                loadDeveloperTools_1();
            }
        }
    };
    /**
     * This function contains some magic to load special packages (React, React-DOM, and Flux) while we're serving
     *  from a local workbench without bunding any of them.
     */
    /* tslint:disable:no-any */
    SPModuleLoader.prototype._npmLoadPackage = function (packageName) {
        /* tslint:enable:no-any */
        if (NPM_BUILD) {
            var url = require('url');
            var relativeReactUrl = '__RELATIVE_REACT_PATH__';
            var relativeFluxUrl = '__RELATIVE_FLUX_PATH__';
            if (relativeReactUrl === '__RELATIVE_' + 'REACT_PATH__' ||
                relativeFluxUrl === '__RELATIVE_' + 'FLUX_PATH__') {
                // If the package hasn't been installed (i.e. - it's NPMX linked), don't try to load from incorrect paths
                return undefined;
            }
            var reactUrl = url.resolve(__webpack_public_path__, relativeReactUrl);
            var fluxUrl = url.resolve(__webpack_public_path__, relativeFluxUrl);
            // Stick these on the SPModuleLoader object
            /* tslint:disable:no-any */
            var staticContainer = SPModuleLoader;
            /* tslint:enable:no-any */
            if (!staticContainer._reactPromise) {
                staticContainer._reactPromise = this.loadScript(reactUrl);
            }
            if (!staticContainer._fluxPromise) {
                staticContainer._fluxPromise = this.loadScript(fluxUrl);
            }
            switch (packageName) {
                case 'react':
                    return staticContainer._reactPromise;
                case 'react-dom':
                    /* tslint:disable:no-any */
                    return staticContainer._reactPromise.then(function (react) { return react.__SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED; });
                /* tslint:enable:no-any */
                case 'flux':
                    return staticContainer._fluxPromise;
                default:
                    break;
            }
        }
        return undefined;
    };
    return SPModuleLoader;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SPModuleLoader;

//# sourceMappingURL=SPModuleLoader.js.map
