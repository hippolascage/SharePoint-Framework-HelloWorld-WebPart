{"version":3,"sources":["importableSpModuleLoader.ts"],"names":[],"mappings":";AAIA,2BAA2B;AAC3B,IAAI,wBAAwB,GAAqB,MAAc,CAAC,cAAiC,CAAC;AAClG,0BAA0B;AAE1B,8GAA8G;AAC9G,EAAE,CAAC,CAAC,CAAC,wBAAwB,CAAC,CAAC,CAAC;IAC9B,wBAAwB,GAAG;QACzB,SAAS,EAAE,SAAS;QAEpB,UAAU,EAAE,cAAqB,OAAA,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC,EAAtD,CAAsD;QAEvF,yBAAyB,EAAE,cAAqB,OAAA,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC,EAAtD,CAAsD;QAEtG,mBAAmB,EAAE,cAAqB,OAAA,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC,EAAtD,CAAsD;QAEhG,eAAe,EAAE,cAAc,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC,CAAC,CAAC;QAE9E,uBAAuB,EAAE,cAAuB,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC,CAAC,CAAC;QAE/F,YAAY,EAAE,cAAsC,OAAA,EAAE,EAAF,CAAE;QAEtD,OAAO,EAAE,cAAc,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC,CAAC,CAAC;KACvE,CAAC;AACJ,CAAC;AAEY,iBAAS,GAAqB,wBAAwB,GAAG,wBAAwB,CAAC,SAAS,GAAG,SAAS,CAAC;AAErH;kBAAe,wBAAwB,CAAC","file":"importableSpModuleLoader.js","sourcesContent":["import * as Combokeys from 'combokeys';\r\nimport { ISPModuleLoader } from './SPModuleLoader';\r\nimport { IClientSideComponentManifest } from '@microsoft/sp-module-interfaces';\r\n\r\n/* tslint:disable:no-any */\r\nlet importableSpModuleLoader: ISPModuleLoader = (window as any).spModuleLoader as ISPModuleLoader;\r\n/* tslint:enable:no-any */\r\n\r\n// Return a dummy module loader if the module loader isn't present on the page. This occurs during unit tests.\r\nif (!importableSpModuleLoader) {\r\n  importableSpModuleLoader = {\r\n    combokeys: undefined,\r\n\r\n    loadScript: (): Promise<void> => Promise.reject(new Error('Module loader not present')),\r\n\r\n    loadStandardLibraryModule: (): Promise<void> => Promise.reject(new Error('Module loader not present')),\r\n\r\n    loadManifestModules: (): Promise<void> => Promise.reject(new Error('Module loader not present')),\r\n\r\n    importManifests: (): void => { throw new Error('Module loader not present'); },\r\n\r\n    forceLoadDebugManifests: (): Promise<void> => { throw new Error('Module loader not present'); },\r\n\r\n    getManifests: (): IClientSideComponentManifest[] => [],\r\n\r\n    loadCss: (): void => { throw new Error('Module loader not present'); }\r\n  };\r\n}\r\n\r\nexport const combokeys: typeof Combokeys = importableSpModuleLoader ? importableSpModuleLoader.combokeys : undefined;\r\n\r\nexport default importableSpModuleLoader;\r\n"],"sourceRoot":"/src"}