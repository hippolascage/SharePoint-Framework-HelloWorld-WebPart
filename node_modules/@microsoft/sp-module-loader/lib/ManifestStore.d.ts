/**
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * @file ManifestStore.ts
 */
import { IClientSideComponentManifest } from '@microsoft/sp-module-interfaces';
import { IApplicationPreloadedData } from './SPModuleLoader';
/**
 * This is a subset of the V1 manifest, included here for the sake of typesafety when extracting a V2 manifest
 * from the "properties" property of the V1 manifest.
 */
export interface IPartialV1Manifest {
    id: string;
    properties: {
        manifest: IClientSideComponentManifest | string;
    };
}
export interface IManifestStoreEntry {
    /**
     * The manifest's ID.
     */
    id: string;
    /**
     * The manifest V2 payload.
     */
    manifest: IClientSideComponentManifest;
    /**
     * A debug manifest V2 payload, if one has been provided.
     */
    debugManifest?: IClientSideComponentManifest;
}
/**
 * This class maintains a cache of the manifests on the current page.
 */
export default class ManifestStore {
    private static _instance;
    static instance: ManifestStore;
    private _manifests;
    /**
     * Populate the manifest store with the preloaded manifests.
     *
     * @param {preloadedData} The preloaded data
     */
    populateManifests(preloadedData: IApplicationPreloadedData): void;
    /**
     * Populate the manifest store with debug manifests.
     *
     * @param {manifests} A dictionary of debug manifests.
     */
    populateDebugManifests(manifests: {
        [id: string]: IClientSideComponentManifest;
    }): void;
    /**
     * Return a manifest by its ID. Only return a debug manifest is debug is allowed. If a manifest isn't found by
     * the provided ID, return undefined.
     *
     * @param {id} The ID of the manifest to retrieve.
     * @param {allowDebug} If true, return a debug manifest if one exists.
     * @returns The retrieved manifest, or undefined if one could not be found.
     */
    getManifestById(id: string): IClientSideComponentManifest;
    /**
     * Get all registered manifest objects.
     *
     * @returns The registered manifest objects.
     */
    getAllManifests(): IClientSideComponentManifest[];
    /**
     * Returns a map of manifest IDs to manfiests.
     *
     * @return {{ [key: string]: IManifestStoreEntry }}: A map of manifest IDs to manfiests.
     */
    getManifestMap(): {
        [key: string]: IManifestStoreEntry;
    };
    /**
     * Loads additional manifests into the manifest store, updating existing manifests.
     *
     * @param {manifests} The manifests to load into the store.
     */
    importManifests(manifests: (IPartialV1Manifest | IClientSideComponentManifest)[], overwriteExisting: boolean): void;
    private _getManifestFromStoreEntry(manifestEntry);
    private _addManifest(manifest, overwriteExisting);
}
