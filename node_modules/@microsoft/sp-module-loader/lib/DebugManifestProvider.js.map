{"version":3,"sources":["DebugManifestProvider.ts"],"names":[],"mappings":"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","file":"DebugManifestProvider.js","sourcesContent":["/**\r\n * @Copyright (c) Microsoft Corporation.  All rights reserved.\r\n *\r\n * @file DebugManifestProvider.ts\r\n */\r\n\r\nimport { IClientSideComponentManifest } from '@microsoft/sp-module-interfaces';\r\n\r\nimport SystemJsWrapper from './SystemJsWrapper';\r\nimport { ensureDebugAllowed } from './SPModuleLoader';\r\n\r\nconst debugManifestsQueryParameterName: string = 'debugManifests';\r\nconst debugManifestsFileQueryParameterName: string = 'debugManifestsFile';\r\nconst sessionStorageKey: string = 'sp-module-loader_debugManifests';\r\n\r\nexport interface IManifestMap {\r\n  [id: string]: IClientSideComponentManifest;\r\n}\r\n\r\n/**\r\n * This class assists with parsing debug manifests from the URL fragment or from sessionStorage.\r\n *\r\n * --- NEW APPROACH ---\r\n * We allow developers to specify a set of manifests in the URL to override the manifests we get from the server.\r\n * The format is: <url-to-page>.aspx#debugManifestsFile=<path to manfiests init script>\r\n *\r\n * When a manifest file is specified in the URL, we cache its contents in sessionStorage so the developer doesn't need\r\n * to supply it on every request. This class also reads the \"reset=1\" query parameter to clear the cached debug\r\n * manifests from sessionStorage.\r\n *\r\n * --- OLD APPROACH ---\r\n * We allow developers to specify a set of manifests in the URL to override the manifests we get from the server.\r\n * The format is: <url-to-page>.aspx#debugManifests=<URL-encoded JSON object>\r\n * And the format of the JSON object is:\r\n *  {\r\n *    \"manifest-id-1\": { <manifest object> },\r\n *    \"manifest-id-2\": { <manifest object> }\r\n *  }\r\n *\r\n * When a manifest is specified in the URL, we cache it in sessionStorage so the developer doesn't need to\r\n * supply it on every request. This class also reads the \"reset=1\" query parameter to clear the cached debug\r\n * manifests from sessionStorage.\r\n *\r\n * This is a temporary implementation until we update the build tools to support a more developer-friendly approach.\r\n * VSO#201640.\r\n */\r\nexport default class DebugManifestProvider {\r\n  private static _instance: DebugManifestProvider;\r\n\r\n  public static get instance(): DebugManifestProvider {\r\n    if (!this._instance) {\r\n      this._instance = new DebugManifestProvider();\r\n    }\r\n\r\n    return this._instance;\r\n  }\r\n\r\n  public getDebugManifests(noCache: boolean = false, alternativeManifestsFile?: string): Promise<IManifestMap> {\r\n    return new Promise<IManifestMap>(\r\n      (resolve: (value: IManifestMap) => void): void => {\r\n        const localDebugManifests: IManifestMap = this._parseManifestsFromFragementQueryParameter();\r\n\r\n        if (window.location.search.match(/\\breset\\b/)) { // Reset the debug manifests\r\n          try {\r\n            window.sessionStorage.removeItem(sessionStorageKey);\r\n          } catch (e) {\r\n            /* tslint:disable:no-console */\r\n            console.debug(`Error clearing session storage. Error: ${e}`);\r\n            /* tslint:enable:no-console */\r\n          }\r\n\r\n          resolve({});\r\n        } else {\r\n          let existingManifests: IManifestMap = {};\r\n          try {\r\n            existingManifests = JSON.parse(window.sessionStorage.getItem(sessionStorageKey)) || {};\r\n          } catch (e) {\r\n            /* tslint:disable:no-console */\r\n            console.debug(`Error querying session storage. Error: ${e}`);\r\n            /* tslint:enable:no-console */\r\n          }\r\n\r\n          Object.keys(existingManifests).forEach((existingManifestKey: string) => {\r\n            if (!localDebugManifests[existingManifestKey]) {\r\n              localDebugManifests[existingManifestKey] = existingManifests[existingManifestKey];\r\n            }\r\n          });\r\n\r\n          const manifestsFile: string = this._parseManifestsFileFromFragementQueryParameter(false) ||\r\n                                        alternativeManifestsFile;\r\n          if (manifestsFile && ensureDebugAllowed()) {\r\n            SystemJsWrapper.instance.loadScript(manifestsFile, 'debugManifests')\r\n              .then((manifestsScript: { getManifests: () => IClientSideComponentManifest[] }) => {\r\n                this._parseManifestsFileFromFragementQueryParameter(true); // Clear the parameter only if file loaded\r\n\r\n                const manifests: IClientSideComponentManifest[] = manifestsScript.getManifests();\r\n                manifests.forEach((manifest: IClientSideComponentManifest) => {\r\n                  localDebugManifests[manifest.id] = manifest;\r\n                });\r\n\r\n                if (!noCache) {\r\n                  this._trySetSessionStorageManifests(localDebugManifests);\r\n                }\r\n\r\n                resolve(localDebugManifests);\r\n              }, (error: Error) => {\r\n                alert(`Error loading debug manifest script. (${error.message ? error.message : error}) \\n\\n` +\r\n                      'Ensure loading unsafe scripts is allowed.');\r\n              });\r\n          } else {\r\n            if (!noCache) {\r\n              this._trySetSessionStorageManifests(localDebugManifests);\r\n            }\r\n\r\n            resolve(localDebugManifests);\r\n          }\r\n        }\r\n      });\r\n  }\r\n\r\n  private _trySetSessionStorageManifests(localDebugManifests: IManifestMap): void {\r\n    try {\r\n      window.sessionStorage.setItem(sessionStorageKey, JSON.stringify(localDebugManifests));\r\n    } catch (e) {\r\n      /* tslint:disable:no-console */\r\n      console.debug(`Error setting session storage. Error: ${e}`);\r\n      /* tslint:enable:no-console */\r\n    }\r\n  }\r\n\r\n  private _parseManifestsFileFromFragementQueryParameter(clearParamter: boolean): string {\r\n    return this._getAndClearFragmentQueryParameter(debugManifestsFileQueryParameterName, clearParamter);\r\n  }\r\n\r\n  private _parseManifestsFromFragementQueryParameter(): IManifestMap {\r\n    const debugManifestsString: string = this._getAndClearFragmentQueryParameter(debugManifestsQueryParameterName);\r\n    if (debugManifestsString) {\r\n      try {\r\n        return JSON.parse(debugManifestsString);\r\n      } catch (e) {\r\n        /* tslint:disable:no-console */\r\n        console.debug(`Error parsing manifests query parameter. Error: ${e}`);\r\n        /* tslint:enable:no-console */\r\n      }\r\n    } else {\r\n      return {};\r\n    }\r\n  }\r\n\r\n  private _getAndClearFragmentQueryParameter(parameter: string, clearParamter: boolean = true): string {\r\n    let result: string = undefined;\r\n\r\n    if (window.location.hash) {\r\n      const fragment: string = window.location.hash.indexOf('#') === 0\r\n        ? window.location.hash.substr(1)\r\n        : window.location.hash;\r\n      const fragmentQueryParameters: { [parameterId: string]: string } = this._parseQueryParameters(fragment);\r\n\r\n      if (fragmentQueryParameters &&\r\n          fragmentQueryParameters[parameter]) {\r\n        result = decodeURIComponent(fragmentQueryParameters[parameter]);\r\n\r\n        if (clearParamter) {\r\n          // Re-generate the fragment without the parameter.\r\n          const newFragment: string = fragment.replace(`${parameter}=${fragmentQueryParameters[parameter]}`, '');\r\n          if (newFragment !== '') {\r\n            window.history.replaceState('',\r\n                                        document.title,\r\n                                        `${window.location.pathname}${window.location.search}#${newFragment}`);\r\n          } else {\r\n            window.history.replaceState('',\r\n                                        document.title,\r\n                                        `${window.location.pathname}${window.location.search}`);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Parse a string as querystring parameters. VSO:201753 to replace with standard library.\r\n   */\r\n  private _parseQueryParameters(queryParameterString: string): { [parameterId: string]: string } {\r\n    if (queryParameterString) {\r\n      if (queryParameterString.indexOf('?') === 0) {\r\n        queryParameterString = queryParameterString.substr(1);\r\n      }\r\n\r\n      const queryParameters: string[] = queryParameterString.split('&');\r\n      const result: { [parameterId: string]: string } = {};\r\n\r\n      queryParameters.forEach((queryParameter: string) => {\r\n        const equalsIndex: number = queryParameter.indexOf('=');\r\n        if (equalsIndex === -1) {\r\n          result[queryParameter] = '';\r\n        } else {\r\n          result[queryParameter.substr(0, equalsIndex)] = queryParameter.substr(equalsIndex + 1);\r\n        }\r\n      });\r\n\r\n      return result;\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"/src"}