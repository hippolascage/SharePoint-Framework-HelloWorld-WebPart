/**
 * @file PerformanceDisplayStore.ts
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var BaseStore_1 = require('./BaseStore');
var ManifestManagerStore_1 = require('./ManifestManagerStore');
var PerformanceDisplayStore = (function (_super) {
    __extends(PerformanceDisplayStore, _super);
    function PerformanceDisplayStore() {
        _super.call(this);
        this._getReadableWebpartName = this._getReadableWebpartName.bind(this);
    }
    Object.defineProperty(PerformanceDisplayStore, "instance", {
        get: function () {
            if (!this._instance) {
                this._instance = new PerformanceDisplayStore();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PerformanceDisplayStore.prototype, "eupl", {
        get: function () {
            return this._eupl;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PerformanceDisplayStore.prototype, "startTime", {
        get: function () {
            return this._startTime;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PerformanceDisplayStore.prototype, "errorMessage", {
        get: function () {
            return this._errorMessage;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PerformanceDisplayStore.prototype, "performanceData", {
        /**
         * This function parses through performance data and puts together some performance data (IPerfItem) objects for the
         * component to display. If errors are encountered, the _errorMessage variable is set and the function returns an
         * empty array. The component checks for the presence of an error message to determine if something went wrong.
         */
        get: function () {
            // Reset error message so don't think there's an error if there isn't one
            this._errorMessage = undefined;
            var perfItems = [];
            var data;
            /* tslint:disable:no-any */
            data = window.g_spPagesPerformancedata;
            /* tslint:enable:no-any */
            if (!data) {
                this._errorMessage = 'There was a problem accessing the performance data.';
                return [];
            }
            var euplBreakdown;
            try {
                euplBreakdown = JSON.parse(data.EUPLBreakdown);
            }
            catch (error) {
                this._errorMessage = 'An error was caught when parsing the percieved latency data.';
                /* tslint:disable:no-console */
                console.debug(error);
                /* tslint:enable:no-console */
                return [];
            }
            var apiCallsData;
            try {
                apiCallsData = JSON.parse(data.APICalls);
            }
            catch (error) {
                this._errorMessage = 'An error was caught when parsing the API data.';
                /* tslint:disable:no-console */
                console.debug(error);
                /* tslint:enable:no-console */
                return [];
            }
            perfItems.push({
                id: 'w3cResponseEnd',
                name: 'Server Response',
                startVal: data.W3cNavigationStart,
                duration: euplBreakdown.w3cResponseEnd,
                breakdown: undefined
            });
            perfItems.push({
                id: 'appStart',
                name: 'Application Initialization',
                startVal: data.W3cResponseEnd,
                duration: euplBreakdown.appStart,
                breakdown: undefined
            });
            perfItems.push({
                id: 'PageComponent',
                name: 'Page Render',
                startVal: euplBreakdown['PageComponent.start'],
                duration: data.Control3RenderTime -
                    (euplBreakdown['PageComponent.start'] - data.W3cNavigationStart),
                breakdown: undefined
            });
            perfItems.push({
                id: 'LeftNavComponent',
                name: 'Left Nav Render',
                startVal: euplBreakdown['LeftNavComponent.start'],
                duration: data.Control1RenderTime -
                    (euplBreakdown['LeftNavComponent.start'] - data.W3cNavigationStart),
                breakdown: undefined
            });
            perfItems.push({
                id: 'CanvasComponent',
                name: 'Canvas Render',
                startVal: euplBreakdown['CanvasComponent.start'],
                duration: data.Control2RenderTime -
                    (euplBreakdown['CanvasComponent.start'] - data.W3cNavigationStart),
                breakdown: undefined
            });
            /**
             * Check if any web parts made API calls, and store them in a data structure per web part
             */
            var apiCalls = {};
            var endVals = {};
            for (var _i = 0, apiCallsData_1 = apiCallsData; _i < apiCallsData_1.length; _i++) {
                var apiCall = apiCallsData_1[_i];
                if (apiCall.name.indexOf('WebPart') > -1) {
                    if (!apiCalls[apiCall.name]) {
                        apiCalls[apiCall.name] = [];
                        endVals[apiCall.name] = 0;
                    }
                    apiCalls[apiCall.name].push({
                        startVal: Date.parse(apiCall.startTime),
                        duration: +apiCall.duration
                    });
                    // Find the latest ending API call for total duration calculation later on
                    endVals[apiCall.name] = Math.max(Date.parse(apiCall.startTime) + +apiCall.duration, endVals[apiCall.name]);
                }
            }
            /**
             * Get loading breakdown for each web part. Web parts have their loading times broken down further, so an
             * IWebPartBreakdown object is put together for each one.
             */
            for (var webPart = data.Control4Id, i = 4; webPart; i++, webPart = data['Control' + i + 'Id']) {
                var renderDuration = data[("Control" + i + "RenderTime")] -
                    (euplBreakdown[webPart + '.start'] - data.W3cNavigationStart);
                // Get breakdown of loading data for web parts
                var wpBreakdown = {
                    dataFetch: apiCalls[webPart] || [],
                    init: {
                        startVal: euplBreakdown[webPart + '.start'],
                        duration: euplBreakdown[webPart + '.init']
                    },
                    modulesLoaded: {
                        startVal: euplBreakdown[webPart + '.start'],
                        duration: euplBreakdown[webPart + '.modulesLoaded']
                    },
                    render: {
                        startVal: euplBreakdown[webPart + '.start'],
                        duration: renderDuration
                    }
                };
                perfItems.push({
                    id: webPart,
                    name: "" + this._getReadableWebpartName(webPart.replace('Load.', '')),
                    startVal: euplBreakdown[webPart + '.start'],
                    duration: Math.max(renderDuration, (endVals[webPart] || 0) - euplBreakdown[webPart + '.start']),
                    breakdown: wpBreakdown
                });
            }
            this._startTime = data.W3cNavigationStart;
            this._eupl = data.EUPL;
            return perfItems;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @todo 232311: this scenario works for now but may not in the future.
     * Looks up the web part designated by id and returns the default title as a readable
     * name to display for the graph.
     */
    PerformanceDisplayStore.prototype._getReadableWebpartName = function (id) {
        var manifests = ManifestManagerStore_1.default.registeredManifests;
        /**
         * idString is in the format of WebPart.manifestID.instanceID
         * Example: WebPart.eb95c819-ab8f-4689-bd03-0c2d65d47b1f.6fe07da6-45c7-46a2-8f06-77c323e8fc79
         * This block of code strips out the 'WebPart' string, then splits the rest up by the '.' to give an array of the
         * manifest and instance IDs. Then the manifest ID is looked up in the registered manifests, and from that
         * returned entry, the title.default field gives a readable name for the web part.
         */
        var idString = [];
        idString.push(id.replace('WebPart.', ''));
        idString = idString[0].split('.');
        var manifest;
        /**
         * If there is a failure in getting a readable name for the manifest (error getting manifest data, change)
         * in manifest format, etc) just log the error and display the generic name 'web part' so data can still
         * be shown.
         */
        var webPartName;
        try {
            manifest = JSON.parse(JSON.stringify(manifests[idString[0]])).manifest;
            webPartName = manifest.preconfiguredEntries[0].title.default;
        }
        catch (error) {
            this._errorMessage = 'There was an error while getting the web part name from the manifests.';
            console.log(error);
            webPartName = 'Web Part';
        }
        return webPartName;
    };
    return PerformanceDisplayStore;
}(BaseStore_1.default));
exports.PerformanceDisplayStore = PerformanceDisplayStore;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = PerformanceDisplayStore.instance;
/* tslint:enable:export-name */ 

//# sourceMappingURL=PerformanceDisplayStore.js.map
