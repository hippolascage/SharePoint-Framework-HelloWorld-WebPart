/**
 * @file BaseStore.ts
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 */
"use strict";
var AppDispatcher_1 = require('../Dispatcher/AppDispatcher');
/**
 * Contains common implementation for store in flux data flow model
 */
var BaseStore = (function () {
    /**
     * Initializes a new instance of BaseStore
     */
    function BaseStore() {
        this._isDisposed = false;
        this._listeners = [];
        this._isDisposed = false;
    }
    /** Adds an action callback for everyone action. */
    BaseStore.prototype.addProcessActionCallback = function (callback) {
        var _this = this;
        this.processActionCallback = callback.bind(this);
        this._dispatchToken = AppDispatcher_1.default.instance.register(function (action) { return _this.onActionSent(action); });
    };
    Object.defineProperty(BaseStore.prototype, "dispatchToken", {
        get: function () {
            return this._dispatchToken;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Add a listener to this store
     * @param the listener callback
     */
    BaseStore.prototype.addListener = function (listener) {
        if (!this._isDisposed) {
            this._listeners.push(listener);
        }
    };
    /**
     * Removes a listener from the store
     * @param the listener callback
     */
    BaseStore.prototype.removeListener = function (listener) {
        if (!this._isDisposed) {
            var listenerIdx = this._listeners.indexOf(listener);
            if (listenerIdx > -1) {
                this._listeners.splice(listenerIdx, 1);
            }
        }
    };
    /**
     * Removes all the registered listeners
     */
    BaseStore.prototype.removeAllListeners = function () {
        this._listeners = [];
    };
    /**
     * Removes a listener from the store
     * @param the listener callback
     *
     * @return the count of listeners tied to this store
     */
    BaseStore.prototype.count = function () {
        return !this._isDisposed ? this._listeners.length : 0;
    };
    /**
     * Invokes all listeners tied to this store
     */
    BaseStore.prototype.emitChange = function () {
        if (!this._isDisposed) {
            this._listeners.forEach(function (listener) { return listener(); });
        }
    };
    /**
     * Disposes all listeners
     */
    BaseStore.prototype.dispose = function () {
        if (!this._isDisposed) {
            this._listeners.splice(0);
            this._listeners = undefined;
            this._isDisposed = true;
        }
    };
    BaseStore.prototype.onActionSent = function (action) {
        if (this.processActionCallback) {
            this.tryProcessAction(this.processActionCallback, action);
        }
    };
    BaseStore.prototype.tryProcessAction = function (processActionCallbackFunction, action) {
        try {
            processActionCallbackFunction(action);
        }
        catch (error) {
            /* @todo: log. VSO#206341 */
            // Rethrow the error so the ActionCreator can take action to handle error / notify user
            throw error;
        }
    };
    return BaseStore;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = BaseStore;

//# sourceMappingURL=BaseStore.js.map
