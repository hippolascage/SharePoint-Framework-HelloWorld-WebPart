{"version":3,"sources":["DeveloperTools/Stores/PerformanceDisplayStore.ts"],"names":[],"mappings":"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","file":"DeveloperTools/Stores/PerformanceDisplayStore.js","sourcesContent":["/**\r\n * @file PerformanceDisplayStore.ts\r\n * @Copyright (c) Microsoft Corporation.  All rights reserved.\r\n */\r\n\r\nimport BaseStore from './BaseStore';\r\n\r\nimport { IManifestStoreEntry } from '../../ManifestStore';\r\nimport ManifestManagerStore from './ManifestManagerStore';\r\nimport {\r\n  IClientSideWebPartManifest\r\n} from '../../../../sp-module-interfaces/src/manifestSchemas/IClientSideWebPartManifest';\r\n\r\n/**\r\n * Used for getting perfomance data from the RumOne data\r\n */\r\nexport interface IRumOnePerf {\r\n  /**\r\n   * JSON-formatted string containing data about API calls made\r\n   * Gets parsed and formatted into IAPICall interface declared below\r\n   */\r\n  APICalls: string;\r\n  /**\r\n   * Value in miliseconds corresponding to the start of the page navigation\r\n   */\r\n  W3cNavigationStart: number;\r\n  /**\r\n   * Value in miliseconds corresponding to the end of the server response\r\n   */\r\n  W3cResponseEnd: number;\r\n  /**\r\n   * JSON-formatted string containing data about the user percieved loading time\r\n   */\r\n  EUPLBreakdown: string;\r\n  /**\r\n   * Value in miliseconds corresponding to the length of the user percieved loading time\r\n   */\r\n  EUPL: number;\r\n  /**\r\n   * A string ID of the first control on the page\r\n   * Example: LeftNavComponent\r\n   */\r\n  Control1Id: string;\r\n  /**\r\n   * Value corresponding to the render time of the control in miliseconds\r\n   */\r\n  Control1RenderTime: number;\r\n  Control2Id: string;\r\n  Control2RenderTime: number;\r\n  Control3Id: string;\r\n  Control3RenderTime: number;\r\n  Control4Id: string;\r\n  Control4RenderTime: number;\r\n}\r\n\r\n/**\r\n * Interface to represent API calls obtained from the RumOne data\r\n */\r\nexport interface IAPICall {\r\n  /**\r\n   * String value that gives the duration in miliseconds of the API call\r\n   */\r\n  duration: string;\r\n  /**\r\n   * String that gives an ISO date value for the start time of the API call\r\n   * Example: '2016-08-05T19:09:20.192Z'\r\n   */\r\n  startTime: string;\r\n  /**\r\n   * String that gives an ISO date value for the end time of the API call\r\n   */\r\n  endTime: string;\r\n  /**\r\n   * String that gives the name of the entity that made the API call\r\n   * Example: httpClient\r\n   */\r\n  name: string;\r\n}\r\n\r\n/**\r\n * Interface to represent each performance data point\r\n */\r\nexport interface IPerfItem {\r\n  /**\r\n   * String ID that comes from the value given in the JSON data\r\n   */\r\n  id: string;\r\n  /**\r\n   *  Readable name to be displayed in the table to users\r\n   */\r\n  name: string;\r\n  /**\r\n   *  Start time in miliseconds of the event\r\n   */\r\n  startVal: number;\r\n  /**\r\n   *  Duration of the event in miliseconds.\r\n   */\r\n  duration: number;\r\n  /**\r\n   *  Loading time breakdown for web parts. Will be undefined for items that aren't web parts.\r\n   */\r\n  breakdown: IWebPartBreakdown;\r\n}\r\n\r\n/**\r\n * Breakdown of web part loading time\r\n */\r\nexport interface IWebPartBreakdown {\r\n  /**\r\n   * Array of API call response times\r\n   */\r\n  dataFetch: IPerfTiming [];\r\n  /**\r\n   * Start and duration of the web part initialization time\r\n   */\r\n  init: IPerfTiming;\r\n  /**\r\n   * Start and duration of module loading time\r\n   */\r\n  modulesLoaded: IPerfTiming;\r\n  /**\r\n   * Start and duration of the render time of the web part\r\n   */\r\n  render: IPerfTiming;\r\n}\r\n\r\n/**\r\n * Used for performance data points to indicate when the loading started and how long it lasted.\r\n */\r\nexport interface IPerfTiming {\r\n  /**\r\n   * Time in miliseconds that the event started\r\n   */\r\n  startVal: number;\r\n  /**\r\n   * Time in miliseconds the the event lasted\r\n   */\r\n  duration: number;\r\n}\r\n\r\n/**\r\n * User Percieved Loading breakdown data\r\n */\r\nexport interface IEUPLBreakdown {\r\n  /**\r\n   * Time in miliseconds that the application took to initialize\r\n   */\r\n  appStart: number;\r\n  /**\r\n   * Time in miliseconds it took for the server to respond from the W3cNavigationStart event\r\n   */\r\n  w3cResponseEnd: number;\r\n}\r\n\r\nexport class PerformanceDisplayStore extends BaseStore {\r\n\r\n  private static _instance: PerformanceDisplayStore;\r\n\r\n  public static get instance(): PerformanceDisplayStore {\r\n    if (!this._instance) {\r\n      this._instance = new PerformanceDisplayStore();\r\n    }\r\n\r\n    return this._instance;\r\n  }\r\n\r\n  /**\r\n   * Percieved loading time of the page in miliseconds\r\n   */\r\n  private _eupl: number;\r\n\r\n  public get eupl(): number {\r\n    return this._eupl;\r\n  }\r\n\r\n  /**\r\n   * Time in miliseconds when the page started loading, from the start of page navigation\r\n   */\r\n  private _startTime: number;\r\n\r\n  public get startTime(): number {\r\n    return this._startTime;\r\n  }\r\n\r\n  /**\r\n   * If an error is encountered while parsing data, it will be put here so the component can access it\r\n   */\r\n  private _errorMessage: string;\r\n\r\n  public get errorMessage(): string {\r\n    return this._errorMessage;\r\n  }\r\n\r\n  /**\r\n   * This function parses through performance data and puts together some performance data (IPerfItem) objects for the\r\n   * component to display. If errors are encountered, the _errorMessage variable is set and the function returns an\r\n   * empty array. The component checks for the presence of an error message to determine if something went wrong.\r\n   */\r\n  public get performanceData(): IPerfItem[] {\r\n    // Reset error message so don't think there's an error if there isn't one\r\n    this._errorMessage = undefined;\r\n\r\n    const perfItems: IPerfItem[] = [];\r\n    let data: IRumOnePerf;\r\n    /* tslint:disable:no-any */\r\n    data = (window as any).g_spPagesPerformancedata as IRumOnePerf;\r\n    /* tslint:enable:no-any */\r\n    if (!data) {\r\n      this._errorMessage = 'There was a problem accessing the performance data.';\r\n      return [];\r\n    }\r\n\r\n    let euplBreakdown: IEUPLBreakdown;\r\n    try {\r\n      euplBreakdown = JSON.parse(data.EUPLBreakdown);\r\n    } catch (error) {\r\n      this._errorMessage = 'An error was caught when parsing the percieved latency data.';\r\n      /* tslint:disable:no-console */\r\n      console.debug(error);\r\n      /* tslint:enable:no-console */\r\n      return [];\r\n    }\r\n\r\n    let apiCallsData: IAPICall[];\r\n    try {\r\n      apiCallsData = JSON.parse(data.APICalls);\r\n    } catch (error) {\r\n      this._errorMessage = 'An error was caught when parsing the API data.';\r\n      /* tslint:disable:no-console */\r\n      console.debug(error);\r\n      /* tslint:enable:no-console */\r\n      return [];\r\n    }\r\n\r\n    perfItems.push({\r\n      id: 'w3cResponseEnd',\r\n      name: 'Server Response',\r\n      startVal: data.W3cNavigationStart,\r\n      duration: euplBreakdown.w3cResponseEnd,\r\n      breakdown: undefined\r\n    });\r\n\r\n    perfItems.push({\r\n      id: 'appStart',\r\n      name: 'Application Initialization',\r\n      startVal: data.W3cResponseEnd,\r\n      duration: euplBreakdown.appStart,\r\n      breakdown: undefined\r\n    });\r\n\r\n    perfItems.push({\r\n      id: 'PageComponent',\r\n      name: 'Page Render',\r\n      startVal: euplBreakdown['PageComponent.start'],\r\n      duration: data.Control3RenderTime -\r\n        (euplBreakdown['PageComponent.start'] - data.W3cNavigationStart),\r\n      breakdown: undefined\r\n    });\r\n\r\n    perfItems.push({\r\n      id: 'LeftNavComponent',\r\n      name: 'Left Nav Render',\r\n      startVal: euplBreakdown['LeftNavComponent.start'],\r\n      duration: data.Control1RenderTime -\r\n        (euplBreakdown['LeftNavComponent.start'] - data.W3cNavigationStart),\r\n      breakdown: undefined\r\n    });\r\n\r\n    perfItems.push({\r\n      id: 'CanvasComponent',\r\n      name: 'Canvas Render',\r\n      startVal: euplBreakdown['CanvasComponent.start'],\r\n      duration: data.Control2RenderTime -\r\n        (euplBreakdown['CanvasComponent.start'] - data.W3cNavigationStart),\r\n      breakdown: undefined\r\n    });\r\n\r\n    /**\r\n     * Check if any web parts made API calls, and store them in a data structure per web part\r\n     */\r\n    const apiCalls: { [name: string]: { startVal: number, duration: number }[] } = {};\r\n    const endVals: { [name: string]: number } = {};\r\n    for (const apiCall of apiCallsData) {\r\n      if (apiCall.name.indexOf('WebPart') > -1) {\r\n\r\n        if (!apiCalls[apiCall.name]) {\r\n          apiCalls[apiCall.name] = [];\r\n          endVals[apiCall.name] = 0;\r\n        }\r\n        apiCalls[apiCall.name].push({\r\n          startVal: Date.parse(apiCall.startTime),\r\n          duration: +apiCall.duration\r\n        });\r\n        // Find the latest ending API call for total duration calculation later on\r\n        endVals[apiCall.name] = Math.max(\r\n          Date.parse(apiCall.startTime) + +apiCall.duration,\r\n         endVals[apiCall.name]\r\n        );\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Get loading breakdown for each web part. Web parts have their loading times broken down further, so an\r\n     * IWebPartBreakdown object is put together for each one.\r\n     */\r\n    for (let webPart: string = data.Control4Id, i: number = 4; webPart; i++, webPart = data['Control' + i + 'Id']) {\r\n\r\n      const renderDuration: number = data[`Control${ i }RenderTime`] -\r\n        (euplBreakdown[webPart + '.start'] - data.W3cNavigationStart);\r\n\r\n      // Get breakdown of loading data for web parts\r\n      const wpBreakdown: IWebPartBreakdown = {\r\n        dataFetch: apiCalls[webPart] || [],\r\n        init: {\r\n          startVal: euplBreakdown[webPart + '.start'],\r\n          duration: euplBreakdown[webPart + '.init']\r\n        },\r\n        modulesLoaded: {\r\n          startVal: euplBreakdown[webPart + '.start'],\r\n          duration: euplBreakdown[webPart + '.modulesLoaded']\r\n        },\r\n        render: {\r\n          startVal: euplBreakdown[webPart + '.start'],\r\n          duration: renderDuration\r\n        }\r\n      };\r\n\r\n      perfItems.push({\r\n        id: webPart,\r\n        name: `${ this._getReadableWebpartName(webPart.replace('Load.', '')) }`,\r\n        startVal: euplBreakdown[webPart + '.start'],\r\n        duration: Math.max(\r\n          renderDuration,\r\n          (endVals[webPart] || 0) - euplBreakdown[webPart + '.start']\r\n        ),\r\n        breakdown: wpBreakdown\r\n      });\r\n\r\n    }\r\n\r\n    this._startTime = data.W3cNavigationStart;\r\n    this._eupl = data.EUPL;\r\n\r\n    return perfItems;\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n    this._getReadableWebpartName = this._getReadableWebpartName.bind(this);\r\n  }\r\n\r\n  /**\r\n   * @todo 232311: this scenario works for now but may not in the future.\r\n   * Looks up the web part designated by id and returns the default title as a readable\r\n   * name to display for the graph.\r\n   */\r\n  private _getReadableWebpartName(id: string): string {\r\n    const manifests: { [id: string]: IManifestStoreEntry } = ManifestManagerStore.registeredManifests;\r\n\r\n    /**\r\n     * idString is in the format of WebPart.manifestID.instanceID\r\n     * Example: WebPart.eb95c819-ab8f-4689-bd03-0c2d65d47b1f.6fe07da6-45c7-46a2-8f06-77c323e8fc79\r\n     * This block of code strips out the 'WebPart' string, then splits the rest up by the '.' to give an array of the\r\n     * manifest and instance IDs. Then the manifest ID is looked up in the registered manifests, and from that\r\n     * returned entry, the title.default field gives a readable name for the web part.\r\n     */\r\n    let idString: string[] = [];\r\n    idString.push(id.replace('WebPart.', ''));\r\n    idString = idString[0].split('.');\r\n\r\n    let manifest: IClientSideWebPartManifest<{}>;\r\n\r\n    /**\r\n     * If there is a failure in getting a readable name for the manifest (error getting manifest data, change)\r\n     * in manifest format, etc) just log the error and display the generic name 'web part' so data can still\r\n     * be shown.\r\n     */\r\n    let webPartName: string;\r\n    try {\r\n      manifest = JSON.parse(JSON.stringify(manifests[idString[0]])).manifest;\r\n      webPartName = manifest.preconfiguredEntries[0].title.default;\r\n    } catch (error) {\r\n      this._errorMessage = 'There was an error while getting the web part name from the manifests.';\r\n      console.log(error);\r\n      webPartName = 'Web Part';\r\n    }\r\n\r\n    return webPartName;\r\n  }\r\n}\r\n\r\n// instantiate the store so it can start listening to dispatch events\r\n/* tslint:disable:export-name */\r\nexport default PerformanceDisplayStore.instance as PerformanceDisplayStore;\r\n/* tslint:enable:export-name */"],"sourceRoot":"/src"}