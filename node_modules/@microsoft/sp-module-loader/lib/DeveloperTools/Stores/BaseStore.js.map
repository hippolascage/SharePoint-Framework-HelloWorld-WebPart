{"version":3,"sources":["DeveloperTools/Stores/BaseStore.ts"],"names":[],"mappings":"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","file":"DeveloperTools/Stores/BaseStore.js","sourcesContent":["/**\r\n * @file BaseStore.ts\r\n * @Copyright (c) Microsoft Corporation.  All rights reserved.\r\n */\r\n\r\nimport IAction from '../Actions/IAction';\r\nimport AppDispatcher from '../Dispatcher/AppDispatcher';\r\n\r\n/**\r\n * Contains common implementation for store in flux data flow model\r\n */\r\nexport default class BaseStore {\r\n  private _listeners: Array<() => void>;\r\n  private _isDisposed: boolean = false;\r\n  private processActionCallback: (action: IAction) => void;\r\n  private _dispatchToken: string;\r\n\r\n  /**\r\n   * Initializes a new instance of BaseStore\r\n   */\r\n  constructor() {\r\n    this._listeners = [];\r\n    this._isDisposed = false;\r\n  }\r\n\r\n  /** Adds an action callback for everyone action. */\r\n  public addProcessActionCallback(callback: ((action: IAction) => void)): void {\r\n    this.processActionCallback = callback.bind(this);\r\n    this._dispatchToken = AppDispatcher.instance.register((action: IAction) => this.onActionSent(action));\r\n  }\r\n\r\n  public get dispatchToken(): string {\r\n      return this._dispatchToken;\r\n  }\r\n\r\n  /**\r\n   * Add a listener to this store\r\n   * @param the listener callback\r\n   */\r\n  public addListener(listener: () => void): void {\r\n    if (!this._isDisposed) {\r\n      this._listeners.push(listener);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes a listener from the store\r\n   * @param the listener callback\r\n   */\r\n  public removeListener(listener: () => void): void {\r\n    if (!this._isDisposed) {\r\n      const listenerIdx: number = this._listeners.indexOf(listener);\r\n      if (listenerIdx > -1) {\r\n        this._listeners.splice(listenerIdx, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes all the registered listeners\r\n   */\r\n\r\n  public removeAllListeners(): void {\r\n    this._listeners = [];\r\n  }\r\n\r\n  /**\r\n   * Removes a listener from the store\r\n   * @param the listener callback\r\n   *\r\n   * @return the count of listeners tied to this store\r\n   */\r\n  public count(): number {\r\n    return !this._isDisposed ? this._listeners.length : 0;\r\n  }\r\n\r\n  /**\r\n   * Invokes all listeners tied to this store\r\n   */\r\n  public emitChange(): void {\r\n    if (!this._isDisposed) {\r\n      this._listeners.forEach((listener: () => void) => listener());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Disposes all listeners\r\n   */\r\n  public dispose(): void {\r\n    if (!this._isDisposed) {\r\n      this._listeners.splice(0);\r\n      this._listeners = undefined;\r\n      this._isDisposed = true;\r\n    }\r\n  }\r\n\r\n  private onActionSent(action: IAction): void {\r\n    if (this.processActionCallback) {\r\n      this.tryProcessAction(this.processActionCallback, action);\r\n    }\r\n  }\r\n\r\n  private tryProcessAction(processActionCallbackFunction: (action: IAction) => void, action: IAction): void {\r\n    try {\r\n      processActionCallbackFunction(action);\r\n    } catch (error) {\r\n      /* @todo: log. VSO#206341 */\r\n\r\n      // Rethrow the error so the ActionCreator can take action to handle error / notify user\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"/src"}