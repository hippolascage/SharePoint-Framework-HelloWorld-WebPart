/**
 * @file ManifestManagerStore.ts
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var BaseStore_1 = require('./BaseStore');
var ManifestStore_1 = require('./../../ManifestStore');
var SelectManifestAction_1 = require('./../Actions/SelectManifestAction');
var ManifestManagerStore = (function (_super) {
    __extends(ManifestManagerStore, _super);
    function ManifestManagerStore() {
        _super.call(this);
        this.addProcessActionCallback(this.processAction);
    }
    Object.defineProperty(ManifestManagerStore, "instance", {
        get: function () {
            if (!this._instance) {
                this._instance = new ManifestManagerStore();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ManifestManagerStore.prototype, "registeredManifests", {
        get: function () {
            return ManifestStore_1.default.instance.getManifestMap();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ManifestManagerStore.prototype, "selectedManifestId", {
        get: function () {
            return this._selectedManifestId;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Processes the action fired
     */
    ManifestManagerStore.prototype.processAction = function (action) {
        if (action instanceof SelectManifestAction_1.default) {
            this._selectedManifestId = action.selectedManifestId;
            this.emitChange();
        }
    };
    return ManifestManagerStore;
}(BaseStore_1.default));
exports.ManifestManagerStore = ManifestManagerStore;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ManifestManagerStore.instance;
/* tslint:enable:export-name */ 

//# sourceMappingURL=ManifestManagerStore.js.map
