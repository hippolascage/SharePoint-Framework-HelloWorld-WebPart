{"version":3,"sources":["DeveloperTools/Components/DeveloperModules/ManifestManager/ManifestList/ManifestList.tsx"],"names":[],"mappings":"AAAA;;;GAGG;;;;;;;AAEH,IAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAI/B,iCAA6B,qCAAqC,CAAC,CAAA;AAEnE,yCAAmB,4BAA4B,CAAC,CAAA;AAQhD;IAA0C,gCAAyC;IAAnF;QAA0C,8BAAyC;IAkBnF,CAAC;IAjBQ,6BAAM,GAAb;QAAA,iBAgBC;QAfC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YAC5E,MAAM,CAAE,qBAAC,GAAG,gCAEE,CAAC;QACjB,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAE,qBAAC,EAAE,IAAC,SAAS,EAAE,kCAAM,CAAC,SAAU,GAC7B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,UAAC,EAAU;gBAChD,OAAA,qBAAC,EAAE,IAAC,GAAG,EAAE,EAAG,GACV,oBAAC,0BAAgB,GAAC,QAAQ,EAAE,KAAI,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE,CAAE,EACnC,QAAQ,EAAE,EAAE,KAAK,KAAI,CAAC,KAAK,CAAC,kBAAmB,EAC/C,YAAY,EAAE,cAAY,OAAA,KAAI,CAAC,KAAK,CAAC,+BAA+B,CAAC,EAAE,CAAC,EAA9C,CAA+C,EAAG,CAC3F;YAJL,CAIK,CACL,CACC,CAAC;QAChB,CAAC;IACH,CAAC;IACH,mBAAC;AAAD,CAlBA,AAkBC,CAlByC,KAAK,CAAC,SAAS,GAkBxD;AAlBD;8BAkBC,CAAA","file":"DeveloperTools/Components/DeveloperModules/ManifestManager/ManifestList/ManifestList.js","sourcesContent":["/**\r\n * @file ManifestList.tsx\r\n * @Copyright (c) Microsoft Corporation.  All rights reserved.\r\n */\r\n\r\nimport * as React from 'react';\r\n\r\nimport { IManifestStoreEntry } from './../../../../../ManifestStore';\r\n\r\nimport ManifestListItem from './ManifestListItem/ManifestListItem';\r\n\r\nimport styles from './ManifestList.module.scss';\r\n\r\nexport interface IManifestListProps {\r\n  manifests: { [id: string]: IManifestStoreEntry };\r\n  selectedManifestId: string;\r\n  manifestSelectionChangedHandler: (selectedId: string) => void;\r\n}\r\n\r\nexport default class ManifestList extends React.Component<IManifestListProps, void> {\r\n  public render(): React.ReactElement<IManifestListProps> {\r\n    if (!this.props.manifests || Object.keys(this.props.manifests).length === 0) {\r\n      return  <div>\r\n                No manifests loaded.\r\n              </div>;\r\n    } else {\r\n      return  <ul className={styles.container}>\r\n                {Object.keys(this.props.manifests).map((id: string): React.ReactElement<{}> =>\r\n                  <li key={id}>\r\n                    <ManifestListItem manifest={this.props.manifests[id]}\r\n                                      selected={id === this.props.selectedManifestId}\r\n                                      clickHandler={(): void => this.props.manifestSelectionChangedHandler(id)} />\r\n                  </li>\r\n                )}\r\n              </ul>;\r\n    }\r\n  }\r\n}"],"sourceRoot":"/src"}