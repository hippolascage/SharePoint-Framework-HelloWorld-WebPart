/**
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * @file PerformanceHeader.tsx
 * Sub-component for PerformanceDisplay. This component gives an overview of the performance data
 * that is detailed in the graph.
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var React = require('react');
var PerformanceHeader_module_scss_1 = require('./PerformanceHeader.module.scss');
var PerformanceLegend_1 = require('./PerformanceLegend/PerformanceLegend');
var PerformanceHeader = (function (_super) {
    __extends(PerformanceHeader, _super);
    function PerformanceHeader() {
        _super.call(this);
        this._serverResponse = 0;
        this._appStart = 0;
        this._renderPageDuration = 0;
        this._renderWebparts = 0;
        this._hasWebParts = false;
        this._getPerfTimings = this._getPerfTimings.bind(this);
    }
    PerformanceHeader.prototype.render = function () {
        this._getPerfTimings();
        // The legend has information about breakdown of webpart loading data
        // We only need to show it if there is web part data on the graph
        var legend;
        if (this._hasWebParts) {
            legend = React.createElement(PerformanceLegend_1.default, null);
        }
        var tableStyle = [PerformanceHeader_module_scss_1.default.headerTable, PerformanceHeader_module_scss_1.default.msThemeLighter].join(' ');
        // @todo (VSO bug 236724): localize these strings
        return (React.createElement("div", null, React.createElement("p", {className: PerformanceHeader_module_scss_1.default.hint}, "Note: After adding or removing a web part, refresh the page to see updated performance data."), React.createElement("table", {className: tableStyle}, React.createElement("thead", null, React.createElement("tr", null, React.createElement("th", {className: PerformanceHeader_module_scss_1.default.headerTableRows}, "Server Response"), React.createElement("th", {className: PerformanceHeader_module_scss_1.default.headerTableRows}, "App Load"), React.createElement("th", {className: PerformanceHeader_module_scss_1.default.headerTableRows}, "Render Page"), React.createElement("th", {className: PerformanceHeader_module_scss_1.default.headerTableRows}, "Render Web Parts"), React.createElement("th", {className: PerformanceHeader_module_scss_1.default.headerTableRows}, "Total"))), React.createElement("tbody", null, React.createElement("tr", null, React.createElement("td", {className: PerformanceHeader_module_scss_1.default.headerTableRows}, this._serverResponse, " ms"), React.createElement("td", {className: PerformanceHeader_module_scss_1.default.headerTableRows}, this._appStart, " ms"), React.createElement("td", {className: PerformanceHeader_module_scss_1.default.headerTableRows}, this._renderPageDuration, " ms"), React.createElement("td", {className: PerformanceHeader_module_scss_1.default.headerTableRows}, this._hasWebParts ? this._renderWebparts + " ms" : "N/A"), React.createElement("td", {className: PerformanceHeader_module_scss_1.default.headerTableRows}, this.props.overallDuration, " ms")))), React.createElement("div", null, legend)));
    };
    /**
     * Calculate overall load times for categories:
     * Server Response
     * App Load
     * Page Render
     * Web Parts Render
     * Total
     */
    PerformanceHeader.prototype._getPerfTimings = function () {
        var renderPageStart = Infinity;
        var renderPageEnd = 0;
        var webPartStart = Infinity;
        var webPartEnd = 0;
        this._hasWebParts = false;
        for (var _i = 0, _a = this.props.perfItems; _i < _a.length; _i++) {
            var item = _a[_i];
            if (item.id === 'w3cResponseEnd') {
                this._serverResponse = item.duration;
            }
            else if (item.id === 'appStart') {
                this._appStart = item.duration;
            }
            else if ((item.id).indexOf('Component') > -1) {
                // Find the earliest start time and latest end time of all components to get overall duration
                if (item.startVal < renderPageStart) {
                    renderPageStart = item.startVal;
                }
                if ((item.duration + item.startVal) > (renderPageEnd)) {
                    renderPageEnd = item.duration + item.startVal;
                }
            }
            else if ((item.id).indexOf('WebPart') > -1) {
                this._hasWebParts = true;
                // Find the earliest start time and latest end time of all web parts to get overall duration
                if (item.startVal < webPartStart) {
                    webPartStart = item.startVal;
                }
                if ((item.duration + item.startVal) > (webPartEnd)) {
                    webPartEnd = item.duration + item.startVal;
                }
            }
        }
        this._renderPageDuration = renderPageEnd - renderPageStart;
        this._renderWebparts = webPartEnd - webPartStart;
    };
    return PerformanceHeader;
}(React.Component));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = PerformanceHeader;

//# sourceMappingURL=PerformanceHeader.js.map
