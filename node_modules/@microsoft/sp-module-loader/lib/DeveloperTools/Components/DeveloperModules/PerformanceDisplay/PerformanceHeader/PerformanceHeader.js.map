{"version":3,"sources":["DeveloperTools/Components/DeveloperModules/PerformanceDisplay/PerformanceHeader/PerformanceHeader.tsx"],"names":[],"mappings":"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","file":"DeveloperTools/Components/DeveloperModules/PerformanceDisplay/PerformanceHeader/PerformanceHeader.js","sourcesContent":["/**\r\n * @Copyright (c) Microsoft Corporation.  All rights reserved.\r\n *\r\n * @file PerformanceHeader.tsx\r\n * Sub-component for PerformanceDisplay. This component gives an overview of the performance data\r\n * that is detailed in the graph.\r\n */\r\n\r\nimport * as React from 'react';\r\n\r\nimport styles from './PerformanceHeader.module.scss';\r\nimport { IPerfItem } from '../../../../Stores/PerformanceDisplayStore';\r\nimport PerformanceLegend from './PerformanceLegend/PerformanceLegend';\r\n\r\nexport interface IPerformanceHeaderProps {\r\n  perfItems: IPerfItem[];\r\n  overallDuration: number;\r\n}\r\n\r\nexport default class PerformanceHeader extends React.Component<IPerformanceHeaderProps, void> {\r\n  private _serverResponse: number = 0;\r\n  private _appStart: number = 0;\r\n  private _renderPageDuration: number = 0;\r\n  private _renderWebparts: number = 0;\r\n  private _hasWebParts: boolean = false;\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this._getPerfTimings = this._getPerfTimings.bind(this);\r\n  }\r\n\r\n  public render(): React.ReactElement<IPerformanceHeaderProps> {\r\n    this._getPerfTimings();\r\n\r\n    // The legend has information about breakdown of webpart loading data\r\n    // We only need to show it if there is web part data on the graph\r\n    let legend: React.ReactElement<{}>;\r\n    if (this._hasWebParts) {\r\n      legend = <PerformanceLegend />;\r\n    }\r\n\r\n    const tableStyle: string = [styles.headerTable, styles.msThemeLighter].join(' ');\r\n\r\n    // @todo (VSO bug 236724): localize these strings\r\n    return (\r\n      <div>\r\n        <p className={ styles.hint }>\r\n          Note: After adding or removing a web part, refresh the page to see updated performance data.\r\n        </p>\r\n        <table className={ tableStyle }>\r\n          <thead>\r\n            <tr>\r\n              <th className={ styles.headerTableRows }>Server Response</th>\r\n              <th className={ styles.headerTableRows }>App Load</th>\r\n              <th className={ styles.headerTableRows }>Render Page</th>\r\n              <th className={ styles.headerTableRows }>Render Web Parts</th>\r\n              <th className={ styles.headerTableRows }>Total</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td className={ styles.headerTableRows }>{ this._serverResponse } ms</td>\r\n              <td className={ styles.headerTableRows }>{ this._appStart } ms</td>\r\n              <td className={ styles.headerTableRows }>{ this._renderPageDuration } ms</td>\r\n              <td className={ styles.headerTableRows }>{ this._hasWebParts ? `${this._renderWebparts } ms` : `N/A`}</td>\r\n              <td className={ styles.headerTableRows }>{ this.props.overallDuration } ms</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n        <div>\r\n          { legend }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Calculate overall load times for categories:\r\n   * Server Response\r\n   * App Load\r\n   * Page Render\r\n   * Web Parts Render\r\n   * Total\r\n   */\r\n  private _getPerfTimings(): void {\r\n    let renderPageStart: number = Infinity;\r\n    let renderPageEnd: number = 0;\r\n    let webPartStart: number = Infinity;\r\n    let webPartEnd: number = 0;\r\n    this._hasWebParts = false;\r\n\r\n    for (const item of this.props.perfItems) {\r\n      if (item.id === 'w3cResponseEnd') {\r\n        this._serverResponse = item.duration;\r\n      } else if (item.id === 'appStart') {\r\n        this._appStart = item.duration;\r\n      } else if ((item.id).indexOf('Component') > -1) {\r\n        // Find the earliest start time and latest end time of all components to get overall duration\r\n        if (item.startVal < renderPageStart) {\r\n          renderPageStart = item.startVal;\r\n        }\r\n        if ((item.duration + item.startVal) > (renderPageEnd)) {\r\n          renderPageEnd = item.duration + item.startVal;\r\n        }\r\n      } else if ((item.id).indexOf('WebPart') > -1) {\r\n        this._hasWebParts = true;\r\n        // Find the earliest start time and latest end time of all web parts to get overall duration\r\n        if (item.startVal < webPartStart) {\r\n          webPartStart = item.startVal;\r\n        }\r\n        if ((item.duration + item.startVal) > (webPartEnd)) {\r\n          webPartEnd = item.duration + item.startVal;\r\n        }\r\n      }\r\n    }\r\n\r\n    this._renderPageDuration = renderPageEnd - renderPageStart;\r\n    this._renderWebparts = webPartEnd - webPartStart;\r\n  }\r\n}"],"sourceRoot":"/src"}