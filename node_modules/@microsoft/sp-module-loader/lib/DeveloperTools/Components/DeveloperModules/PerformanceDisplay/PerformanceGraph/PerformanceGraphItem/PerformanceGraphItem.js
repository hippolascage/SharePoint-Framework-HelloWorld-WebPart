/**
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * @file PerformanceGraphItem.tsx
 * Sub-component for PerformanceGraph. One of these exists for each bar in the graph.
 * Each bar has a start value and a width corresponding to some performance data.
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var React = require('react');
var PerformanceGraphItem_module_scss_1 = require('./PerformanceGraphItem.module.scss');
var PerformanceGraphItem = (function (_super) {
    __extends(PerformanceGraphItem, _super);
    function PerformanceGraphItem() {
        _super.call(this);
        this._drawGraphBar = this._drawGraphBar.bind(this);
    }
    PerformanceGraphItem.prototype.render = function () {
        var nameStyle = [
            PerformanceGraphItem_module_scss_1.default.tableRowPerfList,
            PerformanceGraphItem_module_scss_1.default.tableRowBottomLight,
            PerformanceGraphItem_module_scss_1.default.tableRowRightLight
        ].join(' ');
        var durationStyle = [PerformanceGraphItem_module_scss_1.default.tableRowPerfList, PerformanceGraphItem_module_scss_1.default.tableRowBottomLight].join(' ');
        var graphBar = [];
        var perfItem = this.props.perfItem;
        if (perfItem.breakdown) {
            /**
             * Graph bars are pushed into array and rendered in this specific order, which shouldn't be changed.
             * Don't care about showing the entire 'render' time, only what is left beyond init, modules loaded, etc.
             * That one gets rendered first so part of it can be covered up. This makes start time calculation much easier.
             */
            graphBar.push(this._drawGraphBar(perfItem.breakdown.render.startVal, perfItem.breakdown.render.duration, PerformanceGraphItem_module_scss_1.default.msBlueMid));
            graphBar.push(this._drawGraphBar(perfItem.breakdown.init.startVal, perfItem.breakdown.init.duration, PerformanceGraphItem_module_scss_1.default.msPurpleLight));
            graphBar.push(this._drawGraphBar(perfItem.breakdown.modulesLoaded.startVal, perfItem.breakdown.modulesLoaded.duration, PerformanceGraphItem_module_scss_1.default.msBlue));
            for (var _i = 0, _a = perfItem.breakdown.dataFetch; _i < _a.length; _i++) {
                var apiCall = _a[_i];
                graphBar.push(this._drawGraphBar(apiCall.startVal, apiCall.duration, PerformanceGraphItem_module_scss_1.default.msTealLight));
            }
        }
        else {
            graphBar.push(this._drawGraphBar(perfItem.startVal, perfItem.duration, PerformanceGraphItem_module_scss_1.default.msThemeTertiary));
        }
        return (React.createElement("tr", null, React.createElement("td", {className: nameStyle}, this.props.perfItem.name), React.createElement("td", {className: durationStyle}, this.props.perfItem.duration, " ms"), React.createElement("td", {className: PerformanceGraphItem_module_scss_1.default.tdDelimiter}, graphBar), React.createElement("td", {className: PerformanceGraphItem_module_scss_1.default.tdDelimiter}), React.createElement("td", {className: PerformanceGraphItem_module_scss_1.default.tdDelimiter}), React.createElement("td", {className: PerformanceGraphItem_module_scss_1.default.tdDelimiter}), React.createElement("td", {className: PerformanceGraphItem_module_scss_1.default.tdDelimiter}), React.createElement("td", {className: PerformanceGraphItem_module_scss_1.default.tdDelimiter}), React.createElement("td", {className: PerformanceGraphItem_module_scss_1.default.tdDelimiter}), React.createElement("td", {className: PerformanceGraphItem_module_scss_1.default.tdDelimiter}), React.createElement("td", {className: PerformanceGraphItem_module_scss_1.default.tdDelimiter}), React.createElement("td", {className: PerformanceGraphItem_module_scss_1.default.tdDelimiter})));
    };
    /**
     * Creates a div to show the bar on the graph.
     * startVal: start time integer representing where the bar starts
     * duration: time duration integer representing width of the bar
     * barColor: class name specifying the color of the bar
     */
    PerformanceGraphItem.prototype._drawGraphBar = function (startVal, duration, barColor) {
        /**
         * Calculate the left value and width by percentage so that they will always fit on the screen
         * and be scaled properly
         */
        var leftVal = ((startVal - this.props.startTime) / this.props.overallDuration);
        var widthVal = (duration / this.props.overallDuration);
        /**
         * nameTableWidth: The pixel width of the name & duration section of the table.
         * This needs to be factored into the calculation because the bars are absolutely positioned to cross table lines
         * so the position needs to be offset from the edge of the name/duration section of the table.
         */
        var nameTableWidth = '320px';
        var barStyling = {
            left: "calc(" + leftVal + " * (100% - " + nameTableWidth + ") + " + nameTableWidth + ")",
            width: "calc(" + widthVal + " * (100% - " + nameTableWidth + "))"
        };
        var barClass = [PerformanceGraphItem_module_scss_1.default.bar, barColor].join(' ');
        return React.createElement("div", {key: "" + leftVal + widthVal, className: barClass, style: barStyling});
    };
    return PerformanceGraphItem;
}(React.Component));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = PerformanceGraphItem;

//# sourceMappingURL=PerformanceGraphItem.js.map
