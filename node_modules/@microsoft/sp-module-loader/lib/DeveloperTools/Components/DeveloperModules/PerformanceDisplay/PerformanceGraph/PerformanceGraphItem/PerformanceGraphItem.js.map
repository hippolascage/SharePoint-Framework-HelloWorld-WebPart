{"version":3,"sources":["DeveloperTools/Components/DeveloperModules/PerformanceDisplay/PerformanceGraph/PerformanceGraphItem/PerformanceGraphItem.tsx"],"names":[],"mappings":"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","file":"DeveloperTools/Components/DeveloperModules/PerformanceDisplay/PerformanceGraph/PerformanceGraphItem/PerformanceGraphItem.js","sourcesContent":["/**\r\n * @Copyright (c) Microsoft Corporation.  All rights reserved.\r\n *\r\n * @file PerformanceGraphItem.tsx\r\n * Sub-component for PerformanceGraph. One of these exists for each bar in the graph.\r\n * Each bar has a start value and a width corresponding to some performance data.\r\n */\r\n\r\nimport * as React from 'react';\r\nimport styles from './PerformanceGraphItem.module.scss';\r\n\r\nimport { IPerfItem } from '../../../../../Stores/PerformanceDisplayStore';\r\n\r\nexport interface IPerformanceGraphItemProps {\r\n  /**\r\n   * Performance data point to be represented by this graph item\r\n   */\r\n  perfItem: IPerfItem;\r\n  /**\r\n   * Integer time in miliseconds that the page started loading\r\n   */\r\n  startTime: number;\r\n  /**\r\n   * Integer time in miliseconds showing how long the page took to load overall. Used for calculations\r\n   */\r\n  overallDuration: number;\r\n}\r\n\r\nexport default class PerformanceGraphItem extends React.Component<IPerformanceGraphItemProps, void> {\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this._drawGraphBar = this._drawGraphBar.bind(this);\r\n  }\r\n\r\n  public render(): React.ReactElement<IPerformanceGraphItemProps> {\r\n\r\n    const nameStyle: string = [\r\n      styles.tableRowPerfList,\r\n      styles.tableRowBottomLight,\r\n      styles.tableRowRightLight\r\n    ].join(' ');\r\n    const durationStyle: string = [styles.tableRowPerfList, styles.tableRowBottomLight].join(' ');\r\n\r\n    const graphBar: React.ReactElement<{}>[] = [];\r\n\r\n    const perfItem: IPerfItem = this.props.perfItem;\r\n    if (perfItem.breakdown) {\r\n      /**\r\n       * Graph bars are pushed into array and rendered in this specific order, which shouldn't be changed.\r\n       * Don't care about showing the entire 'render' time, only what is left beyond init, modules loaded, etc.\r\n       * That one gets rendered first so part of it can be covered up. This makes start time calculation much easier.\r\n       */\r\n      graphBar.push(\r\n        this._drawGraphBar(perfItem.breakdown.render.startVal, perfItem.breakdown.render.duration, styles.msBlueMid)\r\n      );\r\n      graphBar.push(\r\n        this._drawGraphBar(perfItem.breakdown.init.startVal, perfItem.breakdown.init.duration, styles.msPurpleLight)\r\n      );\r\n      graphBar.push(\r\n        this._drawGraphBar(perfItem.breakdown.modulesLoaded.startVal, perfItem.breakdown.modulesLoaded.duration,\r\n        styles.msBlue)\r\n      );\r\n\r\n      for (const apiCall of perfItem.breakdown.dataFetch) {\r\n        graphBar.push(this._drawGraphBar(apiCall.startVal, apiCall.duration, styles.msTealLight));\r\n      }\r\n    } else {\r\n      graphBar.push(this._drawGraphBar(perfItem.startVal, perfItem.duration, styles.msThemeTertiary));\r\n    }\r\n\r\n    return (\r\n      <tr>\r\n        <td className={ nameStyle }>\r\n          { this.props.perfItem.name }\r\n        </td>\r\n        <td className={ durationStyle }>\r\n          { this.props.perfItem.duration } ms\r\n        </td>\r\n        <td className={ styles.tdDelimiter }>\r\n          { graphBar }\r\n        </td>\r\n        <td className={ styles.tdDelimiter }></td>\r\n        <td className={ styles.tdDelimiter }></td>\r\n        <td className={ styles.tdDelimiter }></td>\r\n        <td className={ styles.tdDelimiter }></td>\r\n        <td className={ styles.tdDelimiter }></td>\r\n        <td className={ styles.tdDelimiter }></td>\r\n        <td className={ styles.tdDelimiter }></td>\r\n        <td className={ styles.tdDelimiter }></td>\r\n        <td className={ styles.tdDelimiter }></td>\r\n      </tr>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Creates a div to show the bar on the graph.\r\n   * startVal: start time integer representing where the bar starts\r\n   * duration: time duration integer representing width of the bar\r\n   * barColor: class name specifying the color of the bar\r\n   */\r\n  private _drawGraphBar(startVal: number, duration: number, barColor: string): React.ReactElement<{}> {\r\n    /**\r\n     * Calculate the left value and width by percentage so that they will always fit on the screen\r\n     * and be scaled properly\r\n     */\r\n    const leftVal: number = ((startVal - this.props.startTime) / this.props.overallDuration);\r\n    const widthVal: number = (duration / this.props.overallDuration);\r\n\r\n    /**\r\n     * nameTableWidth: The pixel width of the name & duration section of the table.\r\n     * This needs to be factored into the calculation because the bars are absolutely positioned to cross table lines\r\n     * so the position needs to be offset from the edge of the name/duration section of the table.\r\n     */\r\n    const nameTableWidth: string = '320px';\r\n    const barStyling: React.CSSProperties = {\r\n      left: `calc(${ leftVal } * (100% - ${ nameTableWidth }) + ${ nameTableWidth })`,\r\n      width: `calc(${ widthVal } * (100% - ${ nameTableWidth }))`\r\n    };\r\n\r\n    const barClass: string = [styles.bar, barColor].join(' ');\r\n\r\n    return <div key={ `${ leftVal }${ widthVal }` } className={ barClass } style={ barStyling }></div>;\r\n  }\r\n}"],"sourceRoot":"/src"}