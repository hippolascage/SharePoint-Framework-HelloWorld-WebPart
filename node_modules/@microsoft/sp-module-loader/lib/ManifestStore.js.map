{"version":3,"sources":["ManifestStore.ts"],"names":[],"mappings":"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","file":"ManifestStore.js","sourcesContent":["/**\r\n * @Copyright (c) Microsoft Corporation.  All rights reserved.\r\n *\r\n * @file ManifestStore.ts\r\n */\r\n\r\nimport { IClientSideComponentManifest } from '@microsoft/sp-module-interfaces';\r\nimport { IApplicationPreloadedData, ensureDebugAllowed } from './SPModuleLoader';\r\n\r\n/**\r\n * This is a subset of the V1 manifest, included here for the sake of typesafety when extracting a V2 manifest\r\n * from the \"properties\" property of the V1 manifest.\r\n */\r\nexport interface IPartialV1Manifest {\r\n  id: string;\r\n  properties: { manifest: IClientSideComponentManifest | string };\r\n}\r\n\r\nexport interface IManifestStoreEntry {\r\n  /**\r\n   * The manifest's ID.\r\n   */\r\n  id: string;\r\n\r\n  /**\r\n   * The manifest V2 payload.\r\n   */\r\n  manifest: IClientSideComponentManifest;\r\n\r\n  /**\r\n   * A debug manifest V2 payload, if one has been provided.\r\n   */\r\n  debugManifest?: IClientSideComponentManifest;\r\n}\r\n\r\n/**\r\n * This class maintains a cache of the manifests on the current page.\r\n */\r\nexport default class ManifestStore {\r\n  private static _instance: ManifestStore;\r\n\r\n  public static get instance(): ManifestStore {\r\n    if (!this._instance) {\r\n      this._instance = new ManifestStore();\r\n    }\r\n\r\n    return this._instance;\r\n  }\r\n\r\n  private _manifests: Map<string, IManifestStoreEntry> = new Map<string, IManifestStoreEntry>();\r\n\r\n  /**\r\n   * Populate the manifest store with the preloaded manifests.\r\n   *\r\n   * @param {preloadedData} The preloaded data\r\n   */\r\n  public populateManifests(preloadedData: IApplicationPreloadedData): void {\r\n    if (preloadedData) {\r\n      if (preloadedData.clientSideApplicationManifest) {\r\n        this._addManifest(preloadedData.clientSideApplicationManifest, true);\r\n      }\r\n\r\n      if (preloadedData.manifests && preloadedData.manifests.length) {\r\n        this.importManifests(preloadedData.manifests, true);\r\n      }\r\n    }\r\n\r\n    /* tslint:disable:no-any */\r\n    const globalManifests: IPartialV1Manifest[] = (window as any).g_webPartManifests;\r\n    /* tslint:enable:no-any */\r\n    if (globalManifests && globalManifests.length) {\r\n      this.importManifests(globalManifests, true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Populate the manifest store with debug manifests.\r\n   *\r\n   * @param {manifests} A dictionary of debug manifests.\r\n   */\r\n  public populateDebugManifests(manifests: { [id: string]: IClientSideComponentManifest }): void {\r\n    if (manifests) {\r\n      /* tslint:disable:forin */\r\n      for (const id in manifests) {\r\n      /* tslint:enable:forin */\r\n        if (!this._manifests.get(id)) {\r\n          this._manifests.set(id, {\r\n            id: id,\r\n            manifest: undefined\r\n          });\r\n        }\r\n\r\n        this._manifests.get(id).debugManifest = manifests[id];\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return a manifest by its ID. Only return a debug manifest is debug is allowed. If a manifest isn't found by\r\n   * the provided ID, return undefined.\r\n   *\r\n   * @param {id} The ID of the manifest to retrieve.\r\n   * @param {allowDebug} If true, return a debug manifest if one exists.\r\n   * @returns The retrieved manifest, or undefined if one could not be found.\r\n   */\r\n  public getManifestById(id: string): IClientSideComponentManifest {\r\n    const manifestEntry: IManifestStoreEntry = this._manifests.get(id);\r\n    return this._getManifestFromStoreEntry(manifestEntry);\r\n  }\r\n\r\n  /**\r\n   * Get all registered manifest objects.\r\n   *\r\n   * @returns The registered manifest objects.\r\n   */\r\n  public getAllManifests(): IClientSideComponentManifest[] {\r\n    const result: IClientSideComponentManifest[] = [];\r\n\r\n    this._manifests.forEach((manifestEntry: IManifestStoreEntry) => {\r\n      const manifest: IClientSideComponentManifest = this._getManifestFromStoreEntry(manifestEntry);\r\n      if (manifest) {\r\n        result.push(manifest);\r\n      }\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Returns a map of manifest IDs to manfiests.\r\n   *\r\n   * @return {{ [key: string]: IManifestStoreEntry }}: A map of manifest IDs to manfiests.\r\n   */\r\n  public getManifestMap(): { [key: string]: IManifestStoreEntry } {\r\n    const result: { [key: string]: IManifestStoreEntry } = {};\r\n    this._manifests.forEach((value: IManifestStoreEntry, key: string) => result[key] = value);\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Loads additional manifests into the manifest store, updating existing manifests.\r\n   *\r\n   * @param {manifests} The manifests to load into the store.\r\n   */\r\n  public importManifests(manifests: (IPartialV1Manifest | IClientSideComponentManifest)[],\r\n                         overwriteExisting: boolean): void {\r\n    manifests.forEach((manifest: IClientSideComponentManifest) => this._addManifest(manifest, overwriteExisting));\r\n  }\r\n\r\n  private _getManifestFromStoreEntry(manifestEntry: IManifestStoreEntry): IClientSideComponentManifest {\r\n    const allowDebug: boolean = ensureDebugAllowed(false);\r\n\r\n    if (manifestEntry) {\r\n      if (allowDebug && manifestEntry.debugManifest) {\r\n        return manifestEntry.debugManifest;\r\n      } else {\r\n        return manifestEntry.manifest;\r\n      }\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  private _addManifest(manifest: IPartialV1Manifest | IClientSideComponentManifest, overwriteExisting: boolean): void {\r\n    const v1Manifest: IPartialV1Manifest = manifest as IPartialV1Manifest;\r\n    const v2Manifest: IClientSideComponentManifest = manifest as IClientSideComponentManifest;\r\n\r\n    const manifestEntry: IManifestStoreEntry = { id: manifest.id, manifest: v2Manifest };\r\n    if (v1Manifest.properties && v1Manifest.properties.manifest) {\r\n      // Looks like we're in a v1.5 manifest\r\n      if (typeof v1Manifest.properties.manifest === 'string') {\r\n        manifestEntry.manifest = JSON.parse(v1Manifest.properties.manifest as string);\r\n      } else {\r\n        manifestEntry.manifest = v1Manifest.properties.manifest as IClientSideComponentManifest;\r\n      }\r\n    }\r\n\r\n    const existingEntry: IManifestStoreEntry = this._manifests.get(manifest.id);\r\n    if (existingEntry) {\r\n      if (overwriteExisting || !existingEntry.manifest) {\r\n        existingEntry.manifest = manifestEntry.manifest;\r\n      }\r\n    } else {\r\n      this._manifests.set(manifest.id, manifestEntry);\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"/src"}