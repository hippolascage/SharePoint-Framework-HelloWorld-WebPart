{"version":3,"sources":["FrameworkPolyfills.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;;AAEH;;;;;;;;;;;;;GAaG;AACH,QAAO,iBAAiB,CAAC,CAAA;AAEzB;;;;;;;;GAQG;AACH,QAAO,aAAa,CAAC,CAAA;AAErB;;;;;GAKG;AACH,QAAO,cAAc,CAAC,CAAA;AAEtB;;;;;;GAMG;AACH,EAAE,CAAC,CAAC,OAAO,OAAO,CAAC,SAAS,CAAC,OAAO,KAAK,WAAW,CAAC,CAAC,CAAC;IACrD,OAAO,CAAC,SAAS,CAAC,OAAO,GAAG,UAAU,QAA+C;QACnF,IAAM,QAAQ,GAAuB,IAAI,CAAC,OAAO,EAAE,CAAC;QACpD,GAAG,CAAC,CAAC,IAAM,CAAC;YACV,IAAM,KAAK,GAA6B,QAAQ,CAAC,IAAI,EAAE,CAAC;YACxD,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;gBACf,KAAK,CAAC;YACR,CAAC;YACD,6EAA6E;YAC7E,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3C,CAAC;IACH,CAAC,CAAC;AACJ,CAAC;AAED;;GAEG;AACH,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;IAC5B,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ;UAC7C,IAAI;UACJ,MAAM,CAAC,QAAQ,CAAC,QAAQ;UACxB,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,GAAG,GAAG,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,GAAG,EAAE,CAAC,CAAC;AAC/D,CAAC","file":"FrameworkPolyfills.js","sourcesContent":["/**\r\n * @copyright Microsoft Corporation. All rights reserved.\r\n *\r\n * @file This file contains an inventory of all of our framework's polyfills.\r\n * All webpart and application code can rely on these libraries being polyfilled by our framework.\r\n */\r\n\r\n/**\r\n * ES6 Harmony Collections Polyfill\r\n * ES6 Harmony Collections  was added as a polyfill to provide a lightweight unobtrusive shim for\r\n * ES2015 collections. The implementations of Map, Set, and WeakMap provided by this polyfill\r\n * adhere to the ES2015 standard. Functions that abide by the ES2015 standard such as Map.get()\r\n * and Set.has() are guaranteed to run in sublinear time rather than the expected constant time\r\n * for a standard hashmap implementation. (See http://stackoverflow.com/a/31092145) The alternative\r\n * popular library to ES6 Harmony Collections is ES6 shim. After running some samples tests, we have\r\n * determined that ES6 Harmony Collections performs better on a larger set of operations than\r\n * the es6-shim. (Tests were run here: https://jsperf.com/es6-shim-vs-es6-collections/2 ).\r\n * ES6 shim is also a much larger library in size, so the decision stick with ES6 collections\r\n * was easy to make.\r\n * https://github.com/WebReflection/es6-collections\r\n */\r\nimport 'es6-collections';\r\n\r\n/**\r\n * ES6 Promise Polyfill\r\n * Adds an implementation of the ES2015-Promise to the browser. The implementation is a subset\r\n * of rsvp.js.\r\n * (See: https://github.com/tildeio/rsvp.js) ES6 Promise is compliant with Promises/A+\r\n * (See: https://promisesaplus.com/)\r\n * Very useful for using Promise in the Safari/IE/Edge (already supported by Chrome/Firefox)\r\n * https://github.com/jakearchibald/es6-promise\r\n */\r\nimport 'es6-promise';\r\n\r\n/**\r\n * Window.Fetch PolyFill\r\n * Adds an implementation of the Fetch standard to the browser.\r\n * Very useful for using the fetch api in the Safari/IE (already supported by Chrome/Firefox/Edge)\r\n * https://github.com/github/fetch\r\n */\r\nimport 'whatwg-fetch';\r\n\r\n/**\r\n * We don't load whatwg-fetch polyfill for Firefox because it has a native implementation, but\r\n * (unlike Chrome) it is missing the forEach() method.  Ideally we should be using for..of\r\n * instead of forEach(), however TypeScript won't support that syntax until version 2.0.\r\n * As a temporary workaround, we will polyfill the missing forEach() method for Firefox.\r\n * Discussion: https://github.com/github/fetch/issues/149\r\n */\r\nif (typeof Headers.prototype.forEach === 'undefined') {\r\n  Headers.prototype.forEach = function (callback: (value: string, name: string) => void): void {\r\n    const iterator: Iterator<string[]> = this.entries();\r\n    for (; ; ) {\r\n      const entry: IteratorResult<string[]> = iterator.next();\r\n      if (entry.done) {\r\n        break;\r\n      }\r\n      // NOTE: The array returns [name,value] but the callback takes (value, name).\r\n      callback(entry.value[1], entry.value[0]);\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * This is a polyfill for window.location.origin, which is not supported by the IE browser\r\n */\r\nif (!window.location.origin) {\r\n  window.location.origin = window.location.protocol\r\n    + '//'\r\n    + window.location.hostname\r\n    + (window.location.port ? ':' + window.location.port : '');\r\n}\r\n"],"sourceRoot":"/src"}