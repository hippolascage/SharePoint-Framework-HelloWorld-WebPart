"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
// Imports
var fs = require('fs');
var os = require('os');
var path = require('path');
var stripJsonComments = require('strip-json-comments');
var Validator = require('z-schema');
var yargs = require('yargs');
var sp_tslint_rules_1 = require('@microsoft/sp-tslint-rules');
var gulp_core_build_1 = require('gulp-core-build');
var gulpCoreBuild = require('gulp-core-build');
var gulp_core_build_typescript_1 = require('gulp-core-build-typescript');
var gulp_core_build_sass_1 = require('gulp-core-build-sass');
var gulp_core_build_serve_1 = require('gulp-core-build-serve');
var gulp_core_build_webpack_1 = require('gulp-core-build-webpack');
var gulp_core_build_karma_1 = require('gulp-core-build-karma');
var spBuildCoreTasks = require('@microsoft/sp-build-core-tasks');
// Exports
__export(require('gulp-core-build'));
__export(require('gulp-core-build-typescript'));
__export(require('gulp-core-build-sass'));
__export(require('gulp-core-build-serve'));
__export(require('gulp-core-build-webpack'));
__export(require('gulp-core-build-karma'));
__export(require('@microsoft/sp-build-core-tasks'));
exports.preCopy = new gulp_core_build_1.CopyTask();
exports.postCopy = new gulp_core_build_1.CopyTask();
exports.preCopy.name = 'pre-copy';
exports.postCopy.name = 'post-copy';
var enableCasperTests = true;
var schemaKey = '$schema';
var testTaskName = 'test';
var buildTaskName = 'build';
var bundleTaskName = 'bundle';
var deployAzureStorageTaskName = 'deploy-azure-storage';
var packageSolutionTaskName = 'package-solution';
var serveTaskName = 'serve';
var defaultTaskName = 'default';
var debugBuildMode = 'debug';
var shipBuildMode = 'ship';
function setBuildProperties(properties) {
    gulp_core_build_1.setConfig({ properties: properties });
}
exports.setBuildProperties = setBuildProperties;
var additionalBuildTasks = [];
/**
 * Add additional build tasks to run after the typescript tasks.
 */
function addBuildTasks(tasks) {
    if (tasks.length) {
        additionalBuildTasks.push.call(this, tasks);
    }
    else {
        additionalBuildTasks.push(tasks);
    }
}
exports.addBuildTasks = addBuildTasks;
function getSchemaFilePath(filename) {
    return path.join(__dirname, 'schemas', filename);
}
var SpWebBuild = (function () {
    function SpWebBuild() {
        this.customConfigs = [
            {
                callback: setBuildProperties,
                configFile: 'config.json',
                schemaFile: getSchemaFilePath('config.schema.json')
            },
            {
                callback: gulp_core_build_serve_1.serve.setConfig.bind(gulp_core_build_serve_1.serve),
                configFile: 'serve.json',
                readmeUrl: 'https://github.com/dzearing/gulp-core-build-serve#servetask',
                schemaFile: undefined
            },
            {
                callback: spBuildCoreTasks.deployAzureStorage.setConfig.bind(spBuildCoreTasks.deployAzureStorage),
                configFile: 'deploy-azure-storage.json',
                readmeUrl: 'https://github.com/OfficeDev/SharePointUXFramework/wiki/' +
                    'Notes-on-Azure-Deployment#configuration',
                schemaFile: undefined
            },
            {
                callback: spBuildCoreTasks.packageSolution.setConfig.bind(spBuildCoreTasks.packageSolution),
                configFile: 'package-solution.json',
                readmeUrl: 'https://github.com/OfficeDev/SharePointUXFramework/wiki/Notes-on-Solution-Packaging#packaging',
                schemaFile: undefined
            },
            {
                callback: exports.preCopy.setConfig.bind(exports.preCopy),
                configFile: 'pre-copy.json',
                readmeUrl: 'https://github.com/dzearing/gulp-core-build/blob/master/src/CopyTask.ts',
                schemaFile: getSchemaFilePath('copy.schema.json')
            },
            {
                callback: exports.postCopy.setConfig.bind(exports.postCopy),
                configFile: 'post-copy.json',
                readmeUrl: 'https://github.com/dzearing/gulp-core-build/blob/master/src/CopyTask.ts',
                schemaFile: getSchemaFilePath('copy.schema.json')
            },
            {
                callback: gulp_core_build_typescript_1.typescript.setConfig.bind(gulp_core_build_typescript_1.typescript),
                configFile: 'typescript.json',
                readmeUrl: 'https://github.com/dzearing/gulp-core-build-typescript/blob/master/src/TypeScriptTask.ts',
                schemaFile: undefined
            },
            {
                callback: gulp_core_build_typescript_1.text.setConfig.bind(gulp_core_build_typescript_1.text),
                configFile: 'text.json',
                readmeUrl: 'https://github.com/dzearing/gulp-core-build-typescript/blob/master/src/TextTask.ts',
                schemaFile: undefined
            },
            {
                callback: gulp_core_build_typescript_1.tslint.setConfig.bind(gulp_core_build_typescript_1.tslint),
                configFile: 'tslint.json',
                readmeUrl: 'https://github.com/dzearing/gulp-core-build-typescript/blob/master/src/TSLintTask.ts',
                schemaFile: undefined
            },
            {
                callback: gulp_core_build_sass_1.default.setConfig.bind(gulp_core_build_sass_1.default),
                configFile: 'sass.json',
                readmeUrl: 'https://github.com/dzearing/gulp-core-build-sass/blob/master/src/SassTask.ts',
                schemaFile: undefined
            },
            {
                callback: gulp_core_build_serve_1.reload.setConfig.bind(gulp_core_build_serve_1.reload),
                configFile: 'reload.json',
                readmeUrl: 'https://github.com/dzearing/gulp-core-build-serve/blob/master/src/ReloadTask.ts',
                schemaFile: undefined
            },
            {
                callback: gulp_core_build_webpack_1.default.setConfig.bind(gulp_core_build_webpack_1.default),
                configFile: 'webpack.json',
                readmeUrl: 'https://github.com/dzearing/gulp-core-build-webpack/blob/master/src/WebpackTask.ts',
                schemaFile: undefined
            },
            {
                callback: gulp_core_build_karma_1.default.setConfig.bind(gulp_core_build_karma_1.default),
                configFile: 'karma.json',
                readmeUrl: 'https://github.com/dzearing/gulp-core-build-karma/blob/master/src/KarmaTask.ts',
                schemaFile: undefined
            },
            {
                callback: spBuildCoreTasks.configureWebpack.setConfig.bind(spBuildCoreTasks.configureWebpack),
                configFile: 'configure-webpack.json',
                readmeUrl: 'https://onedrive.visualstudio.com/DefaultCollection/SPPPlat/_git/sp-build-core-tasks?path=%2' +
                    'Fsrc%2FconfigureWebpack%2FConfigureWebpackTask.ts&version=GBmaster&fullScreen=true&_a=contents',
                schemaFile: undefined
            },
            {
                callback: spBuildCoreTasks.copyAssets.setConfig.bind(spBuildCoreTasks.copyAssets),
                configFile: 'prepare-deploy.json',
                readmeUrl: 'https://onedrive.visualstudio.com/DefaultCollection/SPPPlat/_git/sp-build-core-tasks?path=%2' +
                    'Fsrc%2FprepareDeploy%2FPrepareDeployTask.ts&version=GBmaster&_a=contents',
                schemaFile: undefined
            },
            {
                callback: spBuildCoreTasks.writeManifests.setConfig.bind(spBuildCoreTasks.writeManifests),
                configFile: 'write-manifests.json',
                readmeUrl: 'https://onedrive.visualstudio.com/DefaultCollection/SPPPlat/_git/sp-build-core-tasks?path=%2' +
                    'Fsrc%2FwriteManifests%2FWriteManifestsTask.ts&version=GBmaster&_a=contents',
                schemaFile: undefined
            },
            {
                callback: spBuildCoreTasks.copyStaticAssets.setConfig.bind(spBuildCoreTasks.copyStaticAssets),
                configFile: 'copy-static-assets.json',
                readmeUrl: 'https://onedrive.visualstudio.com/DefaultCollection/SPPPlat/_git/sp-build-core-tasks?path=%2' +
                    'Fsrc%2FcopyStaticAssets%2FCopyStaticAssetsTask.ts&version=GBmaster&_a=contents',
                schemaFile: getSchemaFilePath('copy-static-assets.schema.json')
            }
        ];
        this._schemaValidator = new Validator({
            breakOnFirstError: true,
            noExtraKeywords: true,
            noTypeless: true
        });
    }
    SpWebBuild.prototype.initialize = function (gulp) {
        var yargsArgs = this.getYargs();
        var command = yargsArgs.argv._[0];
        switch (command) {
            case testTaskName:
                yargsArgs.reset()
                    .option('debug', {
                    describe: 'run tests in debug mode'
                })
                    .option('match', {
                    describe: 'regular expression. Only run tests that match',
                    string: true
                });
                break;
            case serveTaskName:
                yargsArgs.reset()
                    .option('showToast', {
                    description: 'show a toast when the watched code fails a build or succeeds after failing'
                })
                    .option('nobrowser', {
                    description: 'don\'t open a browser after initial bundle'
                });
                break;
            default:
                yargsArgs.reset(); // These commands have no special options.
                break;
        }
        yargsArgs.usage([
            'CONFIG FILES'
        ].concat(this.customConfigs.map(function (config) {
            return "   " + config.configFile + os.EOL + (config.readmeUrl ? config.readmeUrl : '') + os.EOL;
        }))
            .join(os.EOL));
        exports.args = yargsArgs.argv;
        // Note this overrides the getters for ship and production on args
        exports.args.ship = exports.args.production = (exports.args.production || exports.args.ship);
        console.log('Build target: ' + (exports.args.ship ? shipBuildMode.toUpperCase() : debugBuildMode.toUpperCase()));
        gulpCoreBuild.setConfig({
            production: exports.args.production
        });
        var tasks = this.getTasks();
        tasks.forEach(function (executable, name) {
            gulp_core_build_1.task(name, executable);
        });
        this.setupSharedConfig(exports.args);
        this._loadCustomConfig(exports.args);
        gulpCoreBuild.initialize(gulp);
    };
    SpWebBuild.prototype.getYargs = function () {
        var yargsArgs = yargs.usage()
            .option('production', {
            alias: 'p',
            describe: 'build in ship mode with full localization and minimization',
            boolean: true
        })
            .option('ship', {
            alias: 'p',
            describe: 'build in ship mode with full localization and minimization',
            boolean: true
        })
            .option('locale', {
            alias: 'l',
            describe: 'override the default culture (e.g. "fr-fr")',
            string: true
        })
            .option('verbose', {
            describe: 'run the build with verbose logging'
        })
            .help('h')
            .global(['production', 'locale', 'verbose', 'h'])
            .command(buildTaskName, 'build the project')
            .command(bundleTaskName, 'build, localize, and bundle the project')
            .command(deployAzureStorageTaskName, 'upload the assets to a development CDN')
            .command(packageSolutionTaskName, 'package the project into a SPAPP')
            .command(testTaskName, 'build, localize, and bundle the project and run tests, and verify the coverage')
            .command(serveTaskName, 'build and bundle the project and run the development server')
            .command(defaultTaskName, 'equivalent to bundle');
        return yargsArgs;
    };
    /**
     * Define default task groups.
     */
    SpWebBuild.prototype.getTasks = function () {
        var result = new Map();
        result.set(buildTaskName, this.getBuildTask());
        result.set(bundleTaskName, this.getBundleTask());
        result.set(testTaskName, this.getTestTask());
        result.set(deployAzureStorageTaskName, spBuildCoreTasks.deployAzureStorage);
        result.set(packageSolutionTaskName, spBuildCoreTasks.packageSolution);
        // @todo VSO #167343 - remove this once bug from running 'gulp bundle test' in gulp-core-build is fixed
        result.set(testTaskName, this.getTestTask());
        result.set(serveTaskName, gulp_core_build_1.serial(result.get(bundleTaskName), gulp_core_build_serve_1.serve, gulp_core_build_1.watch(['src/**/*.{ts,tsx,scss,resx,js,txt,html}',
            '!src/**/*.{scss.ts,resx.ts}'], gulp_core_build_1.serial(result.get(bundleTaskName), gulp_core_build_serve_1.reload))));
        result.set(defaultTaskName, result.get(bundleTaskName));
        return result;
    };
    SpWebBuild.prototype.getTestTask = function () {
        return gulp_core_build_1.serial(this.getBundleTask(), enableCasperTests
            ? gulp_core_build_1.parallel(spBuildCoreTasks.casperJSRunner, gulp_core_build_karma_1.default)
            : gulp_core_build_karma_1.default);
    };
    SpWebBuild.prototype.getCoreBuildTask = function () {
        return gulp_core_build_1.parallel(gulp_core_build_typescript_1.tslint, gulp_core_build_1.serial(gulp_core_build_sass_1.default, gulp_core_build_1.serial(gulp_core_build_typescript_1.typescript, gulp_core_build_typescript_1.removeTripleSlash), gulp_core_build_1.serial.apply(void 0, additionalBuildTasks)), spBuildCoreTasks.copyStaticAssets, gulp_core_build_typescript_1.text);
    };
    SpWebBuild.prototype.getBuildTask = function () {
        return gulp_core_build_1.serial(exports.preCopy, this.getCoreBuildTask(), exports.postCopy);
    };
    SpWebBuild.prototype.getBundleTask = function () {
        return gulp_core_build_1.serial(this.getBuildTask(), spBuildCoreTasks.configureWebpack, gulp_core_build_webpack_1.default, spBuildCoreTasks.prepareDeploy, spBuildCoreTasks.writeManifests);
    };
    SpWebBuild.prototype.setupSharedConfig = function (buildArgs) {
        sp_tslint_rules_1.initializeTslintTask(gulp_core_build_typescript_1.tslint);
        gulp_core_build_sass_1.default.setConfig({
            dropCssFiles: true // Drops .css files in the lib directory for webpack
        });
        gulp_core_build_karma_1.default.setConfig({
            karmaConfigPath: path.resolve(path.join(__dirname, '..', 'karma.config.js'))
        });
        spBuildCoreTasks.configureWebpack.setConfig({
            webpack: gulp_core_build_webpack_1.default
        });
        var branchType = (process.env.BranchType || '').toLowerCase();
        spBuildCoreTasks.writeManifests.setConfig({
            cdnBasePath: (branchType === 'prod')
                ? 'https://spoprod-a.akamaihd.net/files/'
                : 'https://spoppe-a.akamaihd.net/files/',
            debugBasePath: function () { return ("http://" + (os.hostname() || 'localhost') + ":" + gulp_core_build_serve_1.serve.taskConfig.port + "/"); },
            debugLocale: buildArgs.locale,
            deployCdnPath: function () { return spBuildCoreTasks.copyAssets.taskConfig.deployCdnPath; }
        });
        if (buildArgs.production) {
            var buildNumber = undefined;
            // When the build runs on VSTS, the build number is included as part of the CDN path, so we
            //   need to pass it in here for public path references. This should change in the future.
            if (process.env.BUILD_BUILDNUMBER) {
                buildNumber = process.env.BUILD_BUILDNUMBER.toLowerCase();
            }
            spBuildCoreTasks.copyAssets.setConfig({
                extsToIgnore: ['.map', '.stats.json', '.stats.html']
            });
            spBuildCoreTasks.writeManifests.setConfig({
                cdnUrlPrefix: buildNumber
            });
            spBuildCoreTasks.packageSolution.setConfig({
                paths: {
                    manifestDir: function () { return spBuildCoreTasks.copyAssets.taskConfig.deployCdnPath; }
                }
            });
        }
    };
    SpWebBuild.prototype._loadCustomConfig = function (buildArgs) {
        // Read config files from project folders for various projects
        // @todo VSO #178074 - move this into each task, respectively
        // Load config file for each plugin
        for (var _i = 0, _a = this.customConfigs; _i < _a.length; _i++) {
            var taskConfigInfo = _a[_i];
            var configFilename = path.join(process.cwd(), 'config', taskConfigInfo.configFile);
            var schemaFilename = taskConfigInfo.schemaFile;
            var rawConfig = this._readConfigFile(buildArgs, configFilename, schemaFilename, taskConfigInfo.readmeUrl);
            if (rawConfig) {
                taskConfigInfo.callback(rawConfig);
            }
        }
    };
    SpWebBuild.prototype._readConfigFile = function (buildArgs, filename, schemafile, helpUrl) {
        if (!fs.existsSync(filename)) {
            return undefined;
        }
        else {
            if (buildArgs.verbose) {
                console.log("Found config file: " + path.basename(filename));
            }
            var contents = fs.readFileSync(filename);
            var stripped = stripJsonComments(contents.toString());
            var rawConfig = JSON.parse(stripped);
            delete rawConfig[schemaKey];
            if (schemafile) {
                var schema = require(schemafile);
                if (!this._schemaValidator.validate(rawConfig, schema)) {
                    var error = this._schemaValidator.getLastError();
                    var errorMessage = ("Error parsing file '" + path.basename(filename) + "', section [" + error.path + "]:")
                        + os.EOL + ("(" + error.code + ") " + error.message + " ") + os.EOL + os.EOL +
                        (helpUrl ? 'For more usage, please read:' + os.EOL + helpUrl : '');
                    console.log(os.EOL + 'ERROR: ' + errorMessage + os.EOL + os.EOL);
                    throw new Error(errorMessage);
                }
            }
            return rawConfig;
        }
    };
    return SpWebBuild;
}());
exports.SpWebBuild = SpWebBuild;
// Replace gcb.initialize to call our init stuff first.
exports.initialize = function (gulp) {
    var build = new SpWebBuild();
    build.initialize(gulp);
};

//# sourceMappingURL=index.js.map
