import * as gulp from 'gulp';
import OdspGulpTask from './../OdspGulpTask';
import { ICumulativeManifestOptions } from './cumulativeManifest/cumulativeManifestProcessor';
export interface IWriteManifestsTaskConfig {
    /**
     * A function that takes no arguments and returns the deploy CDN path. This function is expected to be called more
     *  than once and always return the same value
     */
    deployCdnPath?: () => string;
    /**
     * A prefix to prepend to all assets' URLs. For example, if this value is "foobar", a resulting CDN path for an asset
     *  called "baz.js" will be "foobar/baz.js"
     */
    cdnUrlPrefix?: string;
    /**
     * The CDN base path. This value will populate the "internalModuleBaseUrls" CDN manifest property.
     */
    cdnBasePath?: string;
    /**
     * A function that takes no arguments and returns the debug base path, which is the value that will populate the
     *  "internalModuleBaseUrls" manifest property for debug manifests. This function is expected to be called more than
     *  once and always return the same value.
     */
    debugBasePath?: () => string;
    /**
     * If specified, only use this locale in the debug manifest.
     */
    debugLocale?: string;
    /**
     * Options for the cumulative manifest files to be dropped in the dist folder. If this field is null, cumulative
     *  files will not be produced.
     */
    cumulativeManifestOptions?: ICumulativeManifestOptions;
    /**
     * Defaults to true. If true, wrap the manifest in the Manifest Server format.
     * This should be true for all 1st party builds.
     */
    shouldWrapProductionManifestForManifestServer?: boolean;
}
/**
 * Writes a manifest for each entry in the project.
 *
 * Example:
 *  IN:
 *   the result of the prepareDeploy step enumerating each entry, each entry's dependencies, and a developer-generated
 *    base manifest for each entry.
 *
 *  OUT:
 *   a debug and, optionally, a production manifest for each entry.
 */
export declare class WriteManifestsTask extends OdspGulpTask<IWriteManifestsTaskConfig> {
    name: string;
    taskConfig: IWriteManifestsTaskConfig;
    executeTask(gulp: gulp.Gulp, completeCallback: (error?: string) => void): NodeJS.ReadWriteStream;
    /**
     * Temporary - until serverside changes go in
     */
    private _findModuleLoader();
    /**
     * Temporary - until serverside changes go in
     */
    private _wrapV2Manifest(v2Manifest, moduleLoaderPath);
    private _gatherPreloadManifestIds(deployModules);
    private _includePreloadManifestIds(preloadIds, manifest);
    private _generateManifest(deployEntry, loaderConfig);
    private _generateLoaderConfig(deployModules, internalModuleBaseUrls, resolvePath, defaultLocaleOverride?);
    private _resolveDebugPath(assetPath);
    private _resolveProductionPath(assetPath);
}
