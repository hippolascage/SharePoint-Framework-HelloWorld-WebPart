{"version":3,"sources":["writeManifests/WriteManifestsTask.ts"],"names":[],"mappings":"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","file":"writeManifests/WriteManifestsTask.js","sourcesContent":["// Remove when V2 is 100% on\r\nconst shouldProduceV2Manifest: boolean = true;\r\n\r\nimport { cloneDeep } from 'lodash';\r\nimport * as fs from 'fs';\r\nimport * as gulp from 'gulp';\r\nimport * as merge from 'merge2';\r\nimport * as path from 'path';\r\nimport constants from './../constants';\r\nimport { writeStringToFile } from './../utilities/FileUtils';\r\nimport * as url from 'url';\r\nimport { EOL } from 'os';\r\nimport { resolvePackage } from './../utilities/Resolve';\r\n\r\nimport {\r\n  IModuleConfig,\r\n  IFrameworkModuleConfig,\r\n  IInternalModuleConfig,\r\n  ILocalizedInternalModuleConfig,\r\n  IClientSideComponentLoaderConfig,\r\n  IClientSideComponentManifest,\r\n  IClientSideApplicationManifest,\r\n  IStandardLibraryModule,\r\n  standardLibraryModules,\r\n  IPath\r\n} from '@microsoft/sp-module-interfaces';\r\n\r\nimport ManifestSchemaValidator,\r\n       { IManifestValidatorResult } from '@microsoft/sp-module-interfaces/lib/manifestSchemaValidator';\r\n\r\nimport {\r\n  IDeployEntry,\r\n  IDeployModules\r\n} from './../copyAssets/CopyAssetsTask';\r\nimport OdspGulpTask from './../OdspGulpTask';\r\nimport IsUrl from './../utilities/IsUrl';\r\nimport CumulativeManifestProcessor,\r\n       { ICumulativeManifestOptions } from './cumulativeManifest/cumulativeManifestProcessor';\r\n\r\nconst schemaPropertyName: string = '$schema';\r\n\r\nexport interface IWriteManifestsTaskConfig {\r\n  /**\r\n   * A function that takes no arguments and returns the deploy CDN path. This function is expected to be called more\r\n   *  than once and always return the same value\r\n   */\r\n  deployCdnPath?: () => string;\r\n\r\n  /**\r\n   * A prefix to prepend to all assets' URLs. For example, if this value is \"foobar\", a resulting CDN path for an asset\r\n   *  called \"baz.js\" will be \"foobar/baz.js\"\r\n   */\r\n  cdnUrlPrefix?: string;\r\n\r\n  /**\r\n   * The CDN base path. This value will populate the \"internalModuleBaseUrls\" CDN manifest property.\r\n   */\r\n  cdnBasePath?: string;\r\n\r\n  /**\r\n   * A function that takes no arguments and returns the debug base path, which is the value that will populate the\r\n   *  \"internalModuleBaseUrls\" manifest property for debug manifests. This function is expected to be called more than\r\n   *  once and always return the same value.\r\n   */\r\n  debugBasePath?: () => string;\r\n\r\n  /**\r\n   * If specified, only use this locale in the debug manifest.\r\n   */\r\n  debugLocale?: string;\r\n\r\n  /**\r\n   * Options for the cumulative manifest files to be dropped in the dist folder. If this field is null, cumulative\r\n   *  files will not be produced.\r\n   */\r\n  cumulativeManifestOptions?: ICumulativeManifestOptions;\r\n\r\n  /**\r\n   * Defaults to true. If true, wrap the manifest in the Manifest Server format.\r\n   * This should be true for all 1st party builds.\r\n   */\r\n  shouldWrapProductionManifestForManifestServer?: boolean;\r\n}\r\n\r\ninterface IV1Manifest {\r\n  id: string;\r\n  displayName: string;\r\n  version: string;\r\n  manifestVersion: number;\r\n  bootstrapModule: string;\r\n  componentType: string;\r\n\r\n  preloadCommands?: Object;\r\n  preloadClientSideComponents?: string[];\r\n\r\n  properties: {\r\n    manifest: IClientSideComponentManifest | string;\r\n  };\r\n}\r\n\r\ninterface ICdnManifest {\r\n  ComponentType: string;\r\n  Id: string;\r\n  Manifest: string;\r\n  Name: string;\r\n  resources: {};\r\n}\r\n\r\n/**\r\n * Writes a manifest for each entry in the project.\r\n *\r\n * Example:\r\n *  IN:\r\n *   the result of the prepareDeploy step enumerating each entry, each entry's dependencies, and a developer-generated\r\n *    base manifest for each entry.\r\n *\r\n *  OUT:\r\n *   a debug and, optionally, a production manifest for each entry.\r\n */\r\nexport class WriteManifestsTask extends OdspGulpTask<IWriteManifestsTaskConfig> {\r\n  public name: string = 'writemanifests';\r\n  public taskConfig: IWriteManifestsTaskConfig = {\r\n    deployCdnPath: undefined,\r\n    debugLocale: constants.defaultLocale,\r\n    cdnUrlPrefix: undefined,\r\n    cdnBasePath: undefined,\r\n    shouldWrapProductionManifestForManifestServer: false,\r\n\r\n    cumulativeManifestOptions: {\r\n      ignoreOutputManifestIds: undefined\r\n    }\r\n  };\r\n\r\n  public executeTask(gulp: gulp.Gulp, completeCallback: (error?: string) => void): NodeJS.ReadWriteStream {\r\n    if (!this.properties.deployEntries || this.properties.deployEntries.length === 0) {\r\n      // Suppressed warning for now to unblock CI. VSO#219493\r\n      this.log/*Warning*/('No deploy entries specified. No manifests to write.');\r\n      completeCallback();\r\n      return;\r\n    }\r\n\r\n    const debugBasePath: string = this.taskConfig.debugBasePath ? this.taskConfig.debugBasePath() : undefined;\r\n    const shouldProduceDebugManifests: boolean = !!debugBasePath;\r\n    if (!debugBasePath) {\r\n      this.logWarning('Debug base path not specified. Unable to produce debug manifests.');\r\n    }\r\n\r\n    let shouldProduceProductionManifests: boolean = this.buildConfig.production && !!this.taskConfig.cdnBasePath;\r\n    if (this.buildConfig.production && !this.taskConfig.cdnBasePath) {\r\n      this.logWarning('CDN base path not specified. Unable to produce production manifests.');\r\n    }\r\n\r\n    if (this.buildConfig.production && (!this.taskConfig.deployCdnPath || !this.taskConfig.deployCdnPath())) {\r\n      shouldProduceProductionManifests = false;\r\n      // Suppressed warning for now to unblock CI. VSO#219493\r\n      this.log/*Warning*/('CDN deploy path not specified. Unable to produce production manifests.');\r\n    }\r\n\r\n    const debugManifests: IClientSideComponentManifest[] = [];\r\n    const manifestIds: { [id: string]: IDeployEntry } = {};\r\n\r\n    const tasks: NodeJS.ReadWriteStream[] = [];\r\n\r\n    this.properties.deployEntries.forEach((deployEntry: IDeployEntry) => {\r\n      if (!deployEntry.manifest) {\r\n        this.logWarning(`Manifest not defined for entry \"${deployEntry.entryName}\".`);\r\n        return;\r\n      }\r\n\r\n      const validationResult: IManifestValidatorResult =\r\n        ManifestSchemaValidator.validateManifest(JSON.stringify(deployEntry.manifest));\r\n      if (!validationResult.result) {\r\n        const errorText: string = ManifestSchemaValidator.getFormattedErrorMessage(validationResult.errors);\r\n\r\n        this.logError(`Manifest validation error (${deployEntry.bundleEntry.manifest}): ${EOL}${errorText}`);\r\n        return;\r\n      }\r\n\r\n      // Ensure we don't have a duplicate ID\r\n      const lowercaseId: string = deployEntry.manifest.id.toLowerCase();\r\n      if (lowercaseId in manifestIds) {\r\n        /* tslint:disable:max-line-length */\r\n        this.logError(`Duplicate manifest ID \"${lowercaseId}\". Exists in \"${manifestIds[lowercaseId].bundleEntry.manifest}\" and \"${deployEntry.bundleEntry.manifest}\".`);\r\n        /* tslint:enable:max-line-length */\r\n      } else {\r\n        manifestIds[lowercaseId] = deployEntry;\r\n      }\r\n\r\n      if (shouldProduceDebugManifests) {\r\n        const loaderConfig: IClientSideComponentLoaderConfig =\r\n          this._generateLoaderConfig(deployEntry.debugModules,\r\n                                     [debugBasePath],\r\n                                     this._resolveDebugPath.bind(this),\r\n                                     this.taskConfig.debugLocale);\r\n\r\n        const debugManifest: IClientSideComponentManifest = this._generateManifest(deployEntry, loaderConfig);\r\n        const isApplication: boolean = debugManifest.componentType === 'Application';\r\n\r\n        if (isApplication) {\r\n          const preloadModules: string[] = this._gatherPreloadManifestIds(deployEntry.debugModules);\r\n          this._includePreloadManifestIds(preloadModules, debugManifest as IClientSideApplicationManifest);\r\n        }\r\n\r\n        debugManifests.push(debugManifest);\r\n\r\n        let finalDebugManifest: IClientSideComponentManifest | IV1Manifest = debugManifest;\r\n        if (!shouldProduceV2Manifest) {\r\n          let moduleLoaderPath: string;\r\n          if (isApplication) {\r\n            try {\r\n              moduleLoaderPath = resolvePackage('@microsoft/sp-module-loader', this.buildConfig.rootPath);\r\n              moduleLoaderPath = path.join(moduleLoaderPath, 'dist', 'sp-module-loader.js');\r\n              moduleLoaderPath = path.relative(this.buildConfig.rootPath, moduleLoaderPath);\r\n\r\n              const baseUrl: string = debugBasePath || 'http://localhost:4321';\r\n              moduleLoaderPath = `${baseUrl}${moduleLoaderPath.replace(/\\\\/g, '/')}`;\r\n            } catch (e) {\r\n              this.log(`Unable to find module loader. SPAPPs created for application \"${debugManifest.id}\" ` +\r\n                              'will not be loadable. Ensure your project depends on @microsoft/sp-module-loader');\r\n            }\r\n          }\r\n\r\n          finalDebugManifest = this._wrapV2Manifest(debugManifest, moduleLoaderPath);\r\n        }\r\n\r\n        tasks.push(writeStringToFile(JSON.stringify(debugManifest, undefined, 2),\r\n                                     `${debugManifest.id}.manifest.json`)\r\n                    .pipe(gulp.dest(this.buildConfig.distFolder)));\r\n      }\r\n\r\n      if (shouldProduceProductionManifests) {\r\n        const loaderConfig: IClientSideComponentLoaderConfig =\r\n          this._generateLoaderConfig(deployEntry.productionModules,\r\n                                     [this.taskConfig.cdnBasePath],\r\n                                     this._resolveProductionPath.bind(this));\r\n\r\n        const productionManifest: IClientSideComponentManifest = this._generateManifest(deployEntry, loaderConfig);\r\n\r\n        let loaderModulePath: string = this._findModuleLoader();\r\n        if (!loaderModulePath) {\r\n          if (deployEntry.manifest.componentType === 'Application') {\r\n            this.logWarning('Unable to find the loader in the deploy CDN location. If this is an application, it ' +\r\n                            'will not be loadable.');\r\n          }\r\n        } else {\r\n          // @todo improve URL processing logic. VSO#215443\r\n          loaderModulePath = this._resolveProductionPath(loaderModulePath) as string;\r\n          const cdnBasePathUrl: url.Url = url.parse(this.taskConfig.cdnBasePath);\r\n\r\n          loaderModulePath = path.posix.join(cdnBasePathUrl.host || '', cdnBasePathUrl.path, loaderModulePath);\r\n\r\n          if (cdnBasePathUrl.protocol) {\r\n            loaderModulePath = `${cdnBasePathUrl.protocol}//${loaderModulePath}`;\r\n          } else if (loaderModulePath.match(/^\\/[^\\/]/) && this.taskConfig.cdnBasePath.match(/^\\/\\//)) {\r\n            loaderModulePath = `/${loaderModulePath}`;\r\n          }\r\n        }\r\n\r\n        if (productionManifest.componentType === 'Application') {\r\n          const preloadModules: string[] = this._gatherPreloadManifestIds(deployEntry.productionModules);\r\n          this._includePreloadManifestIds(preloadModules, productionManifest as IClientSideApplicationManifest);\r\n        }\r\n\r\n        const finalProductionManifest: IClientSideComponentManifest | IV1Manifest = shouldProduceV2Manifest\r\n          ? productionManifest\r\n          : this._wrapV2Manifest(productionManifest, loaderModulePath);\r\n\r\n        let cdnManifest: ICdnManifest | IClientSideComponentManifest | IV1Manifest;\r\n\r\n        if (this.taskConfig.shouldWrapProductionManifestForManifestServer) {\r\n          cdnManifest = {\r\n            ComponentType: finalProductionManifest.componentType,\r\n            Id: finalProductionManifest.id,\r\n            Manifest: JSON.stringify(finalProductionManifest),\r\n            Name: finalProductionManifest.id,\r\n            resources: {}\r\n          };\r\n        } else {\r\n          cdnManifest = finalProductionManifest;\r\n        }\r\n\r\n        tasks.push(writeStringToFile(JSON.stringify(cdnManifest), `${productionManifest.id}.json`)\r\n          .pipe(gulp.dest(this.taskConfig.deployCdnPath())));\r\n      }\r\n    });\r\n\r\n    if (shouldProduceDebugManifests) {\r\n      const cumulativeManifestOptions: ICumulativeManifestOptions = this.taskConfig.cumulativeManifestOptions;\r\n      cumulativeManifestOptions.baseUrl = debugBasePath;\r\n\r\n      const cumulativeManifestProcessor: CumulativeManifestProcessor =\r\n        new CumulativeManifestProcessor(cumulativeManifestOptions, this);\r\n\r\n      tasks.push(...cumulativeManifestProcessor.generateCumulativeManifest(gulp, debugManifests));\r\n    }\r\n\r\n    return merge(tasks).on('finish', () => completeCallback());\r\n  }\r\n\r\n  /**\r\n   * Temporary - until serverside changes go in\r\n   */\r\n  private _findModuleLoader(): string {\r\n    const moduleLoaderRegex: RegExp = /sp-module-loader_?[^_]*.js/i;\r\n    const deployCdnFiles: string[] = fs.readdirSync(this.taskConfig.deployCdnPath());\r\n    for (const deployCdnFile of deployCdnFiles) {\r\n      if (deployCdnFile.match(moduleLoaderRegex)) {\r\n        return path.basename(deployCdnFile);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Temporary - until serverside changes go in\r\n   */\r\n  private _wrapV2Manifest(v2Manifest: IClientSideComponentManifest, moduleLoaderPath: string): IV1Manifest {\r\n    let wrappedComponentType: string;\r\n    switch (v2Manifest.componentType.toLowerCase()) {\r\n      case 'library':\r\n      case 'webpart':\r\n        wrappedComponentType = 'WebPart';\r\n        break;\r\n\r\n      case 'application':\r\n        wrappedComponentType = 'Application';\r\n        break;\r\n    }\r\n\r\n    const v1Manifest: IV1Manifest = {\r\n      id: v2Manifest.id,\r\n      displayName: v2Manifest.id,\r\n      version: v2Manifest.version,\r\n      manifestVersion: 2,\r\n      bootstrapModule: moduleLoaderPath,\r\n      componentType: wrappedComponentType,\r\n\r\n      properties: {\r\n        manifest: JSON.stringify(v2Manifest)\r\n      }\r\n    };\r\n\r\n    if (v2Manifest.componentType === 'Application') {\r\n      const applicationManifest: IClientSideApplicationManifest = v2Manifest as IClientSideApplicationManifest;\r\n      v1Manifest.preloadClientSideComponents = applicationManifest.preloadComponents;\r\n      v1Manifest.preloadCommands = applicationManifest.preloadOptions;\r\n    }\r\n\r\n    return v1Manifest;\r\n  }\r\n\r\n  private _gatherPreloadManifestIds(deployModules: IDeployModules): string[] {\r\n    const preloadIds: string[] = [];\r\n    if (deployModules.frameworkModules) {\r\n      deployModules.frameworkModules.forEach((_: IFrameworkModuleConfig, id: string) => {\r\n        const standardLibraryModule: IStandardLibraryModule = standardLibraryModules[id];\r\n        if (standardLibraryModule && standardLibraryModule.preloadId) {\r\n          preloadIds.push(standardLibraryModule.preloadId);\r\n\r\n          if (standardLibraryModule.dependentIds && standardLibraryModule.dependentIds.length) {\r\n            preloadIds.push(...standardLibraryModule.dependentIds);\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    return preloadIds;\r\n  }\r\n\r\n  private _includePreloadManifestIds(preloadIds: string[], manifest: IClientSideApplicationManifest): void {\r\n    // This is V1 manifest wrapping a V2 manifest because a server change hasn't gone in yet, so we need to\r\n    // add these to the wrapper's preload components. This implementation will change when V2 goes into the server.\r\n\r\n    if (!manifest.preloadComponents) {\r\n      manifest.preloadComponents = [];\r\n    }\r\n\r\n    for (const preloadId of preloadIds) {\r\n      if (manifest.preloadComponents.indexOf(preloadId) === -1) {\r\n        manifest.preloadComponents.push(preloadId);\r\n      }\r\n    }\r\n  }\r\n\r\n  private _generateManifest(deployEntry: IDeployEntry,\r\n                            loaderConfig: IClientSideComponentLoaderConfig): IClientSideComponentManifest {\r\n    const manifest: IClientSideComponentManifest = cloneDeep(deployEntry.manifest);\r\n    delete manifest[schemaPropertyName];\r\n    manifest.loaderConfig = loaderConfig;\r\n    return manifest;\r\n  }\r\n\r\n  private _generateLoaderConfig(deployModules: IDeployModules,\r\n                                internalModuleBaseUrls: string[],\r\n                                resolvePath: (path: string | IPath) => string | IPath,\r\n                                defaultLocaleOverride?: string): IClientSideComponentLoaderConfig {\r\n    // Ensure all internalModuleBaseUrls have a trailing slash\r\n    for (let i: number = 0; i < internalModuleBaseUrls.length; i++) {\r\n      const internalModuleBaseUrl: string = internalModuleBaseUrls[i];\r\n      if (!internalModuleBaseUrl.match(/\\/$/)) {\r\n        internalModuleBaseUrls[i] = `${internalModuleBaseUrl}/`;\r\n      }\r\n    }\r\n\r\n    const scriptResources: { [name: string]: IModuleConfig } = {};\r\n\r\n    if (deployModules.internalModules) {\r\n      deployModules.internalModules.forEach((module: IInternalModuleConfig, id: string) => {\r\n        // Clone the module so we can make changes to it\r\n        module = cloneDeep(module);\r\n        module.type = 'internal';\r\n        scriptResources[id] = module;\r\n\r\n        module.path = resolvePath(module.path);\r\n      });\r\n    }\r\n\r\n    if (deployModules.localizedModules) {\r\n      deployModules.localizedModules.forEach((module: ILocalizedInternalModuleConfig, id: string) => {\r\n        // Clone the module so we can make changes to it\r\n        module = cloneDeep(module);\r\n        module.type = 'localized';\r\n        scriptResources[id] = module;\r\n\r\n        for (const locale in module.paths) {\r\n          module.paths[locale] = resolvePath(module.paths[locale]);\r\n        }\r\n\r\n        if (defaultLocaleOverride && defaultLocaleOverride in module.paths) {\r\n          module.defaultPath = module.paths[defaultLocaleOverride];\r\n          delete module.paths;\r\n        } else {\r\n          module.defaultPath = resolvePath(module.defaultPath);\r\n        }\r\n      });\r\n    }\r\n\r\n    if (deployModules.frameworkModules) {\r\n      deployModules.frameworkModules.forEach((module: IFrameworkModuleConfig, id: string) => {\r\n        // Clone the module so we can make changes to it\r\n        module = cloneDeep(module);\r\n        module.type = 'framework';\r\n        scriptResources[id] = module;\r\n\r\n        if (module.failoverPath) {\r\n          module.failoverPath = resolvePath(module.failoverPath);\r\n        }\r\n      });\r\n    }\r\n\r\n    if (!(deployModules.entryModuleId in scriptResources)) {\r\n      this.logError(`Entry module \"${deployModules.entryModuleId}\" is missing a definition. The manifest will not ` +\r\n                    'load');\r\n    }\r\n\r\n    const result: IClientSideComponentLoaderConfig = {\r\n      entryModuleId: deployModules.entryModuleId,\r\n      internalModuleBaseUrls: internalModuleBaseUrls,\r\n      scriptResources: scriptResources\r\n    };\r\n\r\n    return result;\r\n  }\r\n\r\n  private _resolveDebugPath(assetPath: string | IPath): string | IPath {\r\n    if (!assetPath) {\r\n      return undefined;\r\n    }\r\n\r\n    if (typeof assetPath === 'string') {\r\n      // If this is a full URL, don't change it\r\n      if (IsUrl(assetPath)) {\r\n        return assetPath;\r\n      } else {\r\n        return path.relative(this.buildConfig.rootPath, assetPath).replace(/\\\\/g, '/');\r\n      }\r\n    } else {\r\n      return {\r\n        default: this._resolveDebugPath(assetPath.default) as string,\r\n        debug: this._resolveDebugPath(assetPath.debug) as string\r\n      };\r\n    }\r\n  }\r\n\r\n  private _resolveProductionPath(assetPath: string | IPath): string | IPath {\r\n    if (!assetPath) {\r\n      return undefined;\r\n    }\r\n\r\n    if (typeof assetPath === 'string') {\r\n      let assetPathStr: string = assetPath as string;\r\n      if (assetPathStr.charAt(0) === '/') {\r\n        assetPathStr = assetPathStr.substr(1);\r\n      }\r\n\r\n      // If this is a full URL, don't change it\r\n      if (IsUrl(assetPathStr)) {\r\n        return assetPathStr;\r\n      } else if (this.taskConfig.cdnUrlPrefix) {\r\n        return path.posix.join(this.taskConfig.cdnUrlPrefix, assetPathStr);\r\n      } else {\r\n        return assetPathStr;\r\n      }\r\n    } else {\r\n      return {\r\n        default: this._resolveProductionPath(assetPath.default) as string,\r\n        debug: this._resolveProductionPath(assetPath.debug) as string\r\n      };\r\n    }\r\n  }\r\n}"],"sourceRoot":"/source/"}