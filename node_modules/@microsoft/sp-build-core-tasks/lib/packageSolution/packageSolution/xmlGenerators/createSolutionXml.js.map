{"version":3,"sources":["packageSolution/packageSolution/xmlGenerators/createSolutionXml.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;;AAEH,mCAAmC;AAEnC,IAAY,YAAY,WAAM,KAAK,CAAC,CAAA;AACpC,uBAAsB,QAAQ,CAAC,CAAA;AAE/B,uCAAoD,0BAA0B,CAAC,CAAA;AAC/E,iCAA6B,oBAAoB,CAAC,CAAA;AAClD,0BAAsB,qBAAqB,CAAC,CAAA;AAC5C,qCAAiC,wBAAwB,CAAC,CAAA;AAS1D,2BAEI,QAAmB,EAAE,sBAAgC,EAAE,SAAqB;IAC9E,QAAQ,GAAG,cAAK,CAAC;QACf,OAAO,EAAE,SAAS;KACnB,EAAE,QAAQ,CAAc,CAAC;IAE1B,kEAAkE;IAClE,IAAM,gBAAgB,GAAS,gCAAsB,CAAC,EAAE,EACtD;QACE;YACE,IAAI,EAAE,kBAAkB;YACxB,MAAM,EAAE,mBAAS,CAAC,mBAAmB;SACtC;KACF,CAAC,CAAC;IAEL,6EAA6E;IAC7E,IAAM,eAAe,GAAS;QAC5B,QAAQ,EAAE,mBAAS,CAAC,uBAAuB;QAC3C,GAAG,EAAE,YAAY,CAAC;YAChB,KAAK,EAAE;gBACL;oBACE,KAAK,EAAE;wBACL,KAAK,EAAE,8DAA8D;qBACtE;iBACF;gBACD;oBACE,OAAO,EAAE;wBACP;4BACE,KAAK,EAAE;gCACL,SAAS,EAAE,KAAK;gCAChB,WAAW,EAAE,UAAU;6BACxB;yBACF;qBACF;iBACF;gBACD;oBACE,OAAO,EAAE;wBACP;4BACE,KAAK,EAAE;gCACL,SAAS,EAAE,MAAM;gCACjB,WAAW,EAAE,0DAA0D;6BACxE;yBACF;qBACF;iBACF;gBACD;oBACE,OAAO,EAAE;wBACP;4BACE,KAAK,EAAE;gCACL,SAAS,EAAE,SAAS;gCACpB,WAAW,EAAE,UAAU;6BACxB;yBACF;qBACF;iBACF;gBACD;oBACE,OAAO,EAAE;wBACP;4BACE,KAAK,EAAE;gCACL,SAAS,EAAE,KAAK;gCAChB,WAAW,EAAE,UAAU;6BACxB;yBACF;qBACF;iBACF;gBACD;oBACE,OAAO,EAAE;wBACP;4BACE,KAAK,EAAE;gCACL,SAAS,EAAE,MAAM;gCACjB,WAAW,EAAE,UAAU;6BACxB;yBACF;qBACF;iBACF;gBACD;oBACE,OAAO,EAAE;wBACP;4BACE,KAAK,EAAE;gCACL,SAAS,EAAE,MAAM;gCACjB,WAAW,EAAE,UAAU;6BACxB;yBACF;qBACF;iBACF;aACF;SACF,EAAE,8BAAoB,CAAC;KACzB,CAAC;IAEF,2BAA2B;IAC3B,IAAM,UAAU,GAAU,EAAE,CAAC;IAC7B,2BAA2B;IAE3B,0BAA0B;IAC1B,UAAU,CAAC,IAAI,CAAC;QACd,KAAK,EAAE,QAAQ,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,GAAG,QAAQ,CAAC,IAAI;KACvD,CAAC,CAAC;IAEH,iDAAiD;IACjD,4BAA4B;IAC5B,IAAM,gBAAgB,GAAG,QAAQ,CAAC,gBAAgB,IAAI,QAAQ,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC;UAEtF,QAAQ,CAAC,gBAAgB,CAAC,GAAG,CAAC,UAAC,MAAc;YAC7C,MAAM,CAAC;gBACL,eAAe,EAAE;oBACf;wBACE,KAAK,EAAE;4BACH,WAAW,EAAE,MAAM;yBACtB;qBACF;iBACF;aACF,CAAC;QACJ,CAAC,CAAC;UACA,SAAS,CAAC;IAEd,EAAE,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC;QACrB,UAAU,CAAC,IAAI,CAAC;YACd,gBAAgB,EAAE,gBAAgB;SACnC,CAAC,CAAC;IACL,CAAC;IAED,gFAAgF;IAChF,IAAM,WAAW,GAA+B;QAC9C,QAAQ,EAAE,mBAAS,CAAC,mBAAmB;QACvC,oCAAoC;QACpC,aAAa,EAAE,IAAI;QACnB,mCAAmC;QACnC,GAAG,EAAE,YAAY,CAAC;YAChB,GAAG,EAAE;gBACH;oBACE,KAAK,EAAE;wBACL,KAAK,EAAE,2DAA2D;wBAClE,IAAI,EAAE,QAAQ,CAAC,IAAI;wBACnB,SAAS,EAAE,QAAQ,CAAC,EAAE;wBACtB,OAAO,EAAE,QAAQ,CAAC,OAAO;wBACzB,oBAAoB,EAAE,UAAU;wBAChC,oBAAoB,EAAE,MAAM;qBAC7B;iBACF;gBACD;oBACE,UAAU,EAAE,UAAU;iBACvB;aACF;SACF,EAAE,8BAAoB,CAAC;KACzB,CAAC;IAEF,8CAA8C;IAC9C,IAAM,WAAW,GACf,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAC,OAAiB,IAAK,OAAA,0BAAgB,CAAC,OAAO,EAAE,SAAS,CAAC,EAApC,CAAoC,CAAC,CAAC;IAErF,6DAA6D;IAC7D,IAAI,QAAQ,GAAoB,WAAW,CAAC,GAAG,CAAC,UAAC,OAAoB;QACnE,MAAM,CAAC;YACL,IAAI,EAAE,kBAAkB;YACxB,MAAM,EAAE,OAAO,CAAC,QAAQ;SACzB,CAAC;IACJ,CAAC,CAAC,CAAC;IACH,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,sBAAsB,CAAC,GAAG,CAAC,UAAC,QAAgB;QACrE,MAAM,CAAC;YACL,IAAI,EAAE,kBAAkB;YACxB,MAAM,EAAE,QAAQ;SACjB,CAAC;IACJ,CAAC,CAAC,CAAC,CAAC;IAEJ,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,sBAAsB,CAAC,GAAG,CAAC,UAAC,QAAgB;QAC/E,MAAM,CAAC;YACL,IAAI,EAAE,kBAAkB;YACxB,MAAM,EAAE,QAAQ;SACjB,CAAC;IACJ,CAAC,CAAC,CAAC,CAAC;IAEJ,EAAE,CAAC,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC,CAAC;QAClC,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC;YACvB,IAAI,EAAE,yBAAyB;YAC/B,MAAM,EAAE,SAAS,CAAC,mBAAmB;SACxC,CAAC,CAAC;IACL,CAAC;IAED,WAAW,CAAC,aAAa,GAAG,gCAAsB,CAAC,mBAAS,CAAC,mBAAmB,EAAE,QAAQ,CAAC,CAAC;IAE5F,MAAM,CAAC;QACL,QAAQ,EAAE,WAAW;QACrB,QAAQ,EAAE,WAAW;QACrB,aAAa,EAAE,gBAAgB;QAC/B,eAAe,EAAE,eAAe;QAChC,WAAW,EAAE,SAAS;KACvB,CAAC;AACJ,CAAC;AA5LD;mCA4LC,CAAA","file":"packageSolution/packageSolution/xmlGenerators/createSolutionXml.js","sourcesContent":["/**\r\n * @file createSolutionXml.ts\r\n * @Copyright (c) Microsoft Corporation.  All rights reserved.\r\n *\r\n * Creates an package's Solution.Xml for a ClientSideSolution\r\n */\r\n\r\n/// <reference path='./xml.d.ts' />\r\n\r\nimport * as XmlGenerator from 'xml';\r\nimport { merge } from 'lodash';\r\n\r\nimport createRelationshipsXml, {IRelationship} from './createRelationshipsXml';\r\nimport createFeatureXml from './createFeatureXml';\r\nimport constants from '../config/constants';\r\nimport serializationOptions from './serializationOptions';\r\nimport ISolution from '../models/packageDefinition/ISolution';\r\nimport IFeature from '../models/packageDefinition/IFeature';\r\nimport IXml from '../models/packageXml/IXml';\r\nimport IOpenDocumentConventionXml from '../models/packageXml/IOpenDocumentConventionXml';\r\nimport IPackageXml from '../models/packageXml/IPackageXml';\r\nimport IFeatureXml from '../models/packageXml/IFeatureXml';\r\nimport IResources from '../models/packageXml/IResources';\r\n\r\nexport default\r\n  function createSolutionXml(\r\n    solution: ISolution, customFeatureFilenames: string[], resources: IResources): IPackageXml {\r\n  solution = merge({\r\n    version: '1.0.0.0'\r\n  }, solution) as ISolution;\r\n\r\n  // Create the top-level .rels file which points at the AppManifest\r\n  const relationshipsXml: IXml = createRelationshipsXml('',\r\n    [\r\n      {\r\n        type: 'package-manifest',\r\n        target: constants.appManifestFileName\r\n      }\r\n    ]);\r\n\r\n  // Create the top-level content types, defining content types in this package\r\n  const contentTypesXml: IXml = {\r\n    filename: constants.contentTypesXmlFilename,\r\n    xml: XmlGenerator({\r\n      Types: [\r\n        {\r\n          _attr: {\r\n            xmlns: 'http://schemas.openxmlformats.org/package/2006/content-types'\r\n          }\r\n        },\r\n        {\r\n          Default: [\r\n            {\r\n              _attr: {\r\n                Extension: 'xml',\r\n                ContentType: 'text/xml'\r\n              }\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          Default: [\r\n            {\r\n              _attr: {\r\n                Extension: 'rels',\r\n                ContentType: 'application/vnd.openxmlformats-package.relationships+xml'\r\n              }\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          Default: [\r\n            {\r\n              _attr: {\r\n                Extension: 'webpart',\r\n                ContentType: 'text/xml'\r\n              }\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          Default: [\r\n            {\r\n              _attr: {\r\n                Extension: 'htm',\r\n                ContentType: 'text/xml'\r\n              }\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          Default: [\r\n            {\r\n              _attr: {\r\n                Extension: 'aspx',\r\n                ContentType: 'text/xml'\r\n              }\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          Default: [\r\n            {\r\n              _attr: {\r\n                Extension: 'resx',\r\n                ContentType: 'text/xml'\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    }, serializationOptions)\r\n  };\r\n\r\n  /* tslint:disable:no-any */\r\n  const properties: any[] = [];\r\n  /* tslint:disable:no-any */\r\n\r\n  // Add title to properties\r\n  properties.push({\r\n    Title: solution.title ? solution.title : solution.name\r\n  });\r\n\r\n  // Add supported locales to properties, if needed\r\n  /* tslint:disable:typedef */\r\n  const supportedLocales = solution.supportedLocales && solution.supportedLocales.length > 0\r\n  /* tslint:enable:typedef */\r\n    ? solution.supportedLocales.map((locale: string) => {\r\n      return {\r\n        SupportedLocale: [\r\n          {\r\n            _attr: {\r\n                CultureName: locale\r\n            }\r\n          }\r\n        ]\r\n      };\r\n    })\r\n    : undefined;\r\n\r\n  if (supportedLocales) {\r\n    properties.push({\r\n      SupportedLocales: supportedLocales\r\n    });\r\n  }\r\n\r\n  // Create the top-level AppManifest's XML, note that it is missing relationships\r\n  const manifestXml: IOpenDocumentConventionXml = {\r\n    filename: constants.appManifestFileName,\r\n    /* tslint:disable:no-null-keyword */\r\n    relationships: null,\r\n    /* tslint:enable:no-null-keyword */\r\n    xml: XmlGenerator({\r\n      App: [\r\n        {\r\n          _attr: {\r\n            xmlns: 'http://schemas.microsoft.com/sharepoint/2012/app/manifest',\r\n            Name: solution.name,\r\n            ProductID: solution.id,\r\n            Version: solution.version,\r\n            SharePointMinVersion: '16.0.0.0',\r\n            IsClientSideSolution: 'true'\r\n          }\r\n        },\r\n        {\r\n          Properties: properties\r\n        }\r\n      ]\r\n    }, serializationOptions)\r\n  };\r\n\r\n  // Collect the XML for the individual features\r\n  const featuresXml: IFeatureXml[] =\r\n    solution.features.map((feature: IFeature) => createFeatureXml(feature, resources));\r\n\r\n  // Ensure the Manifest's relationships to features are stored\r\n  let relsList: IRelationship[] = featuresXml.map((feature: IFeatureXml) => {\r\n    return {\r\n      type: 'manifest-feature',\r\n      target: feature.filename\r\n    };\r\n  });\r\n  relsList = relsList.concat(customFeatureFilenames.map((filename: string) => {\r\n    return {\r\n      type: 'manifest-feature',\r\n      target: filename\r\n    };\r\n  }));\r\n\r\n  relsList = relsList.concat(resources.localizedResourcePaths.map((filename: string) => {\r\n    return {\r\n      type: 'content-resource',\r\n      target: filename\r\n    };\r\n  }));\r\n\r\n  if (resources.defaultResourcePath) {\r\n    relsList = relsList.concat({\r\n        type: 'content-defaultresource',\r\n        target: resources.defaultResourcePath\r\n    });\r\n  }\r\n\r\n  manifestXml.relationships = createRelationshipsXml(constants.appManifestFileName, relsList);\r\n\r\n  return {\r\n    manifest: manifestXml,\r\n    features: featuresXml,\r\n    relationships: relationshipsXml,\r\n    contentTypesXml: contentTypesXml,\r\n    customFiles: undefined\r\n  };\r\n}"],"sourceRoot":"/source/"}