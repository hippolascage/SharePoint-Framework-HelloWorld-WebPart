/**
 * @file createPackage.ts
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * Creates a client-side app package and writes it to disk
 */
"use strict";
require('es6-promise');
var colors = require('colors');
var normalizeSolutionDefinition_1 = require('./utils/normalizeSolutionDefinition');
var createSolutionXml_1 = require('./xmlGenerators/createSolutionXml');
var readCustomFeatures_1 = require('./utils/readCustomFeatures');
var readResources_1 = require('./utils/readResources');
var writePackage_1 = require('./writePackage');
/**
 * Creates and writes a package to disk using a package definition and manifest mapping
 */
function createPackage(config, manifests) {
    // @todo instead of using try/catch we should move config validation to a separate function
    try {
        console.log(colors.yellow('\nVerifying configuration...'));
        if (!manifests || !manifests.size) {
            throw new Error('The webparts manifests list is empty. ' +
                'Please ensure you have done a build and that your config file is pointed at the correct folder.');
        }
        if (!config.paths.zippedPackage || config.paths.zippedPackage === '') {
            throw new Error('The package-solution.json config is missing a package name.');
        }
        console.log(colors.green('Done!\n'));
        console.log(colors.yellow('Normalizing solution information...'));
        normalizeSolutionDefinition_1.default(config.solution, manifests);
        console.log(colors.green('Done!\n'));
        console.log(colors.yellow('Reading feature_xml/ folder...'));
        return readCustomFeatures_1.default(config).then(function (customFeatures) {
            console.log(colors.green('Done!\n'));
            console.log(colors.yellow('Reading resources...'));
            return readResources_1.default(config).then(function (resources) {
                console.log(colors.green('Done!\n'));
                console.log(colors.yellow('Generating solution XML...'));
                var solutionXml = createSolutionXml_1.default(config.solution, customFeatures.customFeatureFilepath, resources);
                console.log(colors.green('Done!\n'));
                solutionXml.customFiles = customFeatures.files;
                console.log(colors.yellow("Writing solution XML to " + config.paths.debugDir + "..."));
                return writePackage_1.default(solutionXml, config).then(function () {
                    console.log(colors.green('Done!\n'));
                    console.log(colors.bold.green('ALL DONE!\n'));
                }, function (error) {
                    console.error(colors.red(error));
                });
            });
        }, function (error) {
            console.error(colors.red(error));
        });
    }
    catch (error) {
        console.error(colors.red(error));
        if (error.stack) {
            console.error(error.stack);
        }
    }
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = createPackage;

//# sourceMappingURL=createPackage.js.map
