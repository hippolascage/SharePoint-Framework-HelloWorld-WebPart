{"version":3,"sources":["packageSolution/PackageSolutionTask.ts"],"names":[],"mappings":"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","file":"packageSolution/PackageSolutionTask.js","sourcesContent":["'use strict';\r\n\r\nimport * as gulp from 'gulp';\r\nimport * as gutil from 'gulp-util';\r\nimport * as path from 'path';\r\nimport * as through2 from 'through2';\r\n\r\nimport { GulpTask, IBuildConfig } from 'gulp-core-build';\r\nimport ISolution from './packageSolution/models/packageDefinition/ISolution';\r\nimport createPackage from './packageSolution/createPackage';\r\nimport { IClientSideComponentManifest } from '@microsoft/sp-module-interfaces';\r\nimport ManifestValidator,\r\n       { IManifestValidatorResult } from '@microsoft/sp-module-interfaces/lib/manifestSchemaValidator';\r\n\r\n/* tslint:disable:max-line-length */\r\nexport interface IPackageSolutionTaskConfig {\r\n  paths?: {\r\n    /** The packaging root folder. Defaults to './sharepoint' */\r\n    packageDir?: string;\r\n    /** The folder to write the raw package to disk for debugging. Defaults to 'solution/debug' */\r\n    debugDir?: string;\r\n    /** The name of the spapp to create (including extension) Defaults to 'ClientSolution.spapp' */\r\n    zippedPackage?: string;\r\n    /** The folder containing the raw feature_xml to import into the package. Defaults to 'feature_xml' */\r\n    featureXmlDir?: string;\r\n    /** The glob to match against to find manifest files. Looks in dist/ when running in normal, but deploy/ for production */\r\n    manifestsMatch?: string;\r\n    /** The path to the folder where manifests are stored. Defaults to buildConfig.distFolder */\r\n    manifestDir?: () => string;\r\n  };\r\n  /** The definition of this solution's package, features, and components */\r\n  solution?: ISolution;\r\n}\r\n/* tslint:enable:max-line-length */\r\n\r\nexport class PackageSolutionTask extends GulpTask<IPackageSolutionTaskConfig> {\r\n  public name: string = 'package-solution';\r\n\r\n  public taskConfig: IPackageSolutionTaskConfig = {\r\n    paths: {\r\n      packageDir: 'sharepoint',\r\n      debugDir: path.join('solution', 'debug'),\r\n      zippedPackage: path.join('solution', 'ClientSolution.spapp'),\r\n      featureXmlDir: 'feature_xml',\r\n      manifestsMatch: '*.json',\r\n      manifestDir: (): string => { return this.buildConfig.distFolder; }\r\n    },\r\n    solution: {\r\n      'name': 'A Sample Solution',\r\n      'id': '00000000-0000-0000-0000-000000000000'\r\n    }\r\n  };\r\n\r\n  private _hasPrependedPaths: boolean = false;\r\n\r\n  public executeTask(gulp: gulp.Gulp, completeCallback: () => void): void {\r\n    this._prependBaseToConfigPaths();\r\n\r\n    const manifestMap: Map<string, IClientSideComponentManifest> = new Map<string, IClientSideComponentManifest>();\r\n    let foundAnyManifests: boolean = false;\r\n    gulp.src(this.taskConfig.paths.manifestsMatch)\r\n        .pipe(through2.obj((file: gutil.File, enc: string, callback: () => void) => {\r\n          foundAnyManifests = true;\r\n          const manifest: IClientSideComponentManifest = JSON.parse(file.contents.toString(enc));\r\n\r\n          const validationResult: IManifestValidatorResult = ManifestValidator.validateManifest(manifest);\r\n          if (!validationResult.result) {\r\n            this.logWarning(`Ignoring manifest due to validation error (${file.path})`);\r\n            this.logVerbose(ManifestValidator.getFormattedErrorMessage(validationResult.errors));\r\n            callback();\r\n            return;\r\n          }\r\n\r\n          this.log(`Found manifest: ${file.path} `);\r\n          manifestMap.set(manifest.id, manifest);\r\n          callback();\r\n        },\r\n        (callback: (err?: Error | string | void) => void) => {\r\n          if (!manifestMap.size) {\r\n            if (foundAnyManifests) {\r\n              callback(new Error(`Some manifests were found in '${this.taskConfig.paths.manifestsMatch}' ` +\r\n                       ', but were not valid. Ensure paths.manifestsMatch is correct'));\r\n            } else {\r\n              callback(new Error(`No manifests were found in '${this.taskConfig.paths.manifestsMatch}'. ` +\r\n                       'Ensure a build has completed successfully and that paths.manifestsMatch is correct'));\r\n            }\r\n          }\r\n          createPackage(this.taskConfig, manifestMap).then(callback);\r\n        }))\r\n        .on('finish', () => completeCallback());\r\n  }\r\n\r\n  public getNukeMatch(buildConfig: IBuildConfig): string[] {\r\n    this.buildConfig = buildConfig;\r\n    this._prependBaseToConfigPaths();\r\n    return [\r\n      this.taskConfig.paths.debugDir,\r\n      this.taskConfig.paths.zippedPackage\r\n    ];\r\n  }\r\n\r\n  private _prependBaseToConfigPaths(): void {\r\n    if (!this._hasPrependedPaths) {\r\n      this.taskConfig.paths.manifestsMatch =\r\n        path.join(this.taskConfig.paths.manifestDir(), this.taskConfig.paths.manifestsMatch);\r\n      this.taskConfig.paths.debugDir =\r\n        path.join(this.taskConfig.paths.packageDir, this.taskConfig.paths.debugDir);\r\n      this.taskConfig.paths.zippedPackage =\r\n        path.join(this.taskConfig.paths.packageDir, this.taskConfig.paths.zippedPackage);\r\n      this.taskConfig.paths.featureXmlDir =\r\n        path.join(this.taskConfig.paths.packageDir, this.taskConfig.paths.featureXmlDir);\r\n      this._hasPrependedPaths = true;\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"/source/"}