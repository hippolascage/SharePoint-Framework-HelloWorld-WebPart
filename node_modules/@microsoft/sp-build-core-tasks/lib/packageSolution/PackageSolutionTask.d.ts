import * as gulp from 'gulp';
import { GulpTask, IBuildConfig } from 'gulp-core-build';
import ISolution from './packageSolution/models/packageDefinition/ISolution';
export interface IPackageSolutionTaskConfig {
    paths?: {
        /** The packaging root folder. Defaults to './sharepoint' */
        packageDir?: string;
        /** The folder to write the raw package to disk for debugging. Defaults to 'solution/debug' */
        debugDir?: string;
        /** The name of the spapp to create (including extension) Defaults to 'ClientSolution.spapp' */
        zippedPackage?: string;
        /** The folder containing the raw feature_xml to import into the package. Defaults to 'feature_xml' */
        featureXmlDir?: string;
        /** The glob to match against to find manifest files. Looks in dist/ when running in normal, but deploy/ for production */
        manifestsMatch?: string;
        /** The path to the folder where manifests are stored. Defaults to buildConfig.distFolder */
        manifestDir?: () => string;
    };
    /** The definition of this solution's package, features, and components */
    solution?: ISolution;
}
export declare class PackageSolutionTask extends GulpTask<IPackageSolutionTaskConfig> {
    name: string;
    taskConfig: IPackageSolutionTaskConfig;
    private _hasPrependedPaths;
    executeTask(gulp: gulp.Gulp, completeCallback: () => void): void;
    getNukeMatch(buildConfig: IBuildConfig): string[];
    private _prependBaseToConfigPaths();
}
