{"version":3,"sources":["copyAssets/CopyAssetsTask.ts"],"names":[],"mappings":"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","file":"copyAssets/CopyAssetsTask.js","sourcesContent":["import * as webpack from 'webpack';\r\nimport * as path from 'path';\r\nimport * as gulp from 'gulp';\r\nimport * as through2 from 'through2';\r\nimport * as gulpUtil from 'gulp-util';\r\nimport * as merge from 'merge2';\r\nimport * as gulpReplace from 'gulp-replace';\r\nimport setWebpackPublicPath = require('@microsoft/loader-set-webpack-public-path');\r\nimport { IClientSideComponentManifest } from '@microsoft/sp-module-interfaces';\r\nimport { escapeRegExp } from 'lodash';\r\n\r\nimport {\r\n  IFrameworkModuleConfig,\r\n  IInternalModuleConfig,\r\n  ILocalizedInternalModuleConfig,\r\n  standardLibraryModules\r\n} from '@microsoft/sp-module-interfaces';\r\n\r\nimport OdspGulpTask, { ILocaleMap, INonAMDExternalModuleConfig } from './../OdspGulpTask';\r\nimport { IBundleEntry } from './../configureWebpack/ConfigureWebpackTask';\r\nimport constants from '../constants';\r\nimport IsUrl from '../utilities/IsUrl';\r\n\r\nexport interface ICopyAssetsTaskConfig {\r\n  /**\r\n   * Path to where assets should be staged for deployment to CDN during a production build\r\n   */\r\n  deployCdnPath?: string;\r\n\r\n  /**\r\n   * Extensions of webpack-produced assets to ignore\r\n   */\r\n  extsToIgnore?: string[];\r\n}\r\n\r\ninterface IWebpackStatsObject {\r\n  assets: IWebpackAsset[];\r\n  chunks: IWebpackChunk[];\r\n  modules: IWebpackModule[];\r\n}\r\n\r\ninterface IWebpackAsset {\r\n  name: string;\r\n  chunks: number[];\r\n}\r\n\r\ninterface IWebpackChunk {\r\n  entry: boolean;\r\n  id: number;\r\n  files: string[];\r\n  names: string[];\r\n  hash: string;\r\n}\r\n\r\ninterface IWebpackModule {\r\n  name: string;\r\n  chunks: number[];\r\n}\r\n\r\ninterface IExtendedWebpackModule extends IWebpackModule {\r\n  externalName?: string;\r\n  renameCallbacks?: ((filename: string) => void)[];\r\n  configExternalFullPath?: string;\r\n  isExternalUrl: boolean;\r\n  nonAmdConfig: INonAMDExternalModuleConfig;\r\n}\r\n\r\ninterface ITokenReplace {\r\n  oldValueRegex: RegExp;\r\n  newValue: string;\r\n}\r\n\r\nexport interface IDeployEntry {\r\n  manifest: IClientSideComponentManifest;\r\n  bundleEntry: IBundleEntry;\r\n  entryDistPath?: string;\r\n  entryName?: string;\r\n  debugModules?: IDeployModules;\r\n  productionModules?: IDeployModules;\r\n}\r\n\r\nexport interface IDeployModules {\r\n  entryModuleId?: string;\r\n  localizedModules: Map<string, ILocalizedInternalModuleConfig>;\r\n  internalModules: Map<string, IInternalModuleConfig>;\r\n  frameworkModules: Map<string, IFrameworkModuleConfig>;\r\n}\r\n\r\ninterface IStringsModule {\r\n  path: string;\r\n  gulpStream: NodeJS.ReadWriteStream;\r\n}\r\n\r\n/**\r\n * Prepares deployment to CDNs and the manifest server through onedrive-buildtools.\r\n *\r\n * Example:\r\n *  IN:\r\n *   webpack stats\r\n *   deployCdnPath - a path where files should be placed for upload to CDNs and the manifest server\r\n *\r\n *  OUT:\r\n *   all assets for the package copied to {deployCdnPath}\r\n *   all externals for the package copied to {deployCdnPath}\r\n *   data required to produce manifests in the properties object\r\n */\r\nexport class CopyAssetsTask extends OdspGulpTask<ICopyAssetsTaskConfig> {\r\n  public name: string = 'copyAssets';\r\n  public taskConfig: ICopyAssetsTaskConfig = {\r\n    deployCdnPath: undefined,\r\n    extsToIgnore: ['.map', '.stats.json', '.stats.html']\r\n  };\r\n\r\n  public executeTask(gulp: gulp.Gulp, completeCallback: (error?: string) => void): NodeJS.ReadWriteStream {\r\n    let shouldPrepareProductionDeployment: boolean = this.buildConfig.production;\r\n    if (!this.taskConfig.deployCdnPath && this.buildConfig.production) {\r\n      shouldPrepareProductionDeployment = false;\r\n      // Suppressed warning for now to unblock CI. VSO#219493\r\n      this.log/*Warning*/('No deploy CDN path specified. Unable to prepare production deployment.');\r\n    }\r\n\r\n    if (!this.properties.webpackStats) {\r\n      this.logWarning('Missing webpack stats object. Nothing to prepare for deployment.');\r\n      completeCallback();\r\n      return;\r\n    }\r\n\r\n    const configEntries: IBundleEntry[]  = this.properties.entries;\r\n    if (!configEntries || !configEntries.length || configEntries.length === 0) {\r\n      // @TODO: SPPPlat VSO 221536\r\n      // this.logWarning('Missing config entries list. Nothing to prepare for deployment.');\r\n      completeCallback();\r\n      return;\r\n    }\r\n\r\n    const distPath: string = path.join(this.buildConfig.rootPath, this.buildConfig.distFolder);\r\n\r\n    const tasks: NodeJS.ReadWriteStream[] = [];\r\n\r\n    const webpackEntryChunks: Map<string, IWebpackChunk> = new Map<string, IWebpackChunk>();\r\n    const externalModules: IExtendedWebpackModule[] = [];\r\n\r\n    const webpackStats: webpack.compiler.Stats = this.properties.webpackStats;\r\n    const webpackStatsJson: IWebpackStatsObject = webpackStats.toJson();\r\n    const {\r\n      assets: webpackAssets,\r\n      chunks: webpackChunks,\r\n      modules: webpackModules\r\n    }: IWebpackStatsObject  = webpackStatsJson;\r\n\r\n    webpackChunks.forEach((webpackChunk: IWebpackChunk) => {\r\n      if (webpackChunk.entry) {\r\n        webpackChunk.names.forEach((name: string) => {\r\n          webpackEntryChunks.set(name, webpackChunk);\r\n        });\r\n      }\r\n    });\r\n\r\n    const externalsRegex: RegExp = /external \\\"(.+)\\\"$/;\r\n    const configExternals: { [name: string]: string | INonAMDExternalModuleConfig } = this.properties.externals || {};\r\n\r\n    webpackModules.forEach((webpackModule: IExtendedWebpackModule) => {\r\n      const matches: RegExpMatchArray = webpackModule.name.match(externalsRegex);\r\n      if (matches) {\r\n        const externalName: string = matches[1];\r\n        const configExternal: string | INonAMDExternalModuleConfig = configExternals[externalName];\r\n        let configExternalPath: string;\r\n\r\n        if (configExternal) {\r\n          if (typeof configExternal === 'string') {\r\n            // it is an AMD external\r\n            configExternalPath = configExternal as string;\r\n          } else {\r\n            // it is a non-AMD external\r\n            configExternalPath = configExternal.path;\r\n\r\n            if (!configExternal.globalName) {\r\n              this.logError(`External \"${externalName}\" is defined as a Non-AMD script,` +\r\n                `but is missing a globalName property.`);\r\n              return;\r\n            }\r\n\r\n            webpackModule.nonAmdConfig = configExternal as INonAMDExternalModuleConfig;\r\n\r\n            (configExternal.globalDependencies || []).forEach((nonAMDDependency: string) => {\r\n              const dependencyConfig: INonAMDExternalModuleConfig =\r\n                configExternals[nonAMDDependency] as INonAMDExternalModuleConfig;\r\n\r\n              if (!dependencyConfig) {\r\n                this.logError(\r\n                  `External \"${externalName}\" is referencing dependency \"${nonAMDDependency}\" which is not defined\".`);\r\n                return;\r\n              } else if (!dependencyConfig.globalName) {\r\n                this.logError(`External \"${externalName}\" is referencing dependency \"${nonAMDDependency}\"` +\r\n                  `, which is not defined as a global, non-AMD external.`);\r\n                return;\r\n              }\r\n            });\r\n          }\r\n        }\r\n\r\n        if (configExternalPath) {\r\n          // Keep the whole path if it is a full URL\r\n          webpackModule.isExternalUrl = IsUrl(configExternalPath);\r\n\r\n          const configExternalFullPath: string = webpackModule.isExternalUrl\r\n              ? configExternalPath : path.join(this.buildConfig.rootPath, configExternalPath);\r\n\r\n          webpackModule.configExternalFullPath = configExternalFullPath;\r\n        } else if (!this.properties.discoveredLocalizedResources[externalName]) {\r\n          this.logError(`External \"${externalName}\" is not correctly referenced in config.json. Deployed ` +\r\n                        'modules will produce unexpected behavior.');\r\n        }\r\n\r\n        webpackModule.externalName = externalName; // Add the external name as a new property\r\n        webpackModule.renameCallbacks = []; // Create a list of callbacks here\r\n        externalModules.push(webpackModule);\r\n      }\r\n    });\r\n\r\n    // Copy non-entry assets to the CDN deploy directory\r\n    if (shouldPrepareProductionDeployment) {\r\n      const assetsToCopy: string[] = [];\r\n      for (const webpackAsset of webpackAssets) {\r\n        const notIgnoredExt: boolean = !this.taskConfig.extsToIgnore ||\r\n          this.taskConfig.extsToIgnore.reduce((state: boolean, ext: string) =>\r\n            state && webpackAsset.name.slice(-ext.length) !== ext, true);\r\n        const notEntryChunk: boolean = webpackAsset.chunks.reduce((state: boolean, chunkId: number) =>\r\n            state && !webpackChunks[chunkId].entry, true);\r\n\r\n        if (notIgnoredExt && notEntryChunk) {\r\n            // If we make it here, we aren't ignoring this chunk's extension and it isn't an entrypoint asset\r\n            // so we should copy it to the CDN deploy directory\r\n\r\n            // Try to ensure the file has a checksum in the filename\r\n            let checksumFound: boolean = false;\r\n            if (webpackAsset.chunks.length > 0) {\r\n              // Look through all of the asset's chunks and ensure the asset's name contains one of the chunks' hashes\r\n              checksumFound = webpackAsset.chunks.reduce((state: boolean, chunkId: number) =>\r\n                state || webpackAsset.name.indexOf(webpackChunks[chunkId].hash) > -1 , false);\r\n            } else {\r\n              // Split the filename by \"-\" and \"_\", and test each part to see if it looks like a 5+ character hex digest\r\n              const name: string = webpackAsset.name;\r\n              const filenameParts: string[] = path.basename(name, path.extname(name)).split(/[-_]/);\r\n              checksumFound = filenameParts.reduce((state: boolean, filenamePart: string) =>\r\n                state || !!filenamePart.match(/[a-fA-F0-9]{5,}/), false);\r\n            }\r\n\r\n            if (!checksumFound) {\r\n              this.logError(`Webpack-produced asset \"${webpackAsset.name}\" does not appear to have a checksum ` +\r\n                            'in its filename, meaning that it is not safe to deploy to the CDN.');\r\n            }\r\n\r\n            const assetPath: string = path.join(distPath, webpackAsset.name);\r\n            assetsToCopy.push(assetPath);\r\n\r\n            if (webpackAsset.name.toLowerCase() !== webpackAsset.name) {\r\n              this.logWarning(`Asset \"${webpackAsset.name}\"'s name is not all lowercase and will likely not be ` +\r\n                              'accessible after being copied to the CDN. Ensure that its name is all lowercase, ' +\r\n                              'and consider using the \"@microsoft/loader-cased-file\" loader.');\r\n            }\r\n        }\r\n      }\r\n\r\n      // Copy the assets we've queued\r\n      tasks.push(gulp.src(assetsToCopy).pipe(gulp.dest(this.taskConfig.deployCdnPath)));\r\n    }\r\n\r\n    const deployEntries: IDeployEntry[] = [];\r\n\r\n    const stringsCopyCallbackMap: Map<string, ((locale: string, filename: string) => void)[]> =\r\n              new Map<string, ((locale: string, filename: string) => void)[]>();\r\n\r\n    configEntries.forEach((configEntry: IBundleEntry) => {\r\n      const manifest: IClientSideComponentManifest = this.getManifest(configEntry.manifest);\r\n      if (!manifest) {\r\n        this.logWarning(`Missing manifest for entry \"${configEntry.entry}\". ` +\r\n                        'Unable to prepare deployment for this entry.');\r\n        return;\r\n      }\r\n\r\n      const deployEntry: IDeployEntry = { bundleEntry: configEntry, manifest: manifest };\r\n      deployEntries.push(deployEntry);\r\n\r\n      const debugModules: IDeployModules =\r\n            deployEntry.debugModules = {\r\n              localizedModules: new Map<string, ILocalizedInternalModuleConfig>(),\r\n              internalModules: new Map<string, IInternalModuleConfig>(),\r\n              frameworkModules: new Map<string, IFrameworkModuleConfig>()\r\n            };\r\n      const productionModules: IDeployModules =\r\n            deployEntry.productionModules = {\r\n              localizedModules: new Map<string, ILocalizedInternalModuleConfig>(),\r\n              internalModules: new Map<string, IInternalModuleConfig>(),\r\n              frameworkModules: new Map<string, IFrameworkModuleConfig>()\r\n            };\r\n\r\n      const entryBundlePath: string =\r\n            deployEntry.entryDistPath = path.join(this.buildConfig.rootPath, configEntry.outputPath);\r\n\r\n      const entryName: string = deployEntry.entryName = path.basename(entryBundlePath, path.extname(entryBundlePath));\r\n\r\n      const manifestId: string = manifest.id;\r\n\r\n      const stringsModuleId: string = `${manifestId}_strings`;\r\n\r\n      const entryRegExp: string = `${entryName}_?[a-zA-Z0-9]*\\.js`;\r\n\r\n      // If we change the type of bundle we're producing, we need to update this\r\n      const escapedStringsName: string = escapeRegExp(constants.stringsExternalBundleName);\r\n      const defaultStringsModuleRegex: RegExp =\r\n        new RegExp(`^(define\\\\(.*\\\\[.*(\\\\\"|\\\\'))(?:${escapedStringsName})((?:\\\\2).*\\])`);\r\n\r\n      // Initialize the entry gulp stream and make a few initial transformations\r\n      let entryGulpStream: NodeJS.ReadWriteStream =\r\n            gulp.src(entryBundlePath)\r\n                .pipe(through2.obj(this._insertGlobalRegisterCodeIfNecessary(this, !this.buildConfig.production)))\r\n                .pipe(gulpReplace(defaultStringsModuleRegex, `$1${stringsModuleId}$3`))\r\n                .pipe(gulpReplace(new RegExp(constants.defaultWebpackPublicPathScriptName, 'g'), entryRegExp));\r\n\r\n      // Write entry file back to 'dist'\r\n      entryGulpStream = entryGulpStream.pipe(gulp.dest(distPath));\r\n\r\n      // Record the debug entry module\r\n      const debugEntryModule: IInternalModuleConfig = {\r\n        type: 'internal',\r\n        path: entryBundlePath\r\n      };\r\n      debugModules.internalModules.set(entryName, debugEntryModule);\r\n      debugModules.entryModuleId = entryName;\r\n\r\n      if (shouldPrepareProductionDeployment) {\r\n        const productionEntryModule: IInternalModuleConfig = {\r\n          type: 'internal',\r\n          path: undefined\r\n        };\r\n        productionModules.internalModules.set(entryName, productionEntryModule);\r\n        productionModules.entryModuleId = entryName;\r\n\r\n        // Write production file to the CDN deploy path\r\n        entryGulpStream = this._renameWithHash(entryGulpStream,\r\n                                               (hash: string) => `${entryName.toLowerCase()}_${hash}.js`,\r\n                                               (filename: string) => productionEntryModule.path = filename)\r\n                              .pipe(gulp.dest(this.taskConfig.deployCdnPath));\r\n      }\r\n\r\n      tasks.push(entryGulpStream);\r\n\r\n      const entryWebpackChunk: IWebpackChunk = webpackEntryChunks.get(entryName);\r\n      const webpackChunkId: number = entryWebpackChunk.id;\r\n      this._processExternalsForEntry(webpackChunkId,\r\n                                     deployEntry,\r\n                                     externalModules,\r\n                                     stringsModuleId,\r\n                                     shouldPrepareProductionDeployment,\r\n                                     stringsCopyCallbackMap);\r\n    });\r\n\r\n    this._copyStrings(stringsCopyCallbackMap, tasks);\r\n\r\n    this._processExternals(externalModules, tasks);\r\n\r\n    // Save the deploy entries so they can be picked up by the WriteManifests task.\r\n    this.properties.deployEntries = deployEntries;\r\n\r\n    return merge(tasks).on('finish', () => completeCallback());\r\n  }\r\n\r\n  private _copyStrings(stringsCopyCallbackMap: Map<string, ((locale: string, filename: string) => void)[]>,\r\n                       tasks: NodeJS.ReadWriteStream[]): void {\r\n    const moduleBaseName: string = path.basename(this.buildConfig.rootPath).toLowerCase();\r\n\r\n    stringsCopyCallbackMap.forEach((callbacks: ((locale: string, filename: string) => void)[], key: string) => {\r\n      const isStandardStringsModule: boolean = key === constants.stringsExternalBundleName;\r\n      const baseFilename: string = isStandardStringsModule\r\n                                    ? moduleBaseName\r\n                                    : `${moduleBaseName}-${key.toLowerCase().replace(/\\//g, '_')}`;\r\n\r\n      const localizedFiles: ILocaleMap = this.properties.discoveredLocalizedResources[key];\r\n      for (const locale in localizedFiles) {\r\n        if (localizedFiles.hasOwnProperty(locale)) {\r\n          tasks.push(this._renameWithHash(gulp.src(localizedFiles[locale]),\r\n                                          (hash: string) => `${baseFilename}_${locale}_${hash}.js`,\r\n                                          (filename: string) =>\r\n                                            callbacks.forEach((callback: (locale: string, filename: string) => void) =>\r\n                                              callback(locale, filename)))\r\n                         .pipe(gulp.dest(this.taskConfig.deployCdnPath)));\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  private _processExternals(externalModules: IExtendedWebpackModule[], tasks: NodeJS.ReadWriteStream[]): void {\r\n    externalModules.forEach((externalModule: IExtendedWebpackModule) => {\r\n      if (externalModule.renameCallbacks.length > 0) {\r\n        // Replace slashes in the filename with dashes so we don't end up with unexpected subfolders\r\n        const baseFilename: string = externalModule.externalName.replace(/[\\/\\\\]/, '-');\r\n        tasks.push(this._renameWithHash(gulp.src(externalModule.configExternalFullPath),\r\n                                        (hash: string) => `${baseFilename.toLowerCase()}_${hash}.js`,\r\n                                        (filename: string) =>\r\n                                          externalModule.renameCallbacks.forEach(\r\n                                            (renameCallback: (filename: string) => void) =>\r\n                                              renameCallback(filename)))\r\n                        .pipe(gulp.dest(this.taskConfig.deployCdnPath)));\r\n      }\r\n    });\r\n  }\r\n\r\n  private _processExternalsForEntry(webpackChunkId: number,\r\n                                    deployEntry: IDeployEntry,\r\n                                    externalModules: IExtendedWebpackModule[],\r\n                                    stringsModuleId: string,\r\n                                    shouldPrepareProductionDeployment: boolean,\r\n                                    stringsCopyCallbackMap: Map<string,\r\n                                                                ((locale: string, filename: string) => void)[]>): void {\r\n    externalModules.forEach((externalModule: IExtendedWebpackModule) => {\r\n      // Determine if this external is referenced by the entry chunk\r\n      if (externalModule.chunks.reduce((state: boolean, chunkId: number) => state || webpackChunkId === chunkId,\r\n                                        false)) {\r\n        const externalName: string = externalModule.externalName;\r\n\r\n        const localizedResource: ILocaleMap =  this.properties.discoveredLocalizedResources[externalName];\r\n        if (localizedResource) {\r\n          // This is a localized resource\r\n          const isStandardStringsModule: boolean = externalName === constants.stringsExternalBundleName;\r\n          const resourceName: string = isStandardStringsModule ? stringsModuleId : externalName;\r\n\r\n          const debugModule: ILocalizedInternalModuleConfig = {\r\n            defaultPath: undefined,\r\n            type: 'localized',\r\n            paths: {}\r\n          };\r\n          deployEntry.debugModules.localizedModules.set(resourceName, debugModule);\r\n\r\n          for (const locale in localizedResource) {\r\n            if (localizedResource.hasOwnProperty(locale)) {\r\n              const path: string = localizedResource[locale];\r\n\r\n              if (locale === 'default' || locale === constants.defaultLocale) {\r\n                debugModule.defaultPath = path;\r\n              } else {\r\n                debugModule.paths[locale] = path;\r\n              }\r\n            }\r\n          }\r\n\r\n          if (shouldPrepareProductionDeployment) {\r\n            const productionModule: ILocalizedInternalModuleConfig = {\r\n              defaultPath: undefined,\r\n              type: 'localized',\r\n              paths: {}\r\n            };\r\n            deployEntry.productionModules.localizedModules.set(resourceName, productionModule);\r\n\r\n            if (!stringsCopyCallbackMap.has(externalName)) {\r\n              stringsCopyCallbackMap.set(externalName, []);\r\n            }\r\n\r\n            const callbacks: ((locale: string, filename: string) => void)[] = stringsCopyCallbackMap.get(externalName);\r\n            callbacks.push(((locale: string, filename: string): void => {\r\n              if (locale === 'default' || locale === constants.defaultLocale) {\r\n                productionModule.defaultPath = filename;\r\n              } else {\r\n                productionModule.paths[locale] = filename;\r\n              }\r\n            }));\r\n          }\r\n        } else if (!externalModule.configExternalFullPath) {\r\n          return;\r\n        } else if (standardLibraryModules[externalName]) {\r\n          // This is a framework module, so we need to record that this entry is using it, but we don't need to\r\n          // copy it to the CDN directory\r\n\r\n          // We want to discover which version of the package they're building against eventually\r\n          // @todo VSO#215254\r\n          const version: string = 'latest';\r\n\r\n          const debugModule: IFrameworkModuleConfig = {\r\n            type: 'framework',\r\n            version: version,\r\n            failoverPath: externalModule.configExternalFullPath\r\n          };\r\n          deployEntry.debugModules.frameworkModules.set(externalName, debugModule);\r\n\r\n          if (shouldPrepareProductionDeployment) {\r\n            const productionModule: IFrameworkModuleConfig = {\r\n              type: 'framework',\r\n              version: version\r\n            };\r\n            deployEntry.productionModules.frameworkModules.set(externalName, productionModule);\r\n          }\r\n        } else {\r\n          // This is a plain internal module, so we do need to copy it to the CDN directory if we're in production\r\n          // mode and it is not a fully qualified URL\r\n\r\n          deployEntry.debugModules.internalModules.set(externalName, externalModule.nonAmdConfig ?\r\n            {\r\n              type: 'internal',\r\n              path: externalModule.configExternalFullPath,\r\n              globalDependencies: externalModule.nonAmdConfig.globalDependencies,\r\n              globalName: externalModule.nonAmdConfig.globalName\r\n            } : {\r\n              type: 'internal',\r\n              path: externalModule.configExternalFullPath\r\n            });\r\n\r\n          if (shouldPrepareProductionDeployment) {\r\n            const productionModule: IInternalModuleConfig = externalModule.nonAmdConfig ?\r\n              {\r\n                type: 'internal',\r\n                path: undefined,\r\n                globalDependencies: externalModule.nonAmdConfig.globalDependencies,\r\n                globalName: externalModule.nonAmdConfig.globalName\r\n              } : {\r\n                type: 'internal',\r\n                path: undefined\r\n              };\r\n            deployEntry.productionModules.internalModules.set(externalName, productionModule);\r\n\r\n            if (externalModule.isExternalUrl) {\r\n              // There won't be a rename since this is not on the local filesystem\r\n              productionModule.path = externalModule.configExternalFullPath;\r\n            } else {\r\n              externalModule.renameCallbacks.push((filename: string) => productionModule.path = filename);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  private _renameWithHash(gulpStream: NodeJS.ReadWriteStream,\r\n                          getFilename: (hash: string) => string,\r\n                          filenameCallback: (filename: string) => void): NodeJS.ReadWriteStream {\r\n\r\n    return gulpStream.pipe(through2.obj(this._getRenameTransformFunction(getFilename, filenameCallback)));\r\n  }\r\n\r\n  private _getRenameTransformFunction(getFilename: (hash: string) => string,\r\n                                      filenameCallback: (filename: string) => void):\r\n                                        (file: gulpUtil.File, enc: string, callback: () => void) => void {\r\n    const self: CopyAssetsTask = this;\r\n      return function (file: gulpUtil.File, enc: string, callback: () => void): void {\r\n        const checksum: string = self.getChecksum(file.contents.toString(enc));\r\n\r\n        const filename: string = getFilename(checksum);\r\n        file.path = path.join(path.dirname(file.path), filename);\r\n\r\n        filenameCallback(filename);\r\n\r\n        this.push(file);\r\n\r\n        callback();\r\n      };\r\n\r\n  }\r\n\r\n  /**\r\n   * For webpack entries that are imported using SystemJS, the script is injected into the page, but\r\n   * the element is removed before the entry is initialized. Webpack requires a public path be set,\r\n   * and because we don't have a single host location, we need to set the public path dynamically.\r\n   * The public path is set when the entry is initialized, and in certain cases (like in development),\r\n   * it will look at the script tags on the page to determine what the root path is.\r\n   *\r\n   * We can append a small bit of code to the end of the entry's JS file that will mitigate this issue\r\n   * by maintaining a registry of scripts that have been injected onto the page, so the public path\r\n   * can be correctly set even if the script element that pointed to the entry's JS file has been removed\r\n   * already.\r\n   */\r\n  private _insertGlobalRegisterCodeIfNecessary(self: CopyAssetsTask, debug: boolean):\r\n      (file: gulpUtil.File, enc: string, callback: () => void) => void {\r\n    return function(file: gulpUtil.File, enc: string, callback: () => void): void {\r\n      if (!file.isNull() && file.contents) {\r\n        const contents: string = file.contents.toString(enc);\r\n        if (contents.match(new RegExp(setWebpackPublicPath.registryVarName, 'g'))) {\r\n          const registerCode: string = setWebpackPublicPath.getGlobalRegisterCode(debug);\r\n          file.contents = new Buffer(`${contents}${registerCode}`);\r\n        }\r\n\r\n        this.push(file);\r\n      }\r\n\r\n      callback();\r\n    };\r\n  }\r\n}\r\n"],"sourceRoot":"/source/"}