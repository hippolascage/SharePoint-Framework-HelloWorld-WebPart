'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var gulp_core_build_1 = require('gulp-core-build');
var deployToAzure_1 = require('./uploadCDN/deployToAzure');
var DeployAzureStorageTask = (function (_super) {
    __extends(DeployAzureStorageTask, _super);
    function DeployAzureStorageTask() {
        _super.apply(this, arguments);
        this.name = 'deploy-azure';
        this.taskConfig = {
            account: undefined,
            container: undefined,
            accessKey: undefined,
            workingDir: undefined,
            uploadPath: '**/*.*'
        };
    }
    /* tslint:disable:no-any */
    DeployAzureStorageTask.prototype.executeTask = function (gulp, completeCallback) {
        var _this = this;
        /* tslint:enable:no-any */
        if (!this.taskConfig.workingDir) {
            this.taskConfig.workingDir = this.buildConfig.distFolder;
        }
        return deployToAzure_1.default(this.taskConfig).then(completeCallback, function (error) {
            _this.logError(error.message);
            if (error.stack) {
                _this.logError(error.stack);
            }
        });
    };
    return DeployAzureStorageTask;
}(gulp_core_build_1.GulpTask));
exports.DeployAzureStorageTask = DeployAzureStorageTask;

//# sourceMappingURL=DeployAzureStorageTask.js.map
