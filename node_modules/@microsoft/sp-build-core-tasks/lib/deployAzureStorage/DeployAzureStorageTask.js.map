{"version":3,"sources":["deployAzureStorage/DeployAzureStorageTask.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;AAGb,gCAAyB,iBAAiB,CAAC,CAAA;AAC3C,8BAA0B,2BAA2B,CAAC,CAAA;AAgBtD;IAA4C,0CAAuC;IAAnF;QAA4C,8BAAuC;QAC1E,SAAI,GAAW,cAAc,CAAC;QAE9B,eAAU,GAAkC;YACjD,OAAO,EAAE,SAAS;YAClB,SAAS,EAAE,SAAS;YACpB,SAAS,EAAE,SAAS;YACpB,UAAU,EAAE,SAAS;YACrB,UAAU,EAAE,QAAQ;SACrB,CAAC;IAeJ,CAAC;IAbC,2BAA2B;IACpB,4CAAW,GAAlB,UAAmB,IAAe,EAAE,gBAA4B;QAAhE,iBAWC;QAVD,0BAA0B;QACxB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC;YAChC,IAAI,CAAC,UAAU,CAAC,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC;QAC3D,CAAC;QACD,MAAM,CAAC,uBAAa,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,gBAAgB,EAAE,UAAC,KAAY;YACxE,KAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAC7B,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;gBAChB,KAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YAC7B,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACH,6BAAC;AAAD,CAxBA,AAwBC,CAxB2C,0BAAQ,GAwBnD;AAxBY,8BAAsB,yBAwBlC,CAAA","file":"deployAzureStorage/DeployAzureStorageTask.js","sourcesContent":["'use strict';\r\n\r\nimport * as gulp from 'gulp';\r\nimport { GulpTask } from 'gulp-core-build';\r\nimport deployToAzure from './uploadCDN/deployToAzure';\r\n\r\n/** Configuration for task which uploads scripts to an Azure blob storage */\r\nexport interface IDeployAzureStorageTaskConfig {\r\n  /** The Azure account name. Defaults to undefined. */\r\n  account: string;\r\n  /** The container (folder) to upload files into. Defaults to undefined. */\r\n  container: string;\r\n  /** The primary or secondary Azure blob storage access key. Defaults to undefined. */\r\n  accessKey: string;\r\n  /** The directory to upload to the CDN. Defaults to the distFolder */\r\n  workingDir: string;\r\n  /** The glob to search for files in workingDir to upload */\r\n  uploadPath: string;\r\n}\r\n\r\nexport class DeployAzureStorageTask extends GulpTask<IDeployAzureStorageTaskConfig> {\r\n  public name: string = 'deploy-azure';\r\n\r\n  public taskConfig: IDeployAzureStorageTaskConfig = {\r\n    account: undefined,\r\n    container: undefined,\r\n    accessKey: undefined,\r\n    workingDir: undefined,\r\n    uploadPath: '**/*.*'\r\n  };\r\n\r\n  /* tslint:disable:no-any */\r\n  public executeTask(gulp: gulp.Gulp, completeCallback: () => void): Promise<any> {\r\n  /* tslint:enable:no-any */\r\n    if (!this.taskConfig.workingDir) {\r\n      this.taskConfig.workingDir = this.buildConfig.distFolder;\r\n    }\r\n    return deployToAzure(this.taskConfig).then(completeCallback, (error: Error) => {\r\n      this.logError(error.message);\r\n      if (error.stack) {\r\n        this.logError(error.stack);\r\n      }\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":"/source/"}