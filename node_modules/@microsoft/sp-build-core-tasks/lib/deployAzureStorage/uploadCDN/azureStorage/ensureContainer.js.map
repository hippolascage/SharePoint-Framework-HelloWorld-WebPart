{"version":3,"sources":["deployAzureStorage/uploadCDN/azureStorage/ensureContainer.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;AACH,4CAA4C;;AAE5C,QAAO,aAAa,CAAC,CAAA;AAErB,yBAC2B,WAA8B,EAAE,aAAqB,EACrD,gBAA0C;IACnE,EAAE,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC;QACtB,gBAAgB,GAAG;YACjB,iBAAiB,EAAE,MAAM;SAC1B,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,IAAI,OAAO,CAChB,UAAC,QAA0C,EAAE,MAA8B;QACzE,IAAI,CAAC;YACH,WAAW,CAAC,0BAA0B,CAAC,aAAa,EAAE,gBAAgB,EACpE,UAAC,KAAc,EAAE,MAAe,EAAE,QAAwB;gBACxD,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;oBACV,MAAM,CAAC,IAAI,KAAK,CAAC,iCAA+B,aAAe,CAAC,CAAC,CAAC;gBACpE,CAAC;gBACD,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;oBACX,OAAO,CAAC,GAAG,CAAC,wBAAsB,aAAe,CAAC,CAAC;gBACrD,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,OAAO,CAAC,GAAG,CAAC,gBAAc,aAAa,cAAW,CAAC,CAAC;gBACtD,CAAC;gBACD,QAAQ,CAAC,WAAW,CAAC,CAAC;YACxB,CAAC,CACF,CAAC;QACJ,CAAE;QAAA,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACf,MAAM,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;QAC3B,CAAC;IACH,CAAC,CACF,CAAC;AACJ,CAAC;AA9BD;iCA8BC,CAAA","file":"deployAzureStorage/uploadCDN/azureStorage/ensureContainer.js","sourcesContent":["/**\r\n * @file ensureBlobService.d.ts\r\n * @Copyright (c) Microsoft Corporation.  All rights reserved.\r\n *\r\n * Creates a container on an Azure Blob Service connection object\r\n */\r\n/// <reference path='./azureStorage.d.ts' />\r\n\r\nimport 'es6-promise';\r\n\r\nexport default\r\n  function ensureContainer(blobService: IAzureBlobService, containerName: string,\r\n                           containerOptions?: ICreateContainerOptions): Promise<IAzureBlobService> {\r\n  if (!containerOptions) {\r\n    containerOptions = {\r\n      publicAccessLevel: 'blob'\r\n    };\r\n  }\r\n\r\n  return new Promise<IAzureBlobService>(\r\n    (complete: (svc: IAzureBlobService) => void, reject: (error: Error) => void) => {\r\n      try {\r\n        blobService.createContainerIfNotExists(containerName, containerOptions,\r\n          (error: boolean, result: boolean, response: IAzureResponse) => {\r\n            if (error) {\r\n              reject(new Error(`Unable to create container: ${containerName}`));\r\n            }\r\n            if (result) {\r\n              console.log(`Created container: ${containerName}`);\r\n            } else {\r\n              console.log(`Container {${containerName}} exists!`);\r\n            }\r\n            complete(blobService);\r\n          }\r\n        );\r\n      } catch (error) {\r\n        reject(new Error(error));\r\n      }\r\n    }\r\n  );\r\n}\r\n"],"sourceRoot":"/source/"}