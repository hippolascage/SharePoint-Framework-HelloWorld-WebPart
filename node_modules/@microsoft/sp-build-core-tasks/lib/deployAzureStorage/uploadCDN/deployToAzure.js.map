{"version":3,"sources":["deployAzureStorage/uploadCDN/deployToAzure.ts"],"names":[],"mappings":"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","file":"deployAzureStorage/uploadCDN/deployToAzure.js","sourcesContent":["/**\r\n * @file deployToAzure.ts\r\n * @Copyright (c) Microsoft Corporation.  All rights reserved.\r\n *\r\n * Uploads source files to an Azure Blob Storage instance\r\n */\r\n\r\nimport 'es6-promise';\r\nimport glob = require('glob');\r\nimport colors = require('colors');\r\n\r\nimport { IDeployAzureStorageTaskConfig } from '../DeployAzureStorageTask';\r\nimport ensureBlobService from './azureStorage/ensureBlobService';\r\nimport ensureContainer from './azureStorage/ensureContainer';\r\nimport uploadFilesToAzure from './azureStorage/uploadFilesToAzure';\r\n\r\ninterface IGlobOptions {\r\n  cwd?: string;\r\n}\r\n\r\n/**\r\n * Uses glob to expand the filepath glob into a list of resolved file paths\r\n */\r\nfunction loadSourceFiles(globs: string, cwd?: string): Promise<string[]> {\r\n  return new Promise<string[]>((complete: (files: string[]) => void, reject: (error: Error) => void) => {\r\n    const options: IGlobOptions = cwd ? { cwd: cwd } : {};\r\n\r\n    glob(globs, options, (err: Error, matches: string[]) => {\r\n      if (err) {\r\n        reject(err);\r\n      } else {\r\n        complete(matches);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * Deploys all the files in a certain directory to a specific Azure Blob Storage instance\r\n */\r\nexport default function deployToAzure(config: IDeployAzureStorageTaskConfig): Promise<void> {\r\n  if (!config.container) {\r\n    return new Promise<void>((complete: () => void, reject: (error: Error) => void) => {\r\n      reject(new Error('Config file missing container name!'));\r\n    });\r\n  }\r\n  if (!config.account) {\r\n    return new Promise<void>((complete: () => void, reject: (error: Error) => void) => {\r\n      reject(new Error('Config file missing Azure account name!'));\r\n    });\r\n  }\r\n  if (!config.accessKey) {\r\n    return new Promise<void>((complete: () => void, reject: (error: Error) => void) => {\r\n      reject(new Error('Config file missing Azure access key!'));\r\n    });\r\n  }\r\n\r\n  console.log(`Uploading files '${config.uploadPath}' from directory '${config.workingDir}' to Azure`);\r\n\r\n  return loadSourceFiles(config.uploadPath, config.workingDir)\r\n    .then((files: string[]) => {\r\n        return ensureBlobService(config.account, config.accessKey)\r\n          .then((blobService: IAzureBlobService) => ensureContainer(blobService, config.container))\r\n          .then((blobService: IAzureBlobService) =>\r\n                  uploadFilesToAzure(blobService, config.container, config.workingDir, files))\r\n          .then(() => {\r\n            console.log(colors.green('Upload complete!\\n'));\r\n            console.log('Access your files at: http://%s.blob.core.windows.net/%s/\\n',\r\n                        config.account, config.container);\r\n          }, (error: Error) => {\r\n            console.error(error);\r\n            if (error.stack) {\r\n              console.error(error.stack);\r\n            }\r\n       });\r\n    });\r\n}\r\n"],"sourceRoot":"/source/"}