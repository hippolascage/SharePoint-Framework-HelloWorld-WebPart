{"version":3,"sources":["OdspGulpTask.ts"],"names":[],"mappings":";;;;;;AACA,IAAY,IAAI,WAAM,MAAM,CAAC,CAAA;AAC7B,IAAY,MAAM,WAAM,QAAQ,CAAC,CAAA;AACjC,gCAAyB,iBAAiB,CAAC,CAAA;AAgD3C;IAAuD,gCAAqB;IAA5E;QAAuD,8BAAqB;IAqC5E,CAAC;IApCQ,kCAAW,GAAlB,UAAmB,IAAe,EAAE,gBAA0C;QAG1E,0BAA0B;QAC5B,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;IACtD,CAAC;IAED,sBAAc,oCAAU;aAAxB;YACE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,UAAqC,IAAI,EAAE,CAAC;QACtE,CAAC;;;OAAA;IAES,kCAAW,GAArB,UAAsB,YAAoB;QACxC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC;YAC/B,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,EAAE,CAAC;QACjC,CAAC;QAED,IAAM,SAAS,GAAoD,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;QAE7F,EAAE,CAAC,CAAC,SAAS,CAAC,YAAY,CAAC,KAAK,SAAS,CAAC,CAAC,CAAC;YAC1C,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gBAClB,oCAAoC;gBACpC,SAAS,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC;YAEjC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,SAAS,CAAC,YAAY,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC,CAAC;YACxF,CAAC;QACH,CAAC;QAED,MAAM,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;IACjC,CAAC;IAED,2BAA2B;IACjB,kCAAW,GAArB,UAAsB,IAAS;QAC/B,0BAA0B;QACxB,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAC7D,CAAC;IACH,mBAAC;AAAD,CArCA,AAqCC,CArCsD,0BAAQ,GAqC9D;AArCD;8BAqCC,CAAA","file":"OdspGulpTask.js","sourcesContent":["import * as gulp from 'gulp';\r\nimport * as path from 'path';\r\nimport * as crypto from 'crypto';\r\nimport { GulpTask } from 'gulp-core-build';\r\nimport { compiler as webpackCompiler } from 'webpack';\r\nimport { IClientSideComponentManifest } from '@microsoft/sp-module-interfaces';\r\n\r\nimport { IBundleEntry } from './configureWebpack/ConfigureWebpackTask';\r\nimport { IDeployEntry } from './copyAssets/CopyAssetsTask';\r\n\r\n/**\r\n * Configuration for a non-AMD external module\r\n */\r\nexport interface INonAMDExternalModuleConfig {\r\n  /**\r\n   * The path or URL to the bundled external non-AMD file\r\n   */\r\n  path: string;\r\n  /**\r\n   * The name of the global variable where an non-AMD dependency drops its exports\r\n   */\r\n  globalName: string;\r\n  /**\r\n   * The names of the non-AMD dependencies for this project\r\n   */\r\n  globalDependencies: string[];\r\n}\r\n\r\n/**\r\n * Common properties that are shared between tasks.\r\n */\r\nexport interface IOdspGulpTaskProperties {\r\n  webpackStats?: webpackCompiler.Stats;\r\n\r\n  manifests?: { [key: string]: IClientSideComponentManifest };\r\n\r\n  externals?: { [name: string]: string | INonAMDExternalModuleConfig };\r\n\r\n  entries?: IBundleEntry[];\r\n\r\n  deployEntries?: IDeployEntry[];\r\n\r\n  localizedResources?: { [key: string]: string };\r\n\r\n  discoveredLocalizedResources?: { [key: string]: ILocaleMap };\r\n}\r\n\r\nexport interface ILocaleMap {\r\n  [locale: string]: string;\r\n}\r\n\r\nexport default class OdspGulpTask<TASK_CONFIG> extends GulpTask<TASK_CONFIG> {\r\n  public executeTask(gulp: gulp.Gulp, completeCallback: (error?: string) => void):\r\n      /* tslint:disable:no-any */\r\n      NodeJS.ReadWriteStream | Promise<any> {\r\n      /* tslint:enable:no-any */\r\n    throw new Error('executeTask must be implemented.');\r\n  }\r\n\r\n  protected get properties(): IOdspGulpTaskProperties {\r\n    return this.buildConfig.properties as IOdspGulpTaskProperties || {};\r\n  }\r\n\r\n  protected getManifest(manifestPath: string): IClientSideComponentManifest {\r\n    if (!this.properties.manifests) {\r\n      this.properties.manifests = {};\r\n    }\r\n\r\n    const manifests: { [key: string]: IClientSideComponentManifest } = this.properties.manifests;\r\n\r\n    if (manifests[manifestPath] === undefined) {\r\n      if (!manifestPath) {\r\n        /* tslint:disable:no-null-keyword */\r\n        manifests[manifestPath] = null;\r\n        /* tslint:enable:no-null-keyword */\r\n      } else {\r\n        manifests[manifestPath] = require(path.join(this.buildConfig.rootPath, manifestPath));\r\n      }\r\n    }\r\n\r\n    return manifests[manifestPath];\r\n  }\r\n\r\n  /* tslint:disable:no-any */\r\n  protected getChecksum(data: any): string {\r\n  /* tslint:enable:no-any */\r\n    return crypto.createHash('md5').update(data).digest('hex');\r\n  }\r\n}\r\n"],"sourceRoot":"/source/"}