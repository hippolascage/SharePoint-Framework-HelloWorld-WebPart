{"version":3,"sources":["pageContext/PageContext.ts"],"names":[],"mappings":";AAAA,sBAAkC,SAAS,CAAC,CAAA;AAC5C,uBAAoC,UAAU,CAAC,CAAA;AAC/C,uBAAoC,UAAU,CAAC,CAAA;AAC/C,4BAA8C,eAAe,CAAC,CAAA;AAE9D,2BAAuB,4BAA4B,CAAC,CAAA;AAapD;;;;;;;IAOI;AACJ;IAOE,qBAAY,YAA0B;QACpC,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;IAC9B,CAAC;IAED;;;OAGG;IACI,gCAAU,GAAjB,UAAkB,OAAyB;QACzC,IAAI,CAAC,YAAY,GAAG,IAAI,qBAAW,CAAC,OAAO,CAAC,WAAW,IAAI;YACzD,kBAAkB,EAAE,EAAE;YACtB,oBAAoB,EAAE,EAAE;SACzB,CAAC,CAAC;QACH,IAAI,CAAC,KAAK,GAAG,IAAI,gBAAM,CAAC,OAAO,CAAC,IAAI,IAAI;YACtC,EAAE,EAAE,EAAE;SACP,CAAC,CAAC;QACH,IAAI,CAAC,KAAK,GAAG,IAAI,gBAAM,CAAC,OAAO,CAAC,IAAI,IAAI;YACtC,WAAW,EAAE,EAAE;YACf,SAAS,EAAE,EAAE;SACd,CAAC,CAAC;QACH,IAAI,CAAC,IAAI,GAAG,IAAI,eAAK,CAAC,OAAO,CAAC,GAAG,IAAI;YACnC,EAAE,EAAE,EAAE;YACN,WAAW,EAAE,EAAE;YACf,iBAAiB,EAAE,EAAE;YACrB,KAAK,EAAE,EAAE;SACV,CAAC,CAAC;QACH,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;IAC7B,CAAC;IAMD,sBAAW,oCAAW;QAJtB;;;WAGG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;QAC3B,CAAC;;;OAAA;IAMD,sBAAW,6BAAI;QAJf;;;WAGG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;QACpB,CAAC;;;OAAA;IAMD,sBAAW,6BAAI;QAJf;;;WAGG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;QACpB,CAAC;;;OAAA;IAMD,sBAAW,4BAAG;QAJd;;;WAGG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;QACnB,CAAC;;;OAAA;IAKD,sBAAW,sCAAa;QAHxB;;WAEG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC;QAC7B,CAAC;;;OAAA;IACH,kBAAC;AAAD,CA1EA,AA0EC,IAAA;AA1ED;6BA0EC,CAAA;AAEY,6BAAqB,GAA4B,oBAAU,CAAC,MAAM,CAC5E,4BAA4B,EAAE,WAAW,CAAC,CAAC","file":"pageContext/PageContext.js","sourcesContent":["import SPWeb, { ISPWebData } from './SPWeb';\r\nimport SPSite, { ISPSiteData } from './SPSite';\r\nimport SPUser, { ISPUserData } from './SPUser';\r\nimport CultureInfo, { ICultureInfoData } from './CultureInfo';\r\nimport ServiceScope from '../serviceScope/ServiceScope';\r\nimport ServiceKey from '../serviceScope/ServiceKey';\r\n\r\n/**\r\n * Interface for properties neccesary for building a PageContext.\r\n * @internal\r\n */\r\nexport interface IPageContextData {\r\n  cultureInfo: ICultureInfoData;\r\n  site: ISPSiteData;\r\n  user: ISPUserData;\r\n  web: ISPWebData;\r\n}\r\n\r\n/**\r\n  * The page context provides standard definitions for common SharePoint objects\r\n  * that need to be shared between the client-side application, web parts, and other\r\n  * components.  Typically the data is fetched via REST queries when navigating to a\r\n  * new page, but it can also be preloaded by the web server, or filled from a custom\r\n  * application cache.\r\n  * @public\r\n  */\r\nexport default class PageContext {\r\n  private _cultureInfo: CultureInfo;\r\n  private _site: SPSite;\r\n  private _user: SPUser;\r\n  private _web: SPWeb;\r\n  private _isInitialized: boolean;\r\n\r\n  constructor(serviceScope: ServiceScope) {\r\n    this._isInitialized = false;\r\n  }\r\n\r\n  /**\r\n   * Initializes the Page Context.\r\n   * @internal\r\n   */\r\n  public initialize(options: IPageContextData): void {\r\n    this._cultureInfo = new CultureInfo(options.cultureInfo || {\r\n      currentCultureName: '',\r\n      currentUICultureName: ''\r\n    });\r\n    this._site = new SPSite(options.site || {\r\n      id: ''\r\n    });\r\n    this._user = new SPUser(options.user || {\r\n      displayName: '',\r\n      loginName: ''\r\n    });\r\n    this._web = new SPWeb(options.web || {\r\n      id: '',\r\n      absoluteUrl: '',\r\n      serverRelativeUrl: '',\r\n      title: ''\r\n    });\r\n    this._isInitialized = true;\r\n  }\r\n\r\n  /**\r\n   * This class is primarily used with the PageContext class.  It provides culture info\r\n   * for the current user of the application.\r\n   */\r\n  public get cultureInfo(): CultureInfo {\r\n    return this._cultureInfo;\r\n  }\r\n\r\n  /**\r\n   * Contextual information for the SharePoint site collection (\"site\") that is hosting the page.\r\n   * The site object will be defined if the PageContext was initialized.\r\n   */\r\n  public get site(): SPSite {\r\n    return this._site;\r\n  }\r\n\r\n  /**\r\n   * This class is primarily used with the PageContext class.  It provides contextual information\r\n   * for the SharePoint user that is accessing the page.\r\n   */\r\n  public get user(): SPUser {\r\n    return this._user;\r\n  }\r\n\r\n  /**\r\n   * Contextual information for the SharePoint site (\"web\") that is hosting the page. The web object\r\n   * will be defined if the PageContext was initialized.\r\n   */\r\n  public get web(): SPWeb {\r\n    return this._web;\r\n  }\r\n\r\n  /**\r\n   * Returns whether the PageContext has been initialized.\r\n   */\r\n  public get isInitialized(): boolean {\r\n    return this._isInitialized;\r\n  }\r\n}\r\n\r\nexport const pageContextServiceKey: ServiceKey<PageContext> = ServiceKey.create<PageContext>\r\n  ('sp-client-base:PageContext', PageContext);\r\n"],"sourceRoot":"/src"}