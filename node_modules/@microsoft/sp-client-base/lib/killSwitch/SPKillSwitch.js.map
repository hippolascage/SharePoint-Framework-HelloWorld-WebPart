{"version":3,"sources":["killSwitch/SPKillSwitch.ts"],"names":[],"mappings":"AAAA;;GAEG;;AAEH,qBAAiB,cAAc,CAAC,CAAA;AAEhC;;;;;GAKG;AACH;IAAA;IAmCA,CAAC;IA/BC;;;OAGG;IACH,wBAAwB;IACV,uBAAU,GAAxB,UAAyB,eAA2C;QACpE,uBAAuB;QACrB,IAAI,CAAC,sBAAsB,GAAG,IAAI,GAAG,EAAmB,CAAC;QACzD,EAAE,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;YACpB,GAAG,CAAC,CAAyB,UAA4B,EAA5B,KAAA,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,EAA5B,cAA4B,EAA5B,IAA4B,CAAC;gBAArD,IAAM,cAAc,SAAA;gBACvB,IAAM,wBAAwB,GAAS,cAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;gBACrE,EAAE,CAAC,CAAC,wBAAwB,CAAC,CAAC,CAAC;oBAC7B,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,wBAAwB,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,CAAC;gBAC7E,CAAC;aACF;QACH,CAAC;IACH,CAAC;IAED;;;;;;OAMG;IACW,wBAAW,GAAzB,UAA0B,cAAoB,EAAE,IAAY,EAAE,WAAmB;QAC/E,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;YACpB,MAAM,CAAC,KAAK,CAAC;QACf,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,cAAc,CAAC,QAAQ,EAAE,CAAC,CAAC;IACpE,CAAC;IAhCc,mCAAsB,GAAyB,IAAI,GAAG,EAAmB,CAAC;IAiC3F,mBAAC;AAAD,CAnCA,AAmCC,IAAA;AAnCD;8BAmCC,CAAA","file":"killSwitch/SPKillSwitch.js","sourcesContent":["/**\r\n * @copyright Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nimport Guid from '../guid/Guid';\r\n\r\n/**\r\n * NOT FOR USE BY THIRD PARTY DEVELOPERS\r\n *\r\n * This class supports Microsoft's internal deployment workflow.\r\n * For more information, see http://aka.ms/killswitch\r\n */\r\nexport default class SPKillSwitch {\r\n\r\n  private static _activatedKillSwitches: Map<string, boolean> = new Map<string, boolean>();\r\n\r\n  /**\r\n   * RESERVED FOR INTERNAL USAGE.  This method is invoked automatically by the system shell.\r\n   * The application code should not call it directly.\r\n   */\r\n  /* tslint:disable:any */\r\n  public static initialize(killSwitchGuids: { [key: string]: boolean }): void {\r\n  /* tslint:enable:any */\r\n    this._activatedKillSwitches = new Map<string, boolean>();\r\n    if (killSwitchGuids) {\r\n      for (const killSwitchGuid of Object.keys(killSwitchGuids)) {\r\n        const normalizedKillSwitchGuid: Guid = Guid.tryParse(killSwitchGuid);\r\n        if (normalizedKillSwitchGuid) {\r\n          this._activatedKillSwitches.set(normalizedKillSwitchGuid.toString(), true);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * NOT FOR USE BY THIRD PARTY DEVELOPERS\r\n   *\r\n   * This function will determine if a flight exists in the global list. The second and third\r\n   * parameter are used to make the graduation (remove the if else check) easier in the future,\r\n   * thus preferably have them inline, instead\r\n   */\r\n  public static isActivated(killSwitchGuid: Guid, date: string, featureName: string): boolean {\r\n    if (!killSwitchGuid) {\r\n      return false;\r\n    }\r\n    return this._activatedKillSwitches.get(killSwitchGuid.toString());\r\n  }\r\n}\r\n"],"sourceRoot":"/src"}