/**
 * @copyright Microsoft Corporation. All rights reserved.
 */
"use strict";
var Guid_1 = require('../guid/Guid');
/**
 * NOT FOR USE BY THIRD PARTY DEVELOPERS
 *
 * This class supports Microsoft's internal deployment workflow.
 * For more information, see http://aka.ms/killswitch
 */
var SPKillSwitch = (function () {
    function SPKillSwitch() {
    }
    /**
     * RESERVED FOR INTERNAL USAGE.  This method is invoked automatically by the system shell.
     * The application code should not call it directly.
     */
    /* tslint:disable:any */
    SPKillSwitch.initialize = function (killSwitchGuids) {
        /* tslint:enable:any */
        this._activatedKillSwitches = new Map();
        if (killSwitchGuids) {
            for (var _i = 0, _a = Object.keys(killSwitchGuids); _i < _a.length; _i++) {
                var killSwitchGuid = _a[_i];
                var normalizedKillSwitchGuid = Guid_1.default.tryParse(killSwitchGuid);
                if (normalizedKillSwitchGuid) {
                    this._activatedKillSwitches.set(normalizedKillSwitchGuid.toString(), true);
                }
            }
        }
    };
    /**
     * NOT FOR USE BY THIRD PARTY DEVELOPERS
     *
     * This function will determine if a flight exists in the global list. The second and third
     * parameter are used to make the graduation (remove the if else check) easier in the future,
     * thus preferably have them inline, instead
     */
    SPKillSwitch.isActivated = function (killSwitchGuid, date, featureName) {
        if (!killSwitchGuid) {
            return false;
        }
        return this._activatedKillSwitches.get(killSwitchGuid.toString());
    };
    SPKillSwitch._activatedKillSwitches = new Map();
    return SPKillSwitch;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SPKillSwitch;

//# sourceMappingURL=SPKillSwitch.js.map
