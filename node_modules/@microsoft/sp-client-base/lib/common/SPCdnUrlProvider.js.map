{"version":3,"sources":["common/SPCdnUrlProvider.ts"],"names":[],"mappings":"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","file":"common/SPCdnUrlProvider.js","sourcesContent":["import SPKillSwitch from '../killSwitch/SPKillSwitch';\r\nimport Guid from '../guid/Guid';\r\n\r\nconst sha256: (ascii: string) => string = require('tiny-sha256');\r\n\r\n/**\r\n  * The class provides a utilitiy to validate url of any user-provided asset, and replace it with\r\n  * public CDN url if it appears to be located in the SharePoint library which was designated\r\n  * by the tenant admin to serve as a CDN origin.\r\n  */\r\nexport default class SPCdnUrlProvider {\r\n\r\n  /**\r\n   * Host name of the Akamai public CDN location.\r\n   * The location is fixed and will not change (unless we chose to make massive changes\r\n   * to Akamai configuration and DNS lookup).\r\n   */\r\n  private static _cdnHostName: string = 'publiccdn.sharepointonline.com';\r\n\r\n  /**\r\n   * List of the hashes of the designated CDN origins, as configured by the tenant admin.\r\n   */\r\n  private static _cdnOriginList: string[] = [];\r\n\r\n  /**\r\n   * Anchor element used to resolve absolute url of in the context of the page.\r\n   */\r\n  private static _urlParserLink: HTMLAnchorElement = document.createElement('a');\r\n\r\n  /**\r\n   * @internal RESERVED FOR INTERNAL USAGE.  This method is invoked automatically by the system shell.\r\n   * The application code should not call it directly.\r\n   */\r\n  public static initialize(cdnOriginList: string[]): void {\r\n    this._cdnOriginList = cdnOriginList;\r\n  }\r\n\r\n  /**\r\n   * This is the default implementation of ISpCdnUrlProvider that performs conversion\r\n   * of the SharePoint asset url into CDN url, if the original assets location is\r\n   * designated by the tenant admin to serve as a CDN origin.\r\n   */\r\n  public static getCdnUrlIfEnabled(url: string): string {\r\n\r\n    if (!this._cdnOriginList || !url) {\r\n      // No Origin configuration is available; defaulting to the original location\r\n      return url;\r\n    }\r\n\r\n    // Extend the passed url to the absolute path using HTMLAnchor element\r\n    this._urlParserLink.href = url;\r\n\r\n    // Convert to absolute URL if relative URL is provided and encode to match the form \r\n    // which is used in SPOREL to compute the origin hash.\r\n    const urlToMatch: string = encodeURI(this._urlParserLink.href);\r\n\r\n    // Enumerate through a list of tenant-provided origins, and see if either of them matches \r\n    // the asset url. Return public CDN url if the match is found. \r\n    for (const originHash of this._cdnOriginList) {\r\n      if (!originHash) {\r\n        continue;\r\n      }\r\n\r\n      // The origin hash consists of four section:\r\n      // version (1 byte), signature (3 bytes), length of the hashed url (4 bytes), and the hash (64 bytes)\r\n      if (originHash.length !== 1 + 3 + 4 + 64) {\r\n        continue;\r\n      }\r\n\r\n      // Parse the origin hash and extract there length of the original admin-provided URL and it's hash value\r\n      const originLen: number = +originHash.substr(4, 4);\r\n      const originSha256: string = originHash.substr(8);\r\n\r\n      // Check whether hash of the prefix of the asset url matches with the hash value provided\r\n      // Upper case conversion is used to match SPOREL algorithm \r\n      if (urlToMatch.length >= originLen &&\r\n        sha256(urlToMatch.substr(0, originLen).toUpperCase()) === originSha256) {\r\n\r\n        const itemSubPath: string = urlToMatch.substr(originLen);\r\n\r\n        // Skip cases when folder name happens to start from the valid name of the origin.\r\n        // Whatever is coming after the hash must start with a slash.\r\n        if (itemSubPath.length === 0 || itemSubPath.charAt(0) !== '/') {\r\n          continue;\r\n        }\r\n\r\n        let itemCdnUrl: string = `${window.location.protocol}//${this._cdnHostName}` +\r\n                             `/${window.location.host}/${originHash}${itemSubPath}`;\r\n\r\n        // Check for the killswitch E75E76DC-397E-4938-B281-F5C776425B6D, which indicates that the code is running \r\n        // against a test environment and g2o authentication validation is disabled.\r\n        // This is handy when testing against any deployment which cannot be accessed via public IP\r\n        // and hence cannot be accessed from Akamai edge servers.\r\n        if (DEBUG) {\r\n          // Due to the DEBUG flag, this code will be optimized out in the ship, hence the GUID will not be exposed  \r\n          if (SPKillSwitch.isActivated(\r\n            Guid.tryParse('{E75E76DC-397E-4938-B281-F5C776425B6D}'), 'defined in SPOREL', 'defined in SPOREL')) {\r\n              itemCdnUrl = `${window.location.origin}/_vti_bin/publiccdn.ashx/item/${originHash}${itemSubPath}`;\r\n          }\r\n        }\r\n\r\n        return itemCdnUrl;\r\n      }\r\n    }\r\n\r\n    // return original url is no matches were found in the origins list\r\n    return url;\r\n  }\r\n}\r\n"],"sourceRoot":"/src"}