"use strict";
var SPKillSwitch_1 = require('../killSwitch/SPKillSwitch');
var Guid_1 = require('../guid/Guid');
var sha256 = require('tiny-sha256');
/**
  * The class provides a utilitiy to validate url of any user-provided asset, and replace it with
  * public CDN url if it appears to be located in the SharePoint library which was designated
  * by the tenant admin to serve as a CDN origin.
  */
var SPCdnUrlProvider = (function () {
    function SPCdnUrlProvider() {
    }
    /**
     * @internal RESERVED FOR INTERNAL USAGE.  This method is invoked automatically by the system shell.
     * The application code should not call it directly.
     */
    SPCdnUrlProvider.initialize = function (cdnOriginList) {
        this._cdnOriginList = cdnOriginList;
    };
    /**
     * This is the default implementation of ISpCdnUrlProvider that performs conversion
     * of the SharePoint asset url into CDN url, if the original assets location is
     * designated by the tenant admin to serve as a CDN origin.
     */
    SPCdnUrlProvider.getCdnUrlIfEnabled = function (url) {
        if (!this._cdnOriginList || !url) {
            // No Origin configuration is available; defaulting to the original location
            return url;
        }
        // Extend the passed url to the absolute path using HTMLAnchor element
        this._urlParserLink.href = url;
        // Convert to absolute URL if relative URL is provided and encode to match the form 
        // which is used in SPOREL to compute the origin hash.
        var urlToMatch = encodeURI(this._urlParserLink.href);
        // Enumerate through a list of tenant-provided origins, and see if either of them matches 
        // the asset url. Return public CDN url if the match is found. 
        for (var _i = 0, _a = this._cdnOriginList; _i < _a.length; _i++) {
            var originHash = _a[_i];
            if (!originHash) {
                continue;
            }
            // The origin hash consists of four section:
            // version (1 byte), signature (3 bytes), length of the hashed url (4 bytes), and the hash (64 bytes)
            if (originHash.length !== 1 + 3 + 4 + 64) {
                continue;
            }
            // Parse the origin hash and extract there length of the original admin-provided URL and it's hash value
            var originLen = +originHash.substr(4, 4);
            var originSha256 = originHash.substr(8);
            // Check whether hash of the prefix of the asset url matches with the hash value provided
            // Upper case conversion is used to match SPOREL algorithm 
            if (urlToMatch.length >= originLen &&
                sha256(urlToMatch.substr(0, originLen).toUpperCase()) === originSha256) {
                var itemSubPath = urlToMatch.substr(originLen);
                // Skip cases when folder name happens to start from the valid name of the origin.
                // Whatever is coming after the hash must start with a slash.
                if (itemSubPath.length === 0 || itemSubPath.charAt(0) !== '/') {
                    continue;
                }
                var itemCdnUrl = (window.location.protocol + "//" + this._cdnHostName) +
                    ("/" + window.location.host + "/" + originHash + itemSubPath);
                // Check for the killswitch E75E76DC-397E-4938-B281-F5C776425B6D, which indicates that the code is running 
                // against a test environment and g2o authentication validation is disabled.
                // This is handy when testing against any deployment which cannot be accessed via public IP
                // and hence cannot be accessed from Akamai edge servers.
                if (DEBUG) {
                    // Due to the DEBUG flag, this code will be optimized out in the ship, hence the GUID will not be exposed  
                    if (SPKillSwitch_1.default.isActivated(Guid_1.default.tryParse('{E75E76DC-397E-4938-B281-F5C776425B6D}'), 'defined in SPOREL', 'defined in SPOREL')) {
                        itemCdnUrl = window.location.origin + "/_vti_bin/publiccdn.ashx/item/" + originHash + itemSubPath;
                    }
                }
                return itemCdnUrl;
            }
        }
        // return original url is no matches were found in the origins list
        return url;
    };
    /**
     * Host name of the Akamai public CDN location.
     * The location is fixed and will not change (unless we chose to make massive changes
     * to Akamai configuration and DNS lookup).
     */
    SPCdnUrlProvider._cdnHostName = 'publiccdn.sharepointonline.com';
    /**
     * List of the hashes of the designated CDN origins, as configured by the tenant admin.
     */
    SPCdnUrlProvider._cdnOriginList = [];
    /**
     * Anchor element used to resolve absolute url of in the context of the page.
     */
    SPCdnUrlProvider._urlParserLink = document.createElement('a');
    return SPCdnUrlProvider;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SPCdnUrlProvider;

//# sourceMappingURL=SPCdnUrlProvider.js.map
