{"version":3,"sources":["common/TimeProvider.ts"],"names":[],"mappings":";AACA,2BAAuB,4BAA4B,CAAC,CAAA;AAkBpD;;;GAGG;AACH;IACE,sBAAY,YAA0B;QACpC,mEAAmE;QACnE,gCAAgC;IAClC,CAAC;IAEM,8BAAO,GAAd;QACE,MAAM,CAAC,IAAI,IAAI,EAAE,CAAC;IACpB,CAAC;IAEM,mCAAY,GAAnB;QACE,MAAM,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC;IAC3B,CAAC;IACH,mBAAC;AAAD,CAbA,AAaC,IAAA;AAbD;8BAaC,CAAA;AAEY,8BAAsB,GAC/B,oBAAU,CAAC,MAAM,CAAgB,6BAA6B,EAAE,YAAY,CAAC,CAAC","file":"common/TimeProvider.js","sourcesContent":["import ServiceScope from '../serviceScope/ServiceScope';\r\nimport ServiceKey from '../serviceScope/ServiceKey';\r\n\r\n/**\r\n * This interface allows unit tests to simulate the system clock.\r\n */\r\nexport interface ITimeProvider {\r\n  /**\r\n   * Returns the current date/time.\r\n   */\r\n  getDate(): Date;\r\n\r\n  /**\r\n   * Returns a DOMHighResTimeStamp timing measurement, as defined by the\r\n   * standard performance.now() API.\r\n   */\r\n  getTimestamp(): number;\r\n}\r\n\r\n/**\r\n * This is the default implementation of ITimeProvider that simply\r\n * calls the real browser APIs.\r\n */\r\nexport default class TimeProvider implements ITimeProvider {\r\n  constructor(serviceScope: ServiceScope) {\r\n    // (this constructor is currently unused, but it is required by the\r\n    // ServiceKey.create() contract)\r\n  }\r\n\r\n  public getDate(): Date {\r\n    return new Date();\r\n  }\r\n\r\n  public getTimestamp(): number {\r\n    return performance.now();\r\n  }\r\n}\r\n\r\nexport const dateProviderServiceKey: ServiceKey<ITimeProvider>\r\n  = ServiceKey.create<ITimeProvider>('sp-client-base:TimeProvider', TimeProvider);\r\n"],"sourceRoot":"/src"}