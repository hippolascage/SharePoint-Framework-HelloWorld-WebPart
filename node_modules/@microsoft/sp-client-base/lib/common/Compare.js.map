{"version":3,"sources":["common/Compare.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;AAEH;IAAA;IAqDA,CAAC;IAnDC;;;;;;;OAOG;IACW,sBAAc,GAA5B,UAA6B,IAAY,EAAE,IAAY;QAErD,+DAA+D;QAC/D,EAAE,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC;YAClB,MAAM,CAAC,IAAI,CAAC;QACd,CAAC;QAED,qEAAqE;QACrE,EAAE,CAAC,CAAC,OAAO,IAAI,KAAK,QAAQ,IAAI,CAAC,IAAI,IAAI,OAAO,IAAI,KAAK,QAAQ,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YAC3E,MAAM,CAAC,KAAK,CAAC;QACf,CAAC;QAED,IAAM,KAAK,GAAa,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC1C,IAAM,KAAK,GAAa,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAE1C,wEAAwE;QACxE,IAAM,SAAS,GAAW,KAAK,CAAC,MAAM,CAAC;QACvC,EAAE,CAAC,CAAC,SAAS,KAAK,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;YAC/B,MAAM,CAAC,KAAK,CAAC;QACf,CAAC;QAED,sCAAsC;QACtC,IAAM,eAAe,GAAa,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC7E,GAAG,CAAC,CAAC,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE,CAAC;YAE3C,IAAM,GAAG,GAAW,KAAK,CAAC,CAAC,CAAC,CAAC;YAC7B,EAAE,CAAC,CAAC,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC1B,MAAM,CAAC,KAAK,CAAC;YACf,CAAC;YAED,2BAA2B;YAC3B,IAAM,MAAM,GAAQ,IAAI,CAAC,GAAG,CAAC,CAAC;YAC9B,IAAM,MAAM,GAAQ,IAAI,CAAC,GAAG,CAAC,CAAC;YAC9B,0BAA0B;YAE1B,+BAA+B;YAC/B,EAAE,CAAC,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC,CAAC;gBACtB,MAAM,CAAC,KAAK,CAAC;YACf,CAAC;QACH,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IACH,cAAC;AAAD,CArDA,AAqDC,IAAA;AArDD;yBAqDC,CAAA","file":"common/Compare.js","sourcesContent":["/**\r\n * @Copyright (c) Microsoft Corporation.  All rights reserved.\r\n *\r\n * This class contains various comparison utilities.\r\n *\r\n * @public\r\n */\r\n\r\nexport default class Compare {\r\n\r\n  /**\r\n   * Performs shallow comparison between two objects to determine if they are equal. This method compares\r\n   * only object types.\r\n   *\r\n   * @param objA - the first object to compare.\r\n   * @param objB - the second object to compare.\r\n   *\r\n   */\r\n  public static shallowCompare(objA: Object, objB: Object): boolean {\r\n\r\n    // Test if they are the same object or both are null/undefined.\r\n    if (objA === objB) {\r\n      return true;\r\n    }\r\n\r\n    // Test if they are the correct type. Only object types are compared.\r\n    if (typeof objA !== 'object' || !objA || typeof objB !== 'object' || !objB) {\r\n      return false;\r\n    }\r\n\r\n    const keysA: string[] = Object.keys(objA);\r\n    const keysB: string[] = Object.keys(objB);\r\n\r\n    // Test if they have the same number of keys. Else, they cannot be same.\r\n    const keyLength: number = keysA.length;\r\n    if (keyLength !== keysB.length) {\r\n      return false;\r\n    }\r\n\r\n    // Test for A's keys different from B.\r\n    const bHasOwnProperty: Function = Object.prototype.hasOwnProperty.bind(objB);\r\n    for (let i: number = 0; i < keyLength; i++) {\r\n\r\n      const key: string = keysA[i];\r\n      if (!bHasOwnProperty(key)) {\r\n        return false;\r\n      }\r\n\r\n      /* tslint:disable:no-any */\r\n      const valueA: any = objA[key];\r\n      const valueB: any = objB[key];\r\n      /* tslint:enable:no-any */\r\n\r\n      // Test if the values are same.\r\n      if (valueA !== valueB) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n}"],"sourceRoot":"/src"}