"use strict";
/**
 * This class implements provides a standard way to validate properties and function parameters.
 * Unlike an assertion, the Validate checks are always performed and will always throw an error,
 * even in a production release.  As such, be careful not to overuse these checks in a way
 * that might impact performance.
 * @public
 */
var Validate = (function () {
    function Validate() {
    }
    /**
     * Throws an exception if the specified value is not true.
     * @param value - the value to check
     * @param variableName - the program variable name, which will be mentioned in the error message
     */
    Validate.isTrue = function (value, variableName) {
        if (!value) {
            throw new Error("The value for \"" + variableName + "\" is not valid");
        }
    };
    /**
     * Throws an exception if the specified value is null or undefined.
     * @param value - the value to check
     * @param variableName - the program variable name, which will be mentioned in the error message
     */
    /* tslint:disable:no-any */
    Validate.isNotNullOrUndefined = function (value, variableName) {
        /* tslint:enable:no-any */
        /* tslint:disable:no-null-keyword */
        if (value === null) {
            /* tslint:enable:no-null-keyword */
            throw new Error("The value for \"" + variableName + "\" must not be null");
        }
        if (value === undefined) {
            throw new Error("The value for \"" + variableName + "\" must not be undefined");
        }
    };
    /**
     * Throws an exception if the specified string is null, undefined, or an empty string.
     * @param value - the value to check
     * @param variableName - the program variable name, which will be mentioned in the error message
     */
    Validate.isNonemptyString = function (value, variableName) {
        Validate.isNotNullOrUndefined(value, variableName);
        if (value.length === 0) {
            throw new Error("The value for \"" + variableName + "\" must not be an empty string");
        }
    };
    return Validate;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Validate;
/*
  Internal notes:
  - We will improve the exception and localization of error messages in VSO #163788
  - Do not add validation algorithms (e.g. isZipCode()) to this file; it should only
    provide basic checks similar to Assert
*/

//# sourceMappingURL=Validate.js.map
