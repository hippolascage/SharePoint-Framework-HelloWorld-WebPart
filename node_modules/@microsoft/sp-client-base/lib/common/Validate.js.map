{"version":3,"sources":["common/Validate.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;AACH;IAAA;IA2CA,CAAC;IA1CC;;;;OAIG;IACW,eAAM,GAApB,UAAqB,KAAc,EAAE,YAAoB;QACvD,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACX,MAAM,IAAI,KAAK,CAAC,qBAAkB,YAAY,oBAAgB,CAAC,CAAC;QAClE,CAAC;IACH,CAAC;IAED;;;;OAIG;IACH,2BAA2B;IACb,6BAAoB,GAAlC,UAAmC,KAAU,EAAE,YAAoB;QACnE,0BAA0B;QACxB,oCAAoC;QACpC,EAAE,CAAC,CAAC,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC;YACrB,mCAAmC;YACjC,MAAM,IAAI,KAAK,CAAC,qBAAkB,YAAY,wBAAoB,CAAC,CAAC;QACtE,CAAC;QACD,EAAE,CAAC,CAAC,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC;YACxB,MAAM,IAAI,KAAK,CAAC,qBAAkB,YAAY,6BAAyB,CAAC,CAAC;QAC3E,CAAC;IACH,CAAC;IAED;;;;OAIG;IACW,yBAAgB,GAA9B,UAA+B,KAAa,EAAE,YAAoB;QAChE,QAAQ,CAAC,oBAAoB,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;QAEnD,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YACvB,MAAM,IAAI,KAAK,CAAC,qBAAkB,YAAY,mCAA+B,CAAC,CAAC;QACjF,CAAC;IACH,CAAC;IAEH,eAAC;AAAD,CA3CA,AA2CC,IAAA;AA3CD;0BA2CC,CAAA;AAED;;;;;EAKE","file":"common/Validate.js","sourcesContent":["/**\r\n * This class implements provides a standard way to validate properties and function parameters.\r\n * Unlike an assertion, the Validate checks are always performed and will always throw an error,\r\n * even in a production release.  As such, be careful not to overuse these checks in a way\r\n * that might impact performance.\r\n * @public\r\n */\r\nexport default class Validate {\r\n  /**\r\n   * Throws an exception if the specified value is not true.\r\n   * @param value - the value to check\r\n   * @param variableName - the program variable name, which will be mentioned in the error message\r\n   */\r\n  public static isTrue(value: boolean, variableName: string): void {\r\n    if (!value) {\r\n      throw new Error(`The value for \"${variableName}\" is not valid`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Throws an exception if the specified value is null or undefined.\r\n   * @param value - the value to check\r\n   * @param variableName - the program variable name, which will be mentioned in the error message\r\n   */\r\n  /* tslint:disable:no-any */\r\n  public static isNotNullOrUndefined(value: any, variableName: string): void {\r\n  /* tslint:enable:no-any */\r\n    /* tslint:disable:no-null-keyword */\r\n    if (value === null) {\r\n    /* tslint:enable:no-null-keyword */\r\n      throw new Error(`The value for \"${variableName}\" must not be null`);\r\n    }\r\n    if (value === undefined) {\r\n      throw new Error(`The value for \"${variableName}\" must not be undefined`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Throws an exception if the specified string is null, undefined, or an empty string.\r\n   * @param value - the value to check\r\n   * @param variableName - the program variable name, which will be mentioned in the error message\r\n   */\r\n  public static isNonemptyString(value: string, variableName: string): void {\r\n    Validate.isNotNullOrUndefined(value, variableName);\r\n\r\n    if (value.length === 0) {\r\n      throw new Error(`The value for \"${variableName}\" must not be an empty string`);\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/*\r\n  Internal notes:\r\n  - We will improve the exception and localization of error messages in VSO #163788\r\n  - Do not add validation algorithms (e.g. isZipCode()) to this file; it should only\r\n    provide basic checks similar to Assert\r\n*/\r\n"],"sourceRoot":"/src"}