{"version":3,"sources":["common/test/UrlQueryParameterCollection.test.ts"],"names":[],"mappings":"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","file":"common/test/UrlQueryParameterCollection.test.js","sourcesContent":["import UrlQueryParameterCollection from '../UrlQueryParameterCollection';\r\n\r\nconst assert: Chai.AssertStatic = chai.assert;\r\n\r\ninterface ITestProperties {\r\n  testName: string;\r\n  url: string;\r\n}\r\n\r\nconst testsWithNoQueryParameters: ITestProperties[] = [\r\n  {\r\n    testName: 'should parse an empty url string without errors',\r\n    url: ''\r\n  }, {\r\n    testName: 'should parse an null url without errors',\r\n    /* tslint:disable:no-null-keyword */\r\n    url: null\r\n    /* tslint:enable:no-null-keyword */\r\n  }, {\r\n    testName: 'should parse an undefined url string without errors',\r\n    url: undefined\r\n  }, {\r\n    testName: 'should parse an url string that does not have query parameters',\r\n    url: 'www.example.com'\r\n  }\r\n];\r\n\r\nconst testQueryParameters: ITestProperties[] = [\r\n  {\r\n    testName: 'should retrieve query parameters from a simple url string',\r\n    url: 'www.example.com?test=val&debug=on&test=val2'\r\n  }, {\r\n    testName: 'should retrieve query parameters from a server relative url string',\r\n    url: 'example/path?test=val&debug=on&test=val2'\r\n  }, {\r\n    testName: 'should retrieve query parameters from a url string with a fragment',\r\n    url: 'www.example.com?test=val&debug=on&test=val2'\r\n  }\r\n];\r\n\r\ndescribe('UrlQueryParameterCollection tests', () => {\r\n  for (const test of testsWithNoQueryParameters) {\r\n    it(test.testName, (done: MochaDone): void => {\r\n      const urlQuery: UrlQueryParameterCollection = new UrlQueryParameterCollection(test.url);\r\n      assert.deepEqual(urlQuery.getValue('test'), undefined);\r\n      assert.deepEqual(urlQuery.getValues('test'), undefined);\r\n      done();\r\n    });\r\n  }\r\n\r\n  for (const test of testQueryParameters) {\r\n    it(test.testName, (done: MochaDone): void => {\r\n      const urlQuery: UrlQueryParameterCollection = new UrlQueryParameterCollection(test.url);\r\n      assert.deepEqual(urlQuery.getValue('test'), 'val');\r\n      assert.deepEqual(urlQuery.getValues('test'), ['val', 'val2']);\r\n      done();\r\n    });\r\n  }\r\n\r\n  it('should retrieve empty query parameters from a url string', (done: MochaDone): void => {\r\n    const urlQuery: UrlQueryParameterCollection =\r\n      new UrlQueryParameterCollection('www.example.com?test=&debug=on&test');\r\n    assert.deepEqual(urlQuery.getValue('test'), '');\r\n    assert.deepEqual(urlQuery.getValues('test'), ['', undefined]);\r\n    done();\r\n  });\r\n\r\n  it('should retrieve query parameter value with multiple = signs', (done: MochaDone): void => {\r\n    const urlQuery: UrlQueryParameterCollection =\r\n      new UrlQueryParameterCollection('www.example.com?test=a=b=c&debug=on&test');\r\n    assert.deepEqual(urlQuery.getValue('test'), 'a=b=c');\r\n    assert.deepEqual(urlQuery.getValues('test'), ['a=b=c', undefined]);\r\n    done();\r\n  });\r\n\r\n  it('should return empty query parameter', (done: MochaDone): void => {\r\n    const urlQuery: UrlQueryParameterCollection =\r\n      new UrlQueryParameterCollection('www.example.com?&debug=on&');\r\n    assert.deepEqual(urlQuery.getValue(undefined), undefined);\r\n    assert.deepEqual(urlQuery.getValues(undefined), [undefined, undefined]);\r\n    done();\r\n  });\r\n\r\n});\r\n"],"sourceRoot":"/src"}