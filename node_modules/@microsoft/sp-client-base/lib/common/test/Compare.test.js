"use strict";
var Compare_1 = require('../Compare');
var assert = chai.assert;
describe('Compare tests', function () {
    describe('basic tests', function () {
        it('should return appropriate comparison results', function (done) {
            /* tslint:disable:no-any */
            var a = { field1: '1' };
            var b = { field1: '1' };
            var field2 = { subField1: '1.1' };
            /* tslint:enable:no-any */
            // Same objects
            assert.equal(true, Compare_1.default.shallowCompare(a, b), 'same objects');
            // Add a new field to b
            b.field2 = field2;
            assert.equal(false, Compare_1.default.shallowCompare(a, b), 'different objects');
            // Add the same field to a
            a.field2 = field2;
            assert.equal(true, Compare_1.default.shallowCompare(a, b), 'same objects again');
            // Add a new field down the tree to b
            b.field2.subField2 = '1.2';
            assert.equal(true, Compare_1.default.shallowCompare(a, b), 'same objects again');
            // Add a function and make sure the comparison fails
            b.field3 = function () {
                // EMPTY BLOCK
            };
            assert.equal(false, Compare_1.default.shallowCompare(a, b), 'functions fail comparison');
            // Undefined compared with undefined
            assert.equal(true, Compare_1.default.shallowCompare(undefined, undefined), 'same objects again');
            // Empty object compared with empty object
            assert.equal(true, Compare_1.default.shallowCompare({}, {}), 'same empty objects');
            done();
        });
    });
});

//# sourceMappingURL=Compare.test.js.map
