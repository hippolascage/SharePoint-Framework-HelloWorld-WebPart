"use strict";
var UrlQueryParameterCollection_1 = require('../UrlQueryParameterCollection');
var assert = chai.assert;
var testsWithNoQueryParameters = [
    {
        testName: 'should parse an empty url string without errors',
        url: ''
    }, {
        testName: 'should parse an null url without errors',
        /* tslint:disable:no-null-keyword */
        url: null
    }, {
        testName: 'should parse an undefined url string without errors',
        url: undefined
    }, {
        testName: 'should parse an url string that does not have query parameters',
        url: 'www.example.com'
    }
];
var testQueryParameters = [
    {
        testName: 'should retrieve query parameters from a simple url string',
        url: 'www.example.com?test=val&debug=on&test=val2'
    }, {
        testName: 'should retrieve query parameters from a server relative url string',
        url: 'example/path?test=val&debug=on&test=val2'
    }, {
        testName: 'should retrieve query parameters from a url string with a fragment',
        url: 'www.example.com?test=val&debug=on&test=val2'
    }
];
describe('UrlQueryParameterCollection tests', function () {
    var _loop_1 = function(test_1) {
        it(test_1.testName, function (done) {
            var urlQuery = new UrlQueryParameterCollection_1.default(test_1.url);
            assert.deepEqual(urlQuery.getValue('test'), undefined);
            assert.deepEqual(urlQuery.getValues('test'), undefined);
            done();
        });
    };
    for (var _i = 0, testsWithNoQueryParameters_1 = testsWithNoQueryParameters; _i < testsWithNoQueryParameters_1.length; _i++) {
        var test_1 = testsWithNoQueryParameters_1[_i];
        _loop_1(test_1);
    }
    var _loop_2 = function(test_2) {
        it(test_2.testName, function (done) {
            var urlQuery = new UrlQueryParameterCollection_1.default(test_2.url);
            assert.deepEqual(urlQuery.getValue('test'), 'val');
            assert.deepEqual(urlQuery.getValues('test'), ['val', 'val2']);
            done();
        });
    };
    for (var _a = 0, testQueryParameters_1 = testQueryParameters; _a < testQueryParameters_1.length; _a++) {
        var test_2 = testQueryParameters_1[_a];
        _loop_2(test_2);
    }
    it('should retrieve empty query parameters from a url string', function (done) {
        var urlQuery = new UrlQueryParameterCollection_1.default('www.example.com?test=&debug=on&test');
        assert.deepEqual(urlQuery.getValue('test'), '');
        assert.deepEqual(urlQuery.getValues('test'), ['', undefined]);
        done();
    });
    it('should retrieve query parameter value with multiple = signs', function (done) {
        var urlQuery = new UrlQueryParameterCollection_1.default('www.example.com?test=a=b=c&debug=on&test');
        assert.deepEqual(urlQuery.getValue('test'), 'a=b=c');
        assert.deepEqual(urlQuery.getValues('test'), ['a=b=c', undefined]);
        done();
    });
    it('should return empty query parameter', function (done) {
        var urlQuery = new UrlQueryParameterCollection_1.default('www.example.com?&debug=on&');
        assert.deepEqual(urlQuery.getValue(undefined), undefined);
        assert.deepEqual(urlQuery.getValues(undefined), [undefined, undefined]);
        done();
    });
});

//# sourceMappingURL=UrlQueryParameterCollection.test.js.map
