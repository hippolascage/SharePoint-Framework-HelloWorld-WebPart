{"version":3,"sources":["common/test/Compare.test.ts"],"names":[],"mappings":";AAAA,wBAAoB,YAAY,CAAC,CAAA;AAEjC,IAAM,MAAM,GAAsB,IAAI,CAAC,MAAM,CAAC;AAE9C,QAAQ,CAAC,eAAe,EAAE;IAExB,QAAQ,CAAC,aAAa,EAAE;QAEtB,EAAE,CAAC,8CAA8C,EAAE,UAAC,IAAe;YACjE,2BAA2B;YAC3B,IAAM,CAAC,GAAQ,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC;YAC/B,IAAM,CAAC,GAAQ,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC;YAC/B,IAAM,MAAM,GAAQ,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;YACzC,0BAA0B;YAE1B,eAAe;YACf,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,iBAAO,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC;YAEjE,uBAAuB;YACvB,CAAC,CAAC,MAAM,GAAG,MAAM,CAAC;YAClB,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,iBAAO,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,mBAAmB,CAAC,CAAC;YAEvE,0BAA0B;YAC1B,CAAC,CAAC,MAAM,GAAG,MAAM,CAAC;YAClB,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,iBAAO,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,oBAAoB,CAAC,CAAC;YAEvE,qCAAqC;YACrC,CAAC,CAAC,MAAM,CAAC,SAAS,GAAG,KAAK,CAAC;YAC3B,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,iBAAO,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,oBAAoB,CAAC,CAAC;YAEvE,oDAAoD;YACpD,CAAC,CAAC,MAAM,GAAG;gBACT,cAAc;YAChB,CAAC,CAAC;YAEF,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,iBAAO,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,2BAA2B,CAAC,CAAC;YAE/E,oCAAoC;YACpC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,iBAAO,CAAC,cAAc,CAAC,SAAS,EAAE,SAAS,CAAC,EAAE,oBAAoB,CAAC,CAAC;YAEvF,0CAA0C;YAC1C,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,iBAAO,CAAC,cAAc,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,oBAAoB,CAAC,CAAC;YAEzE,IAAI,EAAE,CAAC;QACT,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"common/test/Compare.test.js","sourcesContent":["import Compare from '../Compare';\r\n\r\nconst assert: Chai.AssertStatic = chai.assert;\r\n\r\ndescribe('Compare tests', () => {\r\n\r\n  describe('basic tests', () => {\r\n\r\n    it('should return appropriate comparison results', (done: MochaDone): void => {\r\n      /* tslint:disable:no-any */\r\n      const a: any = { field1: '1' };\r\n      const b: any = { field1: '1' };\r\n      const field2: any = { subField1: '1.1' };\r\n      /* tslint:enable:no-any */\r\n\r\n      // Same objects\r\n      assert.equal(true, Compare.shallowCompare(a, b), 'same objects');\r\n\r\n      // Add a new field to b\r\n      b.field2 = field2;\r\n      assert.equal(false, Compare.shallowCompare(a, b), 'different objects');\r\n\r\n      // Add the same field to a\r\n      a.field2 = field2;\r\n      assert.equal(true, Compare.shallowCompare(a, b), 'same objects again');\r\n\r\n      // Add a new field down the tree to b\r\n      b.field2.subField2 = '1.2';\r\n      assert.equal(true, Compare.shallowCompare(a, b), 'same objects again');\r\n\r\n      // Add a function and make sure the comparison fails\r\n      b.field3 = () => {\r\n        // EMPTY BLOCK\r\n      };\r\n\r\n      assert.equal(false, Compare.shallowCompare(a, b), 'functions fail comparison');\r\n\r\n      // Undefined compared with undefined\r\n      assert.equal(true, Compare.shallowCompare(undefined, undefined), 'same objects again');\r\n\r\n      // Empty object compared with empty object\r\n      assert.equal(true, Compare.shallowCompare({}, {}), 'same empty objects');\r\n\r\n      done();\r\n    });\r\n  });\r\n});\r\n"],"sourceRoot":"/src"}