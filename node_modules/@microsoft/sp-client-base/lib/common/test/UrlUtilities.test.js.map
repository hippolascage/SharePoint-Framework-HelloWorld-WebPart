{"version":3,"sources":["common/test/UrlUtilities.test.ts"],"names":[],"mappings":";AAAA,6BAAyB,iBAAiB,CAAC,CAAA;AAE3C,IAAM,MAAM,GAAsB,IAAI,CAAC,MAAM,CAAC;AAE9C,QAAQ,CAAC,oBAAoB,EAAE;IAE7B,QAAQ,CAAC,gBAAgB,EAAE;QAEzB,EAAE,CAAC,wCAAwC,EAAE,UAAC,IAAe;YAC3D,MAAM,CAAC,KAAK,CAAC,sBAAY,CAAC,cAAc,CAAC,qBAAqB,CAAC,EAAE,oBAAoB,CAAC,CAAC;YACvF,MAAM,CAAC,KAAK,CAAC,sBAAY,CAAC,cAAc,CAAC,eAAe,CAAC,EAAE,cAAc,CAAC,CAAC;YAC3E,MAAM,CAAC,KAAK,CAAC,sBAAY,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC;YACnD,MAAM,CAAC,KAAK,CAAC,sBAAY,CAAC,cAAc,CAAC,kBAAkB,CAAC,EAAE,eAAe,CAAC,CAAC;YAC/E,IAAI,EAAE,CAAC;QACT,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gDAAgD,EAAE,UAAC,IAAe;YACnE,MAAM,CAAC,KAAK,CAAC,sBAAY,CAAC,cAAc,CAAC,oBAAoB,CAAC,EAAE,oBAAoB,CAAC,CAAC;YACtF,MAAM,CAAC,KAAK,CAAC,sBAAY,CAAC,cAAc,CAAC,cAAc,CAAC,EAAE,cAAc,CAAC,CAAC;YAC1E,MAAM,CAAC,KAAK,CAAC,sBAAY,CAAC,cAAc,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YAClD,IAAI,EAAE,CAAC;QACT,CAAC,CAAC,CAAC;IAEL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,wBAAwB,EAAE;QACjC,EAAE,CAAC,sBAAsB,EAAE,UAAC,IAAe;YACzC,MAAM,CAAC,KAAK,CAAC,sBAAY,CAAC,2BAA2B,CAAC,gBAAgB,CAAC,EAAE,mBAAmB,CAAC,CAAC;YAC9F,MAAM,CAAC,KAAK,CAAC,sBAAY,CAAC,2BAA2B,CAAC,iBAAiB,CAAC,EAAE,qBAAqB,CAAC,CAAC;YACjG,MAAM,CAAC,KAAK,CAAC,sBAAY,CAAC,2BAA2B,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;YACjE,IAAI,EAAE,CAAC;QACT,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sBAAsB,EAAE,UAAC,IAAe;YACzC,MAAM,CAAC,KAAK,CAAC,sBAAY,CAAC,2BAA2B,CAAC,cAAc,CAAC,EAAE,gBAAgB,CAAC,CAAC;YACzF,MAAM,CAAC,KAAK,CAAC,sBAAY,CAAC,2BAA2B,CAAC,iBAAiB,CAAC,EAAE,qBAAqB,CAAC,CAAC;YACjG,IAAI,EAAE,CAAC;QACT,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6CAA6C,EAAE,UAAC,IAAe;YAChE,MAAM,CAAC,MAAM,CAAC,cAAO,sBAAY,CAAC,2BAA2B,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC7E,IAAI,EAAE,CAAC;QACT,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"common/test/UrlUtilities.test.js","sourcesContent":["import UrlUtilities from '../UrlUtilities';\r\n\r\nconst assert: Chai.AssertStatic = chai.assert;\r\n\r\ndescribe('UrlUtilities tests', () => {\r\n\r\n  describe('removeEndSlash', () => {\r\n\r\n    it('should remove slashes when appropriate', (done: MochaDone): void => {\r\n      assert.equal(UrlUtilities.removeEndSlash('http://example.com/'), 'http://example.com');\r\n      assert.equal(UrlUtilities.removeEndSlash('/example.com/'), '/example.com');\r\n      assert.equal(UrlUtilities.removeEndSlash('/'), '');\r\n      assert.equal(UrlUtilities.removeEndSlash('//example.com///'), '//example.com');\r\n      done();\r\n    });\r\n\r\n    it('should not remove slashes when not appropriate', (done: MochaDone): void => {\r\n      assert.equal(UrlUtilities.removeEndSlash('http://example.com'), 'http://example.com');\r\n      assert.equal(UrlUtilities.removeEndSlash('/example.com'), '/example.com');\r\n      assert.equal(UrlUtilities.removeEndSlash(''), '');\r\n      done();\r\n    });\r\n\r\n  });\r\n\r\n  describe('convertToStringLiteral', () => {\r\n    it('should double quotes', (done: MochaDone): void => {\r\n      assert.equal(UrlUtilities.convertToODataStringLiteral(`example's list`), `'example''s list'`);\r\n      assert.equal(UrlUtilities.convertToODataStringLiteral(`'example's list`), `'''example''s list'`);\r\n      assert.equal(UrlUtilities.convertToODataStringLiteral(``), `''`);\r\n      done();\r\n    });\r\n\r\n    it('should append quotes', (done: MochaDone): void => {\r\n      assert.equal(UrlUtilities.convertToODataStringLiteral(`example list`), `'example list'`);\r\n      assert.equal(UrlUtilities.convertToODataStringLiteral(`example's list'`), `'example''s list'''`);\r\n      done();\r\n    });\r\n\r\n    it('should throw if null or undefined parameter', (done: MochaDone): void => {\r\n      assert.throws(() => {UrlUtilities.convertToODataStringLiteral(undefined); });\r\n      done();\r\n    });\r\n  });\r\n});\r\n"],"sourceRoot":"/src"}