/**
 * @copyright (c) Microsoft Corporation. All rights reserved.
 */
"use strict";
var SPCdnUrlProvider_1 = require('../SPCdnUrlProvider');
var assert = chai.assert;
describe('SPCdnUrlProvider tests', function () {
    var undefinedOrigins = undefined;
    /* tslint:disable:no-null-keyword */
    var nullOrigins = null;
    var validOriginsWithNull = [null];
    var validOriginsWithNullAndNotNull = [null, 'invalidHashString'];
    /* tslint:enable:no-null-keyword */
    var emptyOrigins = [];
    var validOriginsWithOneItem = [
        '14180066cedf3e9177eaa015c7f0c4e9ea30f411e8683345915af0381f510f42acde990e'
    ];
    var validOriginsWithTwoItems = [
        '14180066cedf3e9177eaa015c7f0c4e9ea30f411e8683345915af0381f510f42acde990d',
        '14180066cedf3e9177eaa015c7f0c4e9ea30f411e8683345915af0381f510f42acde990e'
    ];
    var invalidOriginsWithNonNumericLength = [
        '1418-NO-cedf3e9177eaa015c7f0c4e9ea30f411e8683345915af0381f510f42acde990e'
    ];
    var validAssetUrl = 'https://msft.spoppe.com/sites/wex/SiteAssets/SitePages/Victor-Page/image.jpg';
    var validAssetUrlWithParam = 'https://msft.spoppe.com/sites/wex/SiteAssets/SitePages/Victor-Page/image.jpg?param1=foo&Param2=bar';
    var validAssetUrlWithNoItem = 'https://msft.spoppe.com/sites/wex/SiteAssets/SitePages/Victor-Page/';
    var validCdnUrlWithNoItem = (window.location.protocol + "//publiccdn.sharepointonline.com/" + window.location.host + "/") +
        '14180066cedf3e9177eaa015c7f0c4e9ea30f411e8683345915af0381f510f42acde990e/';
    var validCdnUrl = validCdnUrlWithNoItem + 'image.jpg';
    var validCdnUrlWithParams = validCdnUrlWithNoItem + 'image.jpg?param1=foo&Param2=bar';
    var invalidAssetUrl = 'https://msft.spoppe.com/sites/wex/SiteAssets/SitePages/Victor-Page';
    var invalidAssetUrlPrifix = 'https://msft.spoppe.com/sites/wex/SiteAssets/SitePages/Victor-Page-Plus';
    var otherAssetUrl = 'https://someotherdomain/sites/wex/SiteAssets/SitePages/Victor-Page';
    it('Can parse an undefined origins array', function () {
        SPCdnUrlProvider_1.default.initialize(undefinedOrigins);
        assert.isTrue(SPCdnUrlProvider_1.default.getCdnUrlIfEnabled(otherAssetUrl) === otherAssetUrl);
    });
    it('Can parse an null origins array', function () {
        SPCdnUrlProvider_1.default.initialize(nullOrigins);
        assert.isTrue(SPCdnUrlProvider_1.default.getCdnUrlIfEnabled(otherAssetUrl) === otherAssetUrl);
    });
    it('Can parse an empty origins array', function () {
        SPCdnUrlProvider_1.default.initialize(emptyOrigins);
        assert.isTrue(SPCdnUrlProvider_1.default.getCdnUrlIfEnabled(otherAssetUrl) === otherAssetUrl);
    });
    it('Can parse an validOriginsWithNull array', function () {
        SPCdnUrlProvider_1.default.initialize(validOriginsWithNull);
        assert.isTrue(SPCdnUrlProvider_1.default.getCdnUrlIfEnabled(otherAssetUrl) === otherAssetUrl);
    });
    it('Can parse an validOriginsWithNullAndNotNull array', function () {
        SPCdnUrlProvider_1.default.initialize(validOriginsWithNullAndNotNull);
        assert.isTrue(SPCdnUrlProvider_1.default.getCdnUrlIfEnabled(otherAssetUrl) === otherAssetUrl);
    });
    it('Can parse an validOriginsWithOneItem array', function () {
        SPCdnUrlProvider_1.default.initialize(validOriginsWithOneItem);
        assert.isTrue(SPCdnUrlProvider_1.default.getCdnUrlIfEnabled(otherAssetUrl) === otherAssetUrl);
    });
    it('Can parse an validOriginsWithTwoItems array', function () {
        SPCdnUrlProvider_1.default.initialize(validOriginsWithTwoItems);
        assert.isTrue(SPCdnUrlProvider_1.default.getCdnUrlIfEnabled(otherAssetUrl) === otherAssetUrl);
    });
    it('Can parse an origin with non-numeric invalid lenght component', function () {
        SPCdnUrlProvider_1.default.initialize(invalidOriginsWithNonNumericLength);
        assert.isTrue(SPCdnUrlProvider_1.default.getCdnUrlIfEnabled(otherAssetUrl) === otherAssetUrl);
    });
    it('Can match valid asset item url', function () {
        SPCdnUrlProvider_1.default.initialize(validOriginsWithTwoItems);
        assert.isTrue(SPCdnUrlProvider_1.default.getCdnUrlIfEnabled(validAssetUrl) === validCdnUrl);
    });
    it('Can match valid asset item url with QSP', function () {
        SPCdnUrlProvider_1.default.initialize(validOriginsWithTwoItems);
        assert.isTrue(SPCdnUrlProvider_1.default.getCdnUrlIfEnabled(validAssetUrlWithParam) === validCdnUrlWithParams);
    });
    it('Can match valid asset item url with no item', function () {
        SPCdnUrlProvider_1.default.initialize(validOriginsWithTwoItems);
        assert.isTrue(SPCdnUrlProvider_1.default.getCdnUrlIfEnabled(validAssetUrlWithNoItem) === validCdnUrlWithNoItem);
    });
    it('Can not match invalid asset item url with no item subpath', function () {
        SPCdnUrlProvider_1.default.initialize(validOriginsWithTwoItems);
        assert.isTrue(SPCdnUrlProvider_1.default.getCdnUrlIfEnabled(invalidAssetUrl) === invalidAssetUrl);
    });
    it('Can not match invalid asset item url where libraries share the same prefix', function () {
        SPCdnUrlProvider_1.default.initialize(validOriginsWithTwoItems);
        assert.isTrue(SPCdnUrlProvider_1.default.getCdnUrlIfEnabled(invalidAssetUrlPrifix) === invalidAssetUrlPrifix);
    });
});

//# sourceMappingURL=SPCdnUrlProvider.test.js.map
