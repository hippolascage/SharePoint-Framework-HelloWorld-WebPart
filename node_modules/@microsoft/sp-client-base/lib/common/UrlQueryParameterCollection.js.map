{"version":3,"sources":["common/UrlQueryParameterCollection.ts"],"names":[],"mappings":"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","file":"common/UrlQueryParameterCollection.js","sourcesContent":["/**\r\n * @Copyright (c) Microsoft Corporation.  All rights reserved.\r\n */\r\n\r\ninterface IKeyValuePair {\r\n  key: string;\r\n  value: string;\r\n}\r\n\r\n/**\r\n * Class for storing and retrieving query parameters.\r\n * The URL can be server-relative and it will parse empty/null strings.\r\n * The query parameters must start with ? to indicate the first query parameter and\r\n * use & for all subsequent parameters. The class also supports fragments.\r\n * Edge cases behavior:\r\n * Empty value (www.example.com/?test=) stores key and empty value\r\n * No equals in queryParam (www.example.com/?test) stores key and undefined value\r\n * Empty queryParam (www.example.com/?&debug=on) stores undefined key and value\r\n * Query param with only equals (www.example.com/?=&debug=on stores empty string key and value\r\n * @public\r\n */\r\nexport default class UrlQueryParameterCollection {\r\n  private _queryParameterList: IKeyValuePair[];\r\n  constructor(url: string) {\r\n    this._queryParameterList = this._getUrlQueryParameterArray(url);\r\n  }\r\n\r\n  /**\r\n   * Returns the value of the first matching query parameter or undefined if the key doesn't exist.\r\n   * Examples: this._queryParameterList = [\r\n   * {key: TEST, value: done},\r\n   * {key: DEBUG, value: false},\r\n   * {key: TEST, value: notdone}]\r\n   *   getValue('TEST') ---> 'done'\r\n   *   getValue('debug')  ---> 'false'\r\n   *   getValue('lost')  ---> undefined\r\n   * @param param the case insensitive key for the desired query parameter value.\r\n   */\r\n  public getValue(param: string): string {\r\n    for (const queryParam of this._queryParameterList) {\r\n      if (param === undefined) {\r\n        if (queryParam.key === undefined) {\r\n          return queryParam.value;\r\n        }\r\n        continue;\r\n      } else if (param.toUpperCase() === queryParam.key) {\r\n        return queryParam.value;\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Returns the values of all of the matching query parameters or undefined if the key doesn't exist.\r\n   * Examples: this._queryParameterList = [\r\n   * {key: TEST, value: done},\r\n   * {key: DEBUG, value: false},\r\n   * {key: TEST, value: notdone}]\r\n   *   getValues('TEST') ---> ['done', 'notdone']\r\n   *   getValues('debug')  ---> ['false']\r\n   *   getValues('lost')  ---> undefined\r\n   * @param param the case insensitive key for the desired query parameter value.\r\n   */\r\n  public getValues(param: string): string[] {\r\n    const queryParams: string[] = [];\r\n    for (const queryParam of this._queryParameterList) {\r\n      if (param === undefined) {\r\n        if (queryParam.key === undefined) {\r\n          queryParams.push(queryParam.value);\r\n        }\r\n        continue;\r\n      } else if (param.toUpperCase() === queryParam.key) {\r\n        queryParams.push(queryParam.value);\r\n      }\r\n    }\r\n    return queryParams.length > 0 ? queryParams : undefined;\r\n  }\r\n\r\n  private _getUrlQueryParameterArray(url: string): IKeyValuePair[] {\r\n    const queryParameterList: IKeyValuePair[] = [];\r\n    const urlParser: HTMLAnchorElement = document.createElement('a');\r\n    urlParser.href = url;\r\n    const queryParams: string[] = urlParser.search.substring(1).split('&');\r\n    for (const queryParam of queryParams) {\r\n      if (queryParam !== '') {\r\n        const equalsIndex: number = queryParam.indexOf('=');\r\n        let key: string;\r\n        let value: string;\r\n\r\n        if (equalsIndex < 0) {\r\n          key = queryParam;\r\n          value = undefined;\r\n        } else if (equalsIndex === 0) {\r\n          key = '';\r\n          value = queryParam.length === 1 ? '' : queryParam.substring(1);\r\n        } else {\r\n          key = queryParam.substring(0, equalsIndex);\r\n          value =\r\n            queryParam.substring(equalsIndex).length === 1 ?\r\n              '' :\r\n              queryParam.substring(equalsIndex + 1);\r\n        }\r\n        queryParameterList.push({\r\n          key: decodeURIComponent(key.toUpperCase()),\r\n          value: value\r\n        });\r\n      } else {\r\n        queryParameterList.push({\r\n          key: undefined,\r\n          value: undefined\r\n        });\r\n      }\r\n    }\r\n    return queryParameterList;\r\n  }\r\n}\r\n"],"sourceRoot":"/src"}