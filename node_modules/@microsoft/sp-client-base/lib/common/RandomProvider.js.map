{"version":3,"sources":["common/RandomProvider.ts"],"names":[],"mappings":";AACA,2BAAuB,4BAA4B,CAAC,CAAA;AAcpD;;;GAGG;AACH;IACE,wBAAY,YAA0B;QACpC,mEAAmE;QACnE,gCAAgC;IAClC,CAAC;IAEM,kCAAS,GAAhB;QACE,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;IACvB,CAAC;IACH,qBAAC;AAAD,CATA,AASC,IAAA;AATD;gCASC,CAAA;AAEY,gCAAwB,GACjC,oBAAU,CAAC,MAAM,CAAkB,+BAA+B,EAAE,cAAc,CAAC,CAAC","file":"common/RandomProvider.js","sourcesContent":["import ServiceScope from '../serviceScope/ServiceScope';\r\nimport ServiceKey from '../serviceScope/ServiceKey';\r\n\r\n/**\r\n * This interface allows unit tests to provide a deterministic\r\n * source of pseudorandom numbers.\r\n */\r\nexport interface IRandomProvider {\r\n  /**\r\n   * Returns a psuedorandom number between 0 (inclusive) and 1 (exclusive),\r\n   * following the contract of Math.random().\r\n   */\r\n  getRandom(): number;\r\n}\r\n\r\n/**\r\n * This is the default implementation of IRandomProvider that simply\r\n * calls Math.random().\r\n */\r\nexport default class RandomProvider implements IRandomProvider {\r\n  constructor(serviceScope: ServiceScope) {\r\n    // (this constructor is currently unused, but it is required by the\r\n    // ServiceKey.create() contract)\r\n  }\r\n\r\n  public getRandom(): number {\r\n    return Math.random();\r\n  }\r\n}\r\n\r\nexport const randomProviderServiceKey: ServiceKey<IRandomProvider>\r\n  = ServiceKey.create<IRandomProvider>('sp-client-base:RandomProvider', RandomProvider);\r\n"],"sourceRoot":"/src"}