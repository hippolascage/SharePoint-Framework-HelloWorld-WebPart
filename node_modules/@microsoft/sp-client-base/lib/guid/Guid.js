/**
 * @copyright (c) Microsoft Corporation. All rights reserved.
 */
"use strict";
/**
 * This class represents a globally unique identifier, as described by
 * IETF RFC 4122.  The input string is normalized and validated by the class
 * constructor, which provides important guarantees that simplify other code
 * that works with the GUID.  This class also provides basic functionality
 * for generating a pseudo-random GUID ("version 4" UUID from the RFC);
 * however, be aware that the uniqueness depends on the browser's
 * Math.random() function and may be not be suitable for some applications.
 *
 * @see {@link https://www.ietf.org/rfc/rfc4122.txt}
 */
var Guid = (function () {
    /**
     * WARNING: Use Guid.tryParse instead of the constructor. The constructor does not
     * do any validation and will be deprecated when visiblity on constructors is supported
     * by TypeScript.
     *
     * @todo #162166 Make private when TS supports visibility on constructors
     * @private Use Guid.tryParse to instantiate a Guid
     * @param guid - a guid string
     */
    function Guid(guid) {
        this._guid = guid;
    }
    /**
     * Indicates whether a guid is valid (according to RFC4122).
     *
     * @param guid - Test guid.
     * @return Value indicating whether the guid is valid.
     */
    Guid.isValid = function (guid) {
        return Guid.tryParse(guid) !== undefined;
    };
    /**
     * Returns a new Guid instance with a pseudo-randomly generated Guid.
     *
     * @return A new valid unique Guid object
     */
    Guid.newGuid = function (randomProvider) {
        return new Guid(Guid._generateGuid(randomProvider));
    };
    /**
     * Trys to construct a new Guid instance using guid string. The guid argument
     * is normalized and validated. If the argument is not a valid "version 4" UUID from
     * RFC 4122, tryParse will return undefined.
     *
     * @param guid - A guid string
     * @return If the guid argument was valid, a new Guid instance. Otherwise, undefined.
     */
    Guid.tryParse = function (guid) {
        var guidRegEx = /^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[ab89][a-f0-9]{3}-[a-f0-9]{12}$/i;
        if (guid) {
            guid = Guid._normalize(guid);
            if (guidRegEx.test(guid)) {
                return new Guid(guid);
            }
        }
        return undefined;
    };
    /**
     * SharePoint can have guids in the form:
     *   - Guid(...)
     *   - {...}
     * _normalize transforms guids in this format to the standard
     * guid format.
     *
     * Example: '/Guid(d5369f3b-bd7a-412a-9c0f-7f0650bb5489)/'
     *          -> 'd5369f3b-bd7a-412a-9c0f-7f0650bb5489'
     * Example: '{d5369f3b-bd7a-412a-9c0f-7f0650bb5489}'
     *          -> 'd5369f3b-bd7a-412a-9c0f-7f0650bb5489'
     *
     * @param guid - Guid to be normalized, could already be normalized.
     * @return Normalized guid.
     */
    Guid._normalize = function (guid) {
        // Check for Guid(...) and strip
        var result = /^Guid\((.*)\)/i.exec(guid);
        if (result) {
            guid = result[1];
        }
        // Check for and strip leading or trailing curly braces
        if (guid.length === 38) {
            guid = guid.substr(1, 36);
        }
        return guid.toLowerCase();
    };
    /**
     * Creates a new guid.
     *
     * @return A valid guid (according to RFC4122)
     */
    Guid._generateGuid = function (randomProvider) {
        return 'AAAAAAAA-AAAA-4AAA-BAAA-AAAAAAAAAAAA'.replace(/[AB]/g, 
        // Callback for String.replace() when generating a guid.
        function (character) {
            var randomNumber = randomProvider ? randomProvider.getRandom() : Math.random();
            /* tslint:disable:no-bitwise */
            var num = randomNumber * 16 | 0;
            // Check for 'A' in template string because the first characters in the
            // third and fourth blocks must be specific characters (according to "version 4" UUID from RFC 4122)
            var masked = character === 'A' ? num : (num & 0x3 | 0x8);
            return masked.toString(16);
        });
    };
    /**
     * Compare this instance to another Guid instance
     *
     * @return A value indicating whether this instance and the specified Guid object
     *   represent the same value
     */
    Guid.prototype.equals = function (guid) {
        return guid && this._guid.toString() === guid.toString();
    };
    /**
     * Object.prototype.toString override
     *
     * @return The GUID value in lowercase hexadecimal without braces.
     * Example: 'd5369f3b-bd7a-412a-9c0f-7f0650bb5489'
     */
    Guid.prototype.toString = function () {
        return this._guid;
    };
    return Guid;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Guid;

//# sourceMappingURL=Guid.js.map
