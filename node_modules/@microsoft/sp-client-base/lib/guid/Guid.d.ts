/**
 * @copyright (c) Microsoft Corporation. All rights reserved.
 */
import { IRandomProvider } from '../common/RandomProvider';
/**
 * This class represents a globally unique identifier, as described by
 * IETF RFC 4122.  The input string is normalized and validated by the class
 * constructor, which provides important guarantees that simplify other code
 * that works with the GUID.  This class also provides basic functionality
 * for generating a pseudo-random GUID ("version 4" UUID from the RFC);
 * however, be aware that the uniqueness depends on the browser's
 * Math.random() function and may be not be suitable for some applications.
 *
 * @see {@link https://www.ietf.org/rfc/rfc4122.txt}
 */
export default class Guid {
    /**
     * @member _guid - Internal guid value
     */
    private _guid;
    /**
     * Indicates whether a guid is valid (according to RFC4122).
     *
     * @param guid - Test guid.
     * @return Value indicating whether the guid is valid.
     */
    static isValid(guid: string): boolean;
    /**
     * Returns a new Guid instance with a pseudo-randomly generated Guid.
     *
     * @return A new valid unique Guid object
     */
    static newGuid(randomProvider?: IRandomProvider): Guid;
    /**
     * Trys to construct a new Guid instance using guid string. The guid argument
     * is normalized and validated. If the argument is not a valid "version 4" UUID from
     * RFC 4122, tryParse will return undefined.
     *
     * @param guid - A guid string
     * @return If the guid argument was valid, a new Guid instance. Otherwise, undefined.
     */
    static tryParse(guid: string): Guid;
    /**
     * SharePoint can have guids in the form:
     *   - Guid(...)
     *   - {...}
     * _normalize transforms guids in this format to the standard
     * guid format.
     *
     * Example: '/Guid(d5369f3b-bd7a-412a-9c0f-7f0650bb5489)/'
     *          -> 'd5369f3b-bd7a-412a-9c0f-7f0650bb5489'
     * Example: '{d5369f3b-bd7a-412a-9c0f-7f0650bb5489}'
     *          -> 'd5369f3b-bd7a-412a-9c0f-7f0650bb5489'
     *
     * @param guid - Guid to be normalized, could already be normalized.
     * @return Normalized guid.
     */
    private static _normalize(guid);
    /**
     * Creates a new guid.
     *
     * @return A valid guid (according to RFC4122)
     */
    private static _generateGuid(randomProvider);
    /**
     * WARNING: Use Guid.tryParse instead of the constructor. The constructor does not
     * do any validation and will be deprecated when visiblity on constructors is supported
     * by TypeScript.
     *
     * @todo #162166 Make private when TS supports visibility on constructors
     * @private Use Guid.tryParse to instantiate a Guid
     * @param guid - a guid string
     */
    constructor(guid: string);
    /**
     * Compare this instance to another Guid instance
     *
     * @return A value indicating whether this instance and the specified Guid object
     *   represent the same value
     */
    equals(guid: Guid): boolean;
    /**
     * Object.prototype.toString override
     *
     * @return The GUID value in lowercase hexadecimal without braces.
     * Example: 'd5369f3b-bd7a-412a-9c0f-7f0650bb5489'
     */
    toString(): string;
}
