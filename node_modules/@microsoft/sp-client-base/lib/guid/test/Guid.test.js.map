{"version":3,"sources":["guid/test/Guid.test.ts"],"names":[],"mappings":"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","file":"guid/test/Guid.test.js","sourcesContent":["/**\r\n * @copyright (c) Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nimport { expect } from 'chai';\r\n\r\nimport Guid from '../Guid';\r\n\r\ndescribe('Guid tests', () => {\r\n  const validGuids: string[] = [\r\n    '9d4f312c-e365-45b4-b6ef-fa24e512e7e5',\r\n    '{e25dc355-64df-4d3d-beb8-001e5dae531c}',\r\n    'Guid(1158fbf1-8dac-4252-b378-77489fd230d8)'\r\n  ];\r\n\r\n  const validNormalizedGuids: string[] = [\r\n    '9d4f312c-e365-45b4-b6ef-fa24e512e7e5',\r\n    'e25dc355-64df-4d3d-beb8-001e5dae531c',\r\n    '1158fbf1-8dac-4252-b378-77489fd230d8'\r\n  ];\r\n\r\n  const invalidGuids: string[] = [\r\n    'not-a-guid',\r\n    '{not-a-guid}',\r\n    'Guid(not-a-guid)',\r\n    '1158fbf1-8dac-5252-b378-77489fd230d8', // 4 is not the first character in the third block\r\n    '1158fbf1-8dac-4252-6378-77489fd230d8', // [ab89] is not the first character in the fourth block\r\n    '9x4f312y-z365-45b4-b6ef-fa24e512e7e5', // non-hex characters\r\n    undefined,\r\n    /* tslint:disable:no-null-keyword */\r\n    null\r\n    /* tslint:enable:no-null-keyword */\r\n  ];\r\n\r\n  const invalidNormalizedGuids: string[] = [\r\n    'not-a-guid',\r\n    '1158fbf1-8dac-5252-b378-77489fd230d8', // 4 is not the first character in the third block\r\n    '9x4f312y-z365-45b4-b6ef-fa24e512e7e5', // non-hex characters\r\n    undefined,\r\n    /* tslint:disable:no-null-keyword */\r\n    null\r\n    /* tslint:enable:no-null-keyword */\r\n  ];\r\n\r\n  describe('Static methods', () => {\r\n    it('Can validate Guids', () => {\r\n      for (const g of validNormalizedGuids) {\r\n        expect(Guid.isValid(g)).to.be.true;\r\n      }\r\n\r\n      for (const g of invalidNormalizedGuids) {\r\n        expect(Guid.isValid(g)).to.be.false;\r\n      }\r\n    });\r\n\r\n    it('Can create valid Guids', () => {\r\n      for (let i: number = 0; i < 5; ++i) {\r\n        expect(Guid.isValid(Guid.newGuid().toString())).to.be.true;\r\n      }\r\n    });\r\n\r\n    it('Can create Guid instances from a string', () => {\r\n      for (const g of validGuids) {\r\n        expect(Guid.tryParse(g)).to.not.be.undefined;\r\n      }\r\n\r\n      for (const g of invalidGuids) {\r\n        expect(Guid.tryParse(g)).to.be.undefined;\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('Instance methods', () => {\r\n    it('Can be converted into a string', () => {\r\n      const guidString: string = validNormalizedGuids[0];\r\n      const guid: Guid = Guid.tryParse(guidString);\r\n\r\n      expect(guid.toString() === guidString);\r\n    });\r\n\r\n    it('Can compare two Guids', () => {\r\n      const guidA: Guid = Guid.newGuid();\r\n      const guidB: Guid = Guid.tryParse(validGuids[0]);\r\n      const guidC: Guid = Guid.tryParse(validGuids[0]);\r\n\r\n      expect(guidA.equals(guidB)).to.be.false;\r\n      expect(guidA.equals(guidA)).to.be.true;\r\n      expect(guidB.equals(guidC)).to.be.true;\r\n    });\r\n  });\r\n});\r\n"],"sourceRoot":"/src"}