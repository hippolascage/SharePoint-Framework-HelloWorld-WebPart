{"version":3,"sources":["guid/Guid.ts"],"names":[],"mappings":"AAAA;;GAEG;;AAIH;;;;;;;;;;GAUG;AACH;IAsGE;;;;;;;;OAQG;IACH,cAAY,IAAY;QACpB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACtB,CAAC;IA1GD;;;;;OAKG;IACW,YAAO,GAArB,UAAsB,IAAY;QAChC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,SAAS,CAAC;IAC3C,CAAC;IAED;;;;OAIG;IACW,YAAO,GAArB,UAAsB,cAAgC;QACpD,MAAM,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,CAAC;IACtD,CAAC;IAED;;;;;;;OAOG;IACW,aAAQ,GAAtB,UAAuB,IAAY;QACjC,IAAM,SAAS,GAAW,wEAAwE,CAAC;QAEnG,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YACT,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YAC7B,EAAE,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACzB,MAAM,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC;YACxB,CAAC;QACH,CAAC;QAED,MAAM,CAAC,SAAS,CAAC;IACnB,CAAC;IAED;;;;;;;;;;;;;;OAcG;IACY,eAAU,GAAzB,UAA0B,IAAY;QAEpC,gCAAgC;QAChC,IAAM,MAAM,GAAa,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACrD,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACX,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;QACnB,CAAC;QAED,uDAAuD;QACvD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,EAAE,CAAC,CAAC,CAAC;YACvB,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QAC5B,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;IAC5B,CAAC;IAED;;;;OAIG;IACY,kBAAa,GAA5B,UAA6B,cAA+B;QAC1D,MAAM,CAAC,sCAAsC,CAAC,OAAO,CACnD,OAAO;QACP,wDAAwD;QACxD,UAAC,SAAiB;YAChB,IAAM,YAAY,GAAW,cAAc,GAAG,cAAc,CAAC,SAAS,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;YAEzF,+BAA+B;YAC/B,IAAM,GAAG,GAAW,YAAY,GAAG,EAAE,GAAG,CAAC,CAAC;YAE1C,uEAAuE;YACvE,oGAAoG;YACpG,IAAM,MAAM,GAAW,SAAS,KAAK,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;YAEnE,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QAC7B,CAAC,CACF,CAAC;IACJ,CAAC;IAeD;;;;;OAKG;IACI,qBAAM,GAAb,UAAc,IAAU;QACtB,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,KAAK,IAAI,CAAC,QAAQ,EAAE,CAAC;IAC3D,CAAC;IAED;;;;;OAKG;IACI,uBAAQ,GAAf;QACE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IACH,WAAC;AAAD,CAtIA,AAsIC,IAAA;AAtID;sBAsIC,CAAA","file":"guid/Guid.js","sourcesContent":["/**\r\n * @copyright (c) Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nimport { IRandomProvider } from '../common/RandomProvider';\r\n\r\n/**\r\n * This class represents a globally unique identifier, as described by\r\n * IETF RFC 4122.  The input string is normalized and validated by the class\r\n * constructor, which provides important guarantees that simplify other code\r\n * that works with the GUID.  This class also provides basic functionality\r\n * for generating a pseudo-random GUID (\"version 4\" UUID from the RFC);\r\n * however, be aware that the uniqueness depends on the browser's\r\n * Math.random() function and may be not be suitable for some applications.\r\n *\r\n * @see {@link https://www.ietf.org/rfc/rfc4122.txt}\r\n */\r\nexport default class Guid {\r\n\r\n  /**\r\n   * @member _guid - Internal guid value\r\n   */\r\n  private _guid: string;\r\n\r\n  /**\r\n   * Indicates whether a guid is valid (according to RFC4122).\r\n   *\r\n   * @param guid - Test guid.\r\n   * @return Value indicating whether the guid is valid.\r\n   */\r\n  public static isValid(guid: string): boolean {\r\n    return Guid.tryParse(guid) !== undefined;\r\n  }\r\n\r\n  /**\r\n   * Returns a new Guid instance with a pseudo-randomly generated Guid.\r\n   *\r\n   * @return A new valid unique Guid object\r\n   */\r\n  public static newGuid(randomProvider?: IRandomProvider): Guid {\r\n    return new Guid(Guid._generateGuid(randomProvider));\r\n  }\r\n\r\n  /**\r\n   * Trys to construct a new Guid instance using guid string. The guid argument\r\n   * is normalized and validated. If the argument is not a valid \"version 4\" UUID from\r\n   * RFC 4122, tryParse will return undefined.\r\n   *\r\n   * @param guid - A guid string\r\n   * @return If the guid argument was valid, a new Guid instance. Otherwise, undefined.\r\n   */\r\n  public static tryParse(guid: string): Guid {\r\n    const guidRegEx: RegExp = /^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[ab89][a-f0-9]{3}-[a-f0-9]{12}$/i;\r\n\r\n    if (guid) {\r\n      guid = Guid._normalize(guid);\r\n      if (guidRegEx.test(guid)) {\r\n        return new Guid(guid);\r\n      }\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * SharePoint can have guids in the form:\r\n   *   - Guid(...)\r\n   *   - {...}\r\n   * _normalize transforms guids in this format to the standard\r\n   * guid format.\r\n   *\r\n   * Example: '/Guid(d5369f3b-bd7a-412a-9c0f-7f0650bb5489)/'\r\n   *          -> 'd5369f3b-bd7a-412a-9c0f-7f0650bb5489'\r\n   * Example: '{d5369f3b-bd7a-412a-9c0f-7f0650bb5489}'\r\n   *          -> 'd5369f3b-bd7a-412a-9c0f-7f0650bb5489'\r\n   *\r\n   * @param guid - Guid to be normalized, could already be normalized.\r\n   * @return Normalized guid.\r\n   */\r\n  private static _normalize(guid: string): string {\r\n\r\n    // Check for Guid(...) and strip\r\n    const result: string[] = /^Guid\\((.*)\\)/i.exec(guid);\r\n    if (result) {\r\n      guid = result[1];\r\n    }\r\n\r\n    // Check for and strip leading or trailing curly braces\r\n    if (guid.length === 38) {\r\n      guid = guid.substr(1, 36);\r\n    }\r\n\r\n    return guid.toLowerCase();\r\n  }\r\n\r\n  /**\r\n   * Creates a new guid.\r\n   *\r\n   * @return A valid guid (according to RFC4122)\r\n   */\r\n  private static _generateGuid(randomProvider: IRandomProvider): string {\r\n    return 'AAAAAAAA-AAAA-4AAA-BAAA-AAAAAAAAAAAA'.replace(\r\n      /[AB]/g,\r\n      // Callback for String.replace() when generating a guid.\r\n      (character: string): string => {\r\n        const randomNumber: number = randomProvider ? randomProvider.getRandom() : Math.random();\r\n\r\n        /* tslint:disable:no-bitwise */\r\n        const num: number = randomNumber * 16 | 0;\r\n\r\n        // Check for 'A' in template string because the first characters in the\r\n        // third and fourth blocks must be specific characters (according to \"version 4\" UUID from RFC 4122)\r\n        const masked: number = character === 'A' ? num : (num & 0x3 | 0x8);\r\n\r\n        return masked.toString(16);\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * WARNING: Use Guid.tryParse instead of the constructor. The constructor does not\r\n   * do any validation and will be deprecated when visiblity on constructors is supported\r\n   * by TypeScript.\r\n   *\r\n   * @todo #162166 Make private when TS supports visibility on constructors\r\n   * @private Use Guid.tryParse to instantiate a Guid\r\n   * @param guid - a guid string\r\n   */\r\n  constructor(guid: string) {\r\n      this._guid = guid;\r\n  }\r\n\r\n  /**\r\n   * Compare this instance to another Guid instance\r\n   *\r\n   * @return A value indicating whether this instance and the specified Guid object\r\n   *   represent the same value\r\n   */\r\n  public equals(guid: Guid): boolean {\r\n    return guid && this._guid.toString() === guid.toString();\r\n  }\r\n\r\n  /**\r\n   * Object.prototype.toString override\r\n   *\r\n   * @return The GUID value in lowercase hexadecimal without braces.\r\n   * Example: 'd5369f3b-bd7a-412a-9c0f-7f0650bb5489'\r\n   */\r\n  public toString(): string {\r\n    return this._guid;\r\n  }\r\n}\r\n"],"sourceRoot":"/src"}