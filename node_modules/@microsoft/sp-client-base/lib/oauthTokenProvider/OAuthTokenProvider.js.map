{"version":3,"sources":["oauthTokenProvider/OAuthTokenProvider.ts"],"names":[],"mappings":";AAAA,iCAA6B,sBAAsB,CAAC,CAAA;AACpD,oCAAgC,uBAAuB,CAAC,CAAA;AAExD,2BAAuB,4BAA4B,CAAC,CAAA;AACpD,yBAAqB,oBAAoB,CAAC,CAAA;AAE1C;;;;;;;GAOG;AACH;IAGE,4BAAmB,YAA0B;QAC3C,IAAI,CAAC,aAAa,GAAG,IAAI,+BAAY,CAAC,IAAI,6BAAmB,CAAC,YAAY,CAAC,CAAC,CAAC;IAC/E,CAAC;IAED;;;;;;;;;;;;;;;OAeG;IACH,6CAA6C;IACtC,0CAAa,GAApB,UAAqB,QAAgB;QACnC,kBAAQ,CAAC,oBAAoB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;QACpD,kBAAQ,CAAC,gBAAgB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;QAChD,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;IACpD,CAAC;IAED;;;;;QAKI;IACG,6CAAgB,GAAvB,UAAwB,QAAgB;QACtC,kBAAQ,CAAC,oBAAoB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;QACpD,kBAAQ,CAAC,gBAAgB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;QAChD,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;IAChD,CAAC;IACH,yBAAC;AAAD,CAzCA,AAyCC,IAAA;AAzCD;oCAyCC,CAAA;AAEY,oCAA4B,GACvC,oBAAU,CAAC,MAAM,CAAqB,qCAAqC,EAAE,kBAAkB,CAAC,CAAC","file":"oauthTokenProvider/OAuthTokenProvider.js","sourcesContent":["import { OAuthUtility } from '@ms/sp-client-shared';\r\nimport OAuthUtilityContext from './OAuthUtilityContext';\r\nimport ServiceScope from '../serviceScope/ServiceScope';\r\nimport ServiceKey from '../serviceScope/ServiceKey';\r\nimport Validate from '../common/Validate';\r\n\r\n/**\r\n * This class allows one to obtain OAuth tokens\r\n *\r\n * OAuth tokens are used to authenticate the user from the sharepoint page\r\n * to other services such as PowerBI, Sway, Exchange, Yammer, etc.\r\n *\r\n * @alpha\r\n */\r\nexport default class OAuthTokenProvider {\r\n  private _tokenUtility: OAuthUtility;\r\n\r\n  public constructor(serviceScope: ServiceScope) {\r\n    this._tokenUtility = new OAuthUtility(new OAuthUtilityContext(serviceScope));\r\n  }\r\n\r\n  /**\r\n   * Fetches the oauth token for a resource if the user that's currently logged in has\r\n   * access to that resource.\r\n   *\r\n   * The OAuth token SHOULD NOT be cached by the caller since it is already cached by the method\r\n   * itself.\r\n   *\r\n   * If the promise returned by this method rejects, there is no point in retrying the same call.\r\n   * If the response from the server signals that the request should be retried this function will do this by itself.\r\n   *\r\n   * An example of a resource would be https://sdfpilot.outlook.com\r\n   *\r\n   * @param resource - the resource for which the token should be obtained\r\n   * @returns A promise that will be fullfiled with the token or that will reject\r\n   *          with an instance of TokenUtilityError\r\n   */\r\n  // @todo VSO:237921 - use the correct typings\r\n  public getOAuthToken(resource: string): Promise<any> { // tslint:disable-line:no-any\r\n    Validate.isNotNullOrUndefined(resource, 'resource');\r\n    Validate.isNonemptyString(resource, 'resource');\r\n    return this._tokenUtility.getOAuthToken(resource);\r\n  }\r\n\r\n  /**\r\n   * Clears the token from a given resource from the internal cache. If there is no token\r\n   * cached for the resource the method does nothing.\r\n   *\r\n   * @param resource - resource for which the token should be cleared from the cache\r\n   **/\r\n  public clearCachedToken(resource: string): void {\r\n    Validate.isNotNullOrUndefined(resource, 'resource');\r\n    Validate.isNonemptyString(resource, 'resource');\r\n    this._tokenUtility.clearCachedToken(resource);\r\n  }\r\n}\r\n\r\nexport const oAuthTokenProviderServiceKey: ServiceKey<OAuthTokenProvider> =\r\n  ServiceKey.create<OAuthTokenProvider>('sp-client-shared:OAuthTokenProvider', OAuthTokenProvider);"],"sourceRoot":"/src"}