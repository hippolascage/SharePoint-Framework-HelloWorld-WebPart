{"version":3,"sources":["oauthTokenProvider/OAuthUtilityContext.ts"],"names":[],"mappings":";AACA,2BAAuB,6BAA6B,CAAC,CAAA;AACrD,yBAAqB,2BAA2B,CAAC,CAAA;AACjD,yBAAyB,2BAA2B,CAAC,CAAA;AACrD,2BAAiD,0BAA0B,CAAC,CAAA;AAG5E;IAAA;IAcA,CAAC;IAXQ,oCAAO,GAAd,UAAe,OAAe;QAC5B,kBAAQ,CAAC,GAAG,CAAC,kBAAkB,CAAC,SAAS,EAAE,OAAO,EAAE,mBAAQ,CAAC,IAAI,CAAC,CAAC;IACrE,CAAC;IAEM,qCAAQ,GAAf,UAAgB,OAAe;QAC7B,kBAAQ,CAAC,GAAG,CAAC,kBAAkB,CAAC,SAAS,EAAE,OAAO,EAAE,mBAAQ,CAAC,KAAK,CAAC,CAAC;IACtE,CAAC;IAEM,uCAAU,GAAjB,UAAkB,OAAe;QAC/B,kBAAQ,CAAC,GAAG,CAAC,kBAAkB,CAAC,SAAS,EAAE,OAAO,EAAE,mBAAQ,CAAC,OAAO,CAAC,CAAC;IACxE,CAAC;IAZc,4BAAS,GAAW,cAAc,CAAC;IAapD,yBAAC;AAAD,CAdA,AAcC,IAAA;AAED;;;;;;;;;GASG;AACH;IAUE,6BAAmB,YAA0B;QAV/C,iBA8BC;QAnBG,YAAY,CAAC,YAAY,CAAC;YACxB,KAAI,CAAC,WAAW,GAAG,YAAY,CAAC,OAAO,CAAa,iCAAoB,CAAC,CAAC;YAC1E,KAAI,CAAC,OAAO,GAAG,IAAI,kBAAkB,EAAE,CAAC;QAC1C,CAAC,CAAC,CAAC;IACL,CAAC;IATD,sBAAW,uCAAM;aAAjB;YACE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;QACtB,CAAC;;;OAAA;IASM,6CAAe,GAAtB,UAAuB,OAAgB;QAAvC,iBAQC;QAPC,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,IAAI,CAAW,UAAC,WAAiB;YACrD,MAAM,CAAC,KAAI,CAAC,WAAW,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE;gBACzC,MAAM,EAAE,OAAO,CAAC,MAAM;gBACtB,OAAO,EAAE,OAAO,CAAC,OAAO;gBACxB,IAAI,EAAE,WAAW;aAClB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,wCAAU,GAAjB;QACE,MAAM,CAAC,IAAI,oBAAU,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;IACrD,CAAC;IA5Bc,2BAAO,GAAW,oBAAoB,CAAC;IA6BxD,0BAAC;AAAD,CA9BA,AA8BC,IAAA;AA9BD;qCA8BC,CAAA","file":"oauthTokenProvider/OAuthUtilityContext.js","sourcesContent":["import { IOAuthUtilityContext, IQosMonitor, ILogger } from '@ms/sp-client-shared';\r\nimport QosMonitor from '../telemetry/Api/QosMonitor';\r\nimport LogEvent from '../telemetry/Api/LogEvent';\r\nimport { LogLevel } from '../telemetry/Api/LogLevel';\r\nimport HttpClient, { httpClientServiceKey } from '../httpClient/HttpClient';\r\nimport ServiceScope from '../serviceScope/ServiceScope';\r\n\r\nclass TokenUtilityLogger implements ILogger {\r\n  private static logSource: string = 'TokenUtility';\r\n\r\n  public logInfo(message: string): void {\r\n    LogEvent.log(TokenUtilityLogger.logSource, message, LogLevel.Info);\r\n  }\r\n\r\n  public logError(message: string): void {\r\n    LogEvent.log(TokenUtilityLogger.logSource, message, LogLevel.Error);\r\n  }\r\n\r\n  public logWarning(message: string): void {\r\n    LogEvent.log(TokenUtilityLogger.logSource, message, LogLevel.Warning);\r\n  }\r\n}\r\n\r\n/**\r\n * The DelegationTokenProvider's implementation was moved into the sp-client-shared\r\n * package so that it can be shared with other teams that are not using sp-client-base\r\n * platform.  To support this, the sp-client-shared package defines an interface\r\n * ITokenUtilityContext which abstracts the basic services that are needed by that\r\n * code.  TokenUtilityContext is our adapter that wires up this interface to the\r\n * corresponding services in sp-client-base; it can be considered part of the\r\n * internal implementation of DelegationTokenProvider; it is not  intended to be\r\n * used by other parts of our framework.\r\n */\r\nexport default class OAuthUtilityContext implements IOAuthUtilityContext {\r\n  private static qosName: string = 'OAuthTokenProvider';\r\n  private _logger: ILogger;\r\n\r\n  private _httpClient: HttpClient;\r\n\r\n  public get logger(): ILogger {\r\n    return this._logger;\r\n  }\r\n\r\n  public constructor(serviceScope: ServiceScope) {\r\n    serviceScope.whenFinished(() => {\r\n      this._httpClient = serviceScope.consume<HttpClient>(httpClientServiceKey);\r\n      this._logger = new TokenUtilityLogger();\r\n    });\r\n  }\r\n\r\n  public fetchWithDigest(request: Request): Promise<Response> {\r\n    return request.blob().then<Response>((requestBody: Blob) => {\r\n      return this._httpClient.fetch(request.url, {\r\n        method: request.method,\r\n        headers: request.headers,\r\n        body: requestBody\r\n      });\r\n    });\r\n  }\r\n\r\n  public qosMonitor(): IQosMonitor {\r\n    return new QosMonitor(OAuthUtilityContext.qosName);\r\n  }\r\n}"],"sourceRoot":"/src"}