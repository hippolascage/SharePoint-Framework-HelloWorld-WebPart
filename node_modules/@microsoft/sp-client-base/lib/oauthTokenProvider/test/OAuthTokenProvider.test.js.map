{"version":3,"sources":["oauthTokenProvider/test/OAuthTokenProvider.test.ts"],"names":[],"mappings":"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","file":"oauthTokenProvider/test/OAuthTokenProvider.test.js","sourcesContent":["import ServiceScope from '../../serviceScope/ServiceScope';\r\nimport MockFetchProvider, { MockedHeader } from '../../httpClient/test/MockFetchProvider';\r\nimport { fetchProviderServiceKey } from '../../httpClient/FetchProvider';\r\nimport MockRandomProvider from '../../httpClient/test/MockRandomProvider';\r\nimport { randomProviderServiceKey } from '../../common/RandomProvider';\r\nimport OAuthTokenProvider, { oAuthTokenProviderServiceKey } from '../OAuthTokenProvider';\r\nimport { IOAuthToken, OAuthUtilityError, OAuthUtilityErrorType } from '@ms/sp-client-shared';\r\n\r\nconst assert: Chai.AssertStatic = chai.assert;\r\n\r\ninterface IFetchProviderExpectations {\r\n  requestAssertions: (request: Request) => void;\r\n  responseObject: any; // tslint:disable-line no-any\r\n  responseOptions?: ResponseInit;\r\n}\r\n\r\ndescribe('OAuthTokenProvider tests', () => {\r\n  let testCase: number = 0;\r\n  const rootScope: ServiceScope = ServiceScope.startNewRoot();\r\n  const fetchProvider: MockFetchProvider = new MockFetchProvider(rootScope);\r\n  rootScope.provide(fetchProviderServiceKey, fetchProvider);\r\n  const randomProvider: MockRandomProvider = new MockRandomProvider(rootScope);\r\n  rootScope.provide(randomProviderServiceKey, randomProvider);\r\n  rootScope.finish();\r\n  const tokenProvider: OAuthTokenProvider = rootScope.consume(oAuthTokenProviderServiceKey);\r\n\r\n  beforeEach(() => {\r\n    testCase++;\r\n  });\r\n\r\n  it('Should get the correct token in case of a successfull request', () => {\r\n    fetchProvider.expect({\r\n      expectedUrl: '/_api/contextinfo',\r\n      responseObject: {\r\n        'FormDigestValue': 'DIGEST_1',\r\n        'FormDigestTimeoutSeconds': 30\r\n      }\r\n    });\r\n\r\n    setFetchProviderExpectation({\r\n      requestAssertions: (request: Request): void => {\r\n        assert.isTrue(request.headers.has('X-RequestDigest'));\r\n      },\r\n      responseObject: {\r\n        access_token: 'test_token',\r\n        expires_on: Date.now() / 1000 + 10000,\r\n        not_before: '1467752142',\r\n        resource: 'resource',\r\n        scope: 'user_impersonation',\r\n        token_type: 'Bearer'\r\n      }\r\n    });\r\n\r\n    return tokenProvider.getOAuthToken(getTestResource()).then((oAuthToken: IOAuthToken) => {\r\n      assert.equal(oAuthToken.token, 'test_token');\r\n    });\r\n  });\r\n\r\n  it('should get the right error in case of an erroneous request', () => {\r\n    setFetchProviderExpectation({\r\n      requestAssertions: (request: Request): void => {\r\n        assert.isTrue(request.headers.has('X-RequestDigest'));\r\n      },\r\n      responseObject: {\r\n        error: {\r\n          message: 'error',\r\n          code: '1, some.exception'\r\n        }\r\n      },\r\n      responseOptions: {\r\n        status: 400\r\n      }\r\n    });\r\n\r\n    return tokenProvider.getOAuthToken(getTestResource()).then(() => { assert.fail(); },\r\n      (error: any) => {// tslint:disable-line no-any\r\n        chai.expect(error).instanceof(OAuthUtilityError);\r\n        const tokenUtilError: OAuthUtilityError = error as OAuthUtilityError;\r\n        assert.equal(tokenUtilError.type, OAuthUtilityErrorType.serverError);\r\n        assert.equal(tokenUtilError.serverErrorCode, 1);\r\n        assert.equal(tokenUtilError.message, 'error');\r\n      });\r\n  });\r\n\r\n  /* tslint:disable no-any */\r\n  function setFetchProviderExpectation(expectations: IFetchProviderExpectations): void {\r\n  /* tslint:enable no-any */\r\n    fetchProvider.expect({\r\n      expectedUrl: '/_api/SP.OAuth.Token/Acquire',\r\n      expectedRequestHeaders: [\r\n        new MockedHeader('Content-Type', 'application/json; charset=utf-8'),\r\n        new MockedHeader('Odata-Version', '4.0'),\r\n        new MockedHeader('Accept', 'application/json;odata.metadata=minimal')\r\n      ],\r\n      requestAssertions: expectations.requestAssertions,\r\n      responseObject: expectations.responseObject,\r\n      responseOptions: expectations.responseOptions\r\n    });\r\n  }\r\n\r\n  function getTestResource(): string {\r\n    return 'resource' + testCase;\r\n  }\r\n});"],"sourceRoot":"/src"}