{"version":3,"sources":["telemetry/Api/BeaconHandlers.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;AAEH,sCAOO,2BAA2B,CAAC,CAAA;AAEnC;IAAA;IA2CA,CAAC;IA1CgB,mCAAoB,GAAnC,UAAoC,UAA0B;QAC5D,YAAY,CAAC;QACb,EAAE,CAAC,CAAC,UAAU,KAAK,sCAAc,CAAC,OAAO,CAAC,CAAC,CAAC;YAC1C,MAAM,CAAC,UAAU,CAAC;QACpB,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,UAAU,KAAK,sCAAc,CAAC,OAAO,CAAC,CAAC,CAAC;YACjD,MAAM,CAAC,UAAU,CAAC;QACpB,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,UAAU,KAAK,sCAAc,CAAC,eAAe,CAAC,CAAC,CAAC;YACzD,MAAM,CAAC,kBAAkB,CAAC;QAC5B,CAAC;QAED,MAAM,CAAC,EAAE,CAAC;IACZ,CAAC;IAED,+DAA+D;IACxD,6CAAoB,GAA3B,UAA4B,KAAmB;QAC7C,MAAM,CAAC,2BAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,sCAAmB,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IACzE,CAAC;IAEM,4CAAmB,GAA1B,UAA2B,KAAmB,EAAE,WAAmB;QACjE,IAAI,IAAI,GAAW,WAAW,CAAC;QAC/B,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;YACf,EAAE,CAAC,CAAC,KAAK,CAAC,SAAS,KAAK,uCAAmB,CAAC,KAAK,CAAC,CAAC,CAAC;gBAClD,IAAI,IAAI,QAAQ,CAAC;YACnB,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,SAAS,KAAK,uCAAmB,CAAC,GAAG,CAAC,CAAC,CAAC;gBACvD,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;oBAC1B,IAAI,IAAI,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC;gBACtC,CAAC;gBACD,IAAI,IAAI,cAAc,CAAC,oBAAoB,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YACrE,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,IAAI,IAAI,eAAe,CAAC;YAC1B,CAAC;QACH,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED,2BAA2B;IACpB,iDAAwB,GAA/B,UAAgC,KAAmB,EAAE,OAAY;QAC/D,MAAM,CAAC;IACT,CAAC;IAGH,qBAAC;AAAD,CA3CA,AA2CC,IAAA;AAED;kBAAe,cAAc,CAAA","file":"telemetry/Api/BeaconHandlers.js","sourcesContent":["/**\r\n * @copyright Microsoft Corporation.All rights reserved.\r\n * @file BeaconHandlers.ts\r\n * BeasonHandlers represents the contract for application logger\r\n */\r\n\r\nimport {\r\n  IBeaconHandlers,\r\n  IClonedEvent,\r\n  ClonedEventType as ClonedEventTypeEnum,\r\n  Nav as NavEvent,\r\n  PLTHttpRequest as PLTHttpRequestEvent,\r\n  ResultTypeEnum\r\n} from '@ms/odsp-utilities-bundle';\r\n\r\nclass BeaconHandlers implements IBeaconHandlers {\r\n  private static _getResultTypeSuffix(resultType: ResultTypeEnum): string {\r\n    'use strict';\r\n    if (resultType === ResultTypeEnum.Success) {\r\n      return '.Success';\r\n    } else if (resultType === ResultTypeEnum.Failure) {\r\n      return '.Failure';\r\n    } else if (resultType === ResultTypeEnum.ExpectedFailure) {\r\n      return '.ExpectedFailure';\r\n    }\r\n\r\n    return '';\r\n  }\r\n\r\n  // ignore these events, or they will show up under UnknownEvent\r\n  public ignoredEventsHandler(event: IClonedEvent): boolean {\r\n    return NavEvent.isTypeOf(event) || PLTHttpRequestEvent.isTypeOf(event);\r\n  }\r\n\r\n  public qosEventNameHandler(event: IClonedEvent, currentName: string): string {\r\n    let name: string = currentName;\r\n    if (event.data) {\r\n      if (event.eventType === ClonedEventTypeEnum.Start) {\r\n        name += '.Start';\r\n      } else if (event.eventType === ClonedEventTypeEnum.End) {\r\n        if (event.data.resultCode) {\r\n          name += '.' + event.data.resultCode;\r\n        }\r\n        name += BeaconHandlers._getResultTypeSuffix(event.data.resultType);\r\n      } else {\r\n        name += '.no_EventType';\r\n      }\r\n    }\r\n\r\n    return name;\r\n  }\r\n\r\n  /* tslint:disable:no-any */\r\n  public qosEventExtraDataHandler(event: IClonedEvent, qosData: any): void {\r\n    return;\r\n  }\r\n  /* tslint:enable:no-any */\r\n\r\n}\r\n\r\nexport default BeaconHandlers\r\n"],"sourceRoot":"/src"}