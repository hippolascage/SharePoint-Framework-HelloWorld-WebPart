/**
 * Usage:
 * 1. Begin an application session with a aggregatable name (e.g. level1.level2.level3) at the very beginning.
 *  e.g.
 *    PerformanceLogger.initializeApplication('ContosoApp.Page1')
 *  Only one application per page can be created.
 * 2. To monitor a component as part of EUPL:
 * 2.1 Add the following at the component render start time.
 *    PerformanceLogger.addComponent('contosoWebPart1');
 *    PerformanceLogger.startMarkForComponent('contosoWebPart1');
 * 2.2 Add the following at the component render end time.
 *    PerformanceLogger.endMarkForComponent('contosoWebPart1');
 * 3. To monitor a request:
 * 3.1 Add the following at request start time:
 *    PerformanceLogger.startMarkForApi('call1_uniqueId', 'someUrl1');
 * 3.2 Add the following at request end time:
 *    PerformanceLogger.endMarkForApi('call1_uniqueId', 'call1', 'someUrl1', response);
 *
 * Note1: due to server side limitation, only the first 4 (soon will be 10) components'
 * data is send to server. The rest can be dumped to console if
 * window.sessionStorage["enableRUMOneDebugging"] == true.
 * Note2: do not include component time that do not affect EUPL (like async time spent.)
 *
 * @internal
 */
export default class PerformanceLogger {
    private static _logSource;
    private static _rumOneLogger;
    private static _componentStartTimeKey;
    private static _componentEndTimeKey;
    private static _apiStartTimeKey;
    private static _apiEndTimeKey;
    private static _navigationStartTimeKey;
    private static _markKey;
    private static _applicationStartKey;
    /**
     * Initialize the application with a name. All perf data is reset for non-fullPageLoad.
     * @param {string} applicationName - name of the application
     * @param {boolean} fullPageLoad - indicate if full page load
     */
    static initializeApplication(applicationName: string, fullPageLoad?: boolean): void;
    /**
     * Indicate whether the performance data is for a full page load or partial load.
     */
    /**
     * Set the fullPageLoad to be true if the data is for a full page load, otherwise set it to be false.
     */
    static fullPageLoad: boolean;
    /**
     * Add a component to track its performance.
     * @param {string} tag - The identifier that identifies the component in the performance data stream.
     */
    static addComponent(tag: string): void;
    /**
     * Record component start time.
     * @param {string} tag - The identifier that identifies the component in the performance data stream.
     */
    static startMarkForComponent(tag: string): void;
    /**
     * Record component end time.
     * @param {string} tag - The identifier that identifies the component in the performance data stream.
     */
    static endMarkForComponent(tag: string): void;
    /**
     * Record a time in the performance data stream for the component.
     * @param {string} tag - The identifier that identifies the component in the performance data stream.
     * @param {string} name - The name of the time value
     */
    static markComponent(tag: string, name: string): void;
    /**
     * Record a request start time.
     * @param {string} tag - The identifier that uniquely identifies the request in the
     * performance data stream, used to calculate the duration. Not persisted in RumOne.
     * @param {string} requestUrl - The url of the request.
     *
     * @todo #191154 Integrate it into HttpClient.
     */
    static startMarkForApi(tag: string): void;
    /**
     * Record a request end time.
     * @param {string} tag - The identifier that uniquely identifies the request in the
     * performance data stream, used to calculate the duration. Not persisted in RumOne.
     * @param {string} name - The name to aggregate the data. Persisted in RumOne stream.
     * @param {string} requestUrl - The url of the request.
     * @param {Response} response - The response from the request.
     *
     * @todo #191154 Integrate it into HttpClient.
     */
    static endMarkForApi(tag: string, name: string, requestUrl: string, response: Response): void;
    /**
     * Mark application start time
     */
    static markApplicationStart(): void;
    /**
     * Get the application start time
     */
    static getApplicationStartTime(): number;
    /**
     * Get the recorded component start time.
     * @param {string} tag - The identifier that identifies the component in the performance data stream.
     */
    static getComponentStartTime(tag: string): number;
    /**
     * Get the recorded component end time.
     * @param {string} tag - The identifier that identifies the component in the performance data stream.
     */
    static getComponentEndTime(tag: string): number;
    /**
     * Get the recorded request start time.
     * @param {string} tag - The identifier that identifies the request in the performance data stream.
     */
    static getApiStartTime(tag: string): number;
    /**
     * Get the recorded request end time.
     * @param {string} tag - The identifier that identifies the request in the performance data stream.
     */
    static getApiEndTime(tag: string): number;
    /**
     * Initialize the logger.
     * The logger is not initialized in the constructor for lazy initialization.
     */
    private static ensureInitialized();
    private static _logger;
    private static isRunning();
    private static reportControlData(tag, startTime, endTime);
    private static _checkRenderTimeRequiredDataAvailable(rumone, controlData);
    /**
     * call back function, exected by RUMOne to computer control render time for this control
     */
    private static _computeRenderTime(rumone, controlData);
    /**
     * Mark the beginning of a page transition. It can be for a full page load or partial page transition.
     * For full page load, the NavigationStart will be from dom.
     * (https://www.w3.org/TR/navigation-timing/#dom-performancetiming-navigationstart)
     * For partial page transition, this method records current time as NavigationStart.
     */
    private static _startMarkForPageTransition();
    private static _convertToISOString(time);
    /**
     * Mark the current time associated with the provided tag.
     * @param {string} tag - The identifier of the time
     */
    private static _mark(tag);
    /**
     * Get the time associated with the tag.
     * @param {string} tag - The identifier of the time
     */
    private static _getMark(tag);
    private static _getNowTime();
}
