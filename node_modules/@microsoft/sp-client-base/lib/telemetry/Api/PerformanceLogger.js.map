{"version":3,"sources":["telemetry/Api/PerformanceLogger.ts"],"names":[],"mappings":"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","file":"telemetry/Api/PerformanceLogger.js","sourcesContent":["/**\r\n * @Copyright (c) Microsoft Corporation.  All rights reserved.\r\n *\r\n * @file PerformanceLogger\r\n */\r\nimport {\r\n  RumOneLogger,\r\n  PageTransitionType,\r\n  ControlPerformanceData,\r\n  APICallPerformanceData } from '@ms/odsp-utilities-bundle';\r\nimport LogSource from './LogSource';\r\nimport TraceLogger from './TraceLogger';\r\n\r\n/**\r\n * Usage:\r\n * 1. Begin an application session with a aggregatable name (e.g. level1.level2.level3) at the very beginning.\r\n *  e.g.\r\n *    PerformanceLogger.initializeApplication('ContosoApp.Page1')\r\n *  Only one application per page can be created.\r\n * 2. To monitor a component as part of EUPL:\r\n * 2.1 Add the following at the component render start time.\r\n *    PerformanceLogger.addComponent('contosoWebPart1');\r\n *    PerformanceLogger.startMarkForComponent('contosoWebPart1');\r\n * 2.2 Add the following at the component render end time.\r\n *    PerformanceLogger.endMarkForComponent('contosoWebPart1');\r\n * 3. To monitor a request:\r\n * 3.1 Add the following at request start time:\r\n *    PerformanceLogger.startMarkForApi('call1_uniqueId', 'someUrl1');\r\n * 3.2 Add the following at request end time:\r\n *    PerformanceLogger.endMarkForApi('call1_uniqueId', 'call1', 'someUrl1', response);\r\n *\r\n * Note1: due to server side limitation, only the first 4 (soon will be 10) components'\r\n * data is send to server. The rest can be dumped to console if\r\n * window.sessionStorage[\"enableRUMOneDebugging\"] == true.\r\n * Note2: do not include component time that do not affect EUPL (like async time spent.)\r\n *\r\n * @internal\r\n */\r\nexport default class PerformanceLogger {\r\n  private static _logSource: LogSource = LogSource.create('PerformanceLogger');\r\n  private static _rumOneLogger: RumOneLogger;\r\n  private static _componentStartTimeKey: string = 'ComponentStartTime';\r\n  private static _componentEndTimeKey: string = 'ComponentEndTime';\r\n  private static _apiStartTimeKey: string = 'ApiStartTime';\r\n  private static _apiEndTimeKey: string = 'ApiEndTime';\r\n  private static _navigationStartTimeKey: string = 'SPClientNavStartTime';\r\n  private static _markKey: string = 'Mark';\r\n  private static _applicationStartKey: string = 'appStart';\r\n\r\n  /**\r\n   * Initialize the application with a name. All perf data is reset for non-fullPageLoad.\r\n   * @param {string} applicationName - name of the application\r\n   * @param {boolean} fullPageLoad - indicate if full page load\r\n   */\r\n  public static initializeApplication(applicationName: string, fullPageLoad: boolean = false): void {\r\n    if (fullPageLoad === false) {\r\n      this._logger.resetLogger();\r\n    }\r\n    this._logger.writeScenarioId(applicationName);\r\n    this._startMarkForPageTransition();\r\n  }\r\n\r\n  /**\r\n   * Indicate whether the performance data is for a full page load or partial load.\r\n   */\r\n  public static get fullPageLoad(): boolean {\r\n    const pageTransitionType: number = this._logger.getPerformanceDataPropertyValue('PageTransitionType');\r\n    if (pageTransitionType !== undefined) {\r\n      return pageTransitionType === PageTransitionType.fullPageLoad;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Set the fullPageLoad to be true if the data is for a full page load, otherwise set it to be false.\r\n   */\r\n  public static set fullPageLoad(isFullPageLoad: boolean) {\r\n    const pageTransitionType: PageTransitionType = isFullPageLoad ? PageTransitionType.fullPageLoad :\r\n      PageTransitionType.none;\r\n    this._logger.writePageTransitionType(pageTransitionType, true);\r\n  }\r\n\r\n  /**\r\n   * Add a component to track its performance.\r\n   * @param {string} tag - The identifier that identifies the component in the performance data stream.\r\n   */\r\n  public static addComponent(tag: string): void {\r\n    if (!this.isRunning()) {\r\n      return;\r\n    }\r\n    this._logger.addExpectedControl(tag);\r\n  }\r\n\r\n  /**\r\n   * Record component start time.\r\n   * @param {string} tag - The identifier that identifies the component in the performance data stream.\r\n   */\r\n  public static startMarkForComponent(tag: string): void {\r\n    if (!this.isRunning()) {\r\n      return;\r\n    }\r\n    const currentTime: number = this._getNowTime();\r\n    this._logger.saveTempData(tag + this._componentStartTimeKey, currentTime);\r\n    this._logger.addEUPLBreakdown(`${tag}.start`, currentTime);\r\n  }\r\n\r\n  /**\r\n   * Record component end time.\r\n   * @param {string} tag - The identifier that identifies the component in the performance data stream.\r\n   */\r\n  public static endMarkForComponent(tag: string): void {\r\n    if (!this.isRunning()) {\r\n      return;\r\n    }\r\n    const controlStartTime: number = this.getComponentStartTime(tag);\r\n    const endTime: number = this._getNowTime();\r\n    this.reportControlData(tag, controlStartTime, endTime);\r\n    this._logger.saveTempData(tag + this._componentEndTimeKey, endTime);\r\n  }\r\n\r\n  /**\r\n   * Record a time in the performance data stream for the component.\r\n   * @param {string} tag - The identifier that identifies the component in the performance data stream.\r\n   * @param {string} name - The name of the time value\r\n   */\r\n  public static markComponent(tag: string, name: string): void {\r\n    if (!this.isRunning()) {\r\n      return;\r\n    }\r\n    const startTime: number = this.getComponentStartTime(tag);\r\n    if (startTime === undefined) {\r\n      return;\r\n    }\r\n    this._logger.addEUPLBreakdown(`${tag}.${name}`, this._getNowTime() - startTime);\r\n  }\r\n\r\n  /**\r\n   * Record a request start time.\r\n   * @param {string} tag - The identifier that uniquely identifies the request in the\r\n   * performance data stream, used to calculate the duration. Not persisted in RumOne.\r\n   * @param {string} requestUrl - The url of the request.\r\n   *\r\n   * @todo #191154 Integrate it into HttpClient.\r\n   */\r\n  public static startMarkForApi(tag: string): void {\r\n    if (!this.isRunning()) {\r\n      return;\r\n    }\r\n    this._logger.saveTempData(tag + this._apiStartTimeKey, this._getNowTime());\r\n  }\r\n\r\n  /**\r\n   * Record a request end time.\r\n   * @param {string} tag - The identifier that uniquely identifies the request in the\r\n   * performance data stream, used to calculate the duration. Not persisted in RumOne.\r\n   * @param {string} name - The name to aggregate the data. Persisted in RumOne stream.\r\n   * @param {string} requestUrl - The url of the request.\r\n   * @param {Response} response - The response from the request.\r\n   *\r\n   * @todo #191154 Integrate it into HttpClient.\r\n   */\r\n  public static endMarkForApi(tag: string, name: string, requestUrl: string, response: Response): void {\r\n    if (!this.isRunning()) {\r\n      return;\r\n    }\r\n    const apiStartTime: number = this.getApiStartTime(tag);\r\n    const apiEndTime: number = this._getNowTime();\r\n    const apiData: APICallPerformanceData = new APICallPerformanceData(\r\n      requestUrl,\r\n      Number(response.headers.get('SPClientServiceRequestDuration')),\r\n      response.headers.get('SPRequestGuid'),\r\n      response.status,\r\n      this._convertToISOString(apiStartTime),\r\n      this._convertToISOString(apiEndTime),\r\n      name);\r\n\r\n    // log a API call perf data object for each API call before EUPL complete\r\n    this._logger.writeAPICallPerformanceData(apiData);\r\n\r\n    // Record the last API call end time as app data fetch end\r\n    this._logger.saveTempData(tag + this._apiEndTimeKey, apiEndTime);\r\n  }\r\n\r\n  /**\r\n   * Mark application start time\r\n   */\r\n  public static markApplicationStart(): void {\r\n    this._mark(this._applicationStartKey);\r\n  }\r\n\r\n  /**\r\n   * Get the application start time\r\n   */\r\n  public static getApplicationStartTime(): number {\r\n    return this._getMark(this._applicationStartKey);\r\n  }\r\n\r\n  /**\r\n   * Get the recorded component start time.\r\n   * @param {string} tag - The identifier that identifies the component in the performance data stream.\r\n   */\r\n  public static getComponentStartTime(tag: string): number {\r\n    return this._logger.readTempData(tag + this._componentStartTimeKey);\r\n  }\r\n\r\n  /**\r\n   * Get the recorded component end time.\r\n   * @param {string} tag - The identifier that identifies the component in the performance data stream.\r\n   */\r\n  public static getComponentEndTime(tag: string): number {\r\n    return this._logger.readTempData(tag + this._componentEndTimeKey);\r\n  }\r\n\r\n  /**\r\n   * Get the recorded request start time.\r\n   * @param {string} tag - The identifier that identifies the request in the performance data stream.\r\n   */\r\n  public static getApiStartTime(tag: string): number {\r\n    return this._logger.readTempData(tag + this._apiStartTimeKey);\r\n  }\r\n\r\n  /**\r\n   * Get the recorded request end time.\r\n   * @param {string} tag - The identifier that identifies the request in the performance data stream.\r\n   */\r\n  public static getApiEndTime(tag: string): number {\r\n    return this._logger.readTempData(tag + this._apiEndTimeKey);\r\n  }\r\n\r\n  /**\r\n   * Initialize the logger.\r\n   * The logger is not initialized in the constructor for lazy initialization.\r\n   */\r\n  private static ensureInitialized(): void {\r\n    if (!this._rumOneLogger) {\r\n      // Lazy initialization\r\n      this._rumOneLogger = RumOneLogger.getRUMOneLogger();\r\n      // Put the data as global so that dev dashboard (in module loader project) can access it.\r\n      // @todo 232808: Move this data off the window object\r\n      /* tslint:disable:no-any */\r\n      (window as any).g_spPagesPerformancedata = this._rumOneLogger.getPerformanceData();\r\n      /* tslint:enable:no-any */\r\n    }\r\n  }\r\n\r\n  private static get _logger(): RumOneLogger {\r\n    this.ensureInitialized();\r\n    return this._rumOneLogger;\r\n  }\r\n\r\n  private static isRunning(): boolean {\r\n    return this._logger.isRunning();\r\n  }\r\n\r\n  private static reportControlData(tag: string, startTime: number, endTime: number): void {\r\n    if (!this.isRunning) {\r\n      return;\r\n    }\r\n    const controlPerformanceData: ControlPerformanceData = new ControlPerformanceData(\r\n      tag,\r\n      startTime,\r\n      endTime,\r\n      this._computeRenderTime,\r\n      this._checkRenderTimeRequiredDataAvailable);\r\n    this._logger.writeControlPerformanceData(controlPerformanceData);\r\n  }\r\n\r\n  private static _checkRenderTimeRequiredDataAvailable(rumone: RumOneLogger,\r\n    controlData: ControlPerformanceData): boolean {\r\n    if (rumone && controlData) {\r\n      let navigationStart: number = undefined;\r\n      const pageTransitionType: number = rumone.getPerformanceDataPropertyValue('PageTransitionType');\r\n      if (pageTransitionType === PageTransitionType.fullPageLoad) {\r\n        navigationStart = rumone.getPerformanceDataPropertyValue('W3cNavigationStart');\r\n      } else if (pageTransitionType === PageTransitionType.none) {\r\n        navigationStart = rumone.readTempData('SPClientNavStartTime');\r\n      }\r\n      return Boolean(navigationStart) && Boolean(controlData.endTime);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * call back function, exected by RUMOne to computer control render time for this control\r\n   */\r\n  private static _computeRenderTime(rumone: RumOneLogger, controlData: ControlPerformanceData): number {\r\n    if (rumone && controlData) {\r\n      let navigationStart: number = undefined;\r\n      const pageTransitionType: number = rumone.getPerformanceDataPropertyValue('PageTransitionType');\r\n      if (pageTransitionType === PageTransitionType.fullPageLoad) {\r\n        navigationStart = rumone.getPerformanceDataPropertyValue('W3cNavigationStart');\r\n      } else if (pageTransitionType === PageTransitionType.none) {\r\n        navigationStart = rumone.readTempData('SPClientNavStartTime');\r\n      }\r\n      if (navigationStart) {\r\n        return controlData.endTime - navigationStart;\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Mark the beginning of a page transition. It can be for a full page load or partial page transition.\r\n   * For full page load, the NavigationStart will be from dom.\r\n   * (https://www.w3.org/TR/navigation-timing/#dom-performancetiming-navigationstart)\r\n   * For partial page transition, this method records current time as NavigationStart.\r\n   */\r\n  private static _startMarkForPageTransition(): void {\r\n    if (!this.isRunning()) {\r\n      return;\r\n    }\r\n    this._logger.saveTempData(this._navigationStartTimeKey, this._getNowTime());\r\n  }\r\n\r\n  private static _convertToISOString(time: number): string {\r\n    try {\r\n      return (new Date(time)).toISOString();\r\n    } catch (error) {\r\n      TraceLogger.logVerbose(this._logSource, `Time is ${time}`);\r\n      TraceLogger.logError(this._logSource, error, 'convertTime');\r\n      return `${time}`;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Mark the current time associated with the provided tag.\r\n   * @param {string} tag - The identifier of the time\r\n   */\r\n  private static _mark(tag: string): void {\r\n    this._logger.saveTempData(tag + this._markKey, this._getNowTime());\r\n  }\r\n\r\n  /**\r\n   * Get the time associated with the tag.\r\n   * @param {string} tag - The identifier of the time\r\n   */\r\n  private static _getMark(tag: string): number {\r\n    return this._logger.readTempData(tag + this._markKey);\r\n  }\r\n\r\n  private static _getNowTime(): number {\r\n    return Date.now();\r\n  }\r\n}\r\n"],"sourceRoot":"/src"}