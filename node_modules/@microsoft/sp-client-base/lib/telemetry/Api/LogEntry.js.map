{"version":3,"sources":["telemetry/Api/LogEntry.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;AAGH,2BAAuB,cAAc,CAAC,CAAA;AACtC,wBAAoB,WAAW,CAAC,CAAA;AAEhC;;GAEG;AACH;IAME;;;;;;OAMG;IACH,kBACE,UAAkB,EAClB,UAAoC,EACpC,OAAgC,EAChC,aAAyC;QAFzC,0BAAoC,GAApC,aAAqB,oBAAU,CAAC,IAAI;QACpC,uBAAgC,GAAhC,UAAmB,iBAAO,CAAC,KAAK;QAEhC,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;YACf,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;YAC7B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;YAC7B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;YACvB,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACrC,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;QAC3C,CAAC;IACH,CAAC;IAED;;;OAGG;IACI,2BAAQ,GAAf;QACE,IAAI,kBAAkB,GAAW,SAAS,CAAC;QAC3C,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;YACvB,IAAI,CAAC;gBACH,kBAAkB,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YAC1D,CAAE;YAAA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACX,OAAO,CAAC,GAAG,CAAC,8BAA8B,GAAG,CAAC,CAAC,CAAC;YAClD,CAAC;QACH,CAAC;QAED,MAAM,CAAI,IAAI,CAAC,UAAU,WAAM,IAAI,CAAC,UAAU,WAAM,IAAI,CAAC,OAAO,WAAM,kBAAoB,CAAC;IAC7F,CAAC;IACH,eAAC;AAAD,CA5CA,AA4CC,IAAA;AAED;kBAAe,QAAQ,CAAC","file":"telemetry/Api/LogEntry.js","sourcesContent":["/**\r\n * @file LogEntry.ts\r\n * @Copyright (c) Microsoft Corporation.  All rights reserved.\r\n * Represents a Log entry\r\n */\r\n\r\nimport ILogEntry from './ILogEntry';\r\nimport LogFeature from './LogFeature';\r\nimport LogType from './LogType';\r\n\r\n/**\r\n * @internal\r\n */\r\nclass LogEntry implements ILogEntry {\r\n  public moduleName: string;\r\n  public logFeature: string;\r\n  public logType: LogType;\r\n  public logProperties: { [key: string]: string };\r\n\r\n  /**\r\n   * Initializes a new instance of LogEntry\r\n   * @param moduleName the name of the module\r\n   * @param logFeature the name of the feature\r\n   * @param logType the log type\r\n   * @param logProperties optional property bag\r\n   */\r\n  constructor(\r\n    moduleName: string,\r\n    logFeature: string = LogFeature.None,\r\n    logType: LogType = LogType.Trace,\r\n    logProperties?: { [key: string]: string }) {\r\n    if (moduleName) {\r\n      this.moduleName = moduleName;\r\n      this.logFeature = logFeature;\r\n      this.logType = logType;\r\n      this.logProperties = logProperties;\r\n    } else {\r\n      throw new Error('moduleName is invalid');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * convert the log entry to string\r\n   * @returns the serialized log entry\r\n   */\r\n  public toString(): string {\r\n    let serializedLogProps: string = undefined;\r\n    if (this.logProperties) {\r\n      try {\r\n        serializedLogProps = JSON.stringify(this.logProperties);\r\n      } catch (e) {\r\n        console.log('Error happens in toString():' + e);\r\n      }\r\n    }\r\n\r\n    return `${this.moduleName} | ${this.logFeature} | ${this.logType} | ${serializedLogProps}`;\r\n  }\r\n}\r\n\r\nexport default LogEntry;\r\n"],"sourceRoot":"/src"}