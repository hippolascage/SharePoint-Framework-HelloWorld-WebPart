"use strict";
var CircularBuffer_1 = require('./CircularBuffer');
/**
 * LogManager allows multiple handlers to process log events.
 * It caches the latest 100 log events. If a handler is just added, the
 * handler is able to get access to the cached events and all incoming events.
 * Dev-dashboard and potentially third-party can use it to get access to events.
 */
var LogManager = (function () {
    function LogManager() {
    }
    LogManager.addHandler = function (handler) {
        if (LogManager._contains(handler)) {
            return;
        }
        LogManager._processAll(handler);
        LogManager._handlers.push(handler);
    };
    LogManager.log = function (event) {
        Object.freeze(event);
        LogManager._events.push(event);
        for (var _i = 0, _a = LogManager._handlers; _i < _a.length; _i++) {
            var handle = _a[_i];
            try {
                handle(event);
            }
            catch (e) {
                console.error('failed to handle event:' + e.toString());
            }
        }
    };
    LogManager.removeHandler = function (handler) {
        for (var i = 0; i < LogManager._handlers.length; i++) {
            if (LogManager._handlers[i] === handler) {
                LogManager._handlers.splice(i, 1);
                break;
            }
        }
    };
    LogManager.reset = function () {
        LogManager._handlers = [];
        LogManager._events.removeAll();
    };
    LogManager._contains = function (handler) {
        for (var _i = 0, _a = LogManager._handlers; _i < _a.length; _i++) {
            var existingHandler = _a[_i];
            if (existingHandler === handler) {
                return true;
            }
        }
        return false;
    };
    LogManager._processAll = function (handler) {
        LogManager._events.forEach(function (event) {
            if (event) {
                try {
                    handler(event);
                }
                catch (e) {
                    console.error('failed to handle event:' + e.toString());
                }
            }
        });
    };
    Object.defineProperty(LogManager, "_maxVerboseLog", {
        get: function () {
            return 100;
        },
        enumerable: true,
        configurable: true
    });
    LogManager._handlers = [];
    LogManager._events = new CircularBuffer_1.default(LogManager._maxVerboseLog);
    return LogManager;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = LogManager;

//# sourceMappingURL=LogManager.js.map
