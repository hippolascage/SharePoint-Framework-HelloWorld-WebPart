{"version":3,"sources":["telemetry/Api/CircularBuffer.ts"],"names":[],"mappings":"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","file":"telemetry/Api/CircularBuffer.js","sourcesContent":["/**\r\n * @copyright Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nexport default class CircularBuffer<DataType> implements ForEachable<DataType> {\r\n  /**\r\n   * The size of the buffer\r\n   */\r\n  private _size: number;\r\n  /**\r\n   * Index of the newest item in the buffer\r\n   */\r\n  private _head: number = -1;\r\n  /**\r\n   * The overall count of how many items have ever been added to the buffer.\r\n   */\r\n  private _count: number = 0;\r\n  private _buffer: Array<DataType>;\r\n  private _isIterating: boolean = false;\r\n\r\n  constructor(size: number) {\r\n    if (size <= 0) {\r\n        throw new Error('Size must be positive');\r\n    }\r\n    this._size = size;\r\n    this._buffer = new Array<DataType>(size);\r\n  }\r\n\r\n  public push(item: DataType): void {\r\n    this._ensureNotIterating();\r\n    this._head++;\r\n    this._count++;\r\n    if (this._head === this._size) {\r\n        this._head = 0;\r\n    }\r\n    this._buffer[this._head] = item;\r\n  }\r\n\r\n  public forEach(handle: (value: DataType) => void): void {\r\n    if (this._count === 0) {\r\n      return;\r\n    }\r\n    this._isIterating = true;\r\n    try {\r\n      let current: number = this._tail;\r\n      // For-loop is prefered over while loop here to avoid possible infinite loop.\r\n      for (let i: number = 0; i < this._size; i++) {\r\n        handle(this._buffer[current]);\r\n        if (current === this._head) {\r\n          // The newest item has been processed. End the loop.\r\n          break;\r\n        }\r\n        current = this._getNext(current);\r\n      }\r\n    } finally {\r\n      this._isIterating = false;\r\n    }\r\n  }\r\n\r\n  public removeAll(): void {\r\n    this._ensureNotIterating();\r\n    this._head = -1;\r\n    this._count = 0;\r\n  }\r\n\r\n  /**\r\n   * Index of the oldest item in the buffer\r\n   */\r\n  private get _tail(): number {\r\n    if (this._isNotWrapped()) {\r\n      return 0;\r\n    }\r\n    return this._getNext(this._head);\r\n  }\r\n\r\n  private _isNotWrapped(): boolean {\r\n    return this._count === (this._head + 1);\r\n  }\r\n\r\n  /**\r\n   * The next index should be index + 1, unless it reaches\r\n   * the end of the buffer and needs to rewind to 0.\r\n   */\r\n  private _getNext(index: number): number {\r\n    let nextIndex: number = index + 1;\r\n    if (nextIndex === this._size) {\r\n      nextIndex = 0;\r\n    }\r\n    return nextIndex;\r\n  }\r\n\r\n  private _ensureNotIterating(): void {\r\n    if (this._isIterating) {\r\n      throw new Error('Circular buffer cannot be modified during iteration');\r\n    }\r\n  }\r\n}"],"sourceRoot":"/src"}