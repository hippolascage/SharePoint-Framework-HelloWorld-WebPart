{"version":3,"sources":["telemetry/Api/QosMonitor.ts"],"names":[],"mappings":";AAAA;;;;;GAKG;AACH,sCAAgC,2BAA2B,CAAC,CAAA;AAC5D,sCAAgD,2BAA2B,CAAC,CAAA;AAG5E;;GAEG;AACH;IAIG;;;;KAIC;IACF,oBAAY,YAAoB;QAC9B,EAAE,CAAC,CAAC,CAAC,YAAY,IAAI,YAAY,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YAC/C,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;QAC9C,CAAC;QAED,IAAI,CAAC,GAAG,GAAG,IAAI,2BAAQ,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC,CAAC;IAClD,CAAC;IAED;;;OAGG;IACI,iCAAY,GAAnB;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;YACd,MAAM,IAAI,KAAK,CAAE,uCAAuC,CAAC,CAAC;QAC5D,CAAC;QAED,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,UAAU,EAAE,sCAAa,CAAC,OAAO,EAAE,CAAC,CAAC;IACtD,CAAC;IAED;;;;OAIG;IACI,2CAAsB,GAA7B,UACE,aAA2C,EAC3C,EAAU;QACV,2BAA2B;QAC3B,SAAkC;QAHlC,6BAA2C,GAA3C,mCAA2C;QAK3C,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;YACd,MAAM,IAAI,KAAK,CAAE,uCAAuC,CAAC,CAAC;QAC5D,CAAC;QAED,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACP,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC;gBACX,UAAU,EAAE,aAAa;gBACzB,UAAU,EAAE,sCAAa,CAAC,OAAO;gBACjC,KAAK,EAAE,EAAE,CAAC,OAAO;gBACjB,SAAS,EAAE,SAAS;aACrB,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC;gBACX,UAAU,EAAE,aAAa;gBACzB,UAAU,EAAE,sCAAa,CAAC,OAAO;gBACjC,SAAS,EAAE,SAAS;aACrB,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;;;OAIG;IACI,yCAAoB,GAA3B,UACE,aAAyC,EACzC,EAAU;QACV,2BAA2B;QAC3B,SAAkC;QAHlC,6BAAyC,GAAzC,iCAAyC;QAKzC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;YACd,MAAM,IAAI,KAAK,CAAE,uCAAuC,CAAC,CAAC;QAC5D,CAAC;QACD,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACP,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC;gBACX,UAAU,EAAE,aAAa;gBACzB,UAAU,EAAE,sCAAa,CAAC,eAAe;gBACzC,KAAK,EAAE,EAAE,CAAC,OAAO;gBACjB,SAAS,EAAE,SAAS;aACrB,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC;gBACX,UAAU,EAAE,aAAa;gBACzB,UAAU,EAAE,sCAAa,CAAC,eAAe;gBACzC,SAAS,EAAE,SAAS;aACrB,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IACH,iBAAC;AAAD,CAzFA,AAyFC,IAAA;AAzFD;4BAyFC,CAAA","file":"telemetry/Api/QosMonitor.js","sourcesContent":["/**\r\n * @copyright Microsoft Corporation. All rights reserved.\r\n * @file QosLogger.ts\r\n * Qos logger\r\n * This class represents the Qos monitor APIs\r\n */\r\nimport { Qos as QosEvent } from '@ms/odsp-utilities-bundle';\r\nimport { ResultTypeEnum as QosResultEnum } from '@ms/odsp-utilities-bundle';\r\nimport IQosMonitor from './IQosMonitor';\r\n\r\n/**\r\n * @internal\r\n */\r\nexport default class QosMonitor implements IQosMonitor {\r\n  // @todo VSO:237921 - use the correct typings\r\n  public qos: any; // tslint:disable-line\r\n\r\n   /**\r\n  * Creates a QoS monitor (initializes it and logs the start event)\r\n  * @param\tscenarioName\tUnique name of the QoS scenario\r\n  * You will see start tag: ModernPublish.RenderPublishPage.Start\r\n  */\r\n  constructor(scenarioName: string) {\r\n    if (!scenarioName || scenarioName.length === 0) {\r\n      throw new Error('senanrio name is invalid');\r\n    }\r\n\r\n    this.qos = new QosEvent({ name: scenarioName });\r\n  }\r\n\r\n  /**\r\n   * QoS monitor ends with success\r\n   * You will see success tag: ModernPublish.RenderPublishPage.Success\r\n   */\r\n  public writeSuccess(): void {\r\n    if (!this.qos) {\r\n      throw new Error ('monitor instance is null or undefined');\r\n    }\r\n\r\n    this.qos.end({ resultType: QosResultEnum.Success });\r\n  }\r\n\r\n  /**\r\n   * QoS monitor ends with failure\r\n   * You will see success tag: ModernPublish.RenderPublishPage.<failuretag>.Failure.\r\n   * <failuretag> will be filled with @param tagName\r\n   */\r\n  public writeUnexpectedFailure(\r\n    tagNameSuffix: string = 'DefaultUnexpected',\r\n    ex?: Error,\r\n    /* tslint:disable:no-any */\r\n    extraData?: { [key: string]: any }\r\n    /* tslint:enable:no-any */ ): void {\r\n    if (!this.qos) {\r\n      throw new Error ('monitor instance is null or undefined');\r\n    }\r\n\r\n    if (ex) {\r\n      this.qos.end({\r\n        resultCode: tagNameSuffix,\r\n        resultType: QosResultEnum.Failure,\r\n        error: ex.message,\r\n        extraData: extraData\r\n      });\r\n    } else {\r\n      this.qos.end({\r\n        resultCode: tagNameSuffix,\r\n        resultType: QosResultEnum.Failure,\r\n        extraData: extraData\r\n      });\r\n    }\r\n  }\r\n\r\n  /*\r\n   * QoS monitor ends with expected failure\r\n   * You will see success tag: ModernPublish.RenderPublishPage.<failuretag>.ExpectedFailure.\r\n   * <failuretag> will be filled with @param tagName\r\n   */\r\n  public writeExpectedFailure(\r\n    tagNameSuffix: string = 'DefaultExpected',\r\n    ex?: Error,\r\n    /* tslint:disable:no-any */\r\n    extraData?: { [key: string]: any }\r\n    /* tslint:enable:no-any */ ): void {\r\n    if (!this.qos) {\r\n      throw new Error ('monitor instance is null or undefined');\r\n    }\r\n    if (ex) {\r\n      this.qos.end({\r\n        resultCode: tagNameSuffix,\r\n        resultType: QosResultEnum.ExpectedFailure,\r\n        error: ex.message,\r\n        extraData: extraData\r\n      });\r\n    } else {\r\n      this.qos.end({\r\n        resultCode: tagNameSuffix,\r\n        resultType: QosResultEnum.ExpectedFailure,\r\n        extraData: extraData\r\n      });\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"/src"}