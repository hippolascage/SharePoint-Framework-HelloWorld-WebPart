{"version":3,"sources":["telemetry/Api/ApplicationLogSettings.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;AAEH,sCAGmB,2BAA2B,CAAC,CAAA;AAC/C,+BAA2B,uBAAuB,CAAC,CAAA;AAEnD;IACE,gCAAY,eAAuB;QACjC,mCAAW,CAAC,mBAAmB,CAAC,eAAe,EAAE,IAAI,wBAAc,EAAE,CAAC,CAAC;QACvE,8BAAM,CAAC,mBAAmB,EAAE,CAAC;QAC7B,IAAI,CAAC,eAAe,CAAC,eAAe,CAAC,CAAC;IACxC,CAAC;IAED;;OAEG;IACW,iCAAU,GAAxB;QACE,oCAAoC;QACpC,sFAAsF;QACtF,oBAAoB;QACpB,EAAE,CAAC,CAAC,CAAE,MAAc,CAAC,4BAA4B,CAAC,CAAC,CAAC;YACjD,MAAc,CAAC,4BAA4B,GAAE,IAAI,sBAAsB,CAAC,SAAS,CAAC,CAAC;QACtF,CAAC;QACD,mBAAmB;IACrB,CAAC;IAEO,gDAAe,GAAvB,UAAwB,eAAuB;QAC7C,6CAA6C;QAC7C,IAAM,eAAe,GAAQ,MAAM,CAAC,oBAAoB,CAAC,CAAC;QAC1D,EAAE,CAAC,CAAC,eAAe,IAAI,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACnE,IAAM,KAAK,GAAW,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;YAC9D,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACV,kCAAU,CAAC,UAAU,CAAC,KAAK,EACzB;oBACE,eAAe,EAAE,CAAC,CAAC,eAAe,CAAC,aAAa;oBAChD,MAAM,EAAE,eAAe,CAAC,oBAAoB;oBAC5C,OAAO,EAAE,eAAe,CAAC,aAAa;oBACtC,OAAO,EAAE,eAAe,CAAC,aAAa;oBACtC,QAAQ,EAAE,IAAI,CAAC,YAAY,EAAE;oBAC7B,MAAM,EAAE,eAAe,CAAC,aAAa;oBACrC,kBAAkB,EAAE,eAAe,CAAC,kBAAkB;oBACtD,SAAS,EAAE,eAAe,CAAC,SAAS;oBACpC,WAAW,EAAE,eAAe,CAAC,GAAG;oBAChC,QAAQ,EAAE,eAAe;iBAC1B,CAAC,CAAC;YACP,CAAC;QACH,CAAC;QACD,4CAA4C;IAC9C,CAAC;IAEO,kDAAiB,GAAzB,UAA0B,GAAW;QACnC,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,QAAQ,CAAC,QAAQ,KAAK,WAAW,CAAC;IACpD,CAAC;IAEO,8CAAa,GAArB,UAAsB,GAAW;QAC/B,IAAI,KAAa,CAAC;QAClB,MAAM,CAAC,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;YAC1B,KAAK,MAAM;gBACT,KAAK,GAAG,4EAA4E,CAAC;gBACrF,KAAK,CAAC;YACR,KAAK,YAAY;gBACf,KAAK,GAAG,4EAA4E,CAAC;gBACrF,KAAK,CAAC;YACR,KAAK,MAAM;gBACT,KAAK,GAAG,4EAA4E,CAAC;gBACrF,KAAK,CAAC;YACR;gBACE,uCAAuC;gBACvC,KAAK,GAAG,4EAA4E,CAAC;gBACrF,KAAK,CAAC;QACV,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IAEO,6CAAY,GAApB;QACE,6CAA6C;QAC7C,IAAM,qBAAqB,GAAQ,MAAM,CAAC,0BAA0B,CAAC,CAAC;QACtE,EAAE,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC;YAC1B,MAAM,CAAC,qBAAqB,CAAC,uBAAuB,CAAC;QACvD,CAAC;QACD,4CAA4C;QAC5C,MAAM,CAAC,EAAE,CAAC;IACZ,CAAC;IACH,6BAAC;AAAD,CA7EA,AA6EC,IAAA;AA7ED;wCA6EC,CAAA","file":"telemetry/Api/ApplicationLogSettings.js","sourcesContent":["/**\r\n * @file ApplicationLogSettings.ts\r\n * @Copyright (c) Microsoft Corporation.  All rights reserved.\r\n * Used for hooking up BeaconHandlers.\r\n */\r\n\r\nimport {\r\n  BeaconCache,\r\n  Beacon,\r\n  AriaLogger} from '@ms/odsp-utilities-bundle';\r\nimport BeaconHandlers from '../Api/BeaconHandlers';\r\n\r\nexport default class ApplicationLogSettings {\r\n  constructor(applicationName: string) {\r\n    BeaconCache.addToLoggingManager(applicationName, new BeaconHandlers());\r\n    Beacon.addToLoggingManager();\r\n    this._initializeAria(applicationName);\r\n  }\r\n\r\n  /**\r\n   * This method should be called before other internal Telemetry APIs can be used.\r\n   */\r\n  public static initialize(): void {\r\n    // Temporarily global. (VSO #163792)\r\n    // This method should take PageContext as param when PageContext is in sp-client-base.\r\n    /* tslint:disable */\r\n    if (!(window as any).g_spPagesApplicationSettings) {\r\n      (window as any).g_spPagesApplicationSettings= new ApplicationLogSettings('SPPages');\r\n    }\r\n    /* tslint:enable */\r\n  }\r\n\r\n  private _initializeAria(applicationName: string): void {\r\n    /* tslint:disable:no-string-literal no-any */\r\n    const pageContextInfo: any = window['_spPageContextInfo'];\r\n    if (pageContextInfo && this._shouldEnableAria(pageContextInfo.env)) {\r\n      const token: string = this._getAriaToken(pageContextInfo.env);\r\n      if (token) {\r\n        AriaLogger.initialize(token,\r\n          {\r\n            isAuthenticated: !!pageContextInfo.userLoginName,\r\n            market: pageContextInfo.currentUICultureName,\r\n            session: pageContextInfo.CorrelationId,\r\n            version: pageContextInfo.siteClientTag,\r\n            manifest: this._getManifest(),\r\n            userId: pageContextInfo.systemUserKey,\r\n            siteSubscriptionId: pageContextInfo.siteSubscriptionId,\r\n            farmLabel: pageContextInfo.farmLabel,\r\n            environment: pageContextInfo.env,\r\n            workload: applicationName\r\n          });\r\n      }\r\n    }\r\n    /* tslint:enable:no-string-literal no-any */\r\n  }\r\n\r\n  private _shouldEnableAria(env: string): boolean {\r\n    return !!env && location.hostname !== 'localhost';\r\n  }\r\n\r\n  private _getAriaToken(env: string): string {\r\n    let token: string;\r\n    switch (env.toLowerCase()) {\r\n      case 'edog':\r\n        token = 'e70f26977dfb4acdb49b3ece642df9fb-99372a42-43f1-4c5a-a711-145ece84076a-7110';\r\n        break;\r\n      case 'prodbubble':\r\n        token = '930040d5f2d14c649c8f4a22a062a2af-a8806003-7416-4799-9a3a-31de703592e5-6968';\r\n        break;\r\n      case 'prod':\r\n        token = '28f004ff2be44e8997a6f113043d583d-3f663b9a-4911-45b4-be6d-e450ca91e808-7336';\r\n        break;\r\n      default:\r\n        // Data will go to the fallback tenant.\r\n        token = '1ca85bcb62f645d0bd61f37896e88c29-f10b8d04-e871-43ba-8716-8a895fd08020-7634';\r\n        break;\r\n    }\r\n    return token;\r\n  }\r\n\r\n  private _getManifest(): string {\r\n    /* tslint:disable:no-string-literal no-any */\r\n    const clientSidePageContext: any = window['_spClientSidePageContext'];\r\n    if (clientSidePageContext) {\r\n      return clientSidePageContext.clientSideApplicationId;\r\n    }\r\n    /* tslint:enable:no-string-literal no-any */\r\n    return '';\r\n  }\r\n}\r\n"],"sourceRoot":"/src"}