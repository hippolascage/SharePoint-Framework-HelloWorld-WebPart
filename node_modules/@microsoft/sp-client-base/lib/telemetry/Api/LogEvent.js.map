{"version":3,"sources":["telemetry/Api/LogEvent.ts"],"names":[],"mappings":"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","file":"telemetry/Api/LogEvent.js","sourcesContent":["/**\r\n * @copyright Microsoft Corporation. All rights reserved.\r\n */\r\nimport { default as ServiceScope } from '../../serviceScope/ServiceScope';\r\nimport { default as LogSource, logSourceServiceKey } from './LogSource';\r\nimport { LogLevel } from './LogLevel';\r\nimport LogManager from './LogManager';\r\n\r\n/**\r\n * An object that represents one log event.\r\n * @internal\r\n */\r\nexport default class LogEvent {\r\n  private _scope: LogSource;\r\n  private _source: string;\r\n  private _message: string;\r\n  private _error: Error;\r\n  private _level: LogLevel;\r\n\r\n  /**\r\n   * Use this method to log an event.\r\n   *\r\n   * @param source - source of the log event, e.g. class name of the source file\r\n   * @param data - data of the log event\r\n   * @param level - level of the log event\r\n   * @param serviceScope - scope of the log event, e.g. component/web part\r\n   */\r\n  public static log(source: string, data: string | Error, level: LogLevel, serviceScope?: ServiceScope): LogEvent {\r\n    const event: LogEvent = new LogEvent(source, data, level, serviceScope);\r\n    LogManager.log(event);\r\n    return event;\r\n  }\r\n\r\n  /**\r\n   * Do not call this constructor directly. Use LogEvent.log instead.\r\n   */\r\n  constructor(source: string, data: string | Error, level: LogLevel, serviceScope?: ServiceScope) {\r\n    this._validate(source, data);\r\n    this._scope = this._getScope(serviceScope);\r\n    this._source = source.substr(0, this._maxSourceLength);\r\n    this._setData(data);\r\n    this._level = level;\r\n  }\r\n\r\n  public toString(): string {\r\n    let prefix: string = `${this._source}`;\r\n    if (this._scope && !this._scope.isEmpty()) {\r\n      prefix = `${this._scope.id.substr(0, this._maxSourceLength)}.${prefix}`;\r\n    }\r\n    if (this._message) {\r\n      return `[${prefix}] ${this._message}`;\r\n    } else {\r\n      return `[${prefix}] ${this._error.toString()}`;\r\n    }\r\n  }\r\n\r\n  private get _maxSourceLength(): number {\r\n    return 20;\r\n  }\r\n\r\n  private get _maxMessageLength(): number {\r\n    return 100;\r\n  }\r\n\r\n  private _validate(source: string, data: string | Error): void {\r\n    if (!source) {\r\n      throw new Error('source cannot be undefined or null for Logger');\r\n    }\r\n    if (!data) {\r\n      throw new Error('data cannot be undefined or null');\r\n    }\r\n  }\r\n\r\n  private _setData(data: string | Error): void {\r\n    if (typeof data === 'string') {\r\n      this._message = data.substr(0, this._maxMessageLength);\r\n    } else if (data instanceof Error) {\r\n      this._error = data;\r\n    }\r\n  }\r\n\r\n  private _getScope(serviceScope?: ServiceScope): LogSource {\r\n    let parentSource: LogSource;\r\n    if (serviceScope) {\r\n      serviceScope.whenFinished(() => {\r\n        parentSource = serviceScope.consume(logSourceServiceKey);\r\n      });\r\n    }\r\n    return parentSource;\r\n  }\r\n}"],"sourceRoot":"/src"}