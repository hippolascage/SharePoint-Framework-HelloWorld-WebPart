{"version":3,"sources":["telemetry/Api/TraceLogger.ts"],"names":[],"mappings":"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","file":"telemetry/Api/TraceLogger.js","sourcesContent":["/**\r\n * @copyright Microsoft Corporation.All rights reserved.\r\n * @file TraceLogger.ts\r\n * TraceLogger logger\r\n */\r\n\r\nimport { ErrorHelper } from '@ms/odsp-utilities-bundle';\r\nimport ILogEntry from './ILogEntry';\r\nimport ILogSource from './ILogSource';\r\nimport ApplicationLogSettings from './ApplicationLogSettings';\r\nimport LogEvent from './LogEvent';\r\nimport { LogLevel } from './LogLevel';\r\n\r\n/**\r\n * This is used to log errors and debugging information.\r\n * @internal\r\n */\r\nexport default class TraceLogger {\r\n\r\n  /*\r\n  * Exception logging\r\n  * This shoule be used whenever you want to log something that might in future help to debug failures.\r\n  * The error parameter is the only required one and basically will be just converted to string and\r\n  * logged to Debug stream (RealibilityLogs in SLAPI).\r\n  * It will also be uploaded to the server immediately and not wait for next batch log upload.\r\n  * If you don't specify second parameter:eventName\r\n  * the event name for all errors logged that way will be same \"CaughtError\" with\r\n  * appropriate prefix (\"ModernPublish.CaughtError\" etc.)\r\n  * These two parameters \"eventName and resultCode\" are there to be used from Qos.\r\n  * It is not encouraged to use them directly from ErrorHelper but if you do,\r\n  * the log will be written with custom event name of following format:\r\n  * <ApplicationName>.<eventName>.<resultCode>.Failure, ApplicationName is set in ApplicationLogSettings\r\n  **/\r\n  public static logError(\r\n    source: ILogSource,\r\n    error: Error,\r\n    eventName?: string,\r\n    resultCode?: string): void {\r\n    if (!error) {\r\n      throw new Error('error is invalid');\r\n    }\r\n    this._log(source, error, eventName, true, resultCode);\r\n  }\r\n\r\n  /*\r\n   * Trace logging\r\n   * The idea here is that verbose logs don't get uploaded to the server unless\r\n   * a failure is logged using ErrorHelper.log method.\r\n   * There is a circular buffer that holds last 50 verbose logs from all scenarios and\r\n   * it is only flushed and uploaded in case a failure is logged.\r\n   * That way whenever you get a failure event with message you also have all supportive verbose messages\r\n   * you logged throughout your scenario execution (or other scenarios).\r\n   * And hopefully that would help you get to the bottom of what exactly went wrong.\r\n   * If no failure happens and your scenario succeeds, verbose logs will be just left in the buffer\r\n   * and most likely overriden by next scenario that logs something verbose.\r\n  **/\r\n  public static logVerbose(\r\n    source: ILogSource,\r\n    message: string,\r\n    eventName?: string): void {\r\n    if (!message || message.length === 0) {\r\n      throw new Error('message is invalid');\r\n    }\r\n    this._log(source, message, eventName, false, undefined);\r\n  }\r\n\r\n  /*\r\n  * Exception logging With LogEntry\r\n  * error message should be packed into logProperties\r\n  * LogType should be LogType.Error and LogProperties should have {error:errorMessage}\r\n  * Do NOT add PII data!\r\n  **/\r\n  public static logErrorWithLogEntry(\r\n    source: ILogSource,\r\n    logEntry: ILogEntry,\r\n    eventName?: string,\r\n    resultCode?: string): void {\r\n    if (!logEntry) {\r\n      throw new Error('LogEntry is invalid');\r\n    }\r\n    this._log(source, logEntry.toString(), eventName, true, resultCode);\r\n  }\r\n\r\n  /*\r\n  * Trace logging with LogEntry\r\n  * The same with above other than wrapped log into logEntry\r\n  * Trace message should be packed into logProperties\r\n  * LogType should be LogType.Trace and LogProperties should have somthing like{errors:errorMessage}\r\n  * Do NOT add PII data!\r\n  **/\r\n  public static logVerboseWithLogEntry(\r\n    source: ILogSource,\r\n    logEntry: ILogEntry,\r\n    eventName?: string): void {\r\n    if (!logEntry) {\r\n      throw new Error('LogEntry is invalid');\r\n    }\r\n    this._log(source, logEntry.toString(), eventName, false, undefined);\r\n  }\r\n\r\n  private static _log(\r\n    source: ILogSource,\r\n    data: Error | string,\r\n    eventName: string,\r\n    isError: boolean,\r\n    resultCode?: string): void {\r\n    // TODO (VSO #163792): move the initialization to shell start.\r\n    ApplicationLogSettings.initialize();\r\n    const enhancedEventName: string = this._addEventPrefix(source, eventName);\r\n    if (isError) {\r\n      ErrorHelper.log(data, enhancedEventName, resultCode);\r\n      LogEvent.log(enhancedEventName, data, LogLevel.Error);\r\n    } else {\r\n      ErrorHelper.verbose(data.toString(), enhancedEventName);\r\n      LogEvent.log(enhancedEventName, data.toString(), LogLevel.Verbose);\r\n    }\r\n    this._writeToConsole(data.toString(), enhancedEventName, isError, resultCode);\r\n  }\r\n\r\n  /*\r\n  * EventName is:\r\n  * sourceId.eventName or sourceId if eventName is not provided.\r\n  */\r\n  private static _addEventPrefix(source: ILogSource, eventName?: string): string {\r\n    if (!eventName) {\r\n      return source.id;\r\n    } else {\r\n      return `${source.id}.${eventName}`;\r\n    }\r\n  }\r\n\r\n  /*\r\n  * The log message in console is:\r\n  * [eventName]: data.\r\n  */\r\n  private static _writeToConsole(data: string, eventName: string, isError: boolean, resultCode?: string): void {\r\n\r\n    let errorString: string = `[${eventName}] ${data}`;\r\n    if (resultCode) {\r\n      errorString += `. resultCode: ${resultCode}`;\r\n    }\r\n\r\n    // Task 191596: only write to console when a condition is satisfied (e.g., a query parameter provided).\r\n    if (isError) {\r\n      console.error(errorString);\r\n    } else {\r\n      console.log(errorString);\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"/src"}