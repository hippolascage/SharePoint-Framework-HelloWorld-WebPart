/**
 * @copyright Microsoft Corporation.All rights reserved.
 * @file BeaconHandlers.ts
 * BeasonHandlers represents the contract for application logger
 */
"use strict";
var odsp_utilities_bundle_1 = require('@ms/odsp-utilities-bundle');
var BeaconHandlers = (function () {
    function BeaconHandlers() {
    }
    BeaconHandlers._getResultTypeSuffix = function (resultType) {
        'use strict';
        if (resultType === odsp_utilities_bundle_1.ResultTypeEnum.Success) {
            return '.Success';
        }
        else if (resultType === odsp_utilities_bundle_1.ResultTypeEnum.Failure) {
            return '.Failure';
        }
        else if (resultType === odsp_utilities_bundle_1.ResultTypeEnum.ExpectedFailure) {
            return '.ExpectedFailure';
        }
        return '';
    };
    // ignore these events, or they will show up under UnknownEvent
    BeaconHandlers.prototype.ignoredEventsHandler = function (event) {
        return odsp_utilities_bundle_1.Nav.isTypeOf(event) || odsp_utilities_bundle_1.PLTHttpRequest.isTypeOf(event);
    };
    BeaconHandlers.prototype.qosEventNameHandler = function (event, currentName) {
        var name = currentName;
        if (event.data) {
            if (event.eventType === odsp_utilities_bundle_1.ClonedEventType.Start) {
                name += '.Start';
            }
            else if (event.eventType === odsp_utilities_bundle_1.ClonedEventType.End) {
                if (event.data.resultCode) {
                    name += '.' + event.data.resultCode;
                }
                name += BeaconHandlers._getResultTypeSuffix(event.data.resultType);
            }
            else {
                name += '.no_EventType';
            }
        }
        return name;
    };
    /* tslint:disable:no-any */
    BeaconHandlers.prototype.qosEventExtraDataHandler = function (event, qosData) {
        return;
    };
    return BeaconHandlers;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = BeaconHandlers;

//# sourceMappingURL=BeaconHandlers.js.map
