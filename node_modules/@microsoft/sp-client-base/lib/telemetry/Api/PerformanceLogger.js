"use strict";
/**
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * @file PerformanceLogger
 */
var odsp_utilities_bundle_1 = require('@ms/odsp-utilities-bundle');
var LogSource_1 = require('./LogSource');
var TraceLogger_1 = require('./TraceLogger');
/**
 * Usage:
 * 1. Begin an application session with a aggregatable name (e.g. level1.level2.level3) at the very beginning.
 *  e.g.
 *    PerformanceLogger.initializeApplication('ContosoApp.Page1')
 *  Only one application per page can be created.
 * 2. To monitor a component as part of EUPL:
 * 2.1 Add the following at the component render start time.
 *    PerformanceLogger.addComponent('contosoWebPart1');
 *    PerformanceLogger.startMarkForComponent('contosoWebPart1');
 * 2.2 Add the following at the component render end time.
 *    PerformanceLogger.endMarkForComponent('contosoWebPart1');
 * 3. To monitor a request:
 * 3.1 Add the following at request start time:
 *    PerformanceLogger.startMarkForApi('call1_uniqueId', 'someUrl1');
 * 3.2 Add the following at request end time:
 *    PerformanceLogger.endMarkForApi('call1_uniqueId', 'call1', 'someUrl1', response);
 *
 * Note1: due to server side limitation, only the first 4 (soon will be 10) components'
 * data is send to server. The rest can be dumped to console if
 * window.sessionStorage["enableRUMOneDebugging"] == true.
 * Note2: do not include component time that do not affect EUPL (like async time spent.)
 *
 * @internal
 */
var PerformanceLogger = (function () {
    function PerformanceLogger() {
    }
    /**
     * Initialize the application with a name. All perf data is reset for non-fullPageLoad.
     * @param {string} applicationName - name of the application
     * @param {boolean} fullPageLoad - indicate if full page load
     */
    PerformanceLogger.initializeApplication = function (applicationName, fullPageLoad) {
        if (fullPageLoad === void 0) { fullPageLoad = false; }
        if (fullPageLoad === false) {
            this._logger.resetLogger();
        }
        this._logger.writeScenarioId(applicationName);
        this._startMarkForPageTransition();
    };
    Object.defineProperty(PerformanceLogger, "fullPageLoad", {
        /**
         * Indicate whether the performance data is for a full page load or partial load.
         */
        get: function () {
            var pageTransitionType = this._logger.getPerformanceDataPropertyValue('PageTransitionType');
            if (pageTransitionType !== undefined) {
                return pageTransitionType === odsp_utilities_bundle_1.PageTransitionType.fullPageLoad;
            }
            return true;
        },
        /**
         * Set the fullPageLoad to be true if the data is for a full page load, otherwise set it to be false.
         */
        set: function (isFullPageLoad) {
            var pageTransitionType = isFullPageLoad ? odsp_utilities_bundle_1.PageTransitionType.fullPageLoad :
                odsp_utilities_bundle_1.PageTransitionType.none;
            this._logger.writePageTransitionType(pageTransitionType, true);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Add a component to track its performance.
     * @param {string} tag - The identifier that identifies the component in the performance data stream.
     */
    PerformanceLogger.addComponent = function (tag) {
        if (!this.isRunning()) {
            return;
        }
        this._logger.addExpectedControl(tag);
    };
    /**
     * Record component start time.
     * @param {string} tag - The identifier that identifies the component in the performance data stream.
     */
    PerformanceLogger.startMarkForComponent = function (tag) {
        if (!this.isRunning()) {
            return;
        }
        var currentTime = this._getNowTime();
        this._logger.saveTempData(tag + this._componentStartTimeKey, currentTime);
        this._logger.addEUPLBreakdown(tag + ".start", currentTime);
    };
    /**
     * Record component end time.
     * @param {string} tag - The identifier that identifies the component in the performance data stream.
     */
    PerformanceLogger.endMarkForComponent = function (tag) {
        if (!this.isRunning()) {
            return;
        }
        var controlStartTime = this.getComponentStartTime(tag);
        var endTime = this._getNowTime();
        this.reportControlData(tag, controlStartTime, endTime);
        this._logger.saveTempData(tag + this._componentEndTimeKey, endTime);
    };
    /**
     * Record a time in the performance data stream for the component.
     * @param {string} tag - The identifier that identifies the component in the performance data stream.
     * @param {string} name - The name of the time value
     */
    PerformanceLogger.markComponent = function (tag, name) {
        if (!this.isRunning()) {
            return;
        }
        var startTime = this.getComponentStartTime(tag);
        if (startTime === undefined) {
            return;
        }
        this._logger.addEUPLBreakdown(tag + "." + name, this._getNowTime() - startTime);
    };
    /**
     * Record a request start time.
     * @param {string} tag - The identifier that uniquely identifies the request in the
     * performance data stream, used to calculate the duration. Not persisted in RumOne.
     * @param {string} requestUrl - The url of the request.
     *
     * @todo #191154 Integrate it into HttpClient.
     */
    PerformanceLogger.startMarkForApi = function (tag) {
        if (!this.isRunning()) {
            return;
        }
        this._logger.saveTempData(tag + this._apiStartTimeKey, this._getNowTime());
    };
    /**
     * Record a request end time.
     * @param {string} tag - The identifier that uniquely identifies the request in the
     * performance data stream, used to calculate the duration. Not persisted in RumOne.
     * @param {string} name - The name to aggregate the data. Persisted in RumOne stream.
     * @param {string} requestUrl - The url of the request.
     * @param {Response} response - The response from the request.
     *
     * @todo #191154 Integrate it into HttpClient.
     */
    PerformanceLogger.endMarkForApi = function (tag, name, requestUrl, response) {
        if (!this.isRunning()) {
            return;
        }
        var apiStartTime = this.getApiStartTime(tag);
        var apiEndTime = this._getNowTime();
        var apiData = new odsp_utilities_bundle_1.APICallPerformanceData(requestUrl, Number(response.headers.get('SPClientServiceRequestDuration')), response.headers.get('SPRequestGuid'), response.status, this._convertToISOString(apiStartTime), this._convertToISOString(apiEndTime), name);
        // log a API call perf data object for each API call before EUPL complete
        this._logger.writeAPICallPerformanceData(apiData);
        // Record the last API call end time as app data fetch end
        this._logger.saveTempData(tag + this._apiEndTimeKey, apiEndTime);
    };
    /**
     * Mark application start time
     */
    PerformanceLogger.markApplicationStart = function () {
        this._mark(this._applicationStartKey);
    };
    /**
     * Get the application start time
     */
    PerformanceLogger.getApplicationStartTime = function () {
        return this._getMark(this._applicationStartKey);
    };
    /**
     * Get the recorded component start time.
     * @param {string} tag - The identifier that identifies the component in the performance data stream.
     */
    PerformanceLogger.getComponentStartTime = function (tag) {
        return this._logger.readTempData(tag + this._componentStartTimeKey);
    };
    /**
     * Get the recorded component end time.
     * @param {string} tag - The identifier that identifies the component in the performance data stream.
     */
    PerformanceLogger.getComponentEndTime = function (tag) {
        return this._logger.readTempData(tag + this._componentEndTimeKey);
    };
    /**
     * Get the recorded request start time.
     * @param {string} tag - The identifier that identifies the request in the performance data stream.
     */
    PerformanceLogger.getApiStartTime = function (tag) {
        return this._logger.readTempData(tag + this._apiStartTimeKey);
    };
    /**
     * Get the recorded request end time.
     * @param {string} tag - The identifier that identifies the request in the performance data stream.
     */
    PerformanceLogger.getApiEndTime = function (tag) {
        return this._logger.readTempData(tag + this._apiEndTimeKey);
    };
    /**
     * Initialize the logger.
     * The logger is not initialized in the constructor for lazy initialization.
     */
    PerformanceLogger.ensureInitialized = function () {
        if (!this._rumOneLogger) {
            // Lazy initialization
            this._rumOneLogger = odsp_utilities_bundle_1.RumOneLogger.getRUMOneLogger();
            // Put the data as global so that dev dashboard (in module loader project) can access it.
            // @todo 232808: Move this data off the window object
            /* tslint:disable:no-any */
            window.g_spPagesPerformancedata = this._rumOneLogger.getPerformanceData();
        }
    };
    Object.defineProperty(PerformanceLogger, "_logger", {
        get: function () {
            this.ensureInitialized();
            return this._rumOneLogger;
        },
        enumerable: true,
        configurable: true
    });
    PerformanceLogger.isRunning = function () {
        return this._logger.isRunning();
    };
    PerformanceLogger.reportControlData = function (tag, startTime, endTime) {
        if (!this.isRunning) {
            return;
        }
        var controlPerformanceData = new odsp_utilities_bundle_1.ControlPerformanceData(tag, startTime, endTime, this._computeRenderTime, this._checkRenderTimeRequiredDataAvailable);
        this._logger.writeControlPerformanceData(controlPerformanceData);
    };
    PerformanceLogger._checkRenderTimeRequiredDataAvailable = function (rumone, controlData) {
        if (rumone && controlData) {
            var navigationStart = undefined;
            var pageTransitionType = rumone.getPerformanceDataPropertyValue('PageTransitionType');
            if (pageTransitionType === odsp_utilities_bundle_1.PageTransitionType.fullPageLoad) {
                navigationStart = rumone.getPerformanceDataPropertyValue('W3cNavigationStart');
            }
            else if (pageTransitionType === odsp_utilities_bundle_1.PageTransitionType.none) {
                navigationStart = rumone.readTempData('SPClientNavStartTime');
            }
            return Boolean(navigationStart) && Boolean(controlData.endTime);
        }
        return false;
    };
    /**
     * call back function, exected by RUMOne to computer control render time for this control
     */
    PerformanceLogger._computeRenderTime = function (rumone, controlData) {
        if (rumone && controlData) {
            var navigationStart = undefined;
            var pageTransitionType = rumone.getPerformanceDataPropertyValue('PageTransitionType');
            if (pageTransitionType === odsp_utilities_bundle_1.PageTransitionType.fullPageLoad) {
                navigationStart = rumone.getPerformanceDataPropertyValue('W3cNavigationStart');
            }
            else if (pageTransitionType === odsp_utilities_bundle_1.PageTransitionType.none) {
                navigationStart = rumone.readTempData('SPClientNavStartTime');
            }
            if (navigationStart) {
                return controlData.endTime - navigationStart;
            }
        }
        return 0;
    };
    /**
     * Mark the beginning of a page transition. It can be for a full page load or partial page transition.
     * For full page load, the NavigationStart will be from dom.
     * (https://www.w3.org/TR/navigation-timing/#dom-performancetiming-navigationstart)
     * For partial page transition, this method records current time as NavigationStart.
     */
    PerformanceLogger._startMarkForPageTransition = function () {
        if (!this.isRunning()) {
            return;
        }
        this._logger.saveTempData(this._navigationStartTimeKey, this._getNowTime());
    };
    PerformanceLogger._convertToISOString = function (time) {
        try {
            return (new Date(time)).toISOString();
        }
        catch (error) {
            TraceLogger_1.default.logVerbose(this._logSource, "Time is " + time);
            TraceLogger_1.default.logError(this._logSource, error, 'convertTime');
            return "" + time;
        }
    };
    /**
     * Mark the current time associated with the provided tag.
     * @param {string} tag - The identifier of the time
     */
    PerformanceLogger._mark = function (tag) {
        this._logger.saveTempData(tag + this._markKey, this._getNowTime());
    };
    /**
     * Get the time associated with the tag.
     * @param {string} tag - The identifier of the time
     */
    PerformanceLogger._getMark = function (tag) {
        return this._logger.readTempData(tag + this._markKey);
    };
    PerformanceLogger._getNowTime = function () {
        return Date.now();
    };
    PerformanceLogger._logSource = LogSource_1.default.create('PerformanceLogger');
    PerformanceLogger._componentStartTimeKey = 'ComponentStartTime';
    PerformanceLogger._componentEndTimeKey = 'ComponentEndTime';
    PerformanceLogger._apiStartTimeKey = 'ApiStartTime';
    PerformanceLogger._apiEndTimeKey = 'ApiEndTime';
    PerformanceLogger._navigationStartTimeKey = 'SPClientNavStartTime';
    PerformanceLogger._markKey = 'Mark';
    PerformanceLogger._applicationStartKey = 'appStart';
    return PerformanceLogger;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = PerformanceLogger;

//# sourceMappingURL=PerformanceLogger.js.map
