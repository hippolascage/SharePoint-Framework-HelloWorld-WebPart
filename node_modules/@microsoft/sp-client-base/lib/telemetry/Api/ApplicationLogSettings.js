/**
 * @file ApplicationLogSettings.ts
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 * Used for hooking up BeaconHandlers.
 */
"use strict";
var odsp_utilities_bundle_1 = require('@ms/odsp-utilities-bundle');
var BeaconHandlers_1 = require('../Api/BeaconHandlers');
var ApplicationLogSettings = (function () {
    function ApplicationLogSettings(applicationName) {
        odsp_utilities_bundle_1.BeaconCache.addToLoggingManager(applicationName, new BeaconHandlers_1.default());
        odsp_utilities_bundle_1.Beacon.addToLoggingManager();
        this._initializeAria(applicationName);
    }
    /**
     * This method should be called before other internal Telemetry APIs can be used.
     */
    ApplicationLogSettings.initialize = function () {
        // Temporarily global. (VSO #163792)
        // This method should take PageContext as param when PageContext is in sp-client-base.
        /* tslint:disable */
        if (!window.g_spPagesApplicationSettings) {
            window.g_spPagesApplicationSettings = new ApplicationLogSettings('SPPages');
        }
        /* tslint:enable */
    };
    ApplicationLogSettings.prototype._initializeAria = function (applicationName) {
        /* tslint:disable:no-string-literal no-any */
        var pageContextInfo = window['_spPageContextInfo'];
        if (pageContextInfo && this._shouldEnableAria(pageContextInfo.env)) {
            var token = this._getAriaToken(pageContextInfo.env);
            if (token) {
                odsp_utilities_bundle_1.AriaLogger.initialize(token, {
                    isAuthenticated: !!pageContextInfo.userLoginName,
                    market: pageContextInfo.currentUICultureName,
                    session: pageContextInfo.CorrelationId,
                    version: pageContextInfo.siteClientTag,
                    manifest: this._getManifest(),
                    userId: pageContextInfo.systemUserKey,
                    siteSubscriptionId: pageContextInfo.siteSubscriptionId,
                    farmLabel: pageContextInfo.farmLabel,
                    environment: pageContextInfo.env,
                    workload: applicationName
                });
            }
        }
        /* tslint:enable:no-string-literal no-any */
    };
    ApplicationLogSettings.prototype._shouldEnableAria = function (env) {
        return !!env && location.hostname !== 'localhost';
    };
    ApplicationLogSettings.prototype._getAriaToken = function (env) {
        var token;
        switch (env.toLowerCase()) {
            case 'edog':
                token = 'e70f26977dfb4acdb49b3ece642df9fb-99372a42-43f1-4c5a-a711-145ece84076a-7110';
                break;
            case 'prodbubble':
                token = '930040d5f2d14c649c8f4a22a062a2af-a8806003-7416-4799-9a3a-31de703592e5-6968';
                break;
            case 'prod':
                token = '28f004ff2be44e8997a6f113043d583d-3f663b9a-4911-45b4-be6d-e450ca91e808-7336';
                break;
            default:
                // Data will go to the fallback tenant.
                token = '1ca85bcb62f645d0bd61f37896e88c29-f10b8d04-e871-43ba-8716-8a895fd08020-7634';
                break;
        }
        return token;
    };
    ApplicationLogSettings.prototype._getManifest = function () {
        /* tslint:disable:no-string-literal no-any */
        var clientSidePageContext = window['_spClientSidePageContext'];
        if (clientSidePageContext) {
            return clientSidePageContext.clientSideApplicationId;
        }
        /* tslint:enable:no-string-literal no-any */
        return '';
    };
    return ApplicationLogSettings;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ApplicationLogSettings;

//# sourceMappingURL=ApplicationLogSettings.js.map
