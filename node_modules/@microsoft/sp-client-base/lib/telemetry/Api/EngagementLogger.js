/**
 * @copyright Microsoft Corporation.All rights reserved.
 * @file EngagementLogger.ts
 * EngagementLogger logger
 */
"use strict";
var odsp_utilities_bundle_1 = require('@ms/odsp-utilities-bundle');
/**
 * Engagement logging
 * use *.Click for all the actions triggered by mouse, keyboard, or touch.
 * if you want to add more data or the action is not click but keydown.
 * Use extraData to log the type of action or use extraData to log details wrapped in LogEntry
 * @internal
 */
var EngagementLogger = (function () {
    function EngagementLogger() {
    }
    /**
     * Engagement logging
     * Use *.Click for all the actions triggered by mouse, keyboard, or touch.
     * tagName follows <ApplicationName>.controlName.actionName pattern
     * For example, tagName = "AddButton.Click",
     * this logs "<ApplicationName>.AddButton.Click" with default action triggered by mouse, keyboard, or touch.
     * <ApplicationName> is set in ApplicationLogSettings
     * Use extraData to log the type of action.
     * For example, actionName = "Keydown" and tagName = "ModernPublish.AddButton.Click"
     * this logs "<ApplicationName>.AddButton.Click" with the extraData that it was selected using the Keydown
     */
    EngagementLogger.logEvent = function (tagName, actionName) {
        if (!tagName || tagName.length === 0) {
            throw new Error('LogEntry is invalid');
        }
        // tagName should follow AppName.ControlName.ActionName pattern
        var tagNameRegex = /(\w+)\.(\w+).(\w+)/ig;
        if (tagNameRegex.test(tagName) === false) {
            throw new Error('tagName does not follow AppName.ControlName.ActionName pattern');
        }
        if (!actionName || actionName.length === 0) {
            odsp_utilities_bundle_1.Engagement.logData({ name: tagName });
        }
        else {
            odsp_utilities_bundle_1.Engagement.logData({
                name: tagName,
                extraData: {
                    action: actionName
                }
            });
        }
    };
    /**
     * Engagement logging with LogEntry
     * Here is an example: {"EngagementName":"SPPage.NavigationAction.SPPageQuickLaunchUpdate",
     * "Properties":"{\"message\":\"[NavigationAction] | SPPageQuickLaunchUpdate | 2 | null\"}",
     * "Duration":0,"LogType":0,
     * "ClientTime":1459357627444,"Source":"ClientV2Engagement"}
     * NavigationAction is moduleName in LogEntry, SPPageQuickLaunchUpdate is log feature name
     * In this example, SPPage is application name which is set in ApplicationLogSettings
     * Do NOT add PII data!
     */
    EngagementLogger.logEventWithLogEntry = function (logEntry) {
        if (!logEntry) {
            throw new Error('LogEntry is invalid');
        }
        odsp_utilities_bundle_1.Engagement.logData({
            name: logEntry.moduleName + '.' + logEntry.logFeature,
            extraData: {
                message: logEntry.toString()
            }
        });
    };
    return EngagementLogger;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = EngagementLogger;

//# sourceMappingURL=EngagementLogger.js.map
