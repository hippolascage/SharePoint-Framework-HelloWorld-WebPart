import ILogEntry from './ILogEntry';
/**
 * Engagement logging
 * use *.Click for all the actions triggered by mouse, keyboard, or touch.
 * if you want to add more data or the action is not click but keydown.
 * Use extraData to log the type of action or use extraData to log details wrapped in LogEntry
 * @internal
 */
export default class EngagementLogger {
    /**
     * Engagement logging
     * Use *.Click for all the actions triggered by mouse, keyboard, or touch.
     * tagName follows <ApplicationName>.controlName.actionName pattern
     * For example, tagName = "AddButton.Click",
     * this logs "<ApplicationName>.AddButton.Click" with default action triggered by mouse, keyboard, or touch.
     * <ApplicationName> is set in ApplicationLogSettings
     * Use extraData to log the type of action.
     * For example, actionName = "Keydown" and tagName = "ModernPublish.AddButton.Click"
     * this logs "<ApplicationName>.AddButton.Click" with the extraData that it was selected using the Keydown
     */
    static logEvent(tagName: string, actionName?: string): void;
    /**
     * Engagement logging with LogEntry
     * Here is an example: {"EngagementName":"SPPage.NavigationAction.SPPageQuickLaunchUpdate",
     * "Properties":"{\"message\":\"[NavigationAction] | SPPageQuickLaunchUpdate | 2 | null\"}",
     * "Duration":0,"LogType":0,
     * "ClientTime":1459357627444,"Source":"ClientV2Engagement"}
     * NavigationAction is moduleName in LogEntry, SPPageQuickLaunchUpdate is log feature name
     * In this example, SPPage is application name which is set in ApplicationLogSettings
     * Do NOT add PII data!
     */
    static logEventWithLogEntry(logEntry: ILogEntry): void;
}
