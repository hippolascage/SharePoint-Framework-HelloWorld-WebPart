{"version":3,"sources":["telemetry/Api/LogManager.ts"],"names":[],"mappings":";AAIA,+BAA2B,kBAAkB,CAAC,CAAA;AAE9C;;;;;GAKG;AACH;IAAA;IA8DA,CAAC;IA1De,qBAAU,GAAxB,UAAyB,OAA8B;QACrD,EAAE,CAAC,CAAC,UAAU,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAClC,MAAM,CAAC;QACT,CAAC;QACD,UAAU,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QAChC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACrC,CAAC;IAEa,cAAG,GAAjB,UAAkB,KAAe;QAC/B,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACrB,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC/B,GAAG,CAAC,CAAiB,UAAoB,EAApB,KAAA,UAAU,CAAC,SAAS,EAApB,cAAoB,EAApB,IAAoB,CAAC;YAArC,IAAM,MAAM,SAAA;YACf,IAAI,CAAC;gBACH,MAAM,CAAC,KAAK,CAAC,CAAC;YAChB,CAAE;YAAA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACb,OAAO,CAAC,KAAK,CAAC,yBAAyB,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;YACxD,CAAC;SACF;IACH,CAAC;IAEa,wBAAa,GAA3B,UAA4B,OAA8B;QACxD,GAAG,CAAC,CAAC,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YAC7D,EAAE,CAAC,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,OAAO,CAAC,CAAC,CAAC;gBACxC,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBAClC,KAAK,CAAC;YACR,CAAC;QACH,CAAC;IACH,CAAC;IAEa,gBAAK,GAAnB;QACE,UAAU,CAAC,SAAS,GAAG,EAAE,CAAC;QAC1B,UAAU,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC;IACjC,CAAC;IAEc,oBAAS,GAAxB,UAAyB,OAA8B;QACrD,GAAG,CAAC,CAA0B,UAAoB,EAApB,KAAA,UAAU,CAAC,SAAS,EAApB,cAAoB,EAApB,IAAoB,CAAC;YAA9C,IAAM,eAAe,SAAA;YACxB,EAAE,CAAC,CAAC,eAAe,KAAK,OAAO,CAAC,CAAC,CAAC;gBAChC,MAAM,CAAC,IAAI,CAAC;YACd,CAAC;SACF;QACD,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IAEc,sBAAW,GAA1B,UAA2B,OAA8B;QACvD,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC,UAAA,KAAK;YAC9B,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACV,IAAI,CAAC;oBACH,OAAO,CAAC,KAAK,CAAC,CAAC;gBACjB,CAAE;gBAAA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACX,OAAO,CAAC,KAAK,CAAC,yBAAyB,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;gBAC1D,CAAC;YACH,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,sBAAmB,4BAAc;aAAjC;YACE,MAAM,CAAC,GAAG,CAAC;QACb,CAAC;;;OAAA;IA5Dc,oBAAS,GAAiC,EAAE,CAAC;IAC7C,kBAAO,GAA6B,IAAI,wBAAc,CAAW,UAAU,CAAC,cAAc,CAAC,CAAC;IA4D7G,iBAAC;AAAD,CA9DA,AA8DC,IAAA;AA9DD;4BA8DC,CAAA","file":"telemetry/Api/LogManager.js","sourcesContent":["/**\r\n * @copyright Microsoft Corporation. All rights reserved.\r\n */\r\nimport LogEvent from './LogEvent';\r\nimport CircularBuffer from './CircularBuffer';\r\n\r\n/**\r\n * LogManager allows multiple handlers to process log events.\r\n * It caches the latest 100 log events. If a handler is just added, the\r\n * handler is able to get access to the cached events and all incoming events.\r\n * Dev-dashboard and potentially third-party can use it to get access to events.\r\n */\r\nexport default class LogManager {\r\n  private static _handlers: Array<(e: LogEvent) => void> = [];\r\n  private static _events: CircularBuffer<LogEvent> = new CircularBuffer<LogEvent>(LogManager._maxVerboseLog);\r\n\r\n  public static addHandler(handler: (e: LogEvent) => void): void {\r\n    if (LogManager._contains(handler)) {\r\n      return;\r\n    }\r\n    LogManager._processAll(handler);\r\n    LogManager._handlers.push(handler);\r\n  }\r\n\r\n  public static log(event: LogEvent): void {\r\n    Object.freeze(event);\r\n    LogManager._events.push(event);\r\n    for (const handle of LogManager._handlers) {\r\n      try {\r\n        handle(event);\r\n      } catch (e) {\r\n      console.error('failed to handle event:' + e.toString());\r\n      }\r\n    }\r\n  }\r\n\r\n  public static removeHandler(handler: (e: LogEvent) => void): void {\r\n    for (let i: number = 0; i < LogManager._handlers.length; i++) {\r\n      if (LogManager._handlers[i] === handler) {\r\n        LogManager._handlers.splice(i, 1);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  public static reset(): void {\r\n    LogManager._handlers = [];\r\n    LogManager._events.removeAll();\r\n  }\r\n\r\n  private static _contains(handler: (e: LogEvent) => void): boolean {\r\n    for (const existingHandler of LogManager._handlers) {\r\n      if (existingHandler === handler) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private static _processAll(handler: (e: LogEvent) => void): void {\r\n    LogManager._events.forEach(event => {\r\n      if (event) {\r\n        try {\r\n          handler(event);\r\n        } catch (e) {\r\n          console.error('failed to handle event:' + e.toString());\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  private static get _maxVerboseLog(): number {\r\n    return 100;\r\n  }\r\n}"],"sourceRoot":"/src"}