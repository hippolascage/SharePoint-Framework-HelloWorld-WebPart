"use strict";
var LogEvent_1 = require('./Api/LogEvent');
var LogLevel_1 = require('./Api/LogLevel');
/**
 * The Log class provides static methods for logging messages at different levels (verbose,
 * info, warning, error) and with context information. Context information helps identify
 * which component generated the messages and makes the messages useful and filterable.
 *
 * @public
 */
var Log = (function () {
    function Log() {
    }
    /**
     * Logs a verbose message
     * @param   source - the source from where the message is logged, e.g., the class name.
     *          The source provides context information for the logged message.
     *          If the source's length is more than 20, only the first 20 characters are kept.
     * @param   message - the message to be logged
     *          If the message's length is more than 100, only the first 100 characters are kept.
     * @param   scope - the service scope that the source uses. A service scope can provide
      *         more context information (e.g., web part information) to the logged message.
     */
    Log.verbose = function (source, message, scope) {
        var event = LogEvent_1.default.log(source, message, LogLevel_1.LogLevel.Verbose, scope);
        /* tslint:disable:no-console */
        console.log(event.toString());
        /* tslint:enable:no-console */
    };
    /**
     * Logs an informational message
     * @param   source - the source from where the message is logged, e.g., the class name.
     *          The source provides context information for the logged message.
     *          If the source's length is more than 20, only the first 20 characters are kept.
     * @param   message - the message to be logged
     *          If the message's length is more than 100, only the first 100 characters are kept.
     * @param   scope - the service scope that the source uses. A service scope can provide
      *         more context information (e.g., web part information) to the logged message.
     */
    Log.info = function (source, message, scope) {
        var event = LogEvent_1.default.log(source, message, LogLevel_1.LogLevel.Info, scope);
        /* tslint:disable:no-console */
        console.info(event.toString());
        /* tslint:enable:no-console */
    };
    /**
     * Logs a warning
     * @param   source - the source from where the message is logged, e.g., the class name.
     *          The source provides context information for the logged message.
     *          If the source's length is more than 20, only the first 20 characters are kept.
     * @param   message - the message to be logged
     *          If the message's length is more than 100, only the first 100 characters are kept.
     * @param   scope - the service scope that the source uses. A service scope can provide
      *         more context information (e.g., web part information) to the logged message.
     */
    Log.warn = function (source, message, scope) {
        var event = LogEvent_1.default.log(source, message, LogLevel_1.LogLevel.Warning, scope);
        /* tslint:disable:no-console */
        console.warn(event.toString());
        /* tslint:enable:no-console */
    };
    /**
     * Logs an error
     * @param   source - the source from where the error is logged, e.g., the class name.
     *          The source provides context information for the logged error.
     *          If the source's length is more than 20, only the first 20 characters are kept.
     * @param   error - the error to be logged
     * @param   scope - the service scope that the source uses. A service scope can provide
      *         more context information (e.g., web part information) to the logged error.
     */
    Log.error = function (source, error, scope) {
        var event = LogEvent_1.default.log(source, error, LogLevel_1.LogLevel.Error, scope);
        /* tslint:disable:no-console */
        console.error(event.toString());
        /* tslint:enable:no-console */
    };
    return Log;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Log;

//# sourceMappingURL=Log.js.map
