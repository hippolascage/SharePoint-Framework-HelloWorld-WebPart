{"version":3,"sources":["telemetry/Log.ts"],"names":[],"mappings":";AAIA,yBAAqC,gBAAgB,CAAC,CAAA;AACtD,yBAAsC,gBAAgB,CAAC,CAAA;AAEvD;;;;;;GAMG;AACH;IAAA;IAmEA,CAAC;IAlEC;;;;;;;;;OASG;IACW,WAAO,GAArB,UAAsB,MAAc,EAAE,OAAe,EAAE,KAAoB;QACzE,IAAM,KAAK,GAAc,kBAAS,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE,mBAAS,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QAClF,+BAA+B;QAC/B,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC9B,8BAA8B;IAChC,CAAC;IAED;;;;;;;;;OASG;IACW,QAAI,GAAlB,UAAmB,MAAc,EAAE,OAAe,EAAE,KAAoB;QACtE,IAAM,KAAK,GAAc,kBAAS,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE,mBAAS,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QAC/E,+BAA+B;QAC/B,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC/B,8BAA8B;IAChC,CAAC;IAED;;;;;;;;;OASG;IACW,QAAI,GAAlB,UAAmB,MAAc,EAAE,OAAe,EAAE,KAAoB;QACtE,IAAM,KAAK,GAAc,kBAAS,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE,mBAAS,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QAClF,+BAA+B;QAC/B,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC/B,8BAA8B;IAChC,CAAC;IAED;;;;;;;;OAQG;IACW,SAAK,GAAnB,UAAoB,MAAc,EAAE,KAAY,EAAE,KAAoB;QACpE,IAAM,KAAK,GAAc,kBAAS,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,mBAAS,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QAC9E,+BAA+B;QAC/B,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;QAChC,8BAA8B;IAChC,CAAC;IACH,UAAC;AAAD,CAnEA,AAmEC,IAAA;AAnED;qBAmEC,CAAA","file":"telemetry/Log.js","sourcesContent":["/**\r\n * @copyright Microsoft Corporation. All rights reserved.\r\n */\r\nimport { default as ServiceScope } from '../serviceScope/ServiceScope';\r\nimport { default as _LogEvent } from './Api/LogEvent';\r\nimport { LogLevel as _LogLevel } from './Api/LogLevel';\r\n\r\n/**\r\n * The Log class provides static methods for logging messages at different levels (verbose,\r\n * info, warning, error) and with context information. Context information helps identify\r\n * which component generated the messages and makes the messages useful and filterable.\r\n *\r\n * @public\r\n */\r\nexport default class Log {\r\n  /**\r\n   * Logs a verbose message\r\n   * @param   source - the source from where the message is logged, e.g., the class name.\r\n   *          The source provides context information for the logged message.\r\n   *          If the source's length is more than 20, only the first 20 characters are kept.\r\n   * @param   message - the message to be logged\r\n   *          If the message's length is more than 100, only the first 100 characters are kept.\r\n   * @param   scope - the service scope that the source uses. A service scope can provide\r\n    *         more context information (e.g., web part information) to the logged message.\r\n   */\r\n  public static verbose(source: string, message: string, scope?: ServiceScope): void {\r\n    const event: _LogEvent = _LogEvent.log(source, message, _LogLevel.Verbose, scope);\r\n    /* tslint:disable:no-console */\r\n    console.log(event.toString());\r\n    /* tslint:enable:no-console */\r\n  }\r\n\r\n  /**\r\n   * Logs an informational message\r\n   * @param   source - the source from where the message is logged, e.g., the class name.\r\n   *          The source provides context information for the logged message.\r\n   *          If the source's length is more than 20, only the first 20 characters are kept.\r\n   * @param   message - the message to be logged\r\n   *          If the message's length is more than 100, only the first 100 characters are kept.\r\n   * @param   scope - the service scope that the source uses. A service scope can provide\r\n    *         more context information (e.g., web part information) to the logged message.\r\n   */\r\n  public static info(source: string, message: string, scope?: ServiceScope): void {\r\n    const event: _LogEvent = _LogEvent.log(source, message, _LogLevel.Info, scope);\r\n    /* tslint:disable:no-console */\r\n    console.info(event.toString());\r\n    /* tslint:enable:no-console */\r\n  }\r\n\r\n  /**\r\n   * Logs a warning\r\n   * @param   source - the source from where the message is logged, e.g., the class name.\r\n   *          The source provides context information for the logged message.\r\n   *          If the source's length is more than 20, only the first 20 characters are kept.\r\n   * @param   message - the message to be logged\r\n   *          If the message's length is more than 100, only the first 100 characters are kept.\r\n   * @param   scope - the service scope that the source uses. A service scope can provide\r\n    *         more context information (e.g., web part information) to the logged message.\r\n   */\r\n  public static warn(source: string, message: string, scope?: ServiceScope): void {\r\n    const event: _LogEvent = _LogEvent.log(source, message, _LogLevel.Warning, scope);\r\n    /* tslint:disable:no-console */\r\n    console.warn(event.toString());\r\n    /* tslint:enable:no-console */\r\n  }\r\n\r\n  /**\r\n   * Logs an error\r\n   * @param   source - the source from where the error is logged, e.g., the class name.\r\n   *          The source provides context information for the logged error.\r\n   *          If the source's length is more than 20, only the first 20 characters are kept.\r\n   * @param   error - the error to be logged\r\n   * @param   scope - the service scope that the source uses. A service scope can provide\r\n    *         more context information (e.g., web part information) to the logged error.\r\n   */\r\n  public static error(source: string, error: Error, scope?: ServiceScope): void {\r\n    const event: _LogEvent = _LogEvent.log(source, error, _LogLevel.Error, scope);\r\n    /* tslint:disable:no-console */\r\n    console.error(event.toString());\r\n    /* tslint:enable:no-console */\r\n  }\r\n}"],"sourceRoot":"/src"}