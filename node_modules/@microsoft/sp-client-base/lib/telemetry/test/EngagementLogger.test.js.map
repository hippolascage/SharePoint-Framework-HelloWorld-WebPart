{"version":3,"sources":["telemetry/test/EngagementLogger.test.ts"],"names":[],"mappings":";AAAA,iCAA8B,yBAAyB,CAAC,CAAA;AACxD,sCAA2B,2BAA2B,CAAC,CAAA;AACvD,2BAAuB,mBAAmB,CAAC,CAAA;AAC3C,wBAAoB,gBAAgB,CAAC,CAAA;AACrC,yBAAqB,iBAAiB,CAAC,CAAA;AAGvC,IAAM,MAAM,GAAsB,IAAI,CAAC,MAAM,CAAC;AAE9C,QAAQ,CAAC,wBAAwB,EAAE;IACjC,QAAQ,CAAC,kCAAkC,EAAE;QAE3C,IAAI,qBAAsC,CAAC;QAC3C,IAAI,OAAO,GAAW,SAAS,CAAC;QAChC,UAAU,CAAC;YACT,qBAAqB,GAAG,KAAK,CAAC,IAAI,CAAC,kCAAU,EAAE,SAAS,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;QAEH,SAAS,CAAC;YACR,EAAE,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC;gBAC1B,qBAAqB,CAAC,OAAO,EAAE,CAAC;YAClC,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iCAAiC,EAAE,UAAC,IAAe;YACpD,OAAO,GAAG,gCAAgC,CAAC;YAC3C,0BAAgB,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YACnC,MAAM,CAAC,MAAM,CAAC,qBAAqB,CAAC,UAAU,EAAE,8BAA8B,CAAC,CAAC;YAChF,MAAM,CAAC,MAAM,CAAC,qBAAqB,CAAC,gBAAgB,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;YACzE,IAAI,EAAE,CAAC;QACT,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iDAAiD,EAAE,UAAC,IAAe;YACpE,OAAO,GAAG,gCAAgC,CAAC;YAC3C,IAAM,UAAU,GAAW,SAAS,CAAC;YACrC,0BAAgB,CAAC,QAAQ,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;YAC/C,MAAM,CAAC,MAAM,CAAC,qBAAqB,CAAC,UAAU,EAAE,8BAA8B,CAAC,CAAC;YAChF,MAAM,CAAC,MAAM,CAAC,qBAAqB,CAAC,gBAAgB,CAAC;gBACnD,IAAI,EAAE,OAAO;gBACb,SAAS,EAAE;oBACT,MAAM,EAAE,UAAU;iBACnB;aACF,CAAC,CAAC,CAAC;YACJ,IAAI,EAAE,CAAC;QACT,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6CAA6C,EAAE,UAAC,IAAe;YAChE,IAAM,QAAQ,GAAc,IAAI,kBAAQ,CACtC,kBAAkB,EAClB,oBAAU,CAAC,IAAI,EACf,iBAAO,CAAC,KAAK,EACb;gBACE,eAAe,EAAE,yBAAyB;aAC3C,CACF,CAAC;YACF,0BAAgB,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;YAChD,MAAM,CAAC,MAAM,CAAC,qBAAqB,CAAC,UAAU,EAAE,8BAA8B,CAAC,CAAC;YAChF,MAAM,CAAC,MAAM,CAAC,qBAAqB,CAAC,gBAAgB,CAAC;gBACnD,IAAI,EAAE,QAAQ,CAAC,UAAU,GAAG,GAAG,GAAG,oBAAU,CAAC,IAAI;gBACjD,SAAS,EAAE;oBACT,OAAO,EAAE,QAAQ,CAAC,QAAQ,EAAE;iBAC7B;aACF,CAAC,CAAC,CAAC;YACJ,IAAI,EAAE,CAAC;QACT,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AAEL,CAAC,CAAC,CAAC","file":"telemetry/test/EngagementLogger.test.js","sourcesContent":["import EngagementLogger  from '../Api/EngagementLogger';\r\nimport { Engagement } from '@ms/odsp-utilities-bundle';\r\nimport LogFeature from '../Api/LogFeature';\r\nimport LogType from '../Api/LogType';\r\nimport LogEntry from '../Api/LogEntry';\r\nimport ILogEntry from '../Api/ILogEntry';\r\n\r\nconst assert: Chai.AssertStatic = chai.assert;\r\n\r\ndescribe('EngagementLogger tests', () => {\r\n  describe('Testing Apis in EngagementLogger', () => {\r\n\r\n    let engagementLogDataStub: Sinon.SinonStub;\r\n    let tagName: string = 'tagName';\r\n    beforeEach(() => {\r\n      engagementLogDataStub = sinon.stub(Engagement, 'logData');\r\n    });\r\n\r\n    afterEach(() => {\r\n      if (engagementLogDataStub) {\r\n        engagementLogDataStub.restore();\r\n      }\r\n    });\r\n\r\n    it('EngagementLogger test: logEvent', (done: MochaDone) => {\r\n      tagName = 'AppName.ControlName.ActionName';\r\n      EngagementLogger.logEvent(tagName);\r\n      assert.isTrue(engagementLogDataStub.calledOnce, 'Engagement logData is called');\r\n      assert.isTrue(engagementLogDataStub.alwaysCalledWith({ name: tagName }));\r\n      done();\r\n    });\r\n\r\n    it('EngagementLogger test: logEvent with actionName', (done: MochaDone) => {\r\n      tagName = 'AppName.ControlName.ActionName';\r\n      const actionName: string = 'keydown';\r\n      EngagementLogger.logEvent(tagName, actionName);\r\n      assert.isTrue(engagementLogDataStub.calledOnce, 'Engagement logData is called');\r\n      assert.isTrue(engagementLogDataStub.alwaysCalledWith({\r\n        name: tagName,\r\n        extraData: {\r\n          action: actionName\r\n        }\r\n      }));\r\n      done();\r\n    });\r\n\r\n    it('EngagementLogger test: logEventWithLogEntry', (done: MochaDone) => {\r\n      const logEntry: ILogEntry = new LogEntry(\r\n        '[SPClientAction]',\r\n        LogFeature.None,\r\n        LogType.Event,\r\n        {\r\n          'NewFieldsData': 'This is new fields data'\r\n        }\r\n      );\r\n      EngagementLogger.logEventWithLogEntry(logEntry);\r\n      assert.isTrue(engagementLogDataStub.calledOnce, 'Engagement logData is called');\r\n      assert.isTrue(engagementLogDataStub.alwaysCalledWith({\r\n        name: logEntry.moduleName + '.' + LogFeature.None,\r\n        extraData: {\r\n          message: logEntry.toString()\r\n        }\r\n      }));\r\n      done();\r\n    });\r\n  });\r\n\r\n});\r\n"],"sourceRoot":"/src"}