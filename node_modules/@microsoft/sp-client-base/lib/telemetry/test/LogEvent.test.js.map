{"version":3,"sources":["telemetry/test/LogEvent.test.ts"],"names":[],"mappings":"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","file":"telemetry/test/LogEvent.test.js","sourcesContent":["import { default as LogEvent } from '../Api/LogEvent';\r\nimport { LogLevel } from '../Api/LogLevel';\r\nimport ServiceScope from '../../serviceScope/ServiceScope';\r\nimport { default as LogSource, logSourceServiceKey } from '../Api/LogSource';\r\n\r\nconst assert: Chai.AssertStatic = chai.assert;\r\n\r\ndescribe('LogEvent', () => {\r\n  describe('#constructor', () => {\r\n    it('should fail when source is undefined', () => {\r\n      assert.throws(() => {\r\n        /* tslint:disable:no-unused-expression */\r\n        new LogEvent(undefined, 'a good message', LogLevel.Info);\r\n        /* tslint:enable:no-unused-expression */\r\n      }, Error);\r\n    });\r\n\r\n    it('should fail when data is undefined', () => {\r\n      assert.throws(() => {\r\n        /* tslint:disable:no-unused-expression */\r\n        new LogEvent('test1', undefined, LogLevel.Info);\r\n        /* tslint:enable:no-unused-expression */\r\n      }, Error);\r\n    });\r\n  });\r\n\r\n  describe('#toString', () => {\r\n    it('serialize a verbose message', () => {\r\n      const event: LogEvent = new LogEvent('source1', 'Some verbose message', LogLevel.Verbose);\r\n      assert.equal(event.toString(), '[source1] Some verbose message');\r\n    });\r\n\r\n    it('serialize a info message', () => {\r\n      const event: LogEvent = new LogEvent('source1', 'Some info', LogLevel.Info);\r\n      assert.equal(event.toString(), '[source1] Some info');\r\n    });\r\n\r\n    it('serialize a warning message', () => {\r\n      const event: LogEvent = new LogEvent('source1', 'Some warning', LogLevel.Warning);\r\n      assert.equal(event.toString(), '[source1] Some warning');\r\n    });\r\n\r\n    it('serialize an error message', () => {\r\n      const error: Error = new Error('Some error');\r\n      const event: LogEvent = new LogEvent('source1', error, LogLevel.Error);\r\n      assert.equal(event.toString(), `[source1] ${error.toString()}`);\r\n    });\r\n\r\n    it('serialize a message with long source', () => {\r\n      const source: string = 'source123456789123456789';\r\n      const event: LogEvent = new LogEvent(source, 'message', LogLevel.Verbose);\r\n      const truncatedSource: string = source.substr(0, 20);\r\n      assert.equal(event.toString(), `[${truncatedSource}] message`, 'source is truncated');\r\n    });\r\n\r\n    it('serialize a message with a scope provided', () => {\r\n      const scope: ServiceScope = ServiceScope.startNewRoot();\r\n      scope.provide(logSourceServiceKey, LogSource.create('scope1'));\r\n      scope.finish();\r\n      const event: LogEvent = new LogEvent('source1', 'message', LogLevel.Warning, scope);\r\n      assert.equal(event.toString(), '[scope1.source1] message');\r\n    });\r\n  });\r\n});"],"sourceRoot":"/src"}