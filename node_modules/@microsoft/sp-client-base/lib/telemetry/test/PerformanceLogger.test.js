"use strict";
var PerformanceLogger_1 = require('../Api/PerformanceLogger');
var odsp_utilities_bundle_1 = require('@ms/odsp-utilities-bundle');
var assert = chai.assert;
describe('PerformanceLogger', function () {
    var baseTime;
    var logger;
    beforeEach(function () {
        baseTime = Date.now();
        PerformanceLogger_1.default.initializeApplication('testApp');
        logger = odsp_utilities_bundle_1.RumOneLogger.getRUMOneLogger();
    });
    describe('#fullPageLoad', function () {
        it('should be true by default', function () {
            assert.isTrue(PerformanceLogger_1.default.fullPageLoad);
        });
        it('should set full page load to be true', function () {
            PerformanceLogger_1.default.fullPageLoad = true;
            assert.isTrue(PerformanceLogger_1.default.fullPageLoad);
        });
        it('should set full page load to be false', function () {
            PerformanceLogger_1.default.fullPageLoad = false;
            assert.isFalse(PerformanceLogger_1.default.fullPageLoad);
        });
    });
    describe('#startMarkForComponent', function () {
        it('should set component start time', function () {
            var tag = 'comp1';
            PerformanceLogger_1.default.startMarkForComponent(tag);
            assert.isTrue(PerformanceLogger_1.default.getComponentStartTime(tag) >= baseTime, 'Component start time is just set');
        });
    });
    describe('#endMarkForComponent', function () {
        it('should set component end time', function () {
            var tag = 'comp1';
            PerformanceLogger_1.default.startMarkForComponent(tag);
            PerformanceLogger_1.default.endMarkForComponent(tag);
            assert.isTrue(PerformanceLogger_1.default.getComponentEndTime(tag) >=
                PerformanceLogger_1.default.getComponentStartTime(tag), 'Component end time is set after start time');
        });
    });
    describe('#startMarkForApi', function () {
        it('should set Api start time', function () {
            var tag = 'api1';
            PerformanceLogger_1.default.startMarkForApi(tag);
            assert.isTrue(PerformanceLogger_1.default.getApiStartTime(tag) >= baseTime, 'Api start time is just set');
        });
    });
    describe('#endMarkForApi', function () {
        it('should set api end time', function () {
            var tag = 'api1';
            var requestUrl = 'http://contoso.sharepoint.com/api/sharepoint';
            var response = new Response();
            PerformanceLogger_1.default.startMarkForApi(tag);
            PerformanceLogger_1.default.endMarkForApi(tag, 'api', requestUrl, response);
            assert.isTrue(PerformanceLogger_1.default.getApiEndTime(tag) >=
                PerformanceLogger_1.default.getApiStartTime(tag), 'Api end time is set after start time');
        });
    });
    describe('#endMarkForApi', function () {
        it('should write api tag', function () {
            var tag = 'api2';
            var name = 'api';
            var requestUrl = 'http://contoso.sharepoint.com/api/sharepoint';
            var response = new Response();
            PerformanceLogger_1.default.startMarkForApi(tag);
            PerformanceLogger_1.default.endMarkForApi(tag, name, requestUrl, response);
            assert.equal(logger.readAPICallPerformanceData().length, 1, 'One api data is collected');
            assert.equal(logger.readAPICallPerformanceData().shift().name, name, 'api tag is recorded');
        });
    });
    describe('#endMarkForApi', function () {
        it('should log error if api start time is not set', function () {
            var tag = 'api3';
            var requestUrl = 'http://contoso.sharepoint.com/api/sharepoint';
            var response = new Response();
            var errorHelperLogStub = sinon.stub(odsp_utilities_bundle_1.ErrorHelper, 'log');
            PerformanceLogger_1.default.endMarkForApi(tag, 'api', requestUrl, response);
            assert.isTrue(errorHelperLogStub.calledOnce, 'error is logged');
            errorHelperLogStub.restore();
        });
    });
    describe('#markApplicationStart', function () {
        it('should record current time if mark is called', function () {
            PerformanceLogger_1.default.markApplicationStart();
            assert.isTrue(PerformanceLogger_1.default.getApplicationStartTime() >= baseTime, 'Mark should record current time.');
        });
    });
});

//# sourceMappingURL=PerformanceLogger.test.js.map
