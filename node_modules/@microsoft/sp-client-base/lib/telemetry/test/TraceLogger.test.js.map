{"version":3,"sources":["telemetry/test/TraceLogger.test.ts"],"names":[],"mappings":"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","file":"telemetry/test/TraceLogger.test.js","sourcesContent":["import { ErrorHelper } from '@ms/odsp-utilities-bundle';\r\nimport TraceLogger from '../Api/TraceLogger';\r\nimport ILogEntry from '../Api/ILogEntry';\r\nimport LogFeature from '../Api/LogFeature';\r\nimport LogType from '../Api/LogType';\r\nimport LogEntry from '../Api/LogEntry';\r\nimport ILogSource from '../Api/ILogSource';\r\nimport LogSource from '../Api/LogSource';\r\n\r\nconst assert: Chai.AssertStatic = chai.assert;\r\n\r\ndescribe('TraceLogger tests', () => {\r\n  describe('Testing Apis in ErrorLogger', () => {\r\n    let errorHelperLogStub: Sinon.SinonStub;\r\n    let errorHelperVerboseStub: Sinon.SinonStub;\r\n    let logSource: ILogSource;\r\n\r\n    beforeEach(() => {\r\n      errorHelperLogStub = sinon.stub(ErrorHelper, 'log');\r\n      errorHelperVerboseStub = sinon.stub(ErrorHelper, 'verbose');\r\n      logSource = LogSource.create('testSource');\r\n    });\r\n\r\n    afterEach(() => {\r\n      if (errorHelperLogStub) {\r\n        errorHelperLogStub.restore();\r\n      }\r\n      if (errorHelperVerboseStub) {\r\n        errorHelperVerboseStub.restore();\r\n      }\r\n    });\r\n\r\n    it('TraceLogger test: logError with normal error', (done: MochaDone) => {\r\n      const error: Error = new Error('This is error message');\r\n      const expectedEventName: string = logSource.id;\r\n      TraceLogger.logError(logSource, error);\r\n      assert.isTrue(errorHelperLogStub.calledOnce, 'ErrorHelper log is called');\r\n      assert.isTrue(errorHelperLogStub.alwaysCalledWith(error, expectedEventName, undefined));\r\n      done();\r\n    });\r\n\r\n    it('TraceLogger test: logError with customized eventName and resultCode', (done: MochaDone) => {\r\n      const error: Error = new Error('This is error message');\r\n      const eventName: string = 'SPClient-Perfect';\r\n      const resultCode: string = 'SPClient-Failure';\r\n      const expectedEventName: string = `${logSource.id}.${eventName}`;\r\n      TraceLogger.logError(logSource, error, eventName, resultCode);\r\n      assert.isTrue(errorHelperLogStub.calledOnce, 'ErrorHelper log is called');\r\n      assert.isTrue(errorHelperLogStub.alwaysCalledWith(error, expectedEventName, resultCode));\r\n      done();\r\n    });\r\n\r\n    it('TraceLogger test: logVerbose with normal message', (done: MochaDone) => {\r\n      const message: string = 'This is error message';\r\n      const expectedEventName: string = logSource.id;\r\n      TraceLogger.logVerbose(logSource, message);\r\n      assert.isTrue(errorHelperVerboseStub.calledOnce, 'ErrorHelper logVerbose is called');\r\n      assert.isTrue(errorHelperVerboseStub.alwaysCalledWith(message, expectedEventName));\r\n      done();\r\n    });\r\n\r\n    it('TraceLogger test: logVerbose with customized eventName', (done: MochaDone) => {\r\n      const message: string = 'This is error message';\r\n      const eventName: string = 'SPClient-Perfect';\r\n      const expectedEventName: string = `${logSource.id}.${eventName}`;\r\n      TraceLogger.logVerbose(logSource, message, eventName);\r\n      assert.isTrue(errorHelperVerboseStub.calledOnce, 'ErrorHelper logVerbose is called');\r\n      assert.isTrue(errorHelperVerboseStub.alwaysCalledWith(message, expectedEventName));\r\n      done();\r\n    });\r\n\r\n    it('TraceLogger test: logErrorWithLogEntry', (done: MochaDone) => {\r\n      const logEntry: ILogEntry = new LogEntry(\r\n        '[SPClientAction]',\r\n        LogFeature.None,\r\n        LogType.Event,\r\n        {\r\n          'ErrorMessage': 'This is error message'\r\n        }\r\n      );\r\n      const expectedEventName: string = logSource.id;\r\n      TraceLogger.logErrorWithLogEntry(logSource, logEntry);\r\n      assert.isTrue(errorHelperLogStub.calledOnce, 'ErrorHelper log is called');\r\n      assert.isTrue(errorHelperLogStub.alwaysCalledWith(logEntry.toString(), expectedEventName, undefined));\r\n      done();\r\n    });\r\n\r\n    it('TraceLogger test: logErrorWithLogEntry with customized eventName and resultCode',\r\n      (done: MochaDone) => {\r\n      const logEntry: ILogEntry = new LogEntry(\r\n        '[SPClientAction]',\r\n        LogFeature.None,\r\n        LogType.Event,\r\n        {\r\n          'ErrorMessage': 'This is error message'\r\n        }\r\n      );\r\n      const eventName: string = 'SPClient-Perfect';\r\n      const resultCode: string = 'SPClient-Failure';\r\n      const expectedEventName: string = `${logSource.id}.${eventName}`;\r\n      TraceLogger.logErrorWithLogEntry(logSource, logEntry, eventName, resultCode);\r\n      assert.isTrue(errorHelperLogStub.calledOnce, 'ErrorHelper log is called');\r\n      assert.isTrue(errorHelperLogStub.alwaysCalledWith(logEntry.toString(), expectedEventName, resultCode));\r\n      done();\r\n    });\r\n\r\n    it('TraceLogger test: logVerboseWithLogEntry', (done: MochaDone) => {\r\n      const logEntry: ILogEntry = new LogEntry(\r\n        '[SPClientAction]',\r\n        LogFeature.None,\r\n        LogType.Event,\r\n        {\r\n          'ErrorMessage': 'This is error message'\r\n        }\r\n      );\r\n      const expectedEventName: string = logSource.id;\r\n      TraceLogger.logVerboseWithLogEntry(logSource, logEntry);\r\n      assert.isTrue(errorHelperVerboseStub.calledOnce, 'ErrorHelper logVerbose is called');\r\n      assert.isTrue(errorHelperVerboseStub.alwaysCalledWith(logEntry.toString(), expectedEventName));\r\n      done();\r\n    });\r\n\r\n    it('TraceLogger test: logVerboseWithLogEntry with customized eventName and resultCode',\r\n      (done: MochaDone) => {\r\n        const logEntry: ILogEntry = new LogEntry(\r\n          '[SPClientAction]',\r\n          LogFeature.None,\r\n          LogType.Event,\r\n          {\r\n            'ErrorMessage': 'This is error message'\r\n          }\r\n        );\r\n        const eventName: string = 'SPClient-Perfect';\r\n        const expectedEventName: string = `${logSource.id}.${eventName}`;\r\n        TraceLogger.logVerboseWithLogEntry(logSource, logEntry, eventName);\r\n        assert.isTrue(errorHelperVerboseStub.calledOnce, 'ErrorHelper logVerbose is called');\r\n        assert.isTrue(errorHelperVerboseStub.alwaysCalledWith(logEntry.toString(), expectedEventName));\r\n        done();\r\n    });\r\n  });\r\n});\r\n"],"sourceRoot":"/src"}