"use strict";
var LogManager_1 = require('../Api/LogManager');
var LogEvent_1 = require('../Api/LogEvent');
var LogLevel_1 = require('../Api/LogLevel');
var assert = chai.assert;
describe('LogManager', function () {
    var stub;
    beforeEach(function () {
        LogManager_1.default.reset();
        stub = sinon.stub();
    });
    it('handles event once when there is one handler added', function () {
        LogManager_1.default.addHandler(stub);
        var event = new LogEvent_1.default('testSource', 'data', LogLevel_1.LogLevel.Verbose);
        LogManager_1.default.log(event);
        assert.isTrue(stub.calledWith(event), 'event handled');
        assert.equal(stub.callCount, 1, 'called once');
    });
    it('does not handle event when handler is removed', function () {
        LogManager_1.default.addHandler(stub);
        LogManager_1.default.removeHandler(stub);
        var event = new LogEvent_1.default('testSource', 'data', LogLevel_1.LogLevel.Verbose);
        LogManager_1.default.log(event);
        assert.equal(stub.callCount, 0, 'never called');
    });
    it('handles event even when event happened before handler gets added', function () {
        var event = new LogEvent_1.default('testSource', 'data', LogLevel_1.LogLevel.Verbose);
        LogManager_1.default.log(event);
        LogManager_1.default.addHandler(stub);
        assert.isTrue(stub.calledWith(event), 'event handled');
        assert.equal(stub.callCount, 1, 'called once');
    });
    it('handles event twice when two different handlers added', function () {
        var stub1 = sinon.stub();
        var stub2 = sinon.stub();
        LogManager_1.default.addHandler(stub1);
        LogManager_1.default.addHandler(stub2);
        var event = new LogEvent_1.default('testSource', 'data', LogLevel_1.LogLevel.Verbose);
        LogManager_1.default.log(event);
        assert.isTrue(stub1.calledWith(event), 'event handled by handler 1');
        assert.equal(stub1.callCount, 1, 'handler 1 gets called once');
        assert.isTrue(stub2.calledWith(event), 'event handled by handler 2');
        assert.equal(stub2.callCount, 1, 'handler 2 gets called once');
    });
    it('handles event once when same handler added twice', function () {
        LogManager_1.default.addHandler(stub);
        LogManager_1.default.addHandler(stub);
        var event = new LogEvent_1.default('testSource', 'data', LogLevel_1.LogLevel.Verbose);
        LogManager_1.default.log(event);
        assert.isTrue(stub.calledWith(event), 'event handled by handler');
        assert.equal(stub.callCount, 1, 'handler gets called once');
    });
});

//# sourceMappingURL=LogManager.test.js.map
