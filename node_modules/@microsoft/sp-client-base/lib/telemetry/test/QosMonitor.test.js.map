{"version":3,"sources":["telemetry/test/QosMonitor.test.ts"],"names":[],"mappings":"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","file":"telemetry/test/QosMonitor.test.js","sourcesContent":["const assert: Chai.AssertStatic = chai.assert;\r\nimport QosMonitor  from '../Api/QosMonitor';\r\nimport IQosMonitor  from '../Api/IQosMonitor';\r\nimport { ResultTypeEnum } from '@ms/odsp-utilities-bundle';\r\n\r\ndescribe('QosMonitor tests', () => {\r\n\r\n  describe('Testing Apis in QosMonitor', () => {\r\n    let qosLogger: IQosMonitor;\r\n    let qosEndStub: Sinon.SinonStub;\r\n    const senarioName: string = 'TestSenario';\r\n\r\n    beforeEach(() => {\r\n      qosLogger = new QosMonitor('TestSenario');\r\n      qosEndStub = sinon.stub(qosLogger.qos, 'end');\r\n    });\r\n\r\n    afterEach(() => {\r\n      qosLogger = undefined;\r\n      if (qosEndStub) {\r\n        qosEndStub.restore();\r\n      }\r\n    });\r\n\r\n    it('QosMonitor test: CreateAndStartMonitor with normal senario name', (done: MochaDone) => {\r\n      assert.isNotNull(qosLogger.qos);\r\n      assert.isTrue(qosLogger.qos.data.name === senarioName);\r\n      assert.isTrue(qosLogger.qos.enabled);\r\n      assert.isTrue(qosLogger.qos.shortEventName === 'Qos');\r\n      done();\r\n    });\r\n\r\n    it('QosMonitor test: WriteSuccess', (done: MochaDone) => {\r\n      qosLogger.writeSuccess();\r\n      assert.isTrue(qosEndStub.calledOnce, 'Qos end is called');\r\n      assert.isTrue(qosEndStub.alwaysCalledWith({ resultType: ResultTypeEnum.Success }));\r\n      done();\r\n    });\r\n\r\n    it('QosMonitor test: WriteUnExpectedFailure', (done: MochaDone) => {\r\n      qosLogger.writeUnexpectedFailure();\r\n      assert.isTrue(qosEndStub.calledOnce, 'Qos end is called');\r\n      assert.isTrue(qosEndStub.alwaysCalledWith({\r\n        resultCode: 'DefaultUnexpected',\r\n        resultType: ResultTypeEnum.Failure,\r\n        extraData: undefined\r\n      }));\r\n      done();\r\n    });\r\n\r\n    it('QosMonitor test: WriteFailureWithFailureTag', (done: MochaDone) => {\r\n      const tagName: string = 'failureTag';\r\n      const errorMessage: string = 'This is failure message for';\r\n      qosLogger.writeUnexpectedFailure(tagName, new Error(errorMessage));\r\n      assert.isTrue(qosEndStub.calledOnce, 'Qos end is called');\r\n      assert.isTrue(qosEndStub.alwaysCalledWith({\r\n        resultCode: tagName,\r\n        resultType: ResultTypeEnum.Failure,\r\n        error: errorMessage,\r\n        extraData: undefined\r\n      }));\r\n      done();\r\n    });\r\n\r\n    it('QosMonitor test: WriteUnExpectedFailure with extra data', (done: MochaDone) => {\r\n      const extraData: {} = { 'foo': 'bar' };\r\n      qosLogger.writeUnexpectedFailure('tag', undefined, extraData);\r\n      assert.isTrue(qosEndStub.calledOnce, 'Qos end is called');\r\n      assert.isTrue(qosEndStub.alwaysCalledWith({\r\n        resultCode: 'tag',\r\n        resultType: ResultTypeEnum.Failure,\r\n        extraData: extraData\r\n      }));\r\n      done();\r\n    });\r\n\r\n    it('QosMonitor test: writeExpectedFailure', (done: MochaDone) => {\r\n      qosLogger.writeExpectedFailure();\r\n      assert.isTrue(qosEndStub.calledOnce, 'Qos end is called');\r\n      assert.isTrue(qosEndStub.alwaysCalledWith({\r\n        resultCode: 'DefaultExpected',\r\n        resultType: ResultTypeEnum.ExpectedFailure,\r\n        extraData: undefined\r\n      }));\r\n      done();\r\n    });\r\n\r\n    it('QosMonitor test: WriteExpectedFailureWithFailureTag', (done: MochaDone) => {\r\n      const tagName: string = 'failureTag';\r\n      const errorMessage: string = 'This is failure message for';\r\n      qosLogger.writeUnexpectedFailure(tagName, new Error(errorMessage));\r\n      assert.isTrue(qosEndStub.calledOnce, 'Qos end is called');\r\n      assert.isTrue(qosEndStub.alwaysCalledWith({\r\n        resultCode: tagName,\r\n        resultType: ResultTypeEnum.Failure,\r\n        error: errorMessage,\r\n        extraData: undefined\r\n      }));\r\n      done();\r\n    });\r\n  });\r\n\r\n});\r\n"],"sourceRoot":"/src"}