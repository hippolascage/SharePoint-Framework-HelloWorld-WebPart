"use strict";
var CircularBuffer_1 = require('../Api/CircularBuffer');
var assert = chai.assert;
describe('CircularBuffer', function () {
    it('has nothing if not pushed yet', function () {
        var buffer = new CircularBuffer_1.default(10);
        var stub = sinon.stub();
        buffer.forEach(function (i) { return stub(i); });
        assert.equal(stub.callCount, 0, 'CircularBuffer has 0 items.');
    });
    it('has nothing if removed all.', function () {
        var buffer = new CircularBuffer_1.default(10);
        for (var i = 0; i < 5; i++) {
            buffer.push(i);
        }
        buffer.removeAll();
        var stub = sinon.stub();
        buffer.forEach(function (i) { return stub(i); });
        assert.equal(stub.callCount, 0, 'CircularBuffer has 0 items.');
    });
    it('stores all items when the number of items is less than capacity', function () {
        var buffer = new CircularBuffer_1.default(10);
        for (var i = 0; i < 5; i++) {
            buffer.push(i);
        }
        var stub = sinon.stub();
        buffer.forEach(function (i) { return stub(i); });
        assert.equal(stub.callCount, 5, 'CircularBuffer has expected number of items');
        for (var i = 0; i < 5; i++) {
            assert.isTrue(stub.calledWith(i), i + " is in");
        }
    });
    it('stores latest items when the number of items is more than capacity', function () {
        var buffer = new CircularBuffer_1.default(5);
        for (var i = 0; i < 7; i++) {
            buffer.push(i);
        }
        var stub = sinon.stub();
        buffer.forEach(function (i) { return stub(i); });
        assert.equal(stub.callCount, 5, 'CircularBuffer has expected number of items');
        for (var i = 2; i < 7; i++) {
            assert.isTrue(stub.calledWith(i), i + " is in");
        }
    });
    it('stores latest items when the number of items is at capacity', function () {
        var buffer = new CircularBuffer_1.default(5);
        for (var i = 0; i < 5; i++) {
            buffer.push(i);
        }
        var stub = sinon.stub();
        buffer.forEach(function (i) { return stub(i); });
        assert.equal(stub.callCount, 5, 'CircularBuffer has expected number of items');
        for (var i = 0; i < 5; i++) {
            assert.isTrue(stub.calledWith(i), i + " is in");
        }
    });
    it('stores latest items when the number of items is double the capacity', function () {
        var buffer = new CircularBuffer_1.default(5);
        for (var i = 0; i < 10; i++) {
            buffer.push(i);
        }
        var stub = sinon.stub();
        buffer.forEach(function (i) { return stub(i); });
        assert.equal(stub.callCount, 5, 'CircularBuffer has expected number of items');
        for (var i = 5; i < 10; i++) {
            assert.isTrue(stub.calledWith(i), i + " is in");
        }
    });
    it('throws if buffer is modified while being iterated', function () {
        var buffer = new CircularBuffer_1.default(5);
        buffer.push(0);
        assert.throw(function () {
            buffer.forEach(function (i) { return buffer.push(1); });
        });
    });
});

//# sourceMappingURL=CircularBuffer.test.js.map
