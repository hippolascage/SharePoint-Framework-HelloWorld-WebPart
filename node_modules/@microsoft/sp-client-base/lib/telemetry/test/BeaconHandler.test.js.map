{"version":3,"sources":["telemetry/test/BeaconHandler.test.ts"],"names":[],"mappings":";AAAA,sCAAgC,2BAA2B,CAAC,CAAA;AAC5D,+BAA2B,uBAAuB,CAAC,CAAA;AAEnD,sCAAuD,2BAA2B,CAAC,CAAA;AACnF,gCAA+B,6BAA6B,CAAC,CAAA;AAC7D,gCAA4B,6BAA6B,CAAC,CAAA;AAE1D,IAAM,MAAM,GAAsB,IAAI,CAAC,MAAM,CAAC;AAE9C,QAAQ,CAAC,sBAAsB,EAAE;IAE/B,QAAQ,CAAC,qCAAqC,EAAE;QAC9C,IAAM,WAAW,GAAW,MAAM,CAAC;QACnC,IAAM,iBAAiB,GAAW,KAAK,CAAC;QACxC,IAAI,cAA8B,CAAC;QAEnC,UAAU,CAAC;YACT,cAAc,GAAG,IAAI,wBAAc,EAAE,CAAC;QACxC,CAAC,CAAC,CAAC;QAEH,SAAS,CAAC;YACR,EAAE,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;gBACnB,cAAc,GAAG,SAAS,CAAC;YAC7B,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gDAAgD,EAAE,UAAC,IAAe;YACnE,IAAM,SAAS,GAAmB,IAAI,gCAAc,CAAC,iBAAiB,EAAE,sCAAc,CAAC,OAAO,CAAC,CAAC;YAChG,IAAM,KAAK,GAAiB,IAAI,yBAAe,CAAC,CAAC,EAAE,SAAS,EAAE,uCAAmB,CAAC,KAAK,CAAC,CAAC;YAEzF,IAAM,IAAI,GAAW,cAAc,CAAC,mBAAmB,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;YAC5E,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YACvB,MAAM,CAAC,MAAM,CAAC,IAAI,KAAK,WAAW,GAAG,GAAG,GAAG,OAAO,CAAC,CAAC;YACpD,IAAI,EAAE,CAAC;QACT,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2DAA2D,EAAE,UAAC,IAAe;YAC9E,IAAM,SAAS,GAAmB,IAAI,gCAAc,CAAC,iBAAiB,EAAE,sCAAc,CAAC,OAAO,CAAC,CAAC;YAChG,IAAM,KAAK,GAAiB,IAAI,yBAAe,CAAC,CAAC,EAAE,SAAS,EAAE,uCAAmB,CAAC,GAAG,CAAC,CAAC;YAEvF,IAAM,IAAI,GAAW,cAAc,CAAC,mBAAmB,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;YAC5E,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YACvB,MAAM,CAAC,MAAM,CAAC,IAAI,KAAK,WAAW,GAAG,GAAG,GAAG,iBAAiB,GAAG,GAAG,GAAG,SAAS,CAAC,CAAC;YAChF,IAAI,EAAE,CAAC;QACT,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2DAA2D,EAAE,UAAC,IAAe;YAC9E,IAAM,SAAS,GAAmB,IAAI,gCAAc,CAAC,iBAAiB,EAAE,sCAAc,CAAC,OAAO,CAAC,CAAC;YAChG,IAAM,KAAK,GAAiB,IAAI,yBAAe,CAAC,CAAC,EAAE,SAAS,EAAE,uCAAmB,CAAC,GAAG,CAAC,CAAC;YAEvF,IAAM,IAAI,GAAW,cAAc,CAAC,mBAAmB,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;YAC5E,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YACvB,MAAM,CAAC,MAAM,CAAC,IAAI,KAAK,WAAW,GAAG,GAAG,GAAI,iBAAiB,GAAG,GAAG,GAAG,SAAS,CAAC,CAAC;YACjF,IAAI,EAAE,CAAC;QACT,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mEAAmE,EAAE,UAAC,IAAe;YACtF,IAAM,SAAS,GAAmB,IAAI,gCAAc,CAAC,iBAAiB,EAAE,sCAAc,CAAC,eAAe,CAAC,CAAC;YACxG,IAAM,KAAK,GAAiB,IAAI,yBAAe,CAAC,CAAC,EAAE,SAAS,EAAE,uCAAmB,CAAC,GAAG,CAAC,CAAC;YAEvF,IAAM,IAAI,GAAW,cAAc,CAAC,mBAAmB,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;YAC5E,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YACvB,MAAM,CAAC,MAAM,CAAC,IAAI,KAAK,WAAW,GAAG,GAAG,GAAI,iBAAiB,GAAG,GAAG,GAAG,iBAAiB,CAAC,CAAC;YACzF,IAAI,EAAE,CAAC;QACT,CAAC,CAAC,CAAC;IAEL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"telemetry/test/BeaconHandler.test.js","sourcesContent":["import { ResultTypeEnum  } from '@ms/odsp-utilities-bundle';\r\nimport BeaconHandlers from '../Api/BeaconHandlers';\r\nimport { IClonedEvent } from '@ms/odsp-utilities-bundle';\r\nimport { ClonedEventType as ClonedEventTypeEnum } from '@ms/odsp-utilities-bundle';\r\nimport { CloneEventData } from './TestUtils/CloneEventUtils';\r\nimport CloneEventUtils from './TestUtils/CloneEventUtils';\r\n\r\nconst assert: Chai.AssertStatic = chai.assert;\r\n\r\ndescribe('BeaconHandlers tests', () => {\r\n\r\n  describe('Testing functions in BeaconHandlers', () => {\r\n    const senarioName: string = 'test';\r\n    const senarioResultCode: string = 'tag';\r\n    let beaconHandlers: BeaconHandlers;\r\n\r\n    beforeEach(() => {\r\n      beaconHandlers = new BeaconHandlers();\r\n    });\r\n\r\n    afterEach(() => {\r\n      if (beaconHandlers) {\r\n        beaconHandlers = undefined;\r\n      }\r\n    });\r\n\r\n    it('BeaconHandlers test: qosEventNameHandler start', (done: MochaDone) => {\r\n      const eventData: CloneEventData = new CloneEventData(senarioResultCode, ResultTypeEnum.Success);\r\n      const event: IClonedEvent = new CloneEventUtils(1, eventData, ClonedEventTypeEnum.Start);\r\n\r\n      const name: string = beaconHandlers.qosEventNameHandler(event, senarioName);\r\n      assert.isNotNull(name);\r\n      assert.isTrue(name === senarioName + '.' + 'Start');\r\n      done();\r\n    });\r\n\r\n    it('BeaconHandlers test: qosEventNameHandler end with success', (done: MochaDone) => {\r\n      const eventData: CloneEventData = new CloneEventData(senarioResultCode, ResultTypeEnum.Success);\r\n      const event: IClonedEvent = new CloneEventUtils(1, eventData, ClonedEventTypeEnum.End);\r\n\r\n      const name: string = beaconHandlers.qosEventNameHandler(event, senarioName);\r\n      assert.isNotNull(name);\r\n      assert.isTrue(name === senarioName + '.' + senarioResultCode + '.' + 'Success');\r\n      done();\r\n    });\r\n\r\n    it('BeaconHandlers test: qosEventNameHandler end with Failure', (done: MochaDone) => {\r\n      const eventData: CloneEventData = new CloneEventData(senarioResultCode, ResultTypeEnum.Failure);\r\n      const event: IClonedEvent = new CloneEventUtils(1, eventData, ClonedEventTypeEnum.End);\r\n\r\n      const name: string = beaconHandlers.qosEventNameHandler(event, senarioName);\r\n      assert.isNotNull(name);\r\n      assert.isTrue(name === senarioName + '.'  + senarioResultCode + '.' + 'Failure');\r\n      done();\r\n    });\r\n\r\n    it('BeaconHandlers test: qosEventNameHandler end with ExpectedFailure', (done: MochaDone) => {\r\n      const eventData: CloneEventData = new CloneEventData(senarioResultCode, ResultTypeEnum.ExpectedFailure);\r\n      const event: IClonedEvent = new CloneEventUtils(1, eventData, ClonedEventTypeEnum.End);\r\n\r\n      const name: string = beaconHandlers.qosEventNameHandler(event, senarioName);\r\n      assert.isNotNull(name);\r\n      assert.isTrue(name === senarioName + '.'  + senarioResultCode + '.' + 'ExpectedFailure');\r\n      done();\r\n    });\r\n\r\n  });\r\n});\r\n"],"sourceRoot":"/src"}