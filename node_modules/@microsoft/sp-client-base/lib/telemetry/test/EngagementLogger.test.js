"use strict";
var EngagementLogger_1 = require('../Api/EngagementLogger');
var odsp_utilities_bundle_1 = require('@ms/odsp-utilities-bundle');
var LogFeature_1 = require('../Api/LogFeature');
var LogType_1 = require('../Api/LogType');
var LogEntry_1 = require('../Api/LogEntry');
var assert = chai.assert;
describe('EngagementLogger tests', function () {
    describe('Testing Apis in EngagementLogger', function () {
        var engagementLogDataStub;
        var tagName = 'tagName';
        beforeEach(function () {
            engagementLogDataStub = sinon.stub(odsp_utilities_bundle_1.Engagement, 'logData');
        });
        afterEach(function () {
            if (engagementLogDataStub) {
                engagementLogDataStub.restore();
            }
        });
        it('EngagementLogger test: logEvent', function (done) {
            tagName = 'AppName.ControlName.ActionName';
            EngagementLogger_1.default.logEvent(tagName);
            assert.isTrue(engagementLogDataStub.calledOnce, 'Engagement logData is called');
            assert.isTrue(engagementLogDataStub.alwaysCalledWith({ name: tagName }));
            done();
        });
        it('EngagementLogger test: logEvent with actionName', function (done) {
            tagName = 'AppName.ControlName.ActionName';
            var actionName = 'keydown';
            EngagementLogger_1.default.logEvent(tagName, actionName);
            assert.isTrue(engagementLogDataStub.calledOnce, 'Engagement logData is called');
            assert.isTrue(engagementLogDataStub.alwaysCalledWith({
                name: tagName,
                extraData: {
                    action: actionName
                }
            }));
            done();
        });
        it('EngagementLogger test: logEventWithLogEntry', function (done) {
            var logEntry = new LogEntry_1.default('[SPClientAction]', LogFeature_1.default.None, LogType_1.default.Event, {
                'NewFieldsData': 'This is new fields data'
            });
            EngagementLogger_1.default.logEventWithLogEntry(logEntry);
            assert.isTrue(engagementLogDataStub.calledOnce, 'Engagement logData is called');
            assert.isTrue(engagementLogDataStub.alwaysCalledWith({
                name: logEntry.moduleName + '.' + LogFeature_1.default.None,
                extraData: {
                    message: logEntry.toString()
                }
            }));
            done();
        });
    });
});

//# sourceMappingURL=EngagementLogger.test.js.map
