{"version":3,"sources":["telemetry/test/LogManager.test.ts"],"names":[],"mappings":"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","file":"telemetry/test/LogManager.test.js","sourcesContent":["import LogManager from '../Api/LogManager';\r\nimport LogEvent from '../Api/LogEvent';\r\nimport { LogLevel } from '../Api/LogLevel';\r\n\r\nconst assert: Chai.AssertStatic = chai.assert;\r\n\r\ndescribe('LogManager', () => {\r\n  let stub: Sinon.SinonStub;\r\n\r\n  beforeEach(() => {\r\n    LogManager.reset();\r\n    stub = sinon.stub();\r\n  });\r\n\r\n  it('handles event once when there is one handler added', () => {\r\n    LogManager.addHandler(stub);\r\n    const event: LogEvent = new LogEvent('testSource', 'data', LogLevel.Verbose);\r\n    LogManager.log(event);\r\n    assert.isTrue(stub.calledWith(event), 'event handled');\r\n    assert.equal(stub.callCount, 1, 'called once');\r\n  });\r\n\r\n  it('does not handle event when handler is removed', () => {\r\n    LogManager.addHandler(stub);\r\n    LogManager.removeHandler(stub);\r\n    const event: LogEvent = new LogEvent('testSource', 'data', LogLevel.Verbose);\r\n    LogManager.log(event);\r\n    assert.equal(stub.callCount, 0, 'never called');\r\n  });\r\n\r\n  it('handles event even when event happened before handler gets added', () => {\r\n    const event: LogEvent = new LogEvent('testSource', 'data', LogLevel.Verbose);\r\n    LogManager.log(event);\r\n\r\n    LogManager.addHandler(stub);\r\n    assert.isTrue(stub.calledWith(event), 'event handled');\r\n    assert.equal(stub.callCount, 1, 'called once');\r\n  });\r\n\r\n  it('handles event twice when two different handlers added', () => {\r\n    const stub1: Sinon.SinonStub = sinon.stub();\r\n    const stub2: Sinon.SinonStub = sinon.stub();\r\n    LogManager.addHandler(stub1);\r\n    LogManager.addHandler(stub2);\r\n    const event: LogEvent = new LogEvent('testSource', 'data', LogLevel.Verbose);\r\n    LogManager.log(event);\r\n    assert.isTrue(stub1.calledWith(event), 'event handled by handler 1');\r\n    assert.equal(stub1.callCount, 1, 'handler 1 gets called once');\r\n    assert.isTrue(stub2.calledWith(event), 'event handled by handler 2');\r\n    assert.equal(stub2.callCount, 1, 'handler 2 gets called once');\r\n  });\r\n\r\n  it('handles event once when same handler added twice', () => {\r\n    LogManager.addHandler(stub);\r\n    LogManager.addHandler(stub);\r\n    const event: LogEvent = new LogEvent('testSource', 'data', LogLevel.Verbose);\r\n    LogManager.log(event);\r\n    assert.isTrue(stub.calledWith(event), 'event handled by handler');\r\n    assert.equal(stub.callCount, 1, 'handler gets called once');\r\n  });\r\n});"],"sourceRoot":"/src"}