{"version":3,"sources":["telemetry/test/CircularBuffer.test.ts"],"names":[],"mappings":"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","file":"telemetry/test/CircularBuffer.test.js","sourcesContent":["import CircularBuffer from '../Api/CircularBuffer';\r\n\r\nconst assert: Chai.AssertStatic = chai.assert;\r\n\r\ndescribe('CircularBuffer', () => {\r\n  it('has nothing if not pushed yet', () => {\r\n    const buffer: CircularBuffer<number> = new CircularBuffer<number>(10);\r\n    const stub: Sinon.SinonStub = sinon.stub();\r\n    buffer.forEach(i => stub(i));\r\n    assert.equal(stub.callCount, 0, 'CircularBuffer has 0 items.');\r\n  });\r\n\r\n  it('has nothing if removed all.', () => {\r\n    const buffer: CircularBuffer<number> = new CircularBuffer<number>(10);\r\n    for (let i: number = 0; i < 5; i++) {\r\n      buffer.push(i);\r\n    }\r\n    buffer.removeAll();\r\n    const stub: Sinon.SinonStub = sinon.stub();\r\n    buffer.forEach(i => stub(i));\r\n    assert.equal(stub.callCount, 0, 'CircularBuffer has 0 items.');\r\n  });\r\n\r\n  it('stores all items when the number of items is less than capacity', () => {\r\n    const buffer: CircularBuffer<number> = new CircularBuffer<number>(10);\r\n    for (let i: number = 0; i < 5; i++) {\r\n      buffer.push(i);\r\n    }\r\n    const stub: Sinon.SinonStub = sinon.stub();\r\n    buffer.forEach(i => stub(i));\r\n    assert.equal(stub.callCount, 5, 'CircularBuffer has expected number of items');\r\n    for (let i: number = 0; i < 5; i++) {\r\n      assert.isTrue(stub.calledWith(i), `${i} is in`);\r\n    }\r\n  });\r\n\r\n  it('stores latest items when the number of items is more than capacity', () => {\r\n    const buffer: CircularBuffer<number> = new CircularBuffer<number>(5);\r\n    for (let i: number = 0; i < 7; i++) {\r\n      buffer.push(i);\r\n    }\r\n    const stub: Sinon.SinonStub = sinon.stub();\r\n    buffer.forEach(i => stub(i));\r\n    assert.equal(stub.callCount, 5, 'CircularBuffer has expected number of items');\r\n    for (let i: number = 2; i < 7; i++) {\r\n      assert.isTrue(stub.calledWith(i), `${i} is in`);\r\n    }\r\n  });\r\n\r\n  it('stores latest items when the number of items is at capacity', () => {\r\n    const buffer: CircularBuffer<number> = new CircularBuffer<number>(5);\r\n    for (let i: number = 0; i < 5; i++) {\r\n      buffer.push(i);\r\n    }\r\n    const stub: Sinon.SinonStub = sinon.stub();\r\n    buffer.forEach(i => stub(i));\r\n    assert.equal(stub.callCount, 5, 'CircularBuffer has expected number of items');\r\n    for (let i: number = 0; i < 5; i++) {\r\n      assert.isTrue(stub.calledWith(i), `${i} is in`);\r\n    }\r\n  });\r\n\r\n  it('stores latest items when the number of items is double the capacity', () => {\r\n    const buffer: CircularBuffer<number> = new CircularBuffer<number>(5);\r\n    for (let i: number = 0; i < 10; i++) {\r\n      buffer.push(i);\r\n    }\r\n    const stub: Sinon.SinonStub = sinon.stub();\r\n    buffer.forEach(i => stub(i));\r\n    assert.equal(stub.callCount, 5, 'CircularBuffer has expected number of items');\r\n    for (let i: number = 5; i < 10; i++) {\r\n      assert.isTrue(stub.calledWith(i), `${i} is in`);\r\n    }\r\n  });\r\n\r\n  it('throws if buffer is modified while being iterated', () => {\r\n    const buffer: CircularBuffer<number> = new CircularBuffer<number>(5);\r\n    buffer.push(0);\r\n    assert.throw(() => {\r\n      buffer.forEach(i => buffer.push(1));\r\n    });\r\n  });\r\n});"],"sourceRoot":"/src"}