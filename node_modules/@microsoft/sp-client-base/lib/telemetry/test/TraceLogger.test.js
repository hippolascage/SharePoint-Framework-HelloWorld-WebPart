"use strict";
var odsp_utilities_bundle_1 = require('@ms/odsp-utilities-bundle');
var TraceLogger_1 = require('../Api/TraceLogger');
var LogFeature_1 = require('../Api/LogFeature');
var LogType_1 = require('../Api/LogType');
var LogEntry_1 = require('../Api/LogEntry');
var LogSource_1 = require('../Api/LogSource');
var assert = chai.assert;
describe('TraceLogger tests', function () {
    describe('Testing Apis in ErrorLogger', function () {
        var errorHelperLogStub;
        var errorHelperVerboseStub;
        var logSource;
        beforeEach(function () {
            errorHelperLogStub = sinon.stub(odsp_utilities_bundle_1.ErrorHelper, 'log');
            errorHelperVerboseStub = sinon.stub(odsp_utilities_bundle_1.ErrorHelper, 'verbose');
            logSource = LogSource_1.default.create('testSource');
        });
        afterEach(function () {
            if (errorHelperLogStub) {
                errorHelperLogStub.restore();
            }
            if (errorHelperVerboseStub) {
                errorHelperVerboseStub.restore();
            }
        });
        it('TraceLogger test: logError with normal error', function (done) {
            var error = new Error('This is error message');
            var expectedEventName = logSource.id;
            TraceLogger_1.default.logError(logSource, error);
            assert.isTrue(errorHelperLogStub.calledOnce, 'ErrorHelper log is called');
            assert.isTrue(errorHelperLogStub.alwaysCalledWith(error, expectedEventName, undefined));
            done();
        });
        it('TraceLogger test: logError with customized eventName and resultCode', function (done) {
            var error = new Error('This is error message');
            var eventName = 'SPClient-Perfect';
            var resultCode = 'SPClient-Failure';
            var expectedEventName = logSource.id + "." + eventName;
            TraceLogger_1.default.logError(logSource, error, eventName, resultCode);
            assert.isTrue(errorHelperLogStub.calledOnce, 'ErrorHelper log is called');
            assert.isTrue(errorHelperLogStub.alwaysCalledWith(error, expectedEventName, resultCode));
            done();
        });
        it('TraceLogger test: logVerbose with normal message', function (done) {
            var message = 'This is error message';
            var expectedEventName = logSource.id;
            TraceLogger_1.default.logVerbose(logSource, message);
            assert.isTrue(errorHelperVerboseStub.calledOnce, 'ErrorHelper logVerbose is called');
            assert.isTrue(errorHelperVerboseStub.alwaysCalledWith(message, expectedEventName));
            done();
        });
        it('TraceLogger test: logVerbose with customized eventName', function (done) {
            var message = 'This is error message';
            var eventName = 'SPClient-Perfect';
            var expectedEventName = logSource.id + "." + eventName;
            TraceLogger_1.default.logVerbose(logSource, message, eventName);
            assert.isTrue(errorHelperVerboseStub.calledOnce, 'ErrorHelper logVerbose is called');
            assert.isTrue(errorHelperVerboseStub.alwaysCalledWith(message, expectedEventName));
            done();
        });
        it('TraceLogger test: logErrorWithLogEntry', function (done) {
            var logEntry = new LogEntry_1.default('[SPClientAction]', LogFeature_1.default.None, LogType_1.default.Event, {
                'ErrorMessage': 'This is error message'
            });
            var expectedEventName = logSource.id;
            TraceLogger_1.default.logErrorWithLogEntry(logSource, logEntry);
            assert.isTrue(errorHelperLogStub.calledOnce, 'ErrorHelper log is called');
            assert.isTrue(errorHelperLogStub.alwaysCalledWith(logEntry.toString(), expectedEventName, undefined));
            done();
        });
        it('TraceLogger test: logErrorWithLogEntry with customized eventName and resultCode', function (done) {
            var logEntry = new LogEntry_1.default('[SPClientAction]', LogFeature_1.default.None, LogType_1.default.Event, {
                'ErrorMessage': 'This is error message'
            });
            var eventName = 'SPClient-Perfect';
            var resultCode = 'SPClient-Failure';
            var expectedEventName = logSource.id + "." + eventName;
            TraceLogger_1.default.logErrorWithLogEntry(logSource, logEntry, eventName, resultCode);
            assert.isTrue(errorHelperLogStub.calledOnce, 'ErrorHelper log is called');
            assert.isTrue(errorHelperLogStub.alwaysCalledWith(logEntry.toString(), expectedEventName, resultCode));
            done();
        });
        it('TraceLogger test: logVerboseWithLogEntry', function (done) {
            var logEntry = new LogEntry_1.default('[SPClientAction]', LogFeature_1.default.None, LogType_1.default.Event, {
                'ErrorMessage': 'This is error message'
            });
            var expectedEventName = logSource.id;
            TraceLogger_1.default.logVerboseWithLogEntry(logSource, logEntry);
            assert.isTrue(errorHelperVerboseStub.calledOnce, 'ErrorHelper logVerbose is called');
            assert.isTrue(errorHelperVerboseStub.alwaysCalledWith(logEntry.toString(), expectedEventName));
            done();
        });
        it('TraceLogger test: logVerboseWithLogEntry with customized eventName and resultCode', function (done) {
            var logEntry = new LogEntry_1.default('[SPClientAction]', LogFeature_1.default.None, LogType_1.default.Event, {
                'ErrorMessage': 'This is error message'
            });
            var eventName = 'SPClient-Perfect';
            var expectedEventName = logSource.id + "." + eventName;
            TraceLogger_1.default.logVerboseWithLogEntry(logSource, logEntry, eventName);
            assert.isTrue(errorHelperVerboseStub.calledOnce, 'ErrorHelper logVerbose is called');
            assert.isTrue(errorHelperVerboseStub.alwaysCalledWith(logEntry.toString(), expectedEventName));
            done();
        });
    });
});

//# sourceMappingURL=TraceLogger.test.js.map
