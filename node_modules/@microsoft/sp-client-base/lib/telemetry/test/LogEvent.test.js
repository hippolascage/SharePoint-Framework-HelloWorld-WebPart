"use strict";
var LogEvent_1 = require('../Api/LogEvent');
var LogLevel_1 = require('../Api/LogLevel');
var ServiceScope_1 = require('../../serviceScope/ServiceScope');
var LogSource_1 = require('../Api/LogSource');
var assert = chai.assert;
describe('LogEvent', function () {
    describe('#constructor', function () {
        it('should fail when source is undefined', function () {
            assert.throws(function () {
                /* tslint:disable:no-unused-expression */
                new LogEvent_1.default(undefined, 'a good message', LogLevel_1.LogLevel.Info);
                /* tslint:enable:no-unused-expression */
            }, Error);
        });
        it('should fail when data is undefined', function () {
            assert.throws(function () {
                /* tslint:disable:no-unused-expression */
                new LogEvent_1.default('test1', undefined, LogLevel_1.LogLevel.Info);
                /* tslint:enable:no-unused-expression */
            }, Error);
        });
    });
    describe('#toString', function () {
        it('serialize a verbose message', function () {
            var event = new LogEvent_1.default('source1', 'Some verbose message', LogLevel_1.LogLevel.Verbose);
            assert.equal(event.toString(), '[source1] Some verbose message');
        });
        it('serialize a info message', function () {
            var event = new LogEvent_1.default('source1', 'Some info', LogLevel_1.LogLevel.Info);
            assert.equal(event.toString(), '[source1] Some info');
        });
        it('serialize a warning message', function () {
            var event = new LogEvent_1.default('source1', 'Some warning', LogLevel_1.LogLevel.Warning);
            assert.equal(event.toString(), '[source1] Some warning');
        });
        it('serialize an error message', function () {
            var error = new Error('Some error');
            var event = new LogEvent_1.default('source1', error, LogLevel_1.LogLevel.Error);
            assert.equal(event.toString(), "[source1] " + error.toString());
        });
        it('serialize a message with long source', function () {
            var source = 'source123456789123456789';
            var event = new LogEvent_1.default(source, 'message', LogLevel_1.LogLevel.Verbose);
            var truncatedSource = source.substr(0, 20);
            assert.equal(event.toString(), "[" + truncatedSource + "] message", 'source is truncated');
        });
        it('serialize a message with a scope provided', function () {
            var scope = ServiceScope_1.default.startNewRoot();
            scope.provide(LogSource_1.logSourceServiceKey, LogSource_1.default.create('scope1'));
            scope.finish();
            var event = new LogEvent_1.default('source1', 'message', LogLevel_1.LogLevel.Warning, scope);
            assert.equal(event.toString(), '[scope1.source1] message');
        });
    });
});

//# sourceMappingURL=LogEvent.test.js.map
