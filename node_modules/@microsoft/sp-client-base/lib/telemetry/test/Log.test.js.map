{"version":3,"sources":["telemetry/test/Log.test.ts"],"names":[],"mappings":";AAAA,oBAAgB,QAAQ,CAAC,CAAA;AAEzB,IAAM,MAAM,GAAsB,IAAI,CAAC,MAAM,CAAC;AAE9C,QAAQ,CAAC,KAAK,EAAE;IACd,IAAI,cAA+B,CAAC;IACpC,IAAI,eAAgC,CAAC;IACrC,IAAI,eAAgC,CAAC;IACrC,IAAI,gBAAiC,CAAC;IAEtC,UAAU,CAAC;QACT,cAAc,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QAC5C,eAAe,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QAC9C,eAAe,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QAC9C,gBAAgB,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC;QACR,cAAc,CAAC,OAAO,EAAE,CAAC;QACzB,eAAe,CAAC,OAAO,EAAE,CAAC;QAC1B,eAAe,CAAC,OAAO,EAAE,CAAC;QAC1B,gBAAgB,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sBAAsB,EAAE;QACzB,aAAG,CAAC,OAAO,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;QAClC,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,UAAU,CAAC,mBAAmB,CAAC,CAAC,CAAC;IAChE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4BAA4B,EAAE;QAC/B,aAAG,CAAC,IAAI,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;QAC/B,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,mBAAmB,CAAC,CAAC,CAAC;IACjE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,cAAc,EAAE;QACjB,aAAG,CAAC,IAAI,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;QAC/B,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,mBAAmB,CAAC,CAAC,CAAC;IACjE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,YAAY,EAAE;QACf,IAAM,KAAK,GAAU,IAAI,KAAK,CAAC,SAAS,CAAC,CAAC;QAC1C,aAAG,CAAC,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;QAC5B,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,UAAU,CAAC,eAAa,KAAK,CAAC,QAAQ,EAAI,CAAC,CAAC,CAAC;IAC9E,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"telemetry/test/Log.test.js","sourcesContent":["import Log from '../Log';\r\n\r\nconst assert: Chai.AssertStatic = chai.assert;\r\n\r\ndescribe('Log', () => {\r\n  let consoleLogStub: Sinon.SinonStub;\r\n  let consoleInfoStub: Sinon.SinonStub;\r\n  let consoleWarnStub: Sinon.SinonStub;\r\n  let consoleErrorStub: Sinon.SinonStub;\r\n\r\n  beforeEach(() => {\r\n    consoleLogStub = sinon.stub(console, 'log');\r\n    consoleInfoStub = sinon.stub(console, 'info');\r\n    consoleWarnStub = sinon.stub(console, 'warn');\r\n    consoleErrorStub = sinon.stub(console, 'error');\r\n  });\r\n\r\n  afterEach(() => {\r\n    consoleLogStub.restore();\r\n    consoleInfoStub.restore();\r\n    consoleWarnStub.restore();\r\n    consoleErrorStub.restore();\r\n  });\r\n\r\n  it('logs verbose message', () => {\r\n    Log.verbose('source2', 'message');\r\n    assert.isTrue(consoleLogStub.calledWith('[source2] message'));\r\n  });\r\n\r\n  it('logs informational message', () => {\r\n    Log.info('source2', 'message');\r\n    assert.isTrue(consoleInfoStub.calledWith('[source2] message'));\r\n  });\r\n\r\n  it('logs warning', () => {\r\n    Log.warn('source2', 'message');\r\n    assert.isTrue(consoleWarnStub.calledWith('[source2] message'));\r\n  });\r\n\r\n  it('logs error', () => {\r\n    const error: Error = new Error('message');\r\n    Log.error('source2', error);\r\n    assert.isTrue(consoleErrorStub.calledWith(`[source2] ${error.toString()}`));\r\n  });\r\n});\r\n"],"sourceRoot":"/src"}