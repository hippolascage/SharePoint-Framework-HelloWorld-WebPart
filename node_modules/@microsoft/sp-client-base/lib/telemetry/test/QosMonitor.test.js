"use strict";
var assert = chai.assert;
var QosMonitor_1 = require('../Api/QosMonitor');
var odsp_utilities_bundle_1 = require('@ms/odsp-utilities-bundle');
describe('QosMonitor tests', function () {
    describe('Testing Apis in QosMonitor', function () {
        var qosLogger;
        var qosEndStub;
        var senarioName = 'TestSenario';
        beforeEach(function () {
            qosLogger = new QosMonitor_1.default('TestSenario');
            qosEndStub = sinon.stub(qosLogger.qos, 'end');
        });
        afterEach(function () {
            qosLogger = undefined;
            if (qosEndStub) {
                qosEndStub.restore();
            }
        });
        it('QosMonitor test: CreateAndStartMonitor with normal senario name', function (done) {
            assert.isNotNull(qosLogger.qos);
            assert.isTrue(qosLogger.qos.data.name === senarioName);
            assert.isTrue(qosLogger.qos.enabled);
            assert.isTrue(qosLogger.qos.shortEventName === 'Qos');
            done();
        });
        it('QosMonitor test: WriteSuccess', function (done) {
            qosLogger.writeSuccess();
            assert.isTrue(qosEndStub.calledOnce, 'Qos end is called');
            assert.isTrue(qosEndStub.alwaysCalledWith({ resultType: odsp_utilities_bundle_1.ResultTypeEnum.Success }));
            done();
        });
        it('QosMonitor test: WriteUnExpectedFailure', function (done) {
            qosLogger.writeUnexpectedFailure();
            assert.isTrue(qosEndStub.calledOnce, 'Qos end is called');
            assert.isTrue(qosEndStub.alwaysCalledWith({
                resultCode: 'DefaultUnexpected',
                resultType: odsp_utilities_bundle_1.ResultTypeEnum.Failure,
                extraData: undefined
            }));
            done();
        });
        it('QosMonitor test: WriteFailureWithFailureTag', function (done) {
            var tagName = 'failureTag';
            var errorMessage = 'This is failure message for';
            qosLogger.writeUnexpectedFailure(tagName, new Error(errorMessage));
            assert.isTrue(qosEndStub.calledOnce, 'Qos end is called');
            assert.isTrue(qosEndStub.alwaysCalledWith({
                resultCode: tagName,
                resultType: odsp_utilities_bundle_1.ResultTypeEnum.Failure,
                error: errorMessage,
                extraData: undefined
            }));
            done();
        });
        it('QosMonitor test: WriteUnExpectedFailure with extra data', function (done) {
            var extraData = { 'foo': 'bar' };
            qosLogger.writeUnexpectedFailure('tag', undefined, extraData);
            assert.isTrue(qosEndStub.calledOnce, 'Qos end is called');
            assert.isTrue(qosEndStub.alwaysCalledWith({
                resultCode: 'tag',
                resultType: odsp_utilities_bundle_1.ResultTypeEnum.Failure,
                extraData: extraData
            }));
            done();
        });
        it('QosMonitor test: writeExpectedFailure', function (done) {
            qosLogger.writeExpectedFailure();
            assert.isTrue(qosEndStub.calledOnce, 'Qos end is called');
            assert.isTrue(qosEndStub.alwaysCalledWith({
                resultCode: 'DefaultExpected',
                resultType: odsp_utilities_bundle_1.ResultTypeEnum.ExpectedFailure,
                extraData: undefined
            }));
            done();
        });
        it('QosMonitor test: WriteExpectedFailureWithFailureTag', function (done) {
            var tagName = 'failureTag';
            var errorMessage = 'This is failure message for';
            qosLogger.writeUnexpectedFailure(tagName, new Error(errorMessage));
            assert.isTrue(qosEndStub.calledOnce, 'Qos end is called');
            assert.isTrue(qosEndStub.alwaysCalledWith({
                resultCode: tagName,
                resultType: odsp_utilities_bundle_1.ResultTypeEnum.Failure,
                error: errorMessage,
                extraData: undefined
            }));
            done();
        });
    });
});

//# sourceMappingURL=QosMonitor.test.js.map
