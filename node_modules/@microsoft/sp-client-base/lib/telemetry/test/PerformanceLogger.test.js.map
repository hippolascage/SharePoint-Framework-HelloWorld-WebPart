{"version":3,"sources":["telemetry/test/PerformanceLogger.test.ts"],"names":[],"mappings":"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","file":"telemetry/test/PerformanceLogger.test.js","sourcesContent":["import PerformanceLogger from '../Api/PerformanceLogger';\r\nimport { ErrorHelper, RumOneLogger } from '@ms/odsp-utilities-bundle';\r\nconst assert: Chai.AssertStatic = chai.assert;\r\n\r\ndescribe('PerformanceLogger', () => {\r\n  let baseTime: number;\r\n  let logger: RumOneLogger;\r\n\r\n  beforeEach(() => {\r\n    baseTime = Date.now();\r\n    PerformanceLogger.initializeApplication('testApp');\r\n    logger = RumOneLogger.getRUMOneLogger();\r\n  });\r\n\r\n  describe('#fullPageLoad', () => {\r\n    it('should be true by default', () => {\r\n      assert.isTrue(PerformanceLogger.fullPageLoad);\r\n    });\r\n\r\n    it('should set full page load to be true', () => {\r\n      PerformanceLogger.fullPageLoad = true;\r\n      assert.isTrue(PerformanceLogger.fullPageLoad);\r\n    });\r\n\r\n    it('should set full page load to be false', () => {\r\n      PerformanceLogger.fullPageLoad = false;\r\n      assert.isFalse(PerformanceLogger.fullPageLoad);\r\n    });\r\n  });\r\n\r\n  describe('#startMarkForComponent', () => {\r\n    it('should set component start time', () => {\r\n      const tag: string = 'comp1';\r\n      PerformanceLogger.startMarkForComponent(tag);\r\n      assert.isTrue(PerformanceLogger.getComponentStartTime(tag) >= baseTime,\r\n        'Component start time is just set');\r\n    });\r\n  });\r\n\r\n  describe('#endMarkForComponent', () => {\r\n    it('should set component end time', () => {\r\n      const tag: string = 'comp1';\r\n      PerformanceLogger.startMarkForComponent(tag);\r\n      PerformanceLogger.endMarkForComponent(tag);\r\n      assert.isTrue(PerformanceLogger.getComponentEndTime(tag) >=\r\n        PerformanceLogger.getComponentStartTime(tag), 'Component end time is set after start time');\r\n    });\r\n  });\r\n\r\n  describe('#startMarkForApi', () => {\r\n    it('should set Api start time', () => {\r\n      const tag: string = 'api1';\r\n      PerformanceLogger.startMarkForApi(tag);\r\n      assert.isTrue(PerformanceLogger.getApiStartTime(tag) >= baseTime,\r\n        'Api start time is just set');\r\n    });\r\n  });\r\n\r\n  describe('#endMarkForApi', () => {\r\n    it('should set api end time', () => {\r\n      const tag: string = 'api1';\r\n      const requestUrl: string = 'http://contoso.sharepoint.com/api/sharepoint';\r\n      const response: Response = new Response();\r\n      PerformanceLogger.startMarkForApi(tag);\r\n      PerformanceLogger.endMarkForApi(tag, 'api', requestUrl, response);\r\n      assert.isTrue(PerformanceLogger.getApiEndTime(tag) >=\r\n      PerformanceLogger.getApiStartTime(tag), 'Api end time is set after start time');\r\n    });\r\n  });\r\n\r\n  describe('#endMarkForApi', () => {\r\n    it('should write api tag', () => {\r\n      const tag: string = 'api2';\r\n      const name: string = 'api';\r\n      const requestUrl: string = 'http://contoso.sharepoint.com/api/sharepoint';\r\n      const response: Response = new Response();\r\n      PerformanceLogger.startMarkForApi(tag);\r\n      PerformanceLogger.endMarkForApi(tag, name, requestUrl, response);\r\n      assert.equal(logger.readAPICallPerformanceData().length, 1, 'One api data is collected');\r\n      assert.equal(logger.readAPICallPerformanceData().shift().name, name, 'api tag is recorded');\r\n    });\r\n  });\r\n\r\n  describe('#endMarkForApi', () => {\r\n    it('should log error if api start time is not set', () => {\r\n      const tag: string = 'api3';\r\n      const requestUrl: string = 'http://contoso.sharepoint.com/api/sharepoint';\r\n      const response: Response = new Response();\r\n      const errorHelperLogStub: Sinon.SinonStub = sinon.stub(ErrorHelper, 'log');\r\n      PerformanceLogger.endMarkForApi(tag, 'api', requestUrl, response);\r\n      assert.isTrue(errorHelperLogStub.calledOnce, 'error is logged');\r\n      errorHelperLogStub.restore();\r\n    });\r\n  });\r\n\r\n  describe('#markApplicationStart', () => {\r\n    it('should record current time if mark is called', () => {\r\n      PerformanceLogger.markApplicationStart();\r\n      assert.isTrue(PerformanceLogger.getApplicationStartTime() >= baseTime, 'Mark should record current time.');\r\n    });\r\n  });\r\n});\r\n\r\n"],"sourceRoot":"/src"}