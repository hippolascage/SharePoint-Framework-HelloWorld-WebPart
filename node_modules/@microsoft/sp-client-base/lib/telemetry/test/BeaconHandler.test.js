"use strict";
var odsp_utilities_bundle_1 = require('@ms/odsp-utilities-bundle');
var BeaconHandlers_1 = require('../Api/BeaconHandlers');
var odsp_utilities_bundle_2 = require('@ms/odsp-utilities-bundle');
var CloneEventUtils_1 = require('./TestUtils/CloneEventUtils');
var CloneEventUtils_2 = require('./TestUtils/CloneEventUtils');
var assert = chai.assert;
describe('BeaconHandlers tests', function () {
    describe('Testing functions in BeaconHandlers', function () {
        var senarioName = 'test';
        var senarioResultCode = 'tag';
        var beaconHandlers;
        beforeEach(function () {
            beaconHandlers = new BeaconHandlers_1.default();
        });
        afterEach(function () {
            if (beaconHandlers) {
                beaconHandlers = undefined;
            }
        });
        it('BeaconHandlers test: qosEventNameHandler start', function (done) {
            var eventData = new CloneEventUtils_1.CloneEventData(senarioResultCode, odsp_utilities_bundle_1.ResultTypeEnum.Success);
            var event = new CloneEventUtils_2.default(1, eventData, odsp_utilities_bundle_2.ClonedEventType.Start);
            var name = beaconHandlers.qosEventNameHandler(event, senarioName);
            assert.isNotNull(name);
            assert.isTrue(name === senarioName + '.' + 'Start');
            done();
        });
        it('BeaconHandlers test: qosEventNameHandler end with success', function (done) {
            var eventData = new CloneEventUtils_1.CloneEventData(senarioResultCode, odsp_utilities_bundle_1.ResultTypeEnum.Success);
            var event = new CloneEventUtils_2.default(1, eventData, odsp_utilities_bundle_2.ClonedEventType.End);
            var name = beaconHandlers.qosEventNameHandler(event, senarioName);
            assert.isNotNull(name);
            assert.isTrue(name === senarioName + '.' + senarioResultCode + '.' + 'Success');
            done();
        });
        it('BeaconHandlers test: qosEventNameHandler end with Failure', function (done) {
            var eventData = new CloneEventUtils_1.CloneEventData(senarioResultCode, odsp_utilities_bundle_1.ResultTypeEnum.Failure);
            var event = new CloneEventUtils_2.default(1, eventData, odsp_utilities_bundle_2.ClonedEventType.End);
            var name = beaconHandlers.qosEventNameHandler(event, senarioName);
            assert.isNotNull(name);
            assert.isTrue(name === senarioName + '.' + senarioResultCode + '.' + 'Failure');
            done();
        });
        it('BeaconHandlers test: qosEventNameHandler end with ExpectedFailure', function (done) {
            var eventData = new CloneEventUtils_1.CloneEventData(senarioResultCode, odsp_utilities_bundle_1.ResultTypeEnum.ExpectedFailure);
            var event = new CloneEventUtils_2.default(1, eventData, odsp_utilities_bundle_2.ClonedEventType.End);
            var name = beaconHandlers.qosEventNameHandler(event, senarioName);
            assert.isNotNull(name);
            assert.isTrue(name === senarioName + '.' + senarioResultCode + '.' + 'ExpectedFailure');
            done();
        });
    });
});

//# sourceMappingURL=BeaconHandler.test.js.map
