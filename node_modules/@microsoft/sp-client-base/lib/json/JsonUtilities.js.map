{"version":3,"sources":["json/JsonUtilities.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;AAEH;;;;;;;GAOG;AAEH;IAAA;IAuDA,CAAC;IAjCC;;;;;;;;;;;;;;;;;;;;;OAqBG;IACW,oBAAM,GAApB,UAAqB,IAAY;QAC/B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YACV,MAAM,CAAC,SAAS,CAAC;QACnB,CAAC;QAED,aAAa,CAAC,eAAe,CAAC,SAAS,GAAG,CAAC,CAAC;QAC5C,MAAM,CAAC,aAAa,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,EAAE,UAAC,CAAS;YAC7F,IAAM,CAAC,GAAW,aAAa,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;YACpD,MAAM,CAAC,OAAO,CAAC,KAAK,QAAQ,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAC/F,CAAC,CAAC,GAAG,IAAI,CAAC;IACZ,CAAC;IApDD;;OAEG;IAEH,oCAAoC;IACrB,6BAAe,GAC5B,4HAA4H,CAAC;IAC/H,mCAAmC;IAEpB,8BAAgB,GAA8B;QAC3D,IAAI,EAAE,KAAK;QACX,IAAI,EAAE,KAAK;QACX,IAAI,EAAE,KAAK;QACX,IAAI,EAAE,KAAK;QACX,IAAI,EAAE,KAAK;QACX,GAAG,EAAE,KAAK;QACV,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,MAAM;KACb,CAAC;IAmCJ,oBAAC;AAAD,CAvDA,AAuDC,IAAA;AAvDD;+BAuDC,CAAA","file":"json/JsonUtilities.js","sourcesContent":["/**\r\n * @copyright (c) Microsoft Corporation. All rights reserved.\r\n *\r\n * Utililty code to help manipulate JSON objects/strings.\r\n */\r\n\r\n/**\r\n * This class is expected to provide functionality required to manage/transport/parse JSON objects.\r\n * The client side framework architecture heavily relies on JSON object format. Although the user agent\r\n * natively supports JSON objects but there are missing or incompleted pieces of functionality where\r\n * we need to augment the user agent apis.\r\n *\r\n * @see {@link http://www.json.org}\r\n */\r\n\r\nexport default class JsonUtilities {\r\n\r\n  /**\r\n   * The list of characters that need to be escaped and their substitute characters\r\n   */\r\n\r\n  /* tslint:disable:max-line-length */\r\n  private static _escapableChars: RegExp =\r\n    /[\\\\\\\"\\'\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g;\r\n  /* tslint:enable:max-line-length */\r\n\r\n  private static _substibuteChars: { [key: string]: string } = {\r\n    '\\b': '\\\\b',\r\n    '\\t': '\\\\t',\r\n    '\\n': '\\\\n',\r\n    '\\f': '\\\\f',\r\n    '\\r': '\\\\r',\r\n    '\"': '\\\\\"',\r\n    '\\'': '\\\\\\'',\r\n    '\\\\': '\\\\\\\\'\r\n  };\r\n\r\n  /**\r\n   * Encode a json string such that it can be safely transported over a network and be processed\r\n   * in the server side code. And also safely transported back to the client and consumed by\r\n   * JSON.parse().\r\n   *\r\n   * @param json - the json string to encode.\r\n   * @internalremarks - THIS IS NOT INTENDED FOR PUBLIC DOCUMENTATION. Need for this stems from the\r\n   * fact that JSON.stringify() does not encode all the required characters to make it safe to be\r\n   * transported over a network. Neither does it provide an option to. Further, one might think\r\n   * that JSON is a subset of Javascript, but it turns out that it is not. It allows for certain\r\n   * characters that are treated as syntax errors in Javascript. On top of that the .Net WCF\r\n   * javascript deserializer expects the JSON strings in certain format for it deserialize them\r\n   * correctly. All in all, we need to do some special encoding to transport JSON strings over the\r\n   * network. This implementation has been running very robustly in the pointpublishing-blogs and\r\n   * hence I a just porting it and not tweaking the implemenation. Please talk to\r\n   * manishga@microsoft.com in case you need to make changes to this encoding scheme.\r\n   *\r\n   * @see {@link http://www.json.org}\r\n   *      {@link https://github.com/judofyr/timeless/commit/9212af0a8d2124b92a7e4c6355007e4b4b0ae71d}\r\n   *      {@link https://en.wikipedia.org/wiki/JSON}\r\n   *\r\n   */\r\n  public static encode(json: string): string {\r\n    if (!json) {\r\n      return undefined;\r\n    }\r\n\r\n    JsonUtilities._escapableChars.lastIndex = 0;\r\n    return JsonUtilities._escapableChars.test(json) ? json.replace(this._escapableChars, (a: string): string => {\r\n      const c: string = JsonUtilities._substibuteChars[a];\r\n      return typeof c === 'string' ? c : '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\r\n    }) : json;\r\n  }\r\n}"],"sourceRoot":"/src"}