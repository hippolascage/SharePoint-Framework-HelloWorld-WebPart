{"version":3,"sources":["json/test/JsonUtilities.test.ts"],"names":[],"mappings":"AAAA;;GAEG;;AAEH,qBAAuB,MAAM,CAAC,CAAA;AAE9B,8BAA0B,kBAAkB,CAAC,CAAA;AAE7C,IAAM,MAAM,GAAsB,IAAI,CAAC,MAAM,CAAC;AAE9C,QAAQ,CAAC,YAAY,EAAE;IAErB,IAAM,UAAU,GAAO;QACrB,iBAAiB,EAAE,SAAS;QAC5B,gCAAgC,EAAE,uBAAuB;QACzD,WAAW,EAAE;YACX,QAAQ,EAAE,SAAS;SACpB;KACF,CAAC;IAEF,EAAE,CAAC,yCAAyC,EAAE;QAC5C,oCAAoC;QACpC,aAAM,CAAC,uBAAa,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,SAAS,CAAC;QACnD,mCAAmC;QACnC,aAAM,CAAC,uBAAa,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,SAAS,CAAC;IAC1D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wBAAwB,EAAE;QAC3B,MAAM,CAAC,WAAW,CAAC,uBAAa,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,qBAAqB,CAAC,CAAC;QAC7E,MAAM,CAAC,WAAW,CAAC,uBAAa,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,eAAe,CAAC,CAAC;QACvE,MAAM,CAAC,WAAW,CAAC,uBAAa,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,oBAAoB,CAAC,CAAC;QAC5E,MAAM,CAAC,WAAW,CAAC,uBAAa,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,qBAAqB,CAAC,CAAC;QAC7E,MAAM,CAAC,WAAW,CAAC,uBAAa,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,2BAA2B,CAAC,CAAC;QACnF,MAAM,CAAC,WAAW,CAAC,uBAAa,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,KAAK,EAAE,wBAAwB,CAAC,CAAC;QAC/E,MAAM,CAAC,WAAW,CAAC,uBAAa,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,wBAAwB,CAAC,CAAC;QACjF,MAAM,CAAC,WAAW,CAAC,uBAAa,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,wBAAwB,CAAC,CAAC;QACjF,MAAM,CAAC,WAAW,CAAC,uBAAa,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,QAAQ,EAAE,mBAAmB,CAAC,CAAC;QAElF,oCAAoC;QACpC,MAAM,CAAC,WAAW,CAChB,uBAAa,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,EAChD,0LAA0L,EAC1L,aAAa,CAAC,CAAC;QAClB,mCAAmC;IACpC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"json/test/JsonUtilities.test.js","sourcesContent":["/**\r\n * @copyright (c) Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nimport { expect } from 'chai';\r\n\r\nimport JsonUtilities from '../JsonUtilities';\r\n\r\nconst assert: Chai.AssertStatic = chai.assert;\r\n\r\ndescribe('Json tests', () => {\r\n\r\n  const jsonObject: {} = {\r\n    simpleStringField: 'abc xyz',\r\n    stringFieldWithSpecialCharacters: 'abc\\b\\t\\n\\f\\r\"\\'\\\\xyz',\r\n    objectField: {\r\n      subField: 'abc xyz'\r\n    }\r\n  };\r\n\r\n  it('Returns null for null or undefined json', () => {\r\n    /* tslint:disable:no-null-keyword */\r\n    expect(JsonUtilities.encode(null)).to.be.undefined;\r\n    /* tslint:enable:no-null-keyword */\r\n    expect(JsonUtilities.encode(undefined)).to.be.undefined;\r\n  });\r\n\r\n  it('Encodes json correctly', () => {\r\n    assert.strictEqual(JsonUtilities.encode('\\b'), '\\\\b', 'backspace character');\r\n    assert.strictEqual(JsonUtilities.encode('\\t'), '\\\\t', 'tab character');\r\n    assert.strictEqual(JsonUtilities.encode('\\n'), '\\\\n', 'new line character');\r\n    assert.strictEqual(JsonUtilities.encode('\\f'), '\\\\f', 'form feed character');\r\n    assert.strictEqual(JsonUtilities.encode('\\r'), '\\\\r', 'carriage return character');\r\n    assert.strictEqual(JsonUtilities.encode('\"'), '\\\\\"', 'double quote character');\r\n    assert.strictEqual(JsonUtilities.encode('\\''), '\\\\\\'', 'single quote character');\r\n    assert.strictEqual(JsonUtilities.encode('\\\\'), '\\\\\\\\', 'single quote character');\r\n    assert.strictEqual(JsonUtilities.encode('\\u2048'), '\\u2048', 'unicode character');\r\n\r\n    /* tslint:disable:max-line-length */\r\n    assert.strictEqual(\r\n      JsonUtilities.encode(JSON.stringify(jsonObject)),\r\n      '{\\\\\"simpleStringField\\\\\":\\\\\"abc xyz\\\\\",\\\\\"stringFieldWithSpecialCharacters\\\\\":\\\\\"abc\\\\\\\\b\\\\\\\\t\\\\\\\\n\\\\\\\\f\\\\\\\\r\\\\\\\\\\\\\"\\\\\\'\\\\\\\\\\\\\\\\xyz\\\\\",\\\\\"objectField\\\\\":{\\\\\"subField\\\\\":\\\\\"abc xyz\\\\\"}}',\r\n      'json object');\r\n\t  /* tslint:enable:max-line-length */\r\n  });\r\n});\r\n"],"sourceRoot":"/src"}