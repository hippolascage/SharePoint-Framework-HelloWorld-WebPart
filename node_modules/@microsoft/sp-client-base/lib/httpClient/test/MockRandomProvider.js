"use strict";
/**
 * This is a test implementation of IRandomProvider that provides
 * a reproducible sequence of reasonably pseudorandom numbers.
 */
var MockRandomProvider = (function () {
    function MockRandomProvider(serviceScope) {
        this.reset();
    }
    /**
     * Reset the sequence.
     */
    MockRandomProvider.prototype.reset = function (seed) {
        // The seed cannot be zero
        this._seed = (seed && seed !== 0) ? seed : 1;
    };
    /**
     * IRandomProvider implementation
     */
    MockRandomProvider.prototype.getRandom = function () {
        return this._generateInt32() / MockRandomProvider.MODULUS;
    };
    MockRandomProvider.prototype._generateInt32 = function () {
        // This is the classic Lehmer random number generator.  (I love codin')
        var seedHi = Math.floor(this._seed / MockRandomProvider.MODULUS_HIGH);
        var seedLow = this._seed % MockRandomProvider.MODULUS_HIGH;
        this._seed = MockRandomProvider.MULTIPLIER * seedLow - MockRandomProvider.MODULUS_LOW * seedHi;
        if (this._seed <= 0) {
            this._seed += MockRandomProvider.MODULUS;
        }
        return this._seed;
    };
    MockRandomProvider.MULTIPLIER = 48271;
    MockRandomProvider.MODULUS = 2147483647;
    MockRandomProvider.MODULUS_HIGH = Math.floor(MockRandomProvider.MODULUS / MockRandomProvider.MULTIPLIER);
    MockRandomProvider.MODULUS_LOW = MockRandomProvider.MODULUS % MockRandomProvider.MULTIPLIER;
    return MockRandomProvider;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = MockRandomProvider;

//# sourceMappingURL=MockRandomProvider.js.map
