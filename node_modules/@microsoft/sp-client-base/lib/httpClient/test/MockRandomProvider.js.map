{"version":3,"sources":["httpClient/test/MockRandomProvider.ts"],"names":[],"mappings":";AAGA;;;GAGG;AACH;IAUE,4BAAY,YAA0B;QACpC,IAAI,CAAC,KAAK,EAAE,CAAC;IACf,CAAC;IAED;;OAEG;IACI,kCAAK,GAAZ,UAAa,IAAa;QACxB,0BAA0B;QAC1B,IAAI,CAAC,KAAK,GAAG,CAAC,IAAI,IAAI,IAAI,KAAK,CAAC,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC;IAC/C,CAAC;IAED;;OAEG;IACI,sCAAS,GAAhB;QACE,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,GAAG,kBAAkB,CAAC,OAAO,CAAC;IAC5D,CAAC;IAEO,2CAAc,GAAtB;QACE,uEAAuE;QACvE,IAAM,MAAM,GAAW,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,GAAG,kBAAkB,CAAC,YAAY,CAAC,CAAC;QAChF,IAAM,OAAO,GAAW,IAAI,CAAC,KAAK,GAAG,kBAAkB,CAAC,YAAY,CAAC;QAErE,IAAI,CAAC,KAAK,GAAG,kBAAkB,CAAC,UAAU,GAAG,OAAO,GAAG,kBAAkB,CAAC,WAAW,GAAG,MAAM,CAAC;QAE/F,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC;YACpB,IAAI,CAAC,KAAK,IAAI,kBAAkB,CAAC,OAAO,CAAC;QAC3C,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAxCc,6BAAU,GAAW,KAAK,CAAC;IAC3B,0BAAO,GAAW,UAAU,CAAC;IAC7B,+BAAY,GACvB,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,OAAO,GAAG,kBAAkB,CAAC,UAAU,CAAC,CAAC;IAC5D,8BAAW,GACtB,kBAAkB,CAAC,OAAO,GAAG,kBAAkB,CAAC,UAAU,CAAC;IAoCjE,yBAAC;AAAD,CA1CA,AA0CC,IAAA;AA1CD;oCA0CC,CAAA","file":"httpClient/test/MockRandomProvider.js","sourcesContent":["import ServiceScope from '../../serviceScope/ServiceScope';\r\nimport { IRandomProvider} from '../../common/RandomProvider';\r\n\r\n/**\r\n * This is a test implementation of IRandomProvider that provides\r\n * a reproducible sequence of reasonably pseudorandom numbers.\r\n */\r\nexport default class MockRandomProvider implements IRandomProvider {\r\n  private static MULTIPLIER: number = 48271;\r\n  private static MODULUS: number = 2147483647;\r\n  private static MODULUS_HIGH: number\r\n    = Math.floor(MockRandomProvider.MODULUS / MockRandomProvider.MULTIPLIER);\r\n  private static MODULUS_LOW: number\r\n    = MockRandomProvider.MODULUS % MockRandomProvider.MULTIPLIER;\r\n\r\n  private _seed: number;\r\n\r\n  constructor(serviceScope: ServiceScope) {\r\n    this.reset();\r\n  }\r\n\r\n  /**\r\n   * Reset the sequence.\r\n   */\r\n  public reset(seed?: number): void {\r\n    // The seed cannot be zero\r\n    this._seed = (seed && seed !== 0) ? seed : 1;\r\n  }\r\n\r\n  /**\r\n   * IRandomProvider implementation\r\n   */\r\n  public getRandom(): number {\r\n    return this._generateInt32() / MockRandomProvider.MODULUS;\r\n  }\r\n\r\n  private _generateInt32(): number {\r\n    // This is the classic Lehmer random number generator.  (I love codin')\r\n    const seedHi: number = Math.floor(this._seed / MockRandomProvider.MODULUS_HIGH);\r\n    const seedLow: number = this._seed % MockRandomProvider.MODULUS_HIGH;\r\n\r\n    this._seed = MockRandomProvider.MULTIPLIER * seedLow - MockRandomProvider.MODULUS_LOW * seedHi;\r\n\r\n    if (this._seed <= 0) {\r\n      this._seed += MockRandomProvider.MODULUS;\r\n    }\r\n\r\n    return this._seed;\r\n  }\r\n}\r\n"],"sourceRoot":"/src"}