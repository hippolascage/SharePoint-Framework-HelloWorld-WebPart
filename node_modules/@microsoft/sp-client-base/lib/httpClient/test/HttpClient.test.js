"use strict";
var ServiceScope_1 = require('../../serviceScope/ServiceScope');
var HttpClient_1 = require('../HttpClient');
var MockFetchProvider_1 = require('./MockFetchProvider');
var FetchProvider_1 = require('../FetchProvider');
var MockRandomProvider_1 = require('./MockRandomProvider');
var RandomProvider_1 = require('../../common/RandomProvider');
var PerformanceLogger_1 = require('../../telemetry/Api/PerformanceLogger');
var LogSource_1 = require('../../telemetry/Api/LogSource');
var assert = chai.assert;
describe('HttpClient tests', function () {
    var rootScope = ServiceScope_1.default.startNewRoot();
    var fetchProvider = new MockFetchProvider_1.default(rootScope);
    rootScope.provide(FetchProvider_1.fetchProviderServiceKey, fetchProvider);
    var randomProvider = new MockRandomProvider_1.default(rootScope);
    rootScope.provide(RandomProvider_1.randomProviderServiceKey, randomProvider);
    rootScope.finish();
    var httpClient = new HttpClient_1.default(rootScope);
    beforeEach(function () {
        PerformanceLogger_1.default.initializeApplication('HttpClientTest');
    });
    describe('Test basic fetching behavior', function () {
        it('should add headers for a basic GET request', function (done) {
            fetchProvider.expect({
                expectedUrl: 'http://example.com/_api/test01',
                expectedRequestHeaders: [
                    new MockFetchProvider_1.MockedHeader('Accept', 'application/json;odata.metadata=minimal')
                ],
                requestAssertions: function (request) {
                    assert.strictEqual(request.credentials, 'same-origin');
                    assert.isFalse(request.headers.has('X-RequestDigest'));
                },
                responseObject: { 'data': 123 }
            });
            httpClient.get('http://example.com/_api/test01')
                .then(function (response) {
                return response.json();
            }).then(function (responseObject) {
                assert.equal(responseObject.data, 123);
                done();
            }).catch(function (error) {
                done(error);
            });
        });
    });
    describe('Test instrumentation', function () {
        it('should mark API time for a basic GET request', function (done) {
            var baseTime = Date.now() - 1;
            fetchProvider.expect({
                expectedUrl: 'http://example.com/_api/test01',
                responseObject: { 'data': 123 }
            });
            randomProvider.reset(1);
            httpClient.get('http://example.com/_api/test01')
                .then(function (response) {
                randomProvider.reset(1);
                var tag = 'httpClient.' + (Math.floor(randomProvider.getRandom() * 100000)).toString();
                assert.isAbove(PerformanceLogger_1.default.getApiStartTime(tag), baseTime, 'start time is set');
                assert.isTrue(PerformanceLogger_1.default.getApiEndTime(tag) >=
                    PerformanceLogger_1.default.getApiStartTime(tag), 'End time should be after start time');
                done();
            }).catch(function (error) {
                done(error);
            });
        });
        it('should record scope source in API data', function (done) {
            var baseTime = Date.now() - 1;
            var anotherScope = rootScope.startNewChild();
            anotherScope.provide(LogSource_1.logSourceServiceKey, LogSource_1.default.create('anotherScope'));
            anotherScope.finish();
            var otherClient = new HttpClient_1.default(anotherScope);
            fetchProvider.expect({
                expectedUrl: 'http://example.com/_api/test01',
                responseObject: { 'data': 123 }
            });
            randomProvider.reset(1);
            otherClient.get('http://example.com/_api/test01')
                .then(function (response) {
                randomProvider.reset(1);
                var tag = 'anotherScope.' + (Math.floor(randomProvider.getRandom() * 100000)).toString();
                assert.isAbove(PerformanceLogger_1.default.getApiStartTime(tag), baseTime, 'start time is set');
                assert.isTrue(PerformanceLogger_1.default.getApiEndTime(tag) >=
                    PerformanceLogger_1.default.getApiStartTime(tag), 'End time should be after start time');
                done();
            }).catch(function (error) {
                done(error);
            });
        });
    });
    describe('Test adding custom headers', function () {
        it('should mix custom headers with automatic headers', function (done) {
            fetchProvider.expect({
                expectedUrl: 'http://example.com/_api/test01',
                expectedRequestHeaders: [
                    new MockFetchProvider_1.MockedHeader('Accept', 'something-custom'),
                    new MockFetchProvider_1.MockedHeader('OData-Version', '4.0')
                ],
                responseObject: {}
            });
            httpClient.get('http://example.com/_api/test01', {
                headers: { 'Accept': 'something-custom' }
            }).then(function () {
                done();
            }).catch(function (error) {
                done(error);
            });
        });
    });
    describe('Test fetching behavior for basic cache hits and misses', function () {
        it('should fetch a digest for a POST request', function (done) {
            fetchProvider.expect({
                expectedUrl: 'http://example.com/_api/contextinfo',
                responseObject: {
                    'FormDigestValue': 'DIGEST_1',
                    'FormDigestTimeoutSeconds': 30
                }
            });
            fetchProvider.expect({
                expectedUrl: 'http://example.com/_api/test02',
                expectedRequestHeaders: [
                    new MockFetchProvider_1.MockedHeader('Accept', 'application/json;odata.metadata=minimal'),
                    new MockFetchProvider_1.MockedHeader('Content-type', 'application/json;charset=utf-8'),
                    new MockFetchProvider_1.MockedHeader('X-RequestDigest', 'DIGEST_1')
                ],
                responseObject: { 'data': 321 }
            });
            httpClient.post('http://example.com/_api/test02', {})
                .then(function (response) {
                return response.json();
            }).then(function (responseObject) {
                assert.equal(responseObject.data, 321);
                done();
            }).catch(function (error) {
                done(error);
            });
        });
    });
});

//# sourceMappingURL=HttpClient.test.js.map
