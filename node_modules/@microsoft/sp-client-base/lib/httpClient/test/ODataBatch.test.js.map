{"version":3,"sources":["httpClient/test/ODataBatch.test.ts"],"names":[],"mappings":"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","file":"httpClient/test/ODataBatch.test.js","sourcesContent":["import ServiceScope from '../../serviceScope/ServiceScope';\r\nimport ODataBatch from '../ODataBatch';\r\nimport MockFetchProvider, { MockedHeader } from './MockFetchProvider';\r\nimport MockRandomProvider from './MockRandomProvider';\r\nimport { fetchProviderServiceKey } from '../FetchProvider';\r\nimport { randomProviderServiceKey } from '../../common/RandomProvider';\r\n\r\nconst assert: Chai.AssertStatic = chai.assert;\r\n\r\ndescribe('ODataBatch tests', () => {\r\n\r\n  describe('Main scenario', () => {\r\n\r\n    const rootScope: ServiceScope = ServiceScope.startNewRoot();\r\n\r\n    const fetchProvider: MockFetchProvider = new MockFetchProvider(rootScope);\r\n    rootScope.provide(fetchProviderServiceKey, fetchProvider);\r\n\r\n    // This ensures that ODataBatch generates deterministic GUIDs\r\n    const randomProvider: MockRandomProvider = new MockRandomProvider(rootScope);\r\n    rootScope.provide(randomProviderServiceKey, randomProvider);\r\n\r\n    rootScope.finish();\r\n\r\n    // ----------------------------------------------------------------------------------------------------\r\n    it('should batch a single GET request', (done: MochaDone): void => {\r\n      // First it needs to fetch the digest for the upcoming POST\r\n      fetchProvider.expect({\r\n        expectedUrl: 'http://example.com/_api/contextinfo',\r\n        responseObject: {\r\n          'FormDigestValue': 'DIGEST_1',\r\n          'FormDigestTimeoutSeconds': 30\r\n        }\r\n      });\r\n\r\n      // This is the actual REST call\r\n      fetchProvider.expect({\r\n        expectedUrl: 'http://example.com/_api/$batch',\r\n        expectedRequestHeaders: [\r\n          new MockedHeader('accept', 'application/json'),\r\n          new MockedHeader('odata-version', '4.0'),\r\n          new MockedHeader('content-type',\r\n            'multipart/mixed; boundary=batch_019ef386-4b18-49c9-8efb-f46eaef2de4e'),\r\n          new MockedHeader('x-requestdigest', 'DIGEST_1')\r\n        ],\r\n        expectedRequestObject: `\r\n--batch_019ef386-4b18-49c9-8efb-f46eaef2de4e\r\nContent-type: application/http\r\nContent-Transfer-Encoding: binary\r\n\r\nGET http://example.com/_api/batch01 HTTP/1.1\r\naccept: application/json;odata.metadata=minimal\r\n\r\n\r\n\r\n--batch_019ef386-4b18-49c9-8efb-f46eaef2de4e--\r\n`,\r\n        responseHeaders: [\r\n          new MockedHeader('Content-Type',\r\n            'multipart/mixed; boundary=batchresponse_8132cf43-7a45-4e72-828a-6f3a135b1f7e')\r\n        ],\r\n        responseContentLengthHeader: true,\r\n        responseObject: `\r\n--batchresponse_8132cf43-7a45-4e72-828a-6f3a135b1f7e\r\nContent-Type: application/http\r\nContent-Transfer-Encoding: binary\r\n\r\nHTTP/1.1 200 OK\r\nCONTENT-TYPE: application/json;odata=minimalmetadata;streaming=true;charset=utf-8\r\n\r\n{\"data\":12345}\r\n--batchresponse_8132cf43-7a45-4e72-828a-6f3a135b1f7e--\r\n`\r\n      });\r\n\r\n      const oDataBatch: ODataBatch = new ODataBatch(rootScope);\r\n\r\n      // This promise tracks a single GET request that is part of this batch\r\n      const fetchPromise: Promise<void> = oDataBatch.get('http://example.com/_api/batch01')\r\n        .then((response: Response) => {\r\n          return response.json();\r\n        }).then((responseObject: { data: number }) => {\r\n          assert.equal(responseObject.data, 12345);\r\n        });\r\n\r\n      // This promise tracks the execution of the batch\r\n      const executePromise: Promise<void> = oDataBatch.execute()\r\n        .then((batch: ODataBatch) => {\r\n          // Currently there aren't any interesting properties on the ODataBatch\r\n          // object, but eventually it might include statistics or metadata\r\n          return;\r\n        });\r\n\r\n      // Wait for both promises to resolve before the test is finished\r\n      Promise.all<void>([fetchPromise, executePromise])\r\n        .then(() => {\r\n          fetchProvider.assertQueueEmpty();\r\n          done();\r\n        })\r\n        .catch((error: Error) => {\r\n          done(error);\r\n        });\r\n    });\r\n\r\n    // ----------------------------------------------------------------------------------------------------\r\n    it('should batch multiple requests including a failed request', (done: MochaDone): void => {\r\n      // This is the actual REST call\r\n      fetchProvider.expect({\r\n        expectedUrl: 'http://example.com/_api/$batch',\r\n        expectedRequestHeaders: [\r\n          new MockedHeader('accept', 'application/json'),\r\n          new MockedHeader('odata-version', '4.0'),\r\n          new MockedHeader('content-type',\r\n            'multipart/mixed; boundary=batch_6486cb89-1969-4d7c-933c-1299b576ef92'),\r\n          new MockedHeader('x-requestdigest', 'DIGEST_1')\r\n        ],\r\n        expectedRequestObject: `\r\n--batch_6486cb89-1969-4d7c-933c-1299b576ef92\r\nContent-type: application/http\r\nContent-Transfer-Encoding: binary\r\n\r\nGET http://example.com/_api/test1 HTTP/1.1\r\nmy-custom-header: header value\r\naccept: application/json;odata.metadata=minimal\r\n\r\n\r\n\r\n--batch_6486cb89-1969-4d7c-933c-1299b576ef92\r\nContent-type: application/http\r\nContent-Transfer-Encoding: binary\r\n\r\nPOST http://example.com/_api/test2 HTTP/1.1\r\ncontent-type: application/json;charset=utf-8\r\naccept: application/json;odata.metadata=minimal\r\n\r\nBODY2\r\n\r\n--batch_6486cb89-1969-4d7c-933c-1299b576ef92\r\nContent-type: application/http\r\nContent-Transfer-Encoding: binary\r\n\r\nGET http://example.com/_api/test3 HTTP/1.1\r\naccept: application/json;odata.metadata=minimal\r\n\r\n\r\n\r\n--batch_6486cb89-1969-4d7c-933c-1299b576ef92--\r\n`,\r\n        responseHeaders: [\r\n          new MockedHeader('Content-Type',\r\n            'multipart/mixed; boundary=batchresponse_761bdf66-72c3-4938-a1f4-3baaf0a7f647')\r\n        ],\r\n        responseContentLengthHeader: true,\r\n        responseObject: `\r\n--batchresponse_761bdf66-72c3-4938-a1f4-3baaf0a7f647\r\nContent-Type: application/http\r\nContent-Transfer-Encoding: binary\r\n\r\nHTTP/1.1 200 OK\r\nCONTENT-TYPE: application/json;odata=minimalmetadata;streaming=true;charset=utf-8\r\n\r\n\"RESPONSE1\"\r\n--batchresponse_761bdf66-72c3-4938-a1f4-3baaf0a7f647\r\nContent-Type: application/http\r\nContent-Transfer-Encoding: binary\r\n\r\nHTTP/1.1 200 OK\r\nCONTENT-TYPE: application/json;odata=minimalmetadata;streaming=true;charset=utf-8\r\n\r\n\"RESPONSE2\"\r\n--batchresponse_761bdf66-72c3-4938-a1f4-3baaf0a7f647\r\nContent-Type: application/http\r\nContent-Transfer-Encoding: binary\r\n\r\nHTTP/1.1 500 Internal Server Error\r\nCONTENT-TYPE: application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false\r\n\r\n{ error: { code: \"-2146232832, Microsoft.SharePoint.SPException\",  message: \"Something went wrong.\" } }\r\n--batchresponse_761bdf66-72c3-4938-a1f4-3baaf0a7f647--\r\n`\r\n      });\r\n\r\n      const oDataBatch: ODataBatch = new ODataBatch(rootScope);\r\n\r\n      const fetchPromise1: Promise<void> = oDataBatch.get('http://example.com/_api/test1', {\r\n        headers: { 'My-Custom-Header': 'header value' }\r\n      }).then((response: Response) => {\r\n        return response.json();\r\n      }).then((responseObject: { data: number }) => {\r\n        assert.equal(responseObject, 'RESPONSE1');\r\n      });\r\n\r\n      const fetchPromise2: Promise<void> = oDataBatch.post('http://example.com/_api/test2', {\r\n        body: 'BODY2'\r\n      }).then((response: Response) => {\r\n        return response.json();\r\n      }).then((responseObject: { data: number }) => {\r\n        assert.equal(responseObject, 'RESPONSE2');\r\n      });\r\n\r\n      const fetchPromise3: Promise<void> = oDataBatch.fetch('http://example.com/_api/test3', {\r\n        method: 'GET'\r\n      }).then((response: Response) => {\r\n        assert.fail('Expected an error');\r\n      }).catch((error: Error) => {\r\n        assert.equal(error.message, 'ODataBatch: Batched request failed');\r\n      });\r\n\r\n      // This promise tracks the execution of the batch\r\n      const executePromise: Promise<void> = oDataBatch.execute()\r\n        .then((batch: ODataBatch) => {\r\n          // Currently there aren't any interesting properties on the ODataBatch\r\n          // object, but eventually it might include statistics or metadata\r\n          return;\r\n        });\r\n\r\n      // Wait for both promises to resolve before the test is finished\r\n      Promise.all<void>([fetchPromise1, fetchPromise2, fetchPromise3, executePromise])\r\n        .then(() => {\r\n          fetchProvider.assertQueueEmpty();\r\n          done();\r\n        })\r\n        .catch((error: Error) => {\r\n          done(error);\r\n        });\r\n    });\r\n\r\n  });\r\n});\r\n"],"sourceRoot":"/src"}