{"version":3,"sources":["httpClient/test/BasicHttpClient.test.ts"],"names":[],"mappings":";AAAA,6BAAyB,iCAAiC,CAAC,CAAA;AAC3D,gCAA4B,oBAAoB,CAAC,CAAA;AACjD,kCAA8B,qBAAqB,CAAC,CAAA;AACpD,8BAAwC,kBAAkB,CAAC,CAAA;AAE3D,IAAM,MAAM,GAAsB,IAAI,CAAC,MAAM,CAAC;AAE9C,QAAQ,CAAC,uBAAuB,EAAE;IAEhC,QAAQ,CAAC,sBAAsB,EAAE;QAE/B,IAAM,SAAS,GAAiB,sBAAY,CAAC,YAAY,EAAE,CAAC;QAC5D,IAAM,aAAa,GAAsB,IAAI,2BAAiB,CAAC,SAAS,CAAC,CAAC;QAC1E,SAAS,CAAC,OAAO,CAAC,uCAAuB,EAAE,aAAa,CAAC,CAAC;QAC1D,SAAS,CAAC,MAAM,EAAE,CAAC;QAEnB,IAAM,eAAe,GAAoB,IAAI,yBAAe,CAAC,SAAS,CAAC,CAAC;QAExE,EAAE,CAAC,gDAAgD,EAAE,UAAC,IAAe;YACnE,aAAa,CAAC,MAAM,CAAC;gBACnB,WAAW,EAAE,gCAAgC;gBAC7C,iBAAiB,EAAE,UAAC,OAAgB;oBAClC,IAAI,WAAW,GAAW,CAAC,CAAC;oBAC5B,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,UAAC,KAAa,EAAE,IAAY,IAAa,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;oBACnF,MAAM,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;gBAC/B,CAAC;gBACD,cAAc,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE;aAChC,CAAC,CAAC;YAEH,eAAe,CAAC,GAAG,CAAC,gCAAgC,CAAC;iBAClD,IAAI,CAAC,UAAC,QAAkB;gBACvB,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;YACzB,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,cAAgC;gBACvC,MAAM,CAAC,KAAK,CAAC,cAAc,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;gBACvC,IAAI,EAAE,CAAC;YACT,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,KAAY;gBACpB,IAAI,CAAC,KAAK,CAAC,CAAC;YACd,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"httpClient/test/BasicHttpClient.test.js","sourcesContent":["import ServiceScope from '../../serviceScope/ServiceScope';\r\nimport BasicHttpClient from '../BasicHttpClient';\r\nimport MockFetchProvider from './MockFetchProvider';\r\nimport { fetchProviderServiceKey } from '../FetchProvider';\r\n\r\nconst assert: Chai.AssertStatic = chai.assert;\r\n\r\ndescribe('BasicHttpClient tests', () => {\r\n\r\n  describe('Test simple requests', () => {\r\n\r\n    const rootScope: ServiceScope = ServiceScope.startNewRoot();\r\n    const fetchProvider: MockFetchProvider = new MockFetchProvider(rootScope);\r\n    rootScope.provide(fetchProviderServiceKey, fetchProvider);\r\n    rootScope.finish();\r\n\r\n    const basicHttpClient: BasicHttpClient = new BasicHttpClient(rootScope);\r\n\r\n    it('should NOT add headers for a basic GET request', (done: MochaDone): void => {\r\n      fetchProvider.expect({\r\n        expectedUrl: 'http://example.com/_api/test01',\r\n        requestAssertions: (request: Request): void => {\r\n          let headerCount: number = 0;\r\n          request.headers.forEach((value: string, name: string): void => { ++headerCount; });\r\n          assert.equal(headerCount, 0);\r\n        },\r\n        responseObject: { 'data': 123 }\r\n      });\r\n\r\n      basicHttpClient.get('http://example.com/_api/test01')\r\n        .then((response: Response) => {\r\n          return response.json();\r\n        }).then((responseObject: { data: number }) => {\r\n          assert.equal(responseObject.data, 123);\r\n          done();\r\n        }).catch((error: Error) => {\r\n          done(error);\r\n        });\r\n    });\r\n  });\r\n});\r\n"],"sourceRoot":"/src"}