{"version":3,"sources":["httpClient/test/MockFetchProvider.ts"],"names":[],"mappings":"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","file":"httpClient/test/MockFetchProvider.js","sourcesContent":["import ServiceScope from '../../serviceScope/ServiceScope';\r\n\r\n/* tslint:disable:no-any */\r\n\r\nimport { IFetchProvider } from '../FetchProvider';\r\n\r\nconst assert: Chai.AssertStatic = chai.assert;\r\n\r\nexport class MockedHeader {\r\n  constructor(public name: string, public value: string) {\r\n  }\r\n}\r\n\r\n/**\r\n  * Used with MockFetchProvider.fetch(), this represents a request that we happen\r\n  * to occur.  It specifies the expected details of the request (e.g. the URL,\r\n  * any assertions about headers, etc), along with the mocked response that should\r\n  * be issued.\r\n  */\r\nexport interface IMockedRequest {\r\n  /**\r\n   * The expected URL of the REST service request to be performed.\r\n   */\r\n  expectedUrl: string;\r\n\r\n  /**\r\n   * A list of headers to be validated.  For each item in the list, MockFetchProvider\r\n   * will assert that it appears in Request.headers with the expected value.\r\n   */\r\n  expectedRequestHeaders?: MockedHeader[];\r\n\r\n  /**\r\n   * The expected request body to be validated.  If undefined, no validate is performed.\r\n   * If the value is a string, then a string comparison is performed.\r\n   */\r\n  expectedRequestObject?: string;\r\n\r\n  /**\r\n   * Optional additional assertions about the expected request, e.g. to validate headers,\r\n   * credentials, caching options, etc.\r\n   */\r\n  requestAssertions?: (request: Request) => void;\r\n\r\n  /**\r\n   * The headers to include with the mocked response.\r\n   */\r\n  responseHeaders?: MockedHeader[];\r\n\r\n  /**\r\n   * Whether to append a \"Content-Length\" header to the response, calculated from\r\n   * the responseObject.\r\n   */\r\n  responseContentLengthHeader?: boolean;\r\n\r\n  /**\r\n   * The response data that MockFetchProvider should return for this request.\r\n   * If the object is a string, then it will be injected directly as the response.\r\n   * Otherwise, it is assumed to be a JSON object that will be passed to JSON.stringify().\r\n   */\r\n  responseObject: any;\r\n\r\n  /**\r\n   * Optional additional headers/details for the response\r\n   */\r\n  responseOptions?: ResponseInit;\r\n}\r\n\r\n/**\r\n * A mock implementation of IFetchProvider, that allows a unit test to specify\r\n * the sequence of expected REST requests, and then validate that they occur in\r\n * that order.\r\n */\r\nexport default class MockFetchProvider implements IFetchProvider {\r\n  private static _observeOnlyCounter: number = 0;\r\n\r\n  public mockedRequest: IMockedRequest[] = [];\r\n\r\n  /**\r\n   * When this is set to true, the MockFetchProvider will not actually validate\r\n   * anything.  Instead, it will dump a console trace of all requests that it\r\n   * receives, which you can use as a guide for writing unit test validation.\r\n   * You still need to call expect() to supply the expected responses.\r\n   */\r\n  public practiceRun: boolean;\r\n\r\n  private static getNormalizedText(text: string): string {\r\n    return text.split('\\n')\r\n      .map((line: string) => line.trim())\r\n      .join('\\n')\r\n      .trim();\r\n  }\r\n\r\n  constructor(serviceScope: ServiceScope) {\r\n    this.practiceRun = false;\r\n  }\r\n\r\n  /**\r\n   * Adds an expected request to the internal queue.  Items will be removed from this\r\n   * queue and validated whenever fetch() is called.\r\n   */\r\n  public expect(mockedRequest: IMockedRequest): void {\r\n    this.mockedRequest.push(mockedRequest);\r\n  }\r\n\r\n  /**\r\n   * Asserts that the queue is empty, e.g. to ensure that the unit test performed\r\n   * all expected requests.\r\n   */\r\n  public assertQueueEmpty(): void {\r\n    if (this.practiceRun) {\r\n      return;\r\n    }\r\n\r\n    if (this.mockedRequest.length !== 0) {\r\n      const next: IMockedRequest = this.mockedRequest.shift();\r\n      assert.isTrue(false, 'A request was expected but never issued: ' + next.expectedUrl);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The IFetchProvider contract that we are mocking.\r\n   */\r\n  public fetch(request: Request): Promise<Response> {\r\n    return request.text().then((requestBodyText: string) => {\r\n      const url: string = request.url || '(undefined url)';\r\n      assert.isTrue(this.mockedRequest.length > 0, 'No request expected at this time: '\r\n        + url.toString());\r\n      const mockedRequest: IMockedRequest = this.mockedRequest.shift();\r\n\r\n      if (this.practiceRun) {\r\n        const observeOnlyCounter: number = ++MockFetchProvider._observeOnlyCounter;\r\n        console.log(`MockFetchProvider: REQUEST #${observeOnlyCounter}`);\r\n\r\n        let headerLines: string = '';\r\n        request.headers.forEach((value: string, name: string) => {\r\n          headerLines += `  ${name}: ${value}\\n`;\r\n        });\r\n\r\n        console.log([\r\n          '',\r\n          `==[REQUEST #${observeOnlyCounter}]===========================================`,\r\n          `URL: ${request.url}`,\r\n          `HEADERS:`,\r\n          `${headerLines}` +\r\n          `== BODY: ====================================================================`,\r\n          `${requestBodyText}`,\r\n          `=============================================================================`,\r\n          ''\r\n        ].join('\\n'));\r\n      } else {\r\n        assert.isTrue(url === mockedRequest.expectedUrl, `Expecting this: ${mockedRequest.expectedUrl}`\r\n          + `\\r\\nBut got this:${url}`);\r\n\r\n        (mockedRequest.expectedRequestHeaders || []).forEach((mockedHeader: MockedHeader): void => {\r\n          const value: string = request.headers.get(mockedHeader.name);\r\n          assert.isOk(value, `The \"${mockedHeader.name}\" header was expected,`\r\n            + ` but is missing from the response`);\r\n          assert.isTrue(value === mockedHeader.value,\r\n            `The \"${mockedHeader.name}\" header had this value:\\r\\n`\r\n            + `\"${value}\"\\r\\nbut this was expected:\\r\\n\"${mockedHeader.value}`);\r\n        });\r\n\r\n        if (mockedRequest.expectedRequestObject) {\r\n          const expectedBodyText: string = mockedRequest.expectedRequestObject;\r\n          assert.equal(\r\n            MockFetchProvider.getNormalizedText(expectedBodyText),\r\n            MockFetchProvider.getNormalizedText(requestBodyText),\r\n            `The body text for this request did not match:\\n${url}`\r\n          );\r\n        }\r\n\r\n        if (mockedRequest.requestAssertions) {\r\n          mockedRequest.requestAssertions(request);\r\n        }\r\n      }\r\n\r\n      const responseText: string = (typeof mockedRequest.responseObject === 'string')\r\n        ? mockedRequest.responseObject\r\n        : JSON.stringify(mockedRequest.responseObject);\r\n\r\n        // Chrome sets these defaults, but whatwg-polyfill does not\r\n      const responseOptions: ResponseInit = mockedRequest.responseOptions\r\n        || { status: 200, statusText: 'OK' };\r\n\r\n      const response: Response = new Response(responseText, responseOptions);\r\n\r\n      if (mockedRequest.responseHeaders) {\r\n        for (const responseHeader of mockedRequest.responseHeaders) {\r\n          response.headers.append(responseHeader.name, responseHeader.value);\r\n        }\r\n      }\r\n\r\n      if (mockedRequest.responseContentLengthHeader) {\r\n        response.headers.append('Content-Length', responseText.length.toString());\r\n      }\r\n\r\n      return response;\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":"/src"}