"use strict";
var ServiceScope_1 = require('../../serviceScope/ServiceScope');
var ODataBatch_1 = require('../ODataBatch');
var MockFetchProvider_1 = require('./MockFetchProvider');
var MockRandomProvider_1 = require('./MockRandomProvider');
var FetchProvider_1 = require('../FetchProvider');
var RandomProvider_1 = require('../../common/RandomProvider');
var assert = chai.assert;
describe('ODataBatch tests', function () {
    describe('Main scenario', function () {
        var rootScope = ServiceScope_1.default.startNewRoot();
        var fetchProvider = new MockFetchProvider_1.default(rootScope);
        rootScope.provide(FetchProvider_1.fetchProviderServiceKey, fetchProvider);
        // This ensures that ODataBatch generates deterministic GUIDs
        var randomProvider = new MockRandomProvider_1.default(rootScope);
        rootScope.provide(RandomProvider_1.randomProviderServiceKey, randomProvider);
        rootScope.finish();
        // ----------------------------------------------------------------------------------------------------
        it('should batch a single GET request', function (done) {
            // First it needs to fetch the digest for the upcoming POST
            fetchProvider.expect({
                expectedUrl: 'http://example.com/_api/contextinfo',
                responseObject: {
                    'FormDigestValue': 'DIGEST_1',
                    'FormDigestTimeoutSeconds': 30
                }
            });
            // This is the actual REST call
            fetchProvider.expect({
                expectedUrl: 'http://example.com/_api/$batch',
                expectedRequestHeaders: [
                    new MockFetchProvider_1.MockedHeader('accept', 'application/json'),
                    new MockFetchProvider_1.MockedHeader('odata-version', '4.0'),
                    new MockFetchProvider_1.MockedHeader('content-type', 'multipart/mixed; boundary=batch_019ef386-4b18-49c9-8efb-f46eaef2de4e'),
                    new MockFetchProvider_1.MockedHeader('x-requestdigest', 'DIGEST_1')
                ],
                expectedRequestObject: "\n--batch_019ef386-4b18-49c9-8efb-f46eaef2de4e\nContent-type: application/http\nContent-Transfer-Encoding: binary\n\nGET http://example.com/_api/batch01 HTTP/1.1\naccept: application/json;odata.metadata=minimal\n\n\n\n--batch_019ef386-4b18-49c9-8efb-f46eaef2de4e--\n",
                responseHeaders: [
                    new MockFetchProvider_1.MockedHeader('Content-Type', 'multipart/mixed; boundary=batchresponse_8132cf43-7a45-4e72-828a-6f3a135b1f7e')
                ],
                responseContentLengthHeader: true,
                responseObject: "\n--batchresponse_8132cf43-7a45-4e72-828a-6f3a135b1f7e\nContent-Type: application/http\nContent-Transfer-Encoding: binary\n\nHTTP/1.1 200 OK\nCONTENT-TYPE: application/json;odata=minimalmetadata;streaming=true;charset=utf-8\n\n{\"data\":12345}\n--batchresponse_8132cf43-7a45-4e72-828a-6f3a135b1f7e--\n"
            });
            var oDataBatch = new ODataBatch_1.default(rootScope);
            // This promise tracks a single GET request that is part of this batch
            var fetchPromise = oDataBatch.get('http://example.com/_api/batch01')
                .then(function (response) {
                return response.json();
            }).then(function (responseObject) {
                assert.equal(responseObject.data, 12345);
            });
            // This promise tracks the execution of the batch
            var executePromise = oDataBatch.execute()
                .then(function (batch) {
                // Currently there aren't any interesting properties on the ODataBatch
                // object, but eventually it might include statistics or metadata
                return;
            });
            // Wait for both promises to resolve before the test is finished
            Promise.all([fetchPromise, executePromise])
                .then(function () {
                fetchProvider.assertQueueEmpty();
                done();
            })
                .catch(function (error) {
                done(error);
            });
        });
        // ----------------------------------------------------------------------------------------------------
        it('should batch multiple requests including a failed request', function (done) {
            // This is the actual REST call
            fetchProvider.expect({
                expectedUrl: 'http://example.com/_api/$batch',
                expectedRequestHeaders: [
                    new MockFetchProvider_1.MockedHeader('accept', 'application/json'),
                    new MockFetchProvider_1.MockedHeader('odata-version', '4.0'),
                    new MockFetchProvider_1.MockedHeader('content-type', 'multipart/mixed; boundary=batch_6486cb89-1969-4d7c-933c-1299b576ef92'),
                    new MockFetchProvider_1.MockedHeader('x-requestdigest', 'DIGEST_1')
                ],
                expectedRequestObject: "\n--batch_6486cb89-1969-4d7c-933c-1299b576ef92\nContent-type: application/http\nContent-Transfer-Encoding: binary\n\nGET http://example.com/_api/test1 HTTP/1.1\nmy-custom-header: header value\naccept: application/json;odata.metadata=minimal\n\n\n\n--batch_6486cb89-1969-4d7c-933c-1299b576ef92\nContent-type: application/http\nContent-Transfer-Encoding: binary\n\nPOST http://example.com/_api/test2 HTTP/1.1\ncontent-type: application/json;charset=utf-8\naccept: application/json;odata.metadata=minimal\n\nBODY2\n\n--batch_6486cb89-1969-4d7c-933c-1299b576ef92\nContent-type: application/http\nContent-Transfer-Encoding: binary\n\nGET http://example.com/_api/test3 HTTP/1.1\naccept: application/json;odata.metadata=minimal\n\n\n\n--batch_6486cb89-1969-4d7c-933c-1299b576ef92--\n",
                responseHeaders: [
                    new MockFetchProvider_1.MockedHeader('Content-Type', 'multipart/mixed; boundary=batchresponse_761bdf66-72c3-4938-a1f4-3baaf0a7f647')
                ],
                responseContentLengthHeader: true,
                responseObject: "\n--batchresponse_761bdf66-72c3-4938-a1f4-3baaf0a7f647\nContent-Type: application/http\nContent-Transfer-Encoding: binary\n\nHTTP/1.1 200 OK\nCONTENT-TYPE: application/json;odata=minimalmetadata;streaming=true;charset=utf-8\n\n\"RESPONSE1\"\n--batchresponse_761bdf66-72c3-4938-a1f4-3baaf0a7f647\nContent-Type: application/http\nContent-Transfer-Encoding: binary\n\nHTTP/1.1 200 OK\nCONTENT-TYPE: application/json;odata=minimalmetadata;streaming=true;charset=utf-8\n\n\"RESPONSE2\"\n--batchresponse_761bdf66-72c3-4938-a1f4-3baaf0a7f647\nContent-Type: application/http\nContent-Transfer-Encoding: binary\n\nHTTP/1.1 500 Internal Server Error\nCONTENT-TYPE: application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false\n\n{ error: { code: \"-2146232832, Microsoft.SharePoint.SPException\",  message: \"Something went wrong.\" } }\n--batchresponse_761bdf66-72c3-4938-a1f4-3baaf0a7f647--\n"
            });
            var oDataBatch = new ODataBatch_1.default(rootScope);
            var fetchPromise1 = oDataBatch.get('http://example.com/_api/test1', {
                headers: { 'My-Custom-Header': 'header value' }
            }).then(function (response) {
                return response.json();
            }).then(function (responseObject) {
                assert.equal(responseObject, 'RESPONSE1');
            });
            var fetchPromise2 = oDataBatch.post('http://example.com/_api/test2', {
                body: 'BODY2'
            }).then(function (response) {
                return response.json();
            }).then(function (responseObject) {
                assert.equal(responseObject, 'RESPONSE2');
            });
            var fetchPromise3 = oDataBatch.fetch('http://example.com/_api/test3', {
                method: 'GET'
            }).then(function (response) {
                assert.fail('Expected an error');
            }).catch(function (error) {
                assert.equal(error.message, 'ODataBatch: Batched request failed');
            });
            // This promise tracks the execution of the batch
            var executePromise = oDataBatch.execute()
                .then(function (batch) {
                // Currently there aren't any interesting properties on the ODataBatch
                // object, but eventually it might include statistics or metadata
                return;
            });
            // Wait for both promises to resolve before the test is finished
            Promise.all([fetchPromise1, fetchPromise2, fetchPromise3, executePromise])
                .then(function () {
                fetchProvider.assertQueueEmpty();
                done();
            })
                .catch(function (error) {
                done(error);
            });
        });
    });
});

//# sourceMappingURL=ODataBatch.test.js.map
