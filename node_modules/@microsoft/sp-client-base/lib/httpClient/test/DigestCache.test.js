"use strict";
var ServiceScope_1 = require('../../serviceScope/ServiceScope');
var DigestCache_1 = require('../DigestCache');
var MockTimeProvider_1 = require('./MockTimeProvider');
var MockFetchProvider_1 = require('./MockFetchProvider');
var TimeProvider_1 = require('../../common/TimeProvider');
var FetchProvider_1 = require('../FetchProvider');
var assert = chai.assert;
describe('DigestCache tests', function () {
    describe('Test fetching behavior for basic cache hits and misses', function () {
        var rootScope = ServiceScope_1.default.startNewRoot();
        var timeProvider = new MockTimeProvider_1.default(rootScope);
        rootScope.provide(TimeProvider_1.dateProviderServiceKey, timeProvider);
        var fetchProvider = new MockFetchProvider_1.default(rootScope);
        rootScope.provide(FetchProvider_1.fetchProviderServiceKey, fetchProvider);
        rootScope.finish();
        var digestCache = new DigestCache_1.default(rootScope);
        it('should fetch the first time', function (done) {
            fetchProvider.expect({
                expectedUrl: 'http://example.com/_api/contextinfo',
                responseObject: {
                    'FormDigestValue': 'DIGEST_1',
                    'FormDigestTimeoutSeconds': 30
                }
            });
            digestCache.fetchDigest('http://example.com').then(function (value) {
                assert.isTrue(value === 'DIGEST_1');
                done();
            }).catch(function (error) {
                done(error);
            });
        });
        it('should not refetch if not expired', function (done) {
            timeProvider.addMs(1000);
            digestCache.fetchDigest('http://example.com').then(function (value) {
                assert.isTrue(value === 'DIGEST_1');
                fetchProvider.assertQueueEmpty();
                done();
            }).catch(function (error) {
                done(error);
            });
        });
        it('should refetch after expired', function (done) {
            timeProvider.addMs(29000);
            fetchProvider.expect({
                expectedUrl: 'http://example.com/_api/contextinfo',
                responseObject: {
                    'FormDigestValue': 'DIGEST_2',
                    'FormDigestTimeoutSeconds': 30
                }
            });
            digestCache.fetchDigest('http://example.com').then(function (value) {
                assert.isTrue(value === 'DIGEST_2');
                done();
            }).catch(function (error) {
                done(error);
            });
        });
        it('should refetch if cleared', function (done) {
            digestCache.clearAllDigests();
            fetchProvider.expect({
                expectedUrl: 'http://example.com/_api/contextinfo',
                responseObject: {
                    'FormDigestValue': 'DIGEST_3',
                    'FormDigestTimeoutSeconds': 30
                }
            });
            digestCache.fetchDigest('http://example.com').then(function (value) {
                assert.isTrue(value === 'DIGEST_3');
                done();
            }).catch(function (error) {
                done(error);
            });
        });
        it('should correctly add and clear one digest', function () {
            digestCache.addDigestToCache('http://example.com/web1', 'DIGEST_4', timeProvider.getTimestamp() + 1000);
            // Note that the trailing slash is normalized
            assert.isTrue(digestCache.clearDigest('http://example.com/web1/'));
            // Returns false because it was already cleared
            assert.isFalse(digestCache.clearDigest('http://example.com/web1/'));
        });
    });
});

//# sourceMappingURL=DigestCache.test.js.map
