{"version":3,"sources":["httpClient/test/HttpClient.test.ts"],"names":[],"mappings":"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","file":"httpClient/test/HttpClient.test.js","sourcesContent":["import ServiceScope from '../../serviceScope/ServiceScope';\r\nimport HttpClient from '../HttpClient';\r\nimport MockFetchProvider, { MockedHeader } from './MockFetchProvider';\r\nimport { fetchProviderServiceKey } from '../FetchProvider';\r\nimport MockRandomProvider from './MockRandomProvider';\r\nimport { randomProviderServiceKey } from '../../common/RandomProvider';\r\nimport _PerformanceLogger from '../../telemetry/Api/PerformanceLogger';\r\nimport LogSource, { logSourceServiceKey } from '../../telemetry/Api/LogSource';\r\n\r\nconst assert: Chai.AssertStatic = chai.assert;\r\n\r\ndescribe('HttpClient tests', () => {\r\n  const rootScope: ServiceScope = ServiceScope.startNewRoot();\r\n  const fetchProvider: MockFetchProvider = new MockFetchProvider(rootScope);\r\n  rootScope.provide(fetchProviderServiceKey, fetchProvider);\r\n  const randomProvider: MockRandomProvider = new MockRandomProvider(rootScope);\r\n  rootScope.provide(randomProviderServiceKey, randomProvider);\r\n  rootScope.finish();\r\n  const httpClient: HttpClient = new HttpClient(rootScope);\r\n\r\n  beforeEach(() => {\r\n    _PerformanceLogger.initializeApplication('HttpClientTest');\r\n  });\r\n\r\n  describe('Test basic fetching behavior', () => {\r\n    it('should add headers for a basic GET request', (done: MochaDone): void => {\r\n      fetchProvider.expect({\r\n        expectedUrl: 'http://example.com/_api/test01',\r\n        expectedRequestHeaders: [\r\n          new MockedHeader('Accept', 'application/json;odata.metadata=minimal')\r\n        ],\r\n        requestAssertions: (request: Request): void => {\r\n          assert.strictEqual(request.credentials, 'same-origin');\r\n          assert.isFalse(request.headers.has('X-RequestDigest'));\r\n        },\r\n        responseObject: { 'data': 123 }\r\n      });\r\n\r\n      httpClient.get('http://example.com/_api/test01')\r\n        .then((response: Response) => {\r\n          return response.json();\r\n        }).then((responseObject: { data: number }) => {\r\n          assert.equal(responseObject.data, 123);\r\n          done();\r\n        }).catch((error: Error) => {\r\n          done(error);\r\n        });\r\n    });\r\n  });\r\n\r\n  describe('Test instrumentation', () => {\r\n    it('should mark API time for a basic GET request', (done: MochaDone): void => {\r\n      const baseTime: number = Date.now() - 1;\r\n      fetchProvider.expect({\r\n        expectedUrl: 'http://example.com/_api/test01',\r\n        responseObject: { 'data': 123 }\r\n      });\r\n      randomProvider.reset(1);\r\n      httpClient.get('http://example.com/_api/test01')\r\n        .then((response: Response) => {\r\n          randomProvider.reset(1);\r\n          const tag: string = 'httpClient.' + (Math.floor(randomProvider.getRandom() * 100000)).toString();\r\n          assert.isAbove(_PerformanceLogger.getApiStartTime(tag), baseTime, 'start time is set');\r\n          assert.isTrue(_PerformanceLogger.getApiEndTime(tag) >=\r\n            _PerformanceLogger.getApiStartTime(tag), 'End time should be after start time');\r\n          done();\r\n        }).catch((error: Error) => {\r\n          done(error);\r\n        });\r\n    });\r\n\r\n    it('should record scope source in API data', (done: MochaDone): void => {\r\n      const baseTime: number = Date.now() - 1;\r\n      const anotherScope: ServiceScope = rootScope.startNewChild();\r\n      anotherScope.provide(logSourceServiceKey, LogSource.create('anotherScope'));\r\n      anotherScope.finish();\r\n      const otherClient: HttpClient = new HttpClient(anotherScope);\r\n\r\n      fetchProvider.expect({\r\n        expectedUrl: 'http://example.com/_api/test01',\r\n        responseObject: { 'data': 123 }\r\n      });\r\n      randomProvider.reset(1);\r\n      otherClient.get('http://example.com/_api/test01')\r\n        .then((response: Response) => {\r\n          randomProvider.reset(1);\r\n          const tag: string = 'anotherScope.' + (Math.floor(randomProvider.getRandom() * 100000)).toString();\r\n          assert.isAbove(_PerformanceLogger.getApiStartTime(tag), baseTime, 'start time is set');\r\n          assert.isTrue(_PerformanceLogger.getApiEndTime(tag) >=\r\n            _PerformanceLogger.getApiStartTime(tag), 'End time should be after start time');\r\n          done();\r\n        }).catch((error: Error) => {\r\n          done(error);\r\n        });\r\n    });\r\n  });\r\n\r\n  describe('Test adding custom headers', () => {\r\n    it('should mix custom headers with automatic headers', (done: MochaDone): void => {\r\n      fetchProvider.expect({\r\n        expectedUrl: 'http://example.com/_api/test01',\r\n        expectedRequestHeaders: [\r\n          new MockedHeader('Accept', 'something-custom'),\r\n          new MockedHeader('OData-Version', '4.0')\r\n        ],\r\n        responseObject: { }\r\n      });\r\n\r\n      httpClient.get('http://example.com/_api/test01', {\r\n        headers: { 'Accept': 'something-custom' }\r\n      }).then(() => {\r\n        done();\r\n      }).catch((error: Error) => {\r\n        done(error);\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('Test fetching behavior for basic cache hits and misses', () => {\r\n    it('should fetch a digest for a POST request', (done: MochaDone): void => {\r\n\r\n      fetchProvider.expect({\r\n        expectedUrl: 'http://example.com/_api/contextinfo',\r\n        responseObject: {\r\n          'FormDigestValue': 'DIGEST_1',\r\n          'FormDigestTimeoutSeconds': 30\r\n        }\r\n      });\r\n\r\n      fetchProvider.expect({\r\n        expectedUrl: 'http://example.com/_api/test02',\r\n        expectedRequestHeaders: [\r\n          new MockedHeader('Accept', 'application/json;odata.metadata=minimal'),\r\n          new MockedHeader('Content-type', 'application/json;charset=utf-8'),\r\n          new MockedHeader('X-RequestDigest', 'DIGEST_1')\r\n        ],\r\n        responseObject: { 'data': 321 }\r\n      });\r\n\r\n      httpClient.post('http://example.com/_api/test02', {})\r\n        .then((response: Response) => {\r\n          return response.json();\r\n        }).then((responseObject: { data: number }) => {\r\n          assert.equal(responseObject.data, 321);\r\n          done();\r\n        }).catch((error: Error) => {\r\n          done(error);\r\n        });\r\n    });\r\n\r\n  });\r\n});\r\n"],"sourceRoot":"/src"}