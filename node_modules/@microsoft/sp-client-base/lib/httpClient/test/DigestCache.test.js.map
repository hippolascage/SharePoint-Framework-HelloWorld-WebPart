{"version":3,"sources":["httpClient/test/DigestCache.test.ts"],"names":[],"mappings":"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","file":"httpClient/test/DigestCache.test.js","sourcesContent":["import ServiceScope from '../../serviceScope/ServiceScope';\r\n\r\nimport DigestCache from '../DigestCache';\r\nimport MockTimeProvider from './MockTimeProvider';\r\nimport MockFetchProvider from './MockFetchProvider';\r\nimport { dateProviderServiceKey } from '../../common/TimeProvider';\r\nimport { fetchProviderServiceKey } from '../FetchProvider';\r\n\r\nconst assert: Chai.AssertStatic = chai.assert;\r\n\r\ndescribe('DigestCache tests', () => {\r\n\r\n  describe('Test fetching behavior for basic cache hits and misses', () => {\r\n\r\n    const rootScope: ServiceScope = ServiceScope.startNewRoot();\r\n\r\n    const timeProvider: MockTimeProvider = new MockTimeProvider(rootScope);\r\n    rootScope.provide(dateProviderServiceKey, timeProvider);\r\n\r\n    const fetchProvider: MockFetchProvider = new MockFetchProvider(rootScope);\r\n    rootScope.provide(fetchProviderServiceKey, fetchProvider);\r\n\r\n    rootScope.finish();\r\n\r\n    const digestCache: DigestCache = new DigestCache(rootScope);\r\n\r\n    it('should fetch the first time', (done: MochaDone) => {\r\n      fetchProvider.expect({\r\n        expectedUrl: 'http://example.com/_api/contextinfo',\r\n        responseObject: {\r\n          'FormDigestValue': 'DIGEST_1',\r\n          'FormDigestTimeoutSeconds': 30\r\n        }\r\n      });\r\n\r\n      digestCache.fetchDigest('http://example.com').then((value: string) => {\r\n        assert.isTrue(value === 'DIGEST_1');\r\n        done();\r\n      }).catch((error: Error) => {\r\n        done(error);\r\n      });\r\n    });\r\n\r\n    it('should not refetch if not expired', (done: MochaDone) => {\r\n      timeProvider.addMs(1000);\r\n\r\n      digestCache.fetchDigest('http://example.com').then((value: string) => {\r\n        assert.isTrue(value === 'DIGEST_1');\r\n        fetchProvider.assertQueueEmpty();\r\n        done();\r\n      }).catch((error: Error) => {\r\n        done(error);\r\n      });\r\n    });\r\n\r\n    it('should refetch after expired', (done: MochaDone) => {\r\n      timeProvider.addMs(29000);\r\n\r\n      fetchProvider.expect({\r\n        expectedUrl: 'http://example.com/_api/contextinfo',\r\n        responseObject: {\r\n          'FormDigestValue': 'DIGEST_2',\r\n          'FormDigestTimeoutSeconds': 30\r\n        }\r\n      });\r\n\r\n      digestCache.fetchDigest('http://example.com').then((value: string) => {\r\n        assert.isTrue(value === 'DIGEST_2');\r\n        done();\r\n      }).catch((error: Error) => {\r\n        done(error);\r\n      });\r\n    });\r\n\r\n    it('should refetch if cleared', (done: MochaDone) => {\r\n      digestCache.clearAllDigests();\r\n\r\n      fetchProvider.expect({\r\n        expectedUrl: 'http://example.com/_api/contextinfo',\r\n        responseObject: {\r\n          'FormDigestValue': 'DIGEST_3',\r\n          'FormDigestTimeoutSeconds': 30\r\n        }\r\n      });\r\n\r\n      digestCache.fetchDigest('http://example.com').then((value: string) => {\r\n        assert.isTrue(value === 'DIGEST_3');\r\n        done();\r\n      }).catch((error: Error) => {\r\n        done(error);\r\n      });\r\n    });\r\n\r\n    it('should correctly add and clear one digest', () => {\r\n      digestCache.addDigestToCache('http://example.com/web1', 'DIGEST_4',\r\n        timeProvider.getTimestamp() + 1000);\r\n\r\n      // Note that the trailing slash is normalized\r\n      assert.isTrue(digestCache.clearDigest('http://example.com/web1/'));\r\n\r\n      // Returns false because it was already cleared\r\n      assert.isFalse(digestCache.clearDigest('http://example.com/web1/'));\r\n    });\r\n\r\n  });\r\n});\r\n"],"sourceRoot":"/src"}