"use strict";
var ServiceKey_1 = require('../serviceScope/ServiceKey');
var lodash = require('@microsoft/sp-lodash-subset');
var FetchProvider_1 = require('./FetchProvider');
/**
 * BasicHttpClient implements a basic set of features for performing REST operations.
 * The subclass HttpClient extends this basic functionality with SharePoint-specific
 * enhancements.
 * @public
 */
var BasicHttpClient = (function () {
    function BasicHttpClient(serviceScope) {
        var _this = this;
        this._serviceScope = serviceScope;
        serviceScope.whenFinished(function () {
            _this._fetchProvider = serviceScope.consume(FetchProvider_1.fetchProviderServiceKey);
        });
    }
    Object.defineProperty(BasicHttpClient.prototype, "serviceScope", {
        get: function () {
            return this._serviceScope;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Performs a REST service call.  Although the HttpClient subclass adds
     * additional enhancements, the parameters and semantics for BasicHttpClient.fetch()
     * are essentially the same as the WHATWG API standard that is documented here:
     * https://fetch.spec.whatwg.org/
     * @params url - the URL to fetch
     * @params options - additional options that affect the request
     * @returns a promise that will return the result
     */
    BasicHttpClient.prototype.fetch = function (url, options) {
        return this.fetchCore(new Request(url, options));
    };
    /**
     * Calls fetch(), but sets the method to 'GET'.
     * @params url - the URL to fetch
     * @params options - additional options that affect the request
     * @returns a promise that will return the result
     */
    BasicHttpClient.prototype.get = function (url, options) {
        var modifiedOptions = lodash.clone(options || {});
        modifiedOptions.method = 'GET';
        return this.fetch(url, modifiedOptions);
    };
    /**
     * Calls fetch(), but sets the method to 'POST'.
     * @params url - the URL to fetch
     * @params options - additional options that affect the request
     * @returns a promise that will return the result
     */
    BasicHttpClient.prototype.post = function (url, options) {
        var modifiedOptions = lodash.clone(options || {});
        modifiedOptions.method = 'POST';
        return this.fetch(url, modifiedOptions);
    };
    BasicHttpClient.prototype.fetchCore = function (request) {
        // QOS logging will be added here (VSO Task #163782)
        console.log("HttpClient: " + request.method + " " + request.url);
        return this._fetchProvider.fetch(request);
    };
    return BasicHttpClient;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = BasicHttpClient;
exports.basicHttpClientServiceKey = ServiceKey_1.default.create('sp-client-base:BasicHttpClient', BasicHttpClient);

//# sourceMappingURL=BasicHttpClient.js.map
