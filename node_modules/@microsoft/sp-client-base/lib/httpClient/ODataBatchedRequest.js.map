{"version":3,"sources":["httpClient/ODataBatchedRequest.ts"],"names":[],"mappings":"AAAA;;GAEG;;AAKH,0BAA0B;AAE1B;;;;GAIG;AACH;IASE,6BAAY,OAAgB;QAT9B,iBAkEC;QAxDG,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QAEvB,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;QAC1B,IAAI,CAAC,sBAAsB,GAAG,EAAE,CAAC;QACjC,IAAI,CAAC,qBAAqB,GAAG,EAAE,CAAC;QAEhC,uCAAuC;QACvC,IAAI,CAAC,OAAO,GAAG,IAAI,OAAO;QACxB,2BAA2B;QAA3B,AACA,2BAD2B;QAC3B,UAAC,OAAmC,EAAE,MAA6B;YACnE,0BAA0B;YACxB,EAAE,CAAC,CAAC,KAAI,CAAC,QAAQ,KAAK,SAAS,CAAC,CAAC,CAAC;gBAChC,gEAAgE;gBAChE,kCAAkC;gBAClC,OAAO,CAAC,KAAI,CAAC,QAAQ,CAAC,CAAC;YACzB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,sEAAsE;gBACtE,uDAAuD;gBACvD,KAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBAC1C,KAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC1C,CAAC;QACH,CAAC,CACF,CAAC;IACJ,CAAC;IAED;;;;;;;OAOG;IACI,6CAAe,GAAtB,UAAuB,QAAkB;QAAzC,iBAsBC;QArBC,sBAAsB;QACtB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAEzB,uBAAuB;QACvB,EAAE,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;YAChB,IAAI,CAAC,sBAAsB,CAAC,OAAO,CACjC,UAAC,QAA4C;gBAC3C,QAAQ,CAAC,KAAI,CAAC,QAAQ,CAAC,CAAC;YAC1B,CAAC,CACF,CAAC;QACJ,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAM,OAAK,GAAU,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;YACrE,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAChC,UAAC,QAA2C;gBAC1C,QAAQ,CAAC,OAAK,CAAC,CAAC;YAClB,CAAC,CACF,CAAC;QACJ,CAAC;QAED,IAAI,CAAC,sBAAsB,GAAG,EAAE,CAAC;QACjC,IAAI,CAAC,qBAAqB,GAAG,EAAE,CAAC;IAClC,CAAC;IACH,0BAAC;AAAD,CAlEA,AAkEC,IAAA;AAlED;qCAkEC,CAAA","file":"httpClient/ODataBatchedRequest.js","sourcesContent":["/**\r\n * @copyright (c) Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nexport type ODataBatchedRequestResolveCallback = (value?: Response) => void;\r\n/* tslint:disable:no-any */\r\nexport type ODataBatchedRequestRejectCallback = (value?: any) => void;\r\n/* tslint:enable:no-any */\r\n\r\n/**\r\n * INTERNAL USAGE ONLY\r\n * This is a helper class used by ODataBatch to track the state of each\r\n * queued REST request.\r\n */\r\nexport default class ODataBatchedRequest {\r\n  public request: Request;\r\n  public response: Response;\r\n\r\n  public promise: Promise<Response>;\r\n\r\n  private _queuedPromiseResolves: ODataBatchedRequestResolveCallback[];\r\n  private _queuedPromiseRejects: ODataBatchedRequestRejectCallback[];\r\n\r\n  constructor(request: Request) {\r\n    this.request = request;\r\n\r\n    this.response = undefined;\r\n    this._queuedPromiseResolves = [];\r\n    this._queuedPromiseRejects = [];\r\n\r\n    // Create the promise for this request.\r\n    this.promise = new Promise<Response>(\r\n      /* tslint:disable:no-any */\r\n      (resolve: (value?: Response) => void, reject: (error?: any) => void) => {\r\n      /* tslint:enable:no-any */\r\n        if (this.response !== undefined) {\r\n          // If someone calls .then() after the promise is fulfilled, then\r\n          // immediately return the response\r\n          resolve(this.response);\r\n        } else {\r\n          // If someone calls .then() before the batch has executed or finished,\r\n          // we add them to a queue that will be fulfilled later.\r\n          this._queuedPromiseResolves.push(resolve);\r\n          this._queuedPromiseRejects.push(reject);\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * The ODataBatch class calls this method while parsing the HTTP response for\r\n   * the batch.  If there are any queued promises, this will resolve or reject\r\n   * them as appropriate.\r\n   *\r\n   * NOTE: This function is only ever called once, because a BATCH can only\r\n   * be executed once.\r\n   */\r\n  public notifyCompleted(response: Response): void {\r\n    // Record the response\r\n    this.response = response;\r\n\r\n    // Fulfill the promises\r\n    if (response.ok) {\r\n      this._queuedPromiseResolves.forEach(\r\n        (callback: ODataBatchedRequestResolveCallback) => {\r\n          callback(this.response);\r\n        }\r\n      );\r\n    } else {\r\n      const error: Error = new Error('ODataBatch: Batched request failed');\r\n      this._queuedPromiseRejects.forEach(\r\n        (callback: ODataBatchedRequestRejectCallback) => {\r\n          callback(error);\r\n        }\r\n      );\r\n    }\r\n\r\n    this._queuedPromiseResolves = [];\r\n    this._queuedPromiseRejects = [];\r\n  }\r\n}\r\n"],"sourceRoot":"/src"}