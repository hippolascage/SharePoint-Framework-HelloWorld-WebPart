/**
 * @copyright (c) Microsoft Corporation. All rights reserved.
 */
"use strict";
/* tslint:enable:no-any */
/**
 * INTERNAL USAGE ONLY
 * This is a helper class used by ODataBatch to track the state of each
 * queued REST request.
 */
var ODataBatchedRequest = (function () {
    function ODataBatchedRequest(request) {
        var _this = this;
        this.request = request;
        this.response = undefined;
        this._queuedPromiseResolves = [];
        this._queuedPromiseRejects = [];
        // Create the promise for this request.
        this.promise = new Promise(
        /* tslint:disable:no-any */
        /* tslint:disable:no-any */
        function (resolve, reject) {
            /* tslint:enable:no-any */
            if (_this.response !== undefined) {
                // If someone calls .then() after the promise is fulfilled, then
                // immediately return the response
                resolve(_this.response);
            }
            else {
                // If someone calls .then() before the batch has executed or finished,
                // we add them to a queue that will be fulfilled later.
                _this._queuedPromiseResolves.push(resolve);
                _this._queuedPromiseRejects.push(reject);
            }
        });
    }
    /**
     * The ODataBatch class calls this method while parsing the HTTP response for
     * the batch.  If there are any queued promises, this will resolve or reject
     * them as appropriate.
     *
     * NOTE: This function is only ever called once, because a BATCH can only
     * be executed once.
     */
    ODataBatchedRequest.prototype.notifyCompleted = function (response) {
        var _this = this;
        // Record the response
        this.response = response;
        // Fulfill the promises
        if (response.ok) {
            this._queuedPromiseResolves.forEach(function (callback) {
                callback(_this.response);
            });
        }
        else {
            var error_1 = new Error('ODataBatch: Batched request failed');
            this._queuedPromiseRejects.forEach(function (callback) {
                callback(error_1);
            });
        }
        this._queuedPromiseResolves = [];
        this._queuedPromiseRejects = [];
    };
    return ODataBatchedRequest;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ODataBatchedRequest;

//# sourceMappingURL=ODataBatchedRequest.js.map
