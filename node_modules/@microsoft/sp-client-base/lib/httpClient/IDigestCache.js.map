{"version":3,"sources":["httpClient/IDigestCache.ts"],"names":[],"mappings":"AAAA;;GAEG;;AAEH,2BAAuB,4BAA4B,CAAC,CAAA;AACpD,4BAAwB,eAAe,CAAC,CAAA;AA4DxC;;;GAGG;AACU,6BAAqB,GAC9B,oBAAU,CAAC,MAAM,CAAe,4BAA4B,EAAE,qBAAW,CAAC,CAAC","file":"httpClient/IDigestCache.js","sourcesContent":["/**\r\n * @copyright Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nimport ServiceKey from '../serviceScope/ServiceKey';\r\nimport DigestCache from './DigestCache';\r\n\r\n/**\r\n * IDigestCache is an internal service used by HttpClient to maintain a cache of request digests\r\n * for each SPWeb URL.  A request digest is a security token that the SharePoint server requires for\r\n * for any REST write operation, specified via the \"X-RequestDigest\" HTTP header.  It is obtained\r\n * by calling the \"/_api/contextinfo\" REST endpoint, and expires after a server configurable amount\r\n * of time.  For more information, see the MSDN article\r\n * \"Complete basic operations using SharePoint 2013 REST endpoints\".\r\n * @see {@link https://msdn.microsoft.com/en-us/library/office/jj164022.aspx }\r\n * @public\r\n */\r\nexport interface IDigestCache {\r\n  /**\r\n   * Returns a digest string for the specified SPWeb URL.  If the cache already contains a usable value,\r\n   * the promise is fulfilled immediately.  Otherwise, the promise will be pending and resolve after\r\n   * an HTTP request obtains the digest, which will be added to the cache.\r\n   * @param webUrl  The URL of the SPWeb that the API call will be issued to.\r\n   *                This may be a server-relative or absolute URL.\r\n   * @returns       A promise that is fulfilled with the digest value.\r\n   */\r\n  fetchDigest(webUrl: string): Promise<string>;\r\n\r\n  /**\r\n   * Inserts a specific request digest value into the cache.  Normally this is unnecessary because\r\n   * the framework will automatically issue a REST request to fetch the digest when necessary;\r\n   * however, in advanced scenarios addDigestToCache() can be used to avoid the overhead of the\r\n   * REST call.\r\n   *\r\n   * @param webUrl               The URL of the SPWeb that the API call will be issued to.\r\n   *                             This may be a server-relative or absolute URL.\r\n   * @param digestValue          The digest value, which is an opaque that must be generated\r\n   *                             by the SharePoint server.  The syntax will look something like\r\n   *                             this: \"0x0B85...2EAC,29 Jan 2016 01:23:45 -0000\"\r\n   * @param expirationTimestamp  A future point in time, as measured by performance.now(), after which\r\n   *                             the digest value will no longer be valid.\r\n   *                             NOTE: The expirationTime is a DOMHighResTimeStamp value whose units are\r\n   *                             fractional milliseconds; for example, to specify an expiration\r\n   *                             \"5 seconds from right now\", use performance.now()+5000.\r\n   */\r\n  addDigestToCache(webUrl: string, digestValue: string, expirationTimestamp: number): void;\r\n\r\n  /**\r\n   * Clears the cached digest for the specified SPWeb URL.  This operation is useful\r\n   * e.g. if an error indicates that a digest was invalidated prior to its expiration time.\r\n   *\r\n   * @param webUrl               The URL of the SPWeb whose digest should be cleared.\r\n   *                             This may be a server-relative or absolute URL.\r\n   * @returns                    Returns true if a cache entry was found and deleted; false otherwise.\r\n   */\r\n  clearDigest(webUrl: string): boolean;\r\n\r\n  /**\r\n   * Clears all values from the cache.\r\n   */\r\n  clearAllDigests(): void;\r\n}\r\n\r\nexport default IDigestCache;\r\n\r\n/**\r\n * The service key for IDigestCache.\r\n * @public\r\n */\r\nexport const digestCacheServiceKey: ServiceKey<IDigestCache>\r\n  = ServiceKey.create<IDigestCache>('sp-client-base:DigestCache', DigestCache);\r\n"],"sourceRoot":"/src"}