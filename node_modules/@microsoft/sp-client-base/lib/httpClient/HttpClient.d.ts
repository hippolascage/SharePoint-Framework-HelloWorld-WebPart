import ServiceKey from '../serviceScope/ServiceKey';
import ServiceScope from '../serviceScope/ServiceScope';
import BasicHttpClient, { IBasicHttpClientOptions } from './BasicHttpClient';
import ODataBatch, { IODataBatchOptions } from './ODataBatch';
/**
 * HttpClient is used to perform REST calls against SharePoint.  It adds default
 * headers, manages the digest needed for writes, and collects telemetry that
 * helps the service to monitor the performance of an application.
 *
 * For communicating with non-SharePoint services, use the BasicHttpClient
 * class instead.
 * @public
 */
export default class HttpClient extends BasicHttpClient {
    private static _logSource;
    private static _reservedUrlSegments;
    private _digestCache;
    private _randomProvider;
    private _parentSource;
    /**
     * This uses a heuristic to guess the SPWeb URL associated with the provided
     * REST URL.  This is necessary for operations such as the X-RequestDigest
     * and ODATA batching, which require POSTing to a separate REST endpoint
     * in order to complete a request.
     * For excample, if the requestUrl is "/sites/site/web/_api/service",
     * the returned URL would be "/sites/site/web".  Or if the requestUrl
     * is "http://example.com/_layouts/service", the returned URL would be
     * "http://example.com".
     * @param requestUrl  The URL for a SharePoint REST service
     * @returns the inferred SPWeb URL
     */
    static getWebUrlFromRequestUrl(requestUrl: string): string;
    constructor(serviceScope: ServiceScope);
    /**
     * Generally, the parameters and semantics for HttpClient.fetch() are essentially
     * the same as the WHATWG API standard that is documented here:
     * https://fetch.spec.whatwg.org/
     *
     * The HttpClient subclass adds some additional behaviors that are convenient when
     * working with SharePoint ODATA API's (which can be avoided by using
     * BasicHttpClient instead):
     * - Default "Accept" and "Content-Type" headers are added if not explicitly specified.
     * - For write operations, an "X-RequestDigest" header is automatically added
     * - The request digest token is automatically fetched and stored in a cache, with
     *   support for preloading
     *
     * For a write operation, HttpClient will automatically add the "X-RequestDigest"
     * header, which may need to be obtained by issuing a seperate request such as
     * "https://example.com/sites/sample/_api/contextinfo".  Typically the appropriate
     * SPWeb URL can be guessed by looking for a reserved URL segment such as "_api"
     * in the original URL passed to fetch(); if not, use IHttpClientOptions.webUrl
     * to specify it explicitly.
     *
     * @params url - the URL to fetch
     * @params options - additional options that affect the request
     * @returns a promise that will return the result
     * @override
     */
    fetch(url: string, options: IHttpClientOptions): Promise<Response>;
    /**
     * Calls fetch(), but sets the method to 'GET'.
     * @params url - the URL to fetch
     * @params options - additional options that affect the request
     * @returns a promise that will return the result
     * @override
     */
    get(url: string, options?: IHttpClientOptions): Promise<Response>;
    /**
     * Calls fetch(), but sets the method to 'POST'.
     * @params url - the URL to fetch
     * @params options - additional options that affect the request
     * @returns a promise that will return the result
     * @override
     */
    post(url: string, options: IHttpClientOptions): Promise<Response>;
    /**
     * Begins an ODATA batch, which allows multiple REST queries to be bundled into
     * a single web request.
     */
    beginBatch(batchOptions?: IODataBatchOptions): ODataBatch;
    private _fetchWithInstrumentation(request);
    private _performanceTag;
    private _logSourceId;
}
export declare const httpClientServiceKey: ServiceKey<HttpClient>;
/**
 * This interface defines the options for the HttpClient operations such as
 * get(), post(), fetch(), etc.  It is based on the WHATWG API standard
 * parameters that are documented here:
 * https://fetch.spec.whatwg.org/
 * @public
 */
export interface IHttpClientOptions extends IBasicHttpClientOptions {
    /**
     * For a write operation, HttpClient will automatically add the
     * "X-RequestDigest" header, which may need to be fetched using a seperate
     * request such as "https://example.com/sites/sample/_api/contextinfo".
     * Typically the SPWeb URL ("https://example.com/sites/sample" in this
     * example) can be guessed by looking for a reserved URL segment such
     * as "_api" in the original REST query, however certain REST endpoints
     * do not contain a reserved URL segment; in this case, the webUrl can
     * be explicitly specified using this option.
     */
    webUrl?: string;
}
