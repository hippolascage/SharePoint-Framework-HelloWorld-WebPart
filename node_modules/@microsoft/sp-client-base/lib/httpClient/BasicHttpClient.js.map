{"version":3,"sources":["httpClient/BasicHttpClient.ts"],"names":[],"mappings":";AAAA,2BAAuB,4BAA4B,CAAC,CAAA;AAEpD,IAAY,MAAM,WAAM,6BAA6B,CAAC,CAAA;AACtD,8BAAyD,iBAAiB,CAAC,CAAA;AAE3E;;;;;GAKG;AACH;IAIE,yBAAY,YAA0B;QAJxC,iBA0DC;QArDG,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QAClC,YAAY,CAAC,YAAY,CAAC;YACxB,KAAI,CAAC,cAAc,GAAG,YAAY,CAAC,OAAO,CAAC,uCAAuB,CAAC,CAAC;QACtE,CAAC,CAAC,CAAC;IACL,CAAC;IAED,sBAAc,yCAAY;aAA1B;YACE,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC;QAC5B,CAAC;;;OAAA;IAED;;;;;;;;OAQG;IACI,+BAAK,GAAZ,UAAa,GAAW,EAAE,OAAgC;QACxD,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,CAAC;IACnD,CAAC;IAED;;;;;OAKG;IACI,6BAAG,GAAV,UAAW,GAAW,EAAE,OAAiC;QACvD,IAAM,eAAe,GAA4B,MAAM,CAAC,KAAK,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC;QAC7E,eAAe,CAAC,MAAM,GAAG,KAAK,CAAC;QAC/B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,eAAe,CAAC,CAAC;IAC1C,CAAC;IAED;;;;;OAKG;IACI,8BAAI,GAAX,UAAY,GAAW,EAAE,OAAgC;QACvD,IAAM,eAAe,GAA4B,MAAM,CAAC,KAAK,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC;QAC7E,eAAe,CAAC,MAAM,GAAG,MAAM,CAAC;QAChC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,eAAe,CAAC,CAAC;IAC1C,CAAC;IAES,mCAAS,GAAnB,UAAoB,OAAgB;QAClC,oDAAoD;QACpD,OAAO,CAAC,GAAG,CAAC,iBAAe,OAAO,CAAC,MAAM,SAAI,OAAO,CAAC,GAAK,CAAC,CAAC;QAE5D,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;IAC5C,CAAC;IACH,sBAAC;AAAD,CA1DA,AA0DC,IAAA;AA1DD;iCA0DC,CAAA;AAEY,iCAAyB,GAAgC,oBAAU,CAAC,MAAM,CACpF,gCAAgC,EAAE,eAAe,CAAC,CAAC","file":"httpClient/BasicHttpClient.js","sourcesContent":["import ServiceKey from '../serviceScope/ServiceKey';\r\nimport ServiceScope from '../serviceScope/ServiceScope';\r\nimport * as lodash from '@microsoft/sp-lodash-subset';\r\nimport { IFetchProvider, fetchProviderServiceKey  } from './FetchProvider';\r\n\r\n/**\r\n * BasicHttpClient implements a basic set of features for performing REST operations.\r\n * The subclass HttpClient extends this basic functionality with SharePoint-specific\r\n * enhancements.\r\n * @public\r\n */\r\nexport default class BasicHttpClient {\r\n  private _fetchProvider: IFetchProvider;\r\n  private _serviceScope: ServiceScope;\r\n\r\n  constructor(serviceScope: ServiceScope) {\r\n    this._serviceScope = serviceScope;\r\n    serviceScope.whenFinished(() => {\r\n      this._fetchProvider = serviceScope.consume(fetchProviderServiceKey);\r\n    });\r\n  }\r\n\r\n  protected get serviceScope(): ServiceScope {\r\n    return this._serviceScope;\r\n  }\r\n\r\n  /**\r\n   * Performs a REST service call.  Although the HttpClient subclass adds\r\n   * additional enhancements, the parameters and semantics for BasicHttpClient.fetch()\r\n   * are essentially the same as the WHATWG API standard that is documented here:\r\n   * https://fetch.spec.whatwg.org/\r\n   * @params url - the URL to fetch\r\n   * @params options - additional options that affect the request\r\n   * @returns a promise that will return the result\r\n   */\r\n  public fetch(url: string, options: IBasicHttpClientOptions): Promise<Response> {\r\n    return this.fetchCore(new Request(url, options));\r\n  }\r\n\r\n  /**\r\n   * Calls fetch(), but sets the method to 'GET'.\r\n   * @params url - the URL to fetch\r\n   * @params options - additional options that affect the request\r\n   * @returns a promise that will return the result\r\n   */\r\n  public get(url: string, options?: IBasicHttpClientOptions): Promise<Response> {\r\n    const modifiedOptions: IBasicHttpClientOptions = lodash.clone(options || {});\r\n    modifiedOptions.method = 'GET';\r\n    return this.fetch(url, modifiedOptions);\r\n  }\r\n\r\n  /**\r\n   * Calls fetch(), but sets the method to 'POST'.\r\n   * @params url - the URL to fetch\r\n   * @params options - additional options that affect the request\r\n   * @returns a promise that will return the result\r\n   */\r\n  public post(url: string, options: IBasicHttpClientOptions): Promise<Response> {\r\n    const modifiedOptions: IBasicHttpClientOptions = lodash.clone(options || {});\r\n    modifiedOptions.method = 'POST';\r\n    return this.fetch(url, modifiedOptions);\r\n  }\r\n\r\n  protected fetchCore(request: Request): Promise<Response> {\r\n    // QOS logging will be added here (VSO Task #163782)\r\n    console.log(`HttpClient: ${request.method} ${request.url}`);\r\n\r\n    return this._fetchProvider.fetch(request);\r\n  }\r\n}\r\n\r\nexport const basicHttpClientServiceKey: ServiceKey<BasicHttpClient> = ServiceKey.create<BasicHttpClient>\r\n  ('sp-client-base:BasicHttpClient', BasicHttpClient);\r\n\r\n/**\r\n * This interface defines the options for the BasicHttpClient operations such as\r\n * get(), post(), fetch(), etc.  It is based on the whatwg API standard\r\n * parameters that are documented here:\r\n * https://fetch.spec.whatwg.org/\r\n * @public\r\n */\r\nexport interface IBasicHttpClientOptions extends RequestInit {\r\n  // Reserved for future usage\r\n}\r\n"],"sourceRoot":"/src"}