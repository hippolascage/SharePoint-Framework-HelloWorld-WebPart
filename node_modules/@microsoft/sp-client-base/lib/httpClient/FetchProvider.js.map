{"version":3,"sources":["httpClient/FetchProvider.ts"],"names":[],"mappings":";AACA,2BAAuB,4BAA4B,CAAC,CAAA;AAkBpD;;GAEG;AACH;IACE,uBAAY,YAA0B;QACpC,mEAAmE;QACnE,gCAAgC;IAClC,CAAC;IAEM,6BAAK,GAAZ,UAAa,OAAgB;QAC3B,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;IAC/B,CAAC;IACH,oBAAC;AAAD,CATA,AASC,IAAA;AATD;+BASC,CAAA;AAED;;;GAGG;AACU,+BAAuB,GAChC,oBAAU,CAAC,MAAM,CAAiB,8BAA8B,EAAE,aAAa,CAAC,CAAC","file":"httpClient/FetchProvider.js","sourcesContent":["import ServiceScope from '../serviceScope/ServiceScope';\r\nimport ServiceKey from '../serviceScope/ServiceKey';\r\n\r\n/**\r\n * This interface represents the basic contract of the ES6 Fetch API, without\r\n * any additional SharePoint logic.\r\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API }\r\n *\r\n * @public\r\n */\r\nexport interface IFetchProvider {\r\n  /**\r\n   * The parameters and semantics for this function are the same as the\r\n   * ES6 GlobalFetch.fetch() standard.\r\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API }\r\n   */\r\n  fetch(request: Request): Promise<Response>;\r\n}\r\n\r\n/**\r\n * The default implementation of IFetchProvider, which simply calls window.fetch().\r\n */\r\nexport default class FetchProvider implements IFetchProvider {\r\n  constructor(serviceScope: ServiceScope) {\r\n    // (this constructor is currently unused, but it is required by the\r\n    // ServiceKey.create() contract)\r\n  }\r\n\r\n  public fetch(request: Request): Promise<Response> {\r\n    return window.fetch(request);\r\n  }\r\n}\r\n\r\n/**\r\n * The service key for IFetchProvider.\r\n * @public\r\n */\r\nexport const fetchProviderServiceKey: ServiceKey<IFetchProvider>\r\n  = ServiceKey.create<IFetchProvider>('sp-client-base:FetchProvider', FetchProvider);\r\n"],"sourceRoot":"/src"}