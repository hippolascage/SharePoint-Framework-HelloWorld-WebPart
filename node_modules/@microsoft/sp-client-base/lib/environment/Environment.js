"use strict";
var ServiceKey_1 = require('../serviceScope/ServiceKey');
/**
 * The enum Type describes which type of enviroment the framework is running in.
 * @public
 */
(function (EnvironmentType) {
    /**
     * Represents the scenario of the framework hosted in a unit/integration test.
     * Example: A developer running a unit test to verify changes to their web part.
     */
    EnvironmentType[EnvironmentType["Test"] = 0] = "Test";
    /**
     * Represents the scenario of the framework hosted on a localhost server, which typically cannot
     * access any SharePoint REST APIs.
     * Example: A developer uses gulp serve command to test their changes in their browser of choice.
     */
    EnvironmentType[EnvironmentType["Local"] = 1] = "Local";
    /**
     * Indicates that the framework was loaded by a client-rendered SharePoint page
     */
    EnvironmentType[EnvironmentType["SharePoint"] = 2] = "SharePoint";
    /**
     * Indicates that the framework was loaded from a classic server-rendered SharePoint page
     */
    EnvironmentType[EnvironmentType["ClassicSharePoint"] = 3] = "ClassicSharePoint";
})(exports.EnvironmentType || (exports.EnvironmentType = {}));
var EnvironmentType = exports.EnvironmentType;
/**
 * This class contains contextual information about the enviroment that is hosting the framework and
 * its components.
 * @public
 */
var Environment = (function () {
    /**
     * @internal
     */
    function Environment(serviceScope) {
        // Empty Constructor
    }
    /**
     * @internal
     */
    Environment.prototype._initialize = function (type) {
        this._type = type;
    };
    Object.defineProperty(Environment.prototype, "type", {
        /**
         * An enum that describes which type of enviroment the framework is running in.
         */
        get: function () {
            return this._type;
        },
        enumerable: true,
        configurable: true
    });
    return Environment;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Environment;
exports.environmentServiceKey = ServiceKey_1.default.create('sp-client-base:Environment', Environment);

//# sourceMappingURL=Environment.js.map
