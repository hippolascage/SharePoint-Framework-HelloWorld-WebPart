/**
 * @copyright (c) Microsoft Corporation. All rights reserved.
 */
"use strict";
var SPPermission_1 = require('../SPPermission');
var assert = chai.assert;
describe('SPPermission tests', function () {
    it('Fails to create Permission Objects with an invalid value', function () {
        /* tslint:disable:no-unused-expression */
        assert.throws(function () { new SPPermission_1.default(undefined); });
        /* tslint:disable:no-null-keyword */
        assert.throws(function () { new SPPermission_1.default(null); });
        /* tslint:enable:no-null-keyword */
        /* tslint:enable:no-unused-expression */
    });
    it('Fails to find permissions that are not present', function () {
        assert.isFalse(SPPermission_1.default.emptyMask.hasAnyPermissions(SPPermission_1.default.addAndCustomizePages, SPPermission_1.default.createSSCSite, SPPermission_1.default.manageSubwebs));
        assert.isFalse(SPPermission_1.default.emptyMask.hasAllPermissions(SPPermission_1.default.addAndCustomizePages, SPPermission_1.default.createSSCSite, SPPermission_1.default.manageSubwebs));
    });
    it('Find permissions that are present', function () {
        assert.isTrue(SPPermission_1.default.fullMask.hasAnyPermissions(SPPermission_1.default.addAndCustomizePages, SPPermission_1.default.createSSCSite, SPPermission_1.default.manageSubwebs));
        assert.isTrue(SPPermission_1.default.fullMask.hasAllPermissions(SPPermission_1.default.addAndCustomizePages, SPPermission_1.default.createSSCSite, SPPermission_1.default.manageSubwebs));
    });
});

//# sourceMappingURL=SPPermission.test.js.map
