"use strict";
/**
 * This class can be used to determine if the current user has a requested set of permissions.
 * Specifies the built-in permissions available in SharePoint Foundation
 * Derived from OneDriveWeb/ODBNext/odsp-shared
 * https://msdn.microsoft.com/en-us/library/microsoft.sharepoint.spbasepermissions.aspx
 * @public
 */
var SPPermission = (function () {
    function SPPermission(value) {
        if (!value) {
            throw new Error('Must use an object with a Low and High number value');
        }
        this._value = value;
    }
    Object.defineProperty(SPPermission, "emptyMask", {
        // TODO Task 164817 Change public static getters to readonly (TypeScript 2.0)
        /**
         * Has no permissions on the Web site. Not available through the user interface.
         */
        get: function () { return new SPPermission({ High: 0x0, Low: 0x0 }); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPPermission, "viewListItems", {
        // list/document perms  =0x000000000000XXXX
        /**
         * View items in lists, documents in document libraries, and view Web discussion comments.
         */
        get: function () { return new SPPermission({ High: 0x0, Low: 0x1 }); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPPermission, "addListItems", {
        /**
         * Add items to lists, add documents to document libraries, and add Web discussion comments.
         */
        get: function () { return new SPPermission({ High: 0x0, Low: 0x2 }); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPPermission, "editListItems", {
        /**
         * Edit items in lists, edit documents in document libraries, edit Web discussion comments in documents,
         * and customize web part Pages in document libraries.
         */
        get: function () { return new SPPermission({ High: 0x0, Low: 0x4 }); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPPermission, "deleteListItems", {
        /**
         * Delete items from a list, documents from a document library, and Web discussion comments in documents.
         */
        get: function () { return new SPPermission({ High: 0x0, Low: 0x8 }); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPPermission, "approveItems", {
        /**
         * Approve a minor version of a list item or document.
         */
        get: function () { return new SPPermission({ High: 0x0, Low: 0x10 }); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPPermission, "openItems", {
        /**
         * View the source of documents with server-side file handlers.
         */
        get: function () { return new SPPermission({ High: 0x0, Low: 0x20 }); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPPermission, "viewVersions", {
        /**
         * View past versions of a list item or document.
         */
        get: function () { return new SPPermission({ High: 0x0, Low: 0x40 }); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPPermission, "deleteVersions", {
        /**
         * Delete past versions of a list item or document.
         */
        get: function () { return new SPPermission({ High: 0x0, Low: 0x80 }); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPPermission, "cancelCheckout", {
        /**
         * Discard or check in a document which is checked out to another user.
         */
        get: function () { return new SPPermission({ High: 0x0, Low: 0x100 }); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPPermission, "managePersonalViews", {
        /**
         * Create, change, and delete personal views of lists.
         */
        get: function () { return new SPPermission({ High: 0x0, Low: 0x200 }); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPPermission, "manageLists", {
        /**
         * Create and delete lists, add or remove columns in a list, and add or remove public views of a list.
         */
        get: function () { return new SPPermission({ High: 0x0, Low: 0x800 }); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPPermission, "viewFormPages", {
        /**
         * View forms, views, and application pages, and enumerate lists.
         */
        get: function () { return new SPPermission({ High: 0x0, Low: 0x1000 }); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPPermission, "open", {
        // web level perms      =0x0000XXXXXXXX0000,
        /**
         * Allow users to open a Web site, list, or folder to access items inside that container.
         */
        get: function () { return new SPPermission({ High: 0x0, Low: 0x20000 }); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPPermission, "viewPages", {
        /**
         * View pages in a Web site.
         */
        get: function () { return new SPPermission({ High: 0x0, Low: 0x20000 }); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPPermission, "layoutsPage", {
        /**
         * View the layouts page?
         */
        get: function () { return new SPPermission({ High: 0x0, Low: 0x21000 }); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPPermission, "addAndCustomizePages", {
        /**
         * Add, change, or delete HTML pages or web part Pages, and edit the Web site using a SharePoint
         * Foundationâ€“compatible editor.
         */
        get: function () { return new SPPermission({ High: 0x0, Low: 0x40000 }); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPPermission, "applyThemeAndBorder", {
        /**
         * Apply a theme or borders to the entire Web site.
         */
        get: function () { return new SPPermission({ High: 0x0, Low: 0x80000 }); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPPermission, "applyStyleSheets", {
        /**
         * Apply a style sheet (.css file) to the Web site.
         */
        get: function () { return new SPPermission({ High: 0x0, Low: 0x100000 }); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPPermission, "viewUsageData", {
        /**
         * View reports on Web site usage.
         */
        get: function () { return new SPPermission({ High: 0x0, Low: 0x200000 }); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPPermission, "createSSCSite", {
        /**
         * Create a Web site using Self-Service Site Creation.
         */
        get: function () { return new SPPermission({ High: 0x0, Low: 0x400000 }); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPPermission, "manageSubwebs", {
        /**
         * Create subsites such as team sites, Meeting Workspace sites, and Document Workspace sites.
         */
        get: function () { return new SPPermission({ High: 0x0, Low: 0x800000 }); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPPermission, "createGroups", {
        /**
         * Create a group of users that can be used anywhere within the site collection.
         */
        get: function () { return new SPPermission({ High: 0x0, Low: 0x1000000 }); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPPermission, "managePermissions", {
        /**
         * Create and change permission levels on the Web site and assign permissions to users and groups.
         */
        get: function () { return new SPPermission({ High: 0x0, Low: 0x2000000 }); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPPermission, "browseDirectories", {
        /**
         * Enumerate files and folders in a Web site using Microsoft Office SharePoint Designer 2007 and WebDAV interfaces.
         */
        get: function () { return new SPPermission({ High: 0x0, Low: 0x4000000 }); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPPermission, "browserUserInfo", {
        /**
         * View information about users of the Web site.
         */
        get: function () { return new SPPermission({ High: 0x0, Low: 0x8000000 }); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPPermission, "addDelPrivateWebParts", {
        /**
         * Add or remove personal web parts on a web part Page.
         */
        get: function () { return new SPPermission({ High: 0x0, Low: 0x10000000 }); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPPermission, "updatePersonalWebParts", {
        /**
         * Update web parts to display personalized information.
         */
        get: function () { return new SPPermission({ High: 0x0, Low: 0x20000000 }); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPPermission, "manageWeb", {
        /**
         * Grant the ability to perform all administration tasks for the Web site as well as manage content.
         *  Activate, deactivate,or edit properties of Web site scoped Features through the object model or
         * through the user interface (UI). When grantedon the root Web site of a site collection, activate,
         * deactivate, or edit properties of site collection scoped Features through the object model. To
         * browse to the Site Collection Features page and activate or deactivate site collection scoped
         * Features through the UI, you must be a site collection administrator.
         */
        get: function () { return new SPPermission({ High: 0x0, Low: 0x40000000 }); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPPermission, "useClientIntegration", {
        /**
         * Use features that launch client applications; otherwise, users must work on documents locally and upload changes.
         */
        get: function () { return new SPPermission({ High: 0x10, Low: 0x0 }); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPPermission, "useRemoteAPIs", {
        /**
         * Use SOAP, WebDAV, or Microsoft Office SharePoint Designer 2007 interfaces to access the Web site.
         */
        get: function () { return new SPPermission({ High: 0x20, Low: 0x0 }); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPPermission, "manageAlerts", {
        /**
         * Manage alerts for all users of the Web site.
         */
        get: function () { return new SPPermission({ High: 0x40, Low: 0x0 }); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPPermission, "createAlerts", {
        /**
         * Create e-mail alerts.
         */
        get: function () { return new SPPermission({ High: 0x80, Low: 0x0 }); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPPermission, "editMyUserInfo", {
        /**
         * Allows a user to change his or her user information, such as adding a picture.
         */
        get: function () { return new SPPermission({ High: 0x100, Low: 0x0 }); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPPermission, "enumeratePermissions", {
        /**
         * Enumerate permissions on the Web site, list, folder, document, or list item.
         */
        get: function () { return new SPPermission({ High: 0x40000000, Low: 0x0 }); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPPermission, "fullMask", {
        /**
         * Has all permissions on the Web site. Not available through the user interface.
         */
        get: function () { return new SPPermission({ High: 0x7FFFFFFF, Low: 0xFFFFFFFF }); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPPermission.prototype, "value", {
        /**
         * Returns the value of this SPPermission object
         */
        get: function () {
            return this._value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Function for determining if a given permission mask has any of the requested permissions.
     * @param requestedPerms - Any number of SPPermission objects to be compared against the original
     */
    SPPermission.prototype.hasAnyPermissions = function () {
        var _this = this;
        var requestedPerms = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            requestedPerms[_i - 0] = arguments[_i];
        }
        return (requestedPerms || []).some(function (permission) {
            return _this.hasPermission(permission);
        });
    };
    /**
     * Function for determining if a given permission mask has all of the requested permissions.
     * @param requestedPerms - Any number of SPPermission objects to be compared against the original
     */
    SPPermission.prototype.hasAllPermissions = function () {
        var _this = this;
        var requestedPerms = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            requestedPerms[_i - 0] = arguments[_i];
        }
        return (requestedPerms || []).every(function (permission) {
            return _this.hasPermission(permission);
        });
    };
    /**
     * Function for checking if a given permission mask has the requested permission.
     * @param requestedPerm - The SPPermission object to be compared against the original
     */
    SPPermission.prototype.hasPermission = function (requestedPerm) {
        /* tslint:disable:no-bitwise */
        return requestedPerm &&
            ((requestedPerm.value.Low & this.value.Low) === requestedPerm.value.Low) &&
            ((requestedPerm.value.High & this.value.High) === requestedPerm.value.High);
        /* tslint:enable:no-bitwise */
    };
    return SPPermission;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SPPermission;

//# sourceMappingURL=SPPermission.js.map
