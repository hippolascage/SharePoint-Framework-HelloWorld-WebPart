{"version":3,"sources":["flight/SPFlight.ts"],"names":[],"mappings":"AAAA;;GAEG;;AAEH;;;;;;GAMG;AACH;IAAA;IAkCA,CAAC;IA9BC;;;OAGG;IACW,mBAAU,GAAxB,UAAyB,OAAiB;QACxC,IAAI,CAAC,eAAe,GAAG,OAAO,IAAI,EAAE,CAAC;IACvC,CAAC;IAED;;;;OAIG;IACW,kBAAS,GAAvB,UAAwB,MAAc;QACpC,EAAE,CAAC,CAAC,CAAC,MAAM,IAAI,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YAC1B,MAAM,CAAC,KAAK,CAAC;QACf,CAAC;QAED,uFAAuF;QACvF,+BAA+B;QAC/B,IAAM,mBAAmB,GAAW,MAAM,IAAI,CAAC,CAAC;QAChD,EAAE,CAAC,CAAC,mBAAmB,GAAG,CAAC,IAAI,mBAAmB,IAAI,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC;YAChF,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC;QAED,sFAAsF;QACtF,IAAM,OAAO,GAAW,CAAC,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC,CAAC;QAC3C,MAAM,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,mBAAmB,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;QACnE,8BAA8B;IAChC,CAAC;IA/Bc,wBAAe,GAAa,EAAE,CAAC;IAgChD,eAAC;AAAD,CAlCA,AAkCC,IAAA;AAlCD;0BAkCC,CAAA","file":"flight/SPFlight.js","sourcesContent":["/**\r\n * @copyright Microsoft Corporation. All rights reserved.\r\n */\r\n\r\n/**\r\n * NOT FOR USE BY THIRD PARTY DEVELOPERS\r\n *\r\n * This class supports Microsoft's internal deployment workflow.\r\n * For more information, see https://microsoft.sharepoint.com/teams/odsp/_layouts/OneNote.aspx\r\n * ?id=/teams/odsp/Shared%20Documents/MI-6%20Team/MI-6%20Team/Global/SPO%20Flighting\r\n */\r\nexport default class SPFlight {\r\n\r\n  private static _enabledFlights: number[] = [];\r\n\r\n  /**\r\n   * RESERVED FOR INTERNAL USAGE.  This method is invoked automatically by the system shell.\r\n   * The application code should not call it directly.\r\n   */\r\n  public static initialize(flights: number[]): void {\r\n    this._enabledFlights = flights || [];\r\n  }\r\n\r\n  /**\r\n   * NOT FOR USE BY THIRD PARTY DEVELOPERS\r\n   *\r\n   * This function will determine if a flight is enabled in the global list.\r\n   */\r\n  public static isEnabled(flight: number): boolean {\r\n    if (!flight || flight < 0) {\r\n      return false;\r\n    }\r\n\r\n    // Determines which set of bitMasks should be used to determine if a flight is enabled.\r\n    /* tslint:disable:no-bitwise */\r\n    const enabledFlightsIndex: number = flight >> 5;\r\n    if (enabledFlightsIndex < 0 || enabledFlightsIndex >= this._enabledFlights.length) {\r\n        return false;\r\n    }\r\n\r\n    // Masks the flight number and determines if the flight is turned on within that mask.\r\n    const bitMask: number = 1 << (flight & 31);\r\n    return (this._enabledFlights[enabledFlightsIndex] & bitMask) !== 0;\r\n    /* tslint:enable:no-bitwise */\r\n  }\r\n}\r\n"],"sourceRoot":"/src"}