{"version":3,"sources":["serviceScope/ServiceKey.ts"],"names":[],"mappings":";AACA,yBAAqB,oBAAoB,CAAC,CAAA;AAO1C;;;;;;;;GAQG;AACH;IA8CE;;OAEG;IACH,oBAAY,EAAU,EAAE,IAAY,EAAE,cAAiC;QACrE,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;IACvC,CAAC;IA9CD;;;;;;;;OAQG;IACW,iBAAM,GAApB,UAAwB,IAAY,EAClC,YAAmD;QAEnD,sCAAsC;QACtC,kBAAQ,CAAC,oBAAoB,CAAC,YAAY,EAAE,cAAc,CAAC,CAAC;QAE5D,MAAM,CAAC,UAAU,CAAC,YAAY,CAAI,IAAI,EAAE,UAAC,YAA0B;YACjE,MAAM,CAAC,IAAI,YAAY,CAAC,YAAY,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;;;;OAOG;IACW,uBAAY,GAA1B,UAA8B,IAAY,EAAE,cAAiC;QAC3E,kBAAQ,CAAC,gBAAgB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QACxC,kBAAQ,CAAC,oBAAoB,CAAC,cAAc,EAAE,gBAAgB,CAAC,CAAC;QAEhE,UAAU,CAAC,OAAO,EAAE,CAAC;QAErB,IAAM,EAAE,GAAW,UAAU,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;QAEjD,MAAM,CAAC,IAAI,UAAU,CAAI,EAAE,EAAE,IAAI,EAAE,cAAc,CAAC,CAAC;IACrD,CAAC;IA3Cc,kBAAO,GAAW,CAAC,CAAC;IAqDrC,iBAAC;AAAD,CAtDA,AAsDC,IAAA;AAtDD;4BAsDC,CAAA","file":"serviceScope/ServiceKey.js","sourcesContent":["import ServiceScope from './ServiceScope';\r\nimport Validate from '../common/Validate';\r\n\r\n/**\r\n * This is a callback that is used by ServiceKey.createCustom().\r\n */\r\nexport type ServiceCreator<T> = (serviceScope: ServiceScope) => T;\r\n\r\n/**\r\n * The ServiceKey is a lookup key that is used when calling ServiceScope.consume()\r\n * to fetch a dependency.  The key also defines a default implementation of the\r\n * dependency, which will be autocreated by the root scope if the dependency is not found.\r\n * Providing a default implementation ensures that new dependencies can be safely\r\n * introduced without inadvertently breaking components that are loaded by an older host\r\n * (that does not provide the new dependency).\r\n * @public\r\n */\r\nexport default class ServiceKey<T> {\r\n  private static _lastId: number = 0;\r\n\r\n  public id: string;\r\n  public name: string;\r\n  public defaultCreator: ServiceCreator<T>;\r\n\r\n  /**\r\n   * Constructs a new ServiceKey whose default implementation will be a new instance of\r\n   * a TypeScript class that accepts the standard constructor parameter.  If you want to\r\n   * specify custom constructor parameters, use createCustom() instead.\r\n   * @param name - A name such as \"MyApplication.IMyService\" which should be unique within\r\n   *   your application.\r\n   * @param serviceClass - the TypeScript class that implements the service.\r\n   * @returns - the newly created ServiceKey\r\n   */\r\n  public static create<T>(name: string,\r\n    serviceClass: { new (serviceScope: ServiceScope); }): ServiceKey<T> {\r\n\r\n    // (createCustom() will validate name)\r\n    Validate.isNotNullOrUndefined(serviceClass, 'serviceClass');\r\n\r\n    return ServiceKey.createCustom<T>(name, (serviceScope: ServiceScope) => {\r\n      return new serviceClass(serviceScope);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Constructs a new ServiceKey whose default implementation will be obtained\r\n   * by invoking the specified callback.\r\n   * @param name - A name such as \"MyApplication.IMyService\" which should be unique within\r\n   *   your application.\r\n   * @param defaultCreator - A callback that returns an object that implements the T interface\r\n   * @returns - the newly created ServiceKey\r\n   */\r\n  public static createCustom<T>(name: string, defaultCreator: ServiceCreator<T>): ServiceKey<T> {\r\n    Validate.isNonemptyString(name, 'name');\r\n    Validate.isNotNullOrUndefined(defaultCreator, 'defaultCreator');\r\n\r\n    ServiceKey._lastId++;\r\n\r\n    const id: string = ServiceKey._lastId.toString();\r\n\r\n    return new ServiceKey<T>(id, name, defaultCreator);\r\n  }\r\n\r\n  /**\r\n   * PRIVATE - Do not call this from your own code.\r\n   */\r\n  constructor(id: string, name: string, defaultCreator: ServiceCreator<T>) {\r\n    this.id = id;\r\n    this.name = name;\r\n    this.defaultCreator = defaultCreator;\r\n  }\r\n}\r\n\r\n"],"sourceRoot":"/src"}