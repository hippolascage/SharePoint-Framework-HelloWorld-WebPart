export interface IBundleReference {
    /**
     * The ID of the module.
     */
    id: string;
    /**
     * If present, this is the name of a field on the module returned from the associated bundle that maps to
     * this library. Otherwise, the module returned from the bundle maps to this library.
     */
    entryName?: string;
}
export interface IStandardLibraryModule {
    /**
     * Reference (id and entryName pair) to the bundle
     */
    bundleReference: IBundleReference;
    /**
     * The ID of the bundle to preload.
     */
    preloadId: string;
    /**
     * The IDs of modules this module depends on.
     */
    dependentIds: string[];
    /**
     * References to modules that are swappable for this module (for example, modules that contain a superset of
     * this module).
     */
    aliases: IBundleReference[];
}
/**
 * This is a mapping from standard library module names to their manifest IDs.
 */
export declare const standardLibraryModules: {
    [moduleName: string]: IStandardLibraryModule;
};
