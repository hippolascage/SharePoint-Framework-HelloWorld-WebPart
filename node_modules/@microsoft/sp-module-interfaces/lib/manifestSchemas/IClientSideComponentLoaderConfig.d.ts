/**
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * @file Client side component loader configuration.
 */
/**
 * This interface describes how a client side component is to be loaded and initailized by a SharePoint client
 * framework. It contains all data for loading an entrypoint script and its dependency scripts.
 *
 * @beta
 */
export interface IClientSideComponentLoaderConfig {
    /**
     * Definition: This is an array of fully-qualified paths to be prepended to each of the script resource paths with the
     *  "internal" or "localized" type. If one fails to load, the loader will attempt to load from the next until there
     *  are no base paths remaning. All "internal" and "localized" script resources that do not have fully-qualified URLs
     *  as their "path" field values must be hosted under each of the paths listed in this property. For example, if an
     *  internal module's "path" field value is "master_2015-04-20/my-application.bundle_1928f8a0.js" and this field's
     *  value is [ "https://contoso.akamaihd.net/files/", "https://contoso.msecnd.net/files/" ], the loader will first
     *  attempt to load this script resource from the URL
     *  "https://contoso.akamaihd.net/files/master_2015-04-20/my-application.bundle_1928f8a0.js". If loading from
     *  that URL fails, the loader will then attempt to load this script resource from
     *  "https://contoso.msecnd.net/files/master_2015-04-20/my-application.bundle_1928f8a0.js". If that URL fails to load,
     *  the component will fail to load and an error will be returned. It is important to note that the support for
     *  multiple base URLs is purely for failover support. This means that all files must be present on all hosts
     *  listed in this field.
     * Usage: Base URLs for script resources with the "internal" or "localized" type.
     * Required: yes
     * Localized: no
     * Supported values: Any URL that contains all internal scripts referenced in the "scriptResources" dictionary.
     * Example: [ "https://contoso.akamaihd.net/files/", "https://contoso.msecnd.net/files/" ]
     */
    internalModuleBaseUrls: string[];
    /**
     * Definition: This is the ID of one of the entries in the "scriptResources" dictionary. The loader will download and
     *  evaluate the script resource referenced in this field, resolve all dependencies against the keys in the
     *  "scriptResources", and return the exported object to the loader's calling function. The entry referenced in the
     *  "scriptResources" dictionary must be of the "internal" or the "localized" type.
     * Required: yes
     * Localized: no
     * Supported values: An entry in the "scriptResources" dictionary that defines the base exported module of the
     *  component.
     * Example: "myApplication.bundle"
     */
    entryModuleId: string;
    /**
     * Definition: The module referenced by the "entryModuleId" field may export an object with several fields. This value
     *  optionally references the name of a field on the object exported by the module referenced by the "entryModuleId"
     *  field. When this field has a value, the value of the referenced field on the object exported by the module
     *  referenced by the "entryModuleId" field is returned when this manifest is loaded instead of the base exported
     *  object. For example, if entryModuleId refers to a module with with a top-level export of
     *  "{ foo: 'bar', baz: 123 }" and:
     *    - if this field is unset, the value returned by the modue loader is "{ foo: 'bar', baz: 123 }"
     *    - if this field is set to "foo", the value returned by the modue loader is "bar"
     *    - if this field is set to "bar", the value returned by the modue loader is undefined (as "bar" is not a key in
     *        the top-level export).
     *
     * Usage: To reference a field in the top-level export.
     * Required: no
     * Example: mySpWebpart
     */
    exportedModuleName?: string;
    /**
     * Definition: This is a dictionary of named script resources. "internal" and "localized" modules may reference each
     *  other and "framework" modules are expected to be provided by the framework runtime. The resource named in the
     *  "entryModuleId" must contain the component's exported object.
     * Required: yes
     * Localized: no
     * Supported values: A dictionary of named script resources.
     * Example:
     *  {
     *    "myApplication.bundle": {
     *      "type": "internal",
     *      "path": "master_2015-04-20/my-application.bundle_1928f8a0.js"
     *    },
     *    "@microsoft/sp-client-base": {
     *      "type": "framework",
     *      "version": "latest"
     *    },
     *    "@microsoft/sp-client-preview": {
     *      "type": "framework",
     *      "version": "latest"
     *    },
     *    "jQuery": {
     *      "type": "framework",
     *      "version": "2.2.4",
     *      "path": "https://code.jquery.com/jquery-2.2.4.min.js"
     *    },
     *    "myApplication_strings": {
     *      "type": "localized",
     *      "defaultPath": "master_2015-04-20/my-application_strings_default_af378e0d.js",
     *      "paths": {
     *        "en-us": "master_2015-04-20/my-application_strings_en-us_d38ff012.js",
     *        "fr-fr": "master_2015-04-20/my-application_strings_fr-fr_138af7e4.js"
     *      }
     *    }
     *  }
     */
    scriptResources: {
        [name: string]: IModuleConfig;
    };
}
/**
 * This is the base interface for a set of debug and non-debug/minimized paths. The paths in this object are
 *  loaded in exactly the same way as any other internal path.
 *
 * @beta
 */
export interface IPath {
    /**
     * Definition: A path to this module's javascript resource either as a fully-qualified URL or as a path under the
     *  paths provided in the "internalModuleBaseUrls" field. The script referenced by this field is loaded by default
     *  unless a debug version of the script is provided and explicitly requested.
     * Required: yes
     * Supported values: The path to the default/non-debug script either as a fully-qualified URL or as a path under the
     *  paths providedin the "internalModuleBaseUrls" field.
     * Example: "master_2015-04-20/my-application.bundle_1928f8a0.js"
     */
    default: string;
    /**
     * Definition: A path to this module's debug javascript resource either as a fully-qualified URL or as a path under
     *  the paths provided in the "internalModuleBaseUrls" field. The script referenced by this field is only loaded if
     *  it is present and debug scripts are explicitly requested.
     * Required: no
     * Supported values: The path to the debug script either as a fully-qualified URL or as a path under the
     *  paths providedin the "internalModuleBaseUrls" field.
     * Example: "master_2015-04-20/my-application.bundle_18182c39.debug.js"
     */
    debug?: string;
}
/**
 * This is the base interface for a script module's definition.
 *
 * @beta
 */
export interface IModuleConfig {
    /**
     * Definition: The type of the script block. "framework" modules are expected to be provided by the framework runtime,
     *  "internal" and "localized" modules must be available on the paths provided in the "internalModuleBaseUrls" field.
     *  Modules with the "internal" type use the "IInternalModuleConfig" interface. Modules with the "framework" type use
     *  the "IFrameworkModuleConfig" interface. Modules with the "localized" type use the "ILocalizedInternalModuleConfig"
     *  interface.
     * Required: yes
     * Localized: no
     * Supported values: "internal", "framework", "localized"
     * Example: "localized"
     */
    type: 'internal' | 'framework' | 'localized';
    /**
     * Definition: If set to "true", this module should not be preloaded when loading the component. The most common case
     *  for setting this property to "true" is when a module is defined in a manifest, but is not required for the
     *  module referenced in "entryModuleId" to load. Modules may be defined that are loaded asynchronously, and these
     *  modules do not need to be preloaded. This field implicitly defaults to "false".
     * Usage: Instructs the module loader to not preload this module.
     * Required: no
     * Example: true
     */
    shouldNotPreload?: boolean;
}
/**
 * This is the interface for a script module with the "framework" type. Modules of this type will be provided by the
 *  framework runtime. The key in the "scriptResources" dictionary must be the name of a standard framework library.
 *
 * @beta
 */
export interface IFrameworkModuleConfig extends IModuleConfig {
    /**
     * Definition: The version of the framework-supplied module to be loaded. For framework runtime modules such as
     *  "@microsoft/sp-client-base," it is recommended the version of the framework module the component was developed
     *  against be specified.
     * Required: yes
     * Localized: no
     * Supported values: string representing a semantic version (http://semver.org), or "latest".
     * Example: "2.2.4"
     */
    version: string;
    /**
     * Definition: A path to the framework-supplied module in case the framework fails to load the requested version. This
     *  must be either a fully-qualified URL, or a path under the paths specified in the "internalModuleBaseUrls" field.
     *  If this field is not specified and the version is not available in the framework runtime, the closest matching
     *  version of the module will be provided instead.
     * Required: no
     * Localized: no
     * Supported values: The path to the module either as a fully-qualified URL or as a path under the
     *  paths providedin the "internalModuleBaseUrls" field.
     * Example: "https://code.jquery.com/jquery-2.2.4.min.js"
     */
    failoverPath?: string | IPath;
}
/**
 * This is the interface for a script module with the "internal" type. Modules of this type must be provided by the
 *  component developer.
 *
 * @beta
 */
export interface IInternalModuleConfig extends IModuleConfig {
    /**
     * Definition: A path to this module's javascript resource either as a fully-qualified URL or as a path under the
     *  paths provided in the "internalModuleBaseUrls" field. For example, if this field's value is
     *  "master_2015-04-20/my-application.bundle_1928f8a0.js" and the "internalModuleBaseUrls" field's value is
     *  [ "https://contoso.akamaihd.net/files/", "https://contoso.msecnd.net/files/" ], the loader will first attempt to
     *  load this script resource from the URL
     *  "https://contoso.akamaihd.net/files/master_2015-04-20/my-application.bundle_1928f8a0.js". If loading from that URL
     *  fails, the loader will then attempt to load this script resource from
     *  "https://contoso.msecnd.net/files/master_2015-04-20/my-application.bundle_1928f8a0.js". If that URL fails to load,
     *  the component will fail to load and an error will be returned.
     * Required: yes
     * Localized: no
     * Supported values: The path to the module either as a fully-qualified URL or as a path under the
     *  paths providedin the "internalModuleBaseUrls" field.
     * Example: "master_2015-04-20/my-application.bundle_1928f8a0.js"
     */
    path: string | IPath;
    /**
     * Definition: In order to load scripts that don't follow the AMD/module-pattern where "define" or "require" is
     *  called and dependencies are explicitly listed and exports are explicitly returned, the module loader needs to
     *  know which global variable must be examined. If this propery is specified, this module is considered non-AMD and
     *  the module loader will not expect "define" or "require" to be called. Instead, it will wait for the script to
     *  finish loading and examine the global variable specified in this field.
     * Required: no
     * Localized: no
     * Supported values: Variable names that are expected to be populated after this module is loaded. For example,
     *  if this module is describing jQuery, this value should probably be "$". If an empty string is specified,
     *  the module loader will throw an exception and the component will fail to load.
     * Example: "$"
     */
    globalName?: string;
    /**
     * Definition: For non-AMD/module-pattern scripts that have dependencies (for example, jQuery plugins), the module
     *  loader will ensure that those dependencies are already loaded. Entries in the array specified in this field must
     *  refer to other non-AMD modules in this component. This field is not required to have a value for
     *  non-AMD modules. If any values are specified that do not refer to other modules in the same component manifest
     *  that this module is specified, the module loader will throw an exception and the component will fail to load.
     * Required: no
     * Supported values: Names of other non-AMD-pattern modules in this loader configuration, as specified by the key
     *  IClientSideComponentLoaderConfig.scriptResources[]
     * Example: ["jquery"]
     */
    globalDependencies?: string[];
}
/**
 * This is the interface for a script module with the "localized" type. Modules of this type must be provided by the
 *  component developer. These script resources are similar to those of the "internal" type, but they may be present
 *  at a number of different paths, to be selected by the user's locale. Paths in this module type are loaded exactly
 *  the same way as "internal" modules are.
 *
 * @beta
 */
export interface ILocalizedInternalModuleConfig extends IModuleConfig {
    /**
     * Definition: A path to this module's default locale javascript resource either as a fully-qualified URL or as a
     *  path under the paths provided in the "internalModuleBaseUrls" field. If the user's locale does not resolve to one
     *  of the paths specified in the "paths" field, the path in this field is used. Paths in this module type are
     *  treated exactly the same way paths in modules of the "internal" type are treated.
     * Required: yes
     * Localized: no
     * Supported values: The path to the default locale version of the module either as a fully-qualified URL or as a path
     *  under the paths providedin the "internalModuleBaseUrls" field.
     * Example: "master_2015-04-20/my-application_strings_default_af378e0d.js"
     */
    defaultPath: string | IPath;
    /**
     * Definition: This is a dictionary of locale keys (in the "ll-cc" format) to paths to this module's localed
     *  javascript resource either as a fully-qualified URL or as a path under the paths provided in the
     *  "internalModuleBaseUrls" field. The loader will attempt to resolve the user's locale to one of the paths provided
     *  by this field, and will load the script resource under that path. If the user's locale does not resolve to one
     *  of the paths specified in this field, the path in "defaultPath" field is used. For example, if the user's locale
     *  is "en-gb", and this field's value contains the keys [ "en-us", "en-gb", "fr-fr" ], the path specified by the
     *  "en-gb" key will be used. If the user's locale is "en-gb", and this field's value contains the keys [ "en-us",
     *  "fr-fr" ], the path specified by the "en-us" key will be used. If the user's locale is "en-gb", and this field's
     *  value contains the keys [ "es-es", "fr-fr" ], the path specified by the "defaultPath" field will be used.
     *  Paths in this module type are treated exactly the same way paths in modules of the "internal" type are treated.
     * Required: no
     * Localized: no
     * Supported values: A dictionary of locale-to-path mappings.
     * Example:
     *  {
     *    "en-us": "master_2015-04-20/my-application_strings_en-us_d38ff012.js",
     *    "fr-fr": "master_2015-04-20/my-application_strings_fr-fr_138af7e4.js"
     *  }
     */
    paths?: {
        [locale: string]: string | IPath;
    };
}
