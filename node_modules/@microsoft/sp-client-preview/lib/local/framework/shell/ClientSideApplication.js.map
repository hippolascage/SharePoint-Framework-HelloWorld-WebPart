{"version":3,"sources":["local/framework/shell/ClientSideApplication.ts"],"names":[],"mappings":";AAOA,6CAAyC,gCAAgC,CAAC,CAAA;AAE1E;;;;;;GAMG;AACH;IAIE;QACE,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC;QACxB,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC;QAE7B,sCAAsC;QACtC,IAAI,CAAC,QAAQ,CAAC,GAAG,uBAAuB,CAAC;QACzC,qCAAqC;IACvC,CAAC;IAMD,sBAAc,wCAAK;QAJnB;;;WAGG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QACrB,CAAC;aAED,UAAoB,KAAa;YAC/B,MAAM,IAAI,KAAK,CAAC,yDAAyD,CAAC,CAAC;QAC7E,CAAC;;;OAJA;IAYD,sBAAc,6CAAU;QANxB;;;;;WAKG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;QAC1B,CAAC;aAED,UAAyB,KAAqB;YAC5C,MAAM,IAAI,KAAK,CAAC,yDAAyD,CAAC,CAAC;QAC7E,CAAC;;;OAJA;IAMD;;;OAGG;IACI,oCAAI,GAAX,UAAY,KAAa;QACvB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,MAAM,EAAE,CAAC;IAChB,CAAC;IAED;;;;;;OAMG;IACO,sCAAM,GAAhB;QACE,cAAc;IAChB,CAAC;IAED;;;OAGG;IACI,sCAAM,GAAb,UAAc,UAA0B;QACtC,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,IAAI,CAAC,QAAQ,EAAE,CAAC;IAClB,CAAC;IAED;;;;OAIG;IACO,wCAAQ,GAAlB;QACE,cAAc;IAChB,CAAC;IAEM,qDAAqB,GAA5B;QACE,MAAM,CAAC,IAAI,sCAA4B,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;IACtE,CAAC;IACH,4BAAC;AAAD,CAhFA,AAgFC,IAAA;AAhFD;uCAgFC,CAAA","file":"local/framework/shell/ClientSideApplication.js","sourcesContent":["/**\r\n * @Copyright (c) Microsoft Corporation.  All rights reserved.\r\n *\r\n * @file Interface for a Master Page Application\r\n */\r\nimport { IShell } from './Shell';\r\nimport ISuiteNavManagerConfiguration from '../../common/suiteNav/ISuiteNavManagerConfiguration';\r\nimport SuiteNavManagerConfiguration from './SuiteNavManagerConfiguration';\r\n\r\n/**\r\n * This is the system base class for client-side applications.  It manages the overall\r\n * life cycle of your application, and is the first entry point for your code to start\r\n * executing when the page loads.  The two main events are onLoad() which occurs first,\r\n * and onRender() which occurs after the shell has initialized the environment and\r\n * completed rendering the page chrome.\r\n */\r\nexport default class ClientSideApplication {\r\n  private _shell: IShell;\r\n  private _domElement: HTMLDivElement;\r\n\r\n  constructor() {\r\n    this._shell = undefined;\r\n    this._domElement = undefined;\r\n\r\n    /* tslint:disable:no-string-literal */\r\n    this['__type'] = 'ClientSideApplication';\r\n    /* tslint:enable:no-string-literal */\r\n  }\r\n\r\n  /**\r\n   * Returns a reference to the shell, which is a global singleton object that contains\r\n   * the main service classes.\r\n   */\r\n  protected get shell(): IShell {\r\n    return this._shell;\r\n  }\r\n\r\n  protected set shell(value: IShell) {\r\n    throw new Error('The property cannot be assigned because it is read-only');\r\n  }\r\n\r\n  /**\r\n   * Returns the DOM element where the application is expected to render its content.\r\n   * The domElement will be undefined until the onRender() event occurs.\r\n   * IMPORTANT: The application should not access DOM elements outside of this subtree,\r\n   * as they are system-defined and may change over time.\r\n   */\r\n  protected get domElement(): HTMLDivElement {\r\n    return this._domElement;\r\n  }\r\n\r\n  protected set domElement(value: HTMLDivElement) {\r\n    throw new Error('The property cannot be assigned because it is read-only');\r\n  }\r\n\r\n  /**\r\n   * RESERVED FOR INTERNAL USAGE.  This method is invoked automatically by the system shell.\r\n   * The application code should not call it directly.\r\n   */\r\n  public load(shell: IShell): void {\r\n    this._shell = shell;\r\n    this.onLoad();\r\n  }\r\n\r\n  /**\r\n   * This life cycle event occurs immediately after the shell has loaded the application,\r\n   * before the DOM is constructed.  Applications can use this event to load scripts\r\n   * or start asynchronous operations that need to occur early in the lifecycle.\r\n   * Inside the onLoad() event, applications may also modify the rendering of various\r\n   * page chrome elements, for example by calling this.shell.suiteNav.setComponentVisibility(false).\r\n   */\r\n  protected onLoad(): void {\r\n    // EMPTY BLOCK\r\n  }\r\n\r\n  /**\r\n   * RESERVED FOR INTERNAL USAGE.  This method is invoked automatically by the system shell.\r\n   * The application code should not call it directly.\r\n   */\r\n  public render(domElement: HTMLDivElement): void {\r\n    this._domElement = domElement;\r\n    this.onRender();\r\n  }\r\n\r\n  /**\r\n   * This lifecycle event occurs after the shell has constructed the DOM for the page chrome.\r\n   * At this time, the domElement property will be initialized, and the application can begin\r\n   * rendering its own DOM elements.\r\n   */\r\n  protected onRender(): void {\r\n    // EMPTY BLOCK\r\n  }\r\n\r\n  public suiteNavConfiguration(): ISuiteNavManagerConfiguration {\r\n    return new SuiteNavManagerConfiguration(this._shell.appPageContext);\r\n  }\r\n}\r\n"],"sourceRoot":"/src"}