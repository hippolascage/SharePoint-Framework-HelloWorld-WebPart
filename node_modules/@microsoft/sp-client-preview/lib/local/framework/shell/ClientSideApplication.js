"use strict";
var SuiteNavManagerConfiguration_1 = require('./SuiteNavManagerConfiguration');
/**
 * This is the system base class for client-side applications.  It manages the overall
 * life cycle of your application, and is the first entry point for your code to start
 * executing when the page loads.  The two main events are onLoad() which occurs first,
 * and onRender() which occurs after the shell has initialized the environment and
 * completed rendering the page chrome.
 */
var ClientSideApplication = (function () {
    function ClientSideApplication() {
        this._shell = undefined;
        this._domElement = undefined;
        /* tslint:disable:no-string-literal */
        this['__type'] = 'ClientSideApplication';
        /* tslint:enable:no-string-literal */
    }
    Object.defineProperty(ClientSideApplication.prototype, "shell", {
        /**
         * Returns a reference to the shell, which is a global singleton object that contains
         * the main service classes.
         */
        get: function () {
            return this._shell;
        },
        set: function (value) {
            throw new Error('The property cannot be assigned because it is read-only');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClientSideApplication.prototype, "domElement", {
        /**
         * Returns the DOM element where the application is expected to render its content.
         * The domElement will be undefined until the onRender() event occurs.
         * IMPORTANT: The application should not access DOM elements outside of this subtree,
         * as they are system-defined and may change over time.
         */
        get: function () {
            return this._domElement;
        },
        set: function (value) {
            throw new Error('The property cannot be assigned because it is read-only');
        },
        enumerable: true,
        configurable: true
    });
    /**
     * RESERVED FOR INTERNAL USAGE.  This method is invoked automatically by the system shell.
     * The application code should not call it directly.
     */
    ClientSideApplication.prototype.load = function (shell) {
        this._shell = shell;
        this.onLoad();
    };
    /**
     * This life cycle event occurs immediately after the shell has loaded the application,
     * before the DOM is constructed.  Applications can use this event to load scripts
     * or start asynchronous operations that need to occur early in the lifecycle.
     * Inside the onLoad() event, applications may also modify the rendering of various
     * page chrome elements, for example by calling this.shell.suiteNav.setComponentVisibility(false).
     */
    ClientSideApplication.prototype.onLoad = function () {
        // EMPTY BLOCK
    };
    /**
     * RESERVED FOR INTERNAL USAGE.  This method is invoked automatically by the system shell.
     * The application code should not call it directly.
     */
    ClientSideApplication.prototype.render = function (domElement) {
        this._domElement = domElement;
        this.onRender();
    };
    /**
     * This lifecycle event occurs after the shell has constructed the DOM for the page chrome.
     * At this time, the domElement property will be initialized, and the application can begin
     * rendering its own DOM elements.
     */
    ClientSideApplication.prototype.onRender = function () {
        // EMPTY BLOCK
    };
    ClientSideApplication.prototype.suiteNavConfiguration = function () {
        return new SuiteNavManagerConfiguration_1.default(this._shell.appPageContext);
    };
    return ClientSideApplication;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ClientSideApplication;

//# sourceMappingURL=ClientSideApplication.js.map
