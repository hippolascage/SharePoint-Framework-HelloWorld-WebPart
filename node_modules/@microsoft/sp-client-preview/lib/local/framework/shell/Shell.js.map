{"version":3,"sources":["local/framework/shell/Shell.ts"],"names":[],"mappings":"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","file":"local/framework/shell/Shell.js","sourcesContent":["import {\r\n  BasicHttpClient,\r\n  HttpClient,\r\n  IServiceScopeProvider,\r\n  _LogSource,\r\n  ServiceScope,\r\n  _TraceLogger,\r\n  basicHttpClientServiceKey,\r\n  httpClientServiceKey,\r\n  _PerformanceLogger,\r\n  PageContext,\r\n  pageContextServiceKey,\r\n  Environment,\r\n  EnvironmentType,\r\n  environmentServiceKey\r\n} from '@microsoft/sp-client-base';\r\n\r\nimport ClientSideApplication from './ClientSideApplication';\r\nimport IComponentVisible from '../../common/spPageChrome/IComponentVisible';\r\nimport SuiteNavManager from '../../common/suiteNav/SuiteNavManager';\r\nimport ISPPageChrome from '../../common/spPageChrome/ISPPageChrome';\r\nimport SPPageChrome from '../../common/spPageChrome/SPPageChrome';\r\nimport PreloadedDataReader, { IPreloadedData } from './PreloadedDataReader';\r\nimport AppPageContext, { appPageContextServiceKey } from '../pageContext/AppPageContext';\r\n\r\n/**\r\n * The system shell manages the initial loading of the scripts for a client-side application,\r\n * as well as constructin the ClientSideApplication object, and initializing key services such\r\n * as the page chrome, page context, HTTP client, etc.\r\n *\r\n * @alpha\r\n */\r\nexport interface IShell extends IServiceScopeProvider {\r\n  /**\r\n   * Describes the type of environment that the framework is being hosted on.\r\n   */\r\n  environment: Environment;\r\n\r\n  /**\r\n   * Returns the current page context object for webparts.\r\n   */\r\n  pageContext: PageContext;\r\n\r\n  /**\r\n   * Returns the current page context object for the applcation.\r\n   * Will be phased out soon.\r\n   */\r\n  appPageContext: AppPageContext;\r\n\r\n  /**\r\n   * BasicHttpClient is used to perform REST calls with general internet services.\r\n   * For communicating with SharePoint services, use HttpClient instead.\r\n   */\r\n  basicHttpClient: BasicHttpClient;\r\n\r\n  /**\r\n   * HttpClient is used to perform REST calls with SharePoint services.\r\n   * It implements special enhancements such as configuring default headers, adding\r\n   * an \"X-RequestDigest\" header for write operations, and collecting telemetry\r\n   * to help the service monitor the performance and reliability of the application.\r\n   *\r\n   * For communicating with non-SharePoint services, use BasicHttpClient instead.\r\n   */\r\n  httpClient: HttpClient;\r\n\r\n  /**\r\n   * This object allows the application to manage the suite navigation of\r\n   * the standard page chrome.  For more information about Suite Navigation,\r\n   * see this article:\r\n   * https://msdn.microsoft.com/en-us/library/office/dn614990.aspx\r\n   */\r\n  suiteNav: IComponentVisible;\r\n}\r\n\r\nexport interface IClientSideApplicationWrapper {\r\n  default: ClientSideApplication;\r\n}\r\n\r\n/**\r\n * RESERVED FOR INTERNAL USAGE.  Applications interact with the shell via\r\n * the IShell interface.\r\n *\r\n * @internal\r\n */\r\nexport default class Shell implements IShell {\r\n  private static _logSource: _LogSource = _LogSource.create('Shell');\r\n  private static _instance: IShell = undefined;\r\n\r\n  private _rootServiceScope: ServiceScope;\r\n  private _spPageChrome: ISPPageChrome;\r\n  private _application: ClientSideApplication;\r\n  private _suiteNav: SuiteNavManager;\r\n  private _preloadedDataReader: PreloadedDataReader;\r\n  private _appPageContext: AppPageContext;\r\n  private _pageContext: PageContext;\r\n  private _basicHttpClient: BasicHttpClient;\r\n  private _httpClient: HttpClient;\r\n  private _environment: Environment;\r\n\r\n  public static getInstance(): IShell {\r\n    if (Shell._instance === undefined) {\r\n      Shell._instance = new Shell();\r\n    }\r\n    return Shell._instance;\r\n  }\r\n\r\n  public get serviceScope(): ServiceScope {\r\n    return this._rootServiceScope;\r\n  }\r\n\r\n  public get pageContext(): PageContext {\r\n    return this._pageContext;\r\n  }\r\n\r\n  public get appPageContext(): AppPageContext {\r\n    return this._appPageContext;\r\n  }\r\n\r\n  public get basicHttpClient(): BasicHttpClient {\r\n    return this._basicHttpClient;\r\n  }\r\n\r\n  public get httpClient(): HttpClient {\r\n    return this._httpClient;\r\n  }\r\n\r\n  public get suiteNav(): IComponentVisible {\r\n    return this._suiteNav;\r\n  }\r\n\r\n  public get environment(): Environment {\r\n    return this._environment;\r\n  }\r\n\r\n  public start(module: IClientSideApplicationWrapper | ClientSideApplication,\r\n                     preloadedData: IPreloadedData): void {\r\n    this._initializePreload(preloadedData);\r\n    _PerformanceLogger.markApplicationStart();\r\n    this._startApplication((module as IClientSideApplicationWrapper).default || module as ClientSideApplication);\r\n  }\r\n\r\n  private _startApplication(application: ClientSideApplication): void {\r\n    /* tslint:disable:no-string-literal */\r\n    if (application['__type'] !== 'ClientSideApplication') {\r\n      /* tslint:enable:no-string-literal */\r\n      throw new Error('The application is not a subclass of ClientSideApplication');\r\n    }\r\n\r\n    this._application = application;\r\n    this._application.load(this);\r\n\r\n    // Checks if the page is being served by localhost, which doesn't provide SuiteNav Services\r\n    // @todo Bug 190509 Implement Mock SuiteNav\r\n    this._suiteNav = new SuiteNavManager(\r\n      this._application.suiteNavConfiguration(),\r\n      this._spPageChrome.suiteNavDiv,\r\n      this.serviceScope);\r\n\r\n    this._suiteNav.loadSuiteNav();\r\n    this._application.render(this._spPageChrome.appDiv);\r\n  }\r\n\r\n  private _initializePreload(preloadedData: IPreloadedData): void {\r\n    // We encountered IE compatibility errors when trying to access the window variable\r\n    // without using the [] notation\r\n    /* tslint:disable:no-string-literal */\r\n    window['_spClientSidePageContext'] = preloadedData;\r\n\r\n    // HACK (VSO#221483): Setting the _spPageContextInfo on the window to workaround Manifest v2 issues\r\n    window['_spPageContextInfo'] = preloadedData.spPageContextInfo;\r\n    /* tslint:enable:no-string-literal */\r\n\r\n    _TraceLogger.logVerbose(Shell._logSource, 'Starting sp-client-preview');\r\n\r\n    this._rootServiceScope = ServiceScope.startNewRoot();\r\n    this._environment = this._rootServiceScope\r\n      .createDefaultAndProvide(environmentServiceKey) as Environment;\r\n    this._pageContext = this._rootServiceScope\r\n      .createDefaultAndProvide(pageContextServiceKey) as PageContext;\r\n    this._appPageContext = this._rootServiceScope\r\n      .createDefaultAndProvide(appPageContextServiceKey) as AppPageContext;\r\n    this._basicHttpClient = this._rootServiceScope.createAndProvide(basicHttpClientServiceKey,\r\n      BasicHttpClient);\r\n    this._httpClient = this._rootServiceScope.createAndProvide(httpClientServiceKey, HttpClient);\r\n    this._rootServiceScope.finish();\r\n\r\n    this._preloadedDataReader = new PreloadedDataReader(preloadedData);\r\n\r\n    this._initializeEnvironment(this._environment);\r\n    this._preloadedDataReader.initializeDigestCache(this._rootServiceScope);\r\n    this._preloadedDataReader.initializePageContext(this._appPageContext);\r\n    this._initializePageContextFromAppContext(this._pageContext, this._appPageContext);\r\n    this._spPageChrome = SPPageChrome.getInstance(this._rootServiceScope);\r\n  }\r\n\r\n  /**\r\n   * Populates the webPart pageContext using the data from the app Page Context. AppPageContext\r\n   * must be populated already.\r\n   */\r\n  private _initializePageContextFromAppContext(pageContext: PageContext, appPageContext: AppPageContext): void {\r\n    pageContext.initialize({\r\n      cultureInfo: {\r\n        currentCultureName: appPageContext.core.currentCultureName,\r\n        currentUICultureName: appPageContext.core.currentUICultureName\r\n      },\r\n      site: {\r\n        id: appPageContext.core.siteId\r\n      },\r\n      user: {\r\n        displayName: appPageContext.core.userDisplayName,\r\n        loginName: appPageContext.core.userLoginName\r\n      },\r\n      web: {\r\n        absoluteUrl: appPageContext.core.webAbsoluteUrl,\r\n        id: appPageContext.core.webId,\r\n        serverRelativeUrl: appPageContext.core.webServerRelativeUrl,\r\n        title: appPageContext.core.webTitle\r\n      }\r\n    });\r\n  }\r\n\r\n  private _initializeEnvironment(environment: Environment): void {\r\n    let type: EnvironmentType;\r\n    /* tslint:disable:no-string-literal */\r\n    if (\r\n      window.location.hostname === 'localhost' ||\r\n      window['ENVIRONMENTTYPE'] &&\r\n      window['ENVIRONMENTTYPE'] === 'Local') {\r\n    /* tslint:enable:no-string-literal */\r\n      type = EnvironmentType.Local;\r\n    } else {\r\n      type = EnvironmentType.SharePoint;\r\n    }\r\n    environment._initialize(type);\r\n  }\r\n}\r\n\r\n"],"sourceRoot":"/src"}