"use strict";
var sp_client_base_1 = require('@microsoft/sp-client-base');
var SuiteNavManager_1 = require('../../common/suiteNav/SuiteNavManager');
var SPPageChrome_1 = require('../../common/spPageChrome/SPPageChrome');
var PreloadedDataReader_1 = require('./PreloadedDataReader');
var AppPageContext_1 = require('../pageContext/AppPageContext');
/**
 * RESERVED FOR INTERNAL USAGE.  Applications interact with the shell via
 * the IShell interface.
 *
 * @internal
 */
var Shell = (function () {
    function Shell() {
    }
    Shell.getInstance = function () {
        if (Shell._instance === undefined) {
            Shell._instance = new Shell();
        }
        return Shell._instance;
    };
    Object.defineProperty(Shell.prototype, "serviceScope", {
        get: function () {
            return this._rootServiceScope;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Shell.prototype, "pageContext", {
        get: function () {
            return this._pageContext;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Shell.prototype, "appPageContext", {
        get: function () {
            return this._appPageContext;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Shell.prototype, "basicHttpClient", {
        get: function () {
            return this._basicHttpClient;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Shell.prototype, "httpClient", {
        get: function () {
            return this._httpClient;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Shell.prototype, "suiteNav", {
        get: function () {
            return this._suiteNav;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Shell.prototype, "environment", {
        get: function () {
            return this._environment;
        },
        enumerable: true,
        configurable: true
    });
    Shell.prototype.start = function (module, preloadedData) {
        this._initializePreload(preloadedData);
        sp_client_base_1._PerformanceLogger.markApplicationStart();
        this._startApplication(module.default || module);
    };
    Shell.prototype._startApplication = function (application) {
        /* tslint:disable:no-string-literal */
        if (application['__type'] !== 'ClientSideApplication') {
            /* tslint:enable:no-string-literal */
            throw new Error('The application is not a subclass of ClientSideApplication');
        }
        this._application = application;
        this._application.load(this);
        // Checks if the page is being served by localhost, which doesn't provide SuiteNav Services
        // @todo Bug 190509 Implement Mock SuiteNav
        this._suiteNav = new SuiteNavManager_1.default(this._application.suiteNavConfiguration(), this._spPageChrome.suiteNavDiv, this.serviceScope);
        this._suiteNav.loadSuiteNav();
        this._application.render(this._spPageChrome.appDiv);
    };
    Shell.prototype._initializePreload = function (preloadedData) {
        // We encountered IE compatibility errors when trying to access the window variable
        // without using the [] notation
        /* tslint:disable:no-string-literal */
        window['_spClientSidePageContext'] = preloadedData;
        // HACK (VSO#221483): Setting the _spPageContextInfo on the window to workaround Manifest v2 issues
        window['_spPageContextInfo'] = preloadedData.spPageContextInfo;
        /* tslint:enable:no-string-literal */
        sp_client_base_1._TraceLogger.logVerbose(Shell._logSource, 'Starting sp-client-preview');
        this._rootServiceScope = sp_client_base_1.ServiceScope.startNewRoot();
        this._environment = this._rootServiceScope
            .createDefaultAndProvide(sp_client_base_1.environmentServiceKey);
        this._pageContext = this._rootServiceScope
            .createDefaultAndProvide(sp_client_base_1.pageContextServiceKey);
        this._appPageContext = this._rootServiceScope
            .createDefaultAndProvide(AppPageContext_1.appPageContextServiceKey);
        this._basicHttpClient = this._rootServiceScope.createAndProvide(sp_client_base_1.basicHttpClientServiceKey, sp_client_base_1.BasicHttpClient);
        this._httpClient = this._rootServiceScope.createAndProvide(sp_client_base_1.httpClientServiceKey, sp_client_base_1.HttpClient);
        this._rootServiceScope.finish();
        this._preloadedDataReader = new PreloadedDataReader_1.default(preloadedData);
        this._initializeEnvironment(this._environment);
        this._preloadedDataReader.initializeDigestCache(this._rootServiceScope);
        this._preloadedDataReader.initializePageContext(this._appPageContext);
        this._initializePageContextFromAppContext(this._pageContext, this._appPageContext);
        this._spPageChrome = SPPageChrome_1.default.getInstance(this._rootServiceScope);
    };
    /**
     * Populates the webPart pageContext using the data from the app Page Context. AppPageContext
     * must be populated already.
     */
    Shell.prototype._initializePageContextFromAppContext = function (pageContext, appPageContext) {
        pageContext.initialize({
            cultureInfo: {
                currentCultureName: appPageContext.core.currentCultureName,
                currentUICultureName: appPageContext.core.currentUICultureName
            },
            site: {
                id: appPageContext.core.siteId
            },
            user: {
                displayName: appPageContext.core.userDisplayName,
                loginName: appPageContext.core.userLoginName
            },
            web: {
                absoluteUrl: appPageContext.core.webAbsoluteUrl,
                id: appPageContext.core.webId,
                serverRelativeUrl: appPageContext.core.webServerRelativeUrl,
                title: appPageContext.core.webTitle
            }
        });
    };
    Shell.prototype._initializeEnvironment = function (environment) {
        var type;
        /* tslint:disable:no-string-literal */
        if (window.location.hostname === 'localhost' ||
            window['ENVIRONMENTTYPE'] &&
                window['ENVIRONMENTTYPE'] === 'Local') {
            /* tslint:enable:no-string-literal */
            type = sp_client_base_1.EnvironmentType.Local;
        }
        else {
            type = sp_client_base_1.EnvironmentType.SharePoint;
        }
        environment._initialize(type);
    };
    Shell._logSource = sp_client_base_1._LogSource.create('Shell');
    Shell._instance = undefined;
    return Shell;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Shell;

//# sourceMappingURL=Shell.js.map
