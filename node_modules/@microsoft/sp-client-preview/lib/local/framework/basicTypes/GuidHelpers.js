"use strict";
var GuidHelpers = (function () {
    function GuidHelpers() {
    }
    GuidHelpers.isValid = function (guid) {
        var regex = new RegExp('^[a-f0-9]{8}(?:-[a-f0-9]{4}){3}-[a-f0-9]{12}$', 'i');
        return regex.test(guid);
    };
    GuidHelpers.requireValid = function (guid) {
        if (!GuidHelpers.isValid(guid)) {
            throw Error("Invalid GUID syntax " + guid);
        }
    };
    /**
     * Example: "/Guid(d5369f3b-bd7a-412a-9c0f-7f0650bb5489)/"
     *          -> 'd5369f3b-bd7a-412a-9c0f-7f0650bb5489'
     * Example: "{d5369f3b-bd7a-412a-9c0f-7f0650bb5489}"
     *          -> 'd5369f3b-bd7a-412a-9c0f-7f0650bb5489'
     */
    GuidHelpers.getNormalized = function (guid) {
        var normalized = guid;
        var regexp = new RegExp('^/Guid\\((.*)\\)/', 'i');
        var result = regexp.exec(guid);
        if (result) {
            normalized = result[1];
        }
        if (normalized.length === 38) {
            // Strip leading/trailing {}
            normalized = normalized.substr(1, 36);
        }
        GuidHelpers.requireValid(normalized);
        return normalized.toLowerCase();
    };
    /* tslint:disable:no-bitwise */
    GuidHelpers.generateGuid = function () {
        return 'AAAAAAAA-AAAA-4AAA-BAAA-AAAAAAAAAAAA'
            .replace(/[AB]/g, function (character) {
            var num = Math.random() * 16 | 0;
            var masked = character === 'A' ? num : (num & 0x3 | 0x8);
            return masked.toString(16);
        });
    };
    return GuidHelpers;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = GuidHelpers;

//# sourceMappingURL=GuidHelpers.js.map
