{"version":3,"sources":["local/framework/basicTypes/GuidHelpers.ts"],"names":[],"mappings":";AAAA;IAAA;IA8CA,CAAC;IA7Ce,mBAAO,GAArB,UAAsB,IAAY;QAChC,IAAM,KAAK,GAAW,IAAI,MAAM,CAAC,+CAA+C,EAAE,GAAG,CAAC,CAAC;QACvF,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC1B,CAAC;IAEa,wBAAY,GAA1B,UAA2B,IAAY;QACrC,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC/B,MAAM,KAAK,CAAC,yBAAuB,IAAM,CAAC,CAAC;QAC7C,CAAC;IACH,CAAC;IAED;;;;;OAKG;IACW,yBAAa,GAA3B,UAA4B,IAAY;QACtC,IAAI,UAAU,GAAW,IAAI,CAAC;QAE9B,IAAM,MAAM,GAAW,IAAI,MAAM,CAAC,mBAAmB,EAAE,GAAG,CAAC,CAAC;QAC5D,IAAM,MAAM,GAAa,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC3C,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACX,UAAU,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;QACzB,CAAC;QAED,EAAE,CAAC,CAAC,UAAU,CAAC,MAAM,KAAK,EAAE,CAAC,CAAC,CAAC;YAC7B,4BAA4B;YAC5B,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QACxC,CAAC;QAED,WAAW,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;QACrC,MAAM,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC;IAClC,CAAC;IAED,+BAA+B;IACjB,wBAAY,GAA1B;QACE,MAAM,CAAC,sCAAsC;aAC1C,OAAO,CAAC,OAAO,EAAE,UAAC,SAAiB;YAClC,IAAM,GAAG,GAAW,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;YAC3C,IAAM,MAAM,GAAW,SAAS,KAAK,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;YACnE,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;IACP,CAAC;IAEH,kBAAC;AAAD,CA9CA,AA8CC,IAAA;AAED;kBAAe,WAAW,CAAC","file":"local/framework/basicTypes/GuidHelpers.js","sourcesContent":["abstract class GuidHelpers {\r\n  public static isValid(guid: string): boolean {\r\n    const regex: RegExp = new RegExp('^[a-f0-9]{8}(?:-[a-f0-9]{4}){3}-[a-f0-9]{12}$', 'i');\r\n    return regex.test(guid);\r\n  }\r\n\r\n  public static requireValid(guid: string): void {\r\n    if (!GuidHelpers.isValid(guid)) {\r\n      throw Error(`Invalid GUID syntax ${guid}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Example: \"/Guid(d5369f3b-bd7a-412a-9c0f-7f0650bb5489)/\"\r\n   *          -> 'd5369f3b-bd7a-412a-9c0f-7f0650bb5489'\r\n   * Example: \"{d5369f3b-bd7a-412a-9c0f-7f0650bb5489}\"\r\n   *          -> 'd5369f3b-bd7a-412a-9c0f-7f0650bb5489'\r\n   */\r\n  public static getNormalized(guid: string): string {\r\n    let normalized: string = guid;\r\n\r\n    const regexp: RegExp = new RegExp('^/Guid\\\\((.*)\\\\)/', 'i');\r\n    const result: string[] = regexp.exec(guid);\r\n    if (result) {\r\n      normalized = result[1];\r\n    }\r\n\r\n    if (normalized.length === 38) {\r\n      // Strip leading/trailing {}\r\n      normalized = normalized.substr(1, 36);\r\n    }\r\n\r\n    GuidHelpers.requireValid(normalized);\r\n    return normalized.toLowerCase();\r\n  }\r\n\r\n  /* tslint:disable:no-bitwise */\r\n  public static generateGuid(): string {\r\n    return 'AAAAAAAA-AAAA-4AAA-BAAA-AAAAAAAAAAAA'\r\n      .replace(/[AB]/g, (character: string): string => {\r\n        const num: number = Math.random() * 16 | 0;\r\n        const masked: number = character === 'A' ? num : (num & 0x3 | 0x8);\r\n        return masked.toString(16);\r\n      });\r\n  }\r\n\r\n}\r\n\r\nexport default GuidHelpers;\r\n"],"sourceRoot":"/src"}