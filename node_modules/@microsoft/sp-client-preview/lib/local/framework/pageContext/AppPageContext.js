"use strict";
var sp_client_base_1 = require('@microsoft/sp-client-base');
var sp_client_base_2 = require('@microsoft/sp-client-base');
var ApplicationContext_1 = require('./ApplicationContext');
var SPWeb_1 = require('./SPWeb');
var SPSite_1 = require('./SPSite');
var SPList_1 = require('./SPList');
var SPListItem_1 = require('./SPListItem');
var SPUser_1 = require('./SPUser');
var SPNavigationNodeCollection_1 = require('./SPNavigationNodeCollection');
var PageContextCore_1 = require('./PageContextCore');
/**
  * The page context represents contextual information about the SharePoint page that
  * is currently being viewed, such as its site URL, the client side application ID,
  * the current user, etc.  The page context objects themselves represent key information
  * that is needed e.g. to identify the site/web/list/listitem in a REST service call,
  * but it is not a full cache with invalidation and change notifications.  If your
  * application maintains such a cache, it can keep the PageContext up to date by
  * means of methods such as SPListItem.updateOdataObject().
  */
var AppPageContext = (function () {
    function AppPageContext(serviceScope) {
        this._application = new ApplicationContext_1.default(this);
        this._site = new SPSite_1.default(this);
        this._web = new SPWeb_1.default(this);
        this._list = new SPList_1.default(this);
        this._listItem = new SPListItem_1.default(this);
        this._quickLaunch = new SPNavigationNodeCollection_1.default(this);
        this._topNav = new SPNavigationNodeCollection_1.default(this);
        this._core = new PageContextCore_1.default(this);
        this._user = new SPUser_1.default(this);
        this._urlQueryParameters = new sp_client_base_2.UrlQueryParameterCollection(window.location.href);
    }
    Object.defineProperty(AppPageContext.prototype, "application", {
        // TODO: Bug 176509: Change PageContext getters to readonly on Typescript 2.0 release
        /**
         * Contextual information for the client-side application.
         */
        get: function () {
            return this._application;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppPageContext.prototype, "site", {
        /**
         * Contextual information for the SharePoint site collection that is hosting the page.
         * If unsure whether this object is initialized, check the SPSite.state property first.
         */
        get: function () {
            return this._site;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppPageContext.prototype, "web", {
        /**
         * Contextual information for the SharePoint site ("web") that is hosting the page.
         * If unsure whether this object is initialized, check the SPWeb.state property first.
         */
        get: function () {
            return this._web;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppPageContext.prototype, "list", {
        /**
         * Contextual information for the SharePoint list that is hosting the page.
         * If unsure whether this object is initialized, check the SPList.state property first.
         */
        get: function () {
            return this._list;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppPageContext.prototype, "listItem", {
        /**
         * Contextual information for the SharePoint list item that stores data for the page.
         * If unsure whether this object is initialized, check the SPListItem.state property first.
         */
        get: function () {
            return this._listItem;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppPageContext.prototype, "quickLaunch", {
        /**
         * Contextual quick launch navigation information for the page.
         * If unsure whether this object is initialized, check the SPNavigation.state property first.
         */
        get: function () {
            return this._quickLaunch;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppPageContext.prototype, "topNav", {
        /**
         * Top navigation information for the page.
         * If unsure whether this object is initialized, check the SPNavigation.state property first.
         */
        get: function () {
            return this._topNav;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppPageContext.prototype, "core", {
        /**
         * Contextual information for the SharePoint SPPageContextInfo object
         * If unsure whether this object is initialized, check the SPPageContextInfo.state property first.
         */
        get: function () {
            return this._core;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppPageContext.prototype, "user", {
        /**
         * Contextual information for the current SharePoint user
         * If unsure whether this object is initialized, check the SPPageContextInfo.state property first.
         */
        get: function () {
            return this._user;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppPageContext.prototype, "urlQueryParameters", {
        /**
         * Object for retrieving the current page's query parameter values.
         */
        get: function () {
            return this._urlQueryParameters;
        },
        enumerable: true,
        configurable: true
    });
    return AppPageContext;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = AppPageContext;
exports.appPageContextServiceKey = sp_client_base_1.ServiceKey.create('sp-client-preview:PageContext', AppPageContext);

//# sourceMappingURL=AppPageContext.js.map
