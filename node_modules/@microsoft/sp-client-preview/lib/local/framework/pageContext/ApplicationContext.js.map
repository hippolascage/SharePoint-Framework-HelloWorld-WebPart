{"version":3,"sources":["local/framework/pageContext/ApplicationContext.ts"],"names":[],"mappings":";;;;;;AACA,gCAAsD,mBAAmB,CAAC,CAAA;AAC1E,4BAAwB,2BAA2B,CAAC,CAAA;AAUpD;;;GAGG;AACH;IAAgD,sCAAe;IAI7D,4BAAY,WAAwB;QAClC,kBAAM,WAAW,CAAC,CAAC;QAEnB,IAAI,CAAC,wBAAwB,GAAG,SAAS,CAAC;QAC1C,IAAI,CAAC,oBAAoB,GAAG,SAAS,CAAC;IACxC,CAAC;IAED;;;OAGG;IACI,iCAAI,GAAX,UAAY,IAA6B;QACvC,IAAI,CAAC,YAAY,EAAE,CAAC;QAEpB,qBAAW,CAAC,YAAY,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;QACvD,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC,uBAAuB,CAAC;QAC7D,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,mBAAmB,CAAC;QACrD,IAAI,CAAC,KAAK,GAAG,sCAAoB,CAAC,KAAK,CAAC;IAC1C,CAAC;IAOD,sBAAW,uDAAuB;QALlC;;;;WAIG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,wBAAwB,CAAC;QACvC,CAAC;;;OAAA;IAMD,sBAAW,mDAAmB;QAJ9B;;;WAGG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC;QACnC,CAAC;;;OAAA;IACH,yBAAC;AAAD,CAxCA,AAwCC,CAxC+C,yBAAe,GAwC9D;AAxCD;oCAwCC,CAAA","file":"local/framework/pageContext/ApplicationContext.js","sourcesContent":["import PageContext from './AppPageContext';\r\nimport PageContextItem, { PageContextItemState } from './PageContextItem';\r\nimport GuidHelpers from '../basicTypes/GuidHelpers';\r\n\r\n/**\r\n  * This interface is used with ApplicationContext.load()\r\n  */\r\nexport interface IApplicationContextArgs {\r\n  clientSideApplicationId: string;\r\n  hostedByClassicPage: boolean;\r\n}\r\n\r\n/**\r\n * Tracks contextual information about the client-side application that\r\n * is currently running.\r\n */\r\nexport default class ApplicationContext extends PageContextItem {\r\n  private _clientSideApplicationId: string;\r\n  private _hostedByClassicPage: boolean;\r\n\r\n  constructor(pageContext: PageContext) {\r\n    super(pageContext);\r\n\r\n    this._clientSideApplicationId = undefined;\r\n    this._hostedByClassicPage = undefined;\r\n  }\r\n\r\n  /**\r\n   * Assigns all properties of the object, then assigns the \"state\" property\r\n   * to PageContextItemState.Ready.\r\n   */\r\n  public load(args: IApplicationContextArgs): void {\r\n    this.validateLoad();\r\n\r\n    GuidHelpers.requireValid(args.clientSideApplicationId);\r\n    this._clientSideApplicationId = args.clientSideApplicationId;\r\n    this._hostedByClassicPage = args.hostedByClassicPage;\r\n    this.state = PageContextItemState.Ready;\r\n  }\r\n\r\n  /**\r\n   * Returns the client side component identifier for the client-side application.\r\n   * This corresponds to the \"id\" field in the application's manifest JSON file.\r\n   * Example: \"00000000-0000-0000-0000-000000000000\"\r\n   */\r\n  public get clientSideApplicationId(): string {\r\n    return this._clientSideApplicationId;\r\n  }\r\n\r\n  /**\r\n   * Indicates whether the application is currently being hosted by a classic page,\r\n   * e.g. if a client side web part has been added to a classic publishing page.\r\n   */\r\n  public get hostedByClassicPage(): boolean {\r\n    return this._hostedByClassicPage;\r\n  }\r\n}\r\n"],"sourceRoot":"/src"}