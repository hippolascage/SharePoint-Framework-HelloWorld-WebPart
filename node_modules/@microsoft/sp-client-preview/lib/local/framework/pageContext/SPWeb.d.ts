import PageContext from './AppPageContext';
import PageContextItem from './PageContextItem';
import SPSite from './SPSite';
import { IODataWeb } from '@microsoft/sp-client-base';
/**
  * This interface is used with SPWeb.load()
  *
  * @alpha
  */
export interface ISPWebArgs {
    id: string;
    serverRelativeUrl: string;
    title: string;
}
/**
  * This class is primarily used with the PageContext class.  It provides contextual
  * information for the SharePoint site ("web") that hosts the page.
  *
  * @alpha
  */
export default class SPWeb extends PageContextItem {
    private _id;
    private _serverRelativeUrl;
    private _title;
    private _odataObject;
    constructor(pageContext: PageContext);
    /**
     * Assigns all properties of the object, then assigns the "state" property
     * to PageContextItemState.Ready.
     */
    load(args: ISPWebArgs): void;
    /**
     * The GUID that identifies the SPWeb on the server.
     */
    id: string;
    /**
     * Returns a server-relative URL for this SPWeb.
     * Example: "/sites/PubSite/SubWeb"
     */
    serverRelativeUrl: string;
    /**
     * Returns the title of the SharePoint site.
     */
    title: string;
    /**
     * Returns the parent site collection that this site ("web") belongs to.
     */
    parentSite: SPSite;
    /**
     * Returns an ODATA object containing additional information for this SharePoint site ("web"),
     * if available.  Otherwise, this returns undefined.  If your application fetches this
     * data itself, it can call updateOdataObject() to update the context.
     */
    getOdataObject(): IODataWeb;
    /**
     * Updates the ODATA object that will be returned when getOdataObject() is called.
     * This allows the application to share its data with other objects (e.g. web parts)
     * to avoid unnecessary REST calls.
     */
    updateOdataObject(value: IODataWeb): void;
}
