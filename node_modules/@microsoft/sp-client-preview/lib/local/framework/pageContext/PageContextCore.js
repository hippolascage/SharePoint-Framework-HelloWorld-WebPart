"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var sp_client_base_1 = require('@microsoft/sp-client-base');
var PageContextItem_1 = require('./PageContextItem');
/**
  * This class is primarily used with the PageContext class.  It provides contextual
  * information for the SharePoint site collection that is hosting the page.
  */
var PageContextCore = (function (_super) {
    __extends(PageContextCore, _super);
    function PageContextCore(pageContext) {
        _super.call(this, pageContext);
    }
    /**
     * Assigns all properties of the object, then assigns the "state" property
     * to PageContextItemState.Ready.
     */
    PageContextCore.prototype.load = function (args) {
        this.validateLoad();
        this._menuData = args.MenuData;
        this._currentCultureName = args.currentCultureName;
        this._currentUICultureName = args.currentUICultureName;
        this._initialCorrelationId = args.correlationId;
        this._spoEnvironment = args.spoEnvironment;
        this._farmLabel = args.farmLabel;
        this._groupColor = args.groupColor;
        this._hasManageWebPermission = args.hasManageWebPermission;
        this._listPermsMask = args.listPermsMask;
        this._layoutsUrl = args.layoutsUrl;
        this._siteAbsoluteUrl = args.siteAbsoluteUrl;
        this._siteClientTag = args.siteClientTag;
        this._siteServerRelativeUrl = args.siteServerRelativeUrl;
        this._siteSubscriptionId = args.siteSubscriptionId;
        this._siteId = args.siteId;
        this._systemUserKey = args.systemUserKey;
        this._themedCssFolderUrl = args.themedCssFolderUrl;
        this._userDisplayName = args.userDisplayName;
        this._userLoginName = args.userLoginName;
        this._webAbsoluteUrl = args.webAbsoluteUrl;
        this._webId = args.webId;
        this._webLogoUrl = args.webLogoUrl;
        this._webServerRelativeUrl = args.webServerRelativeUrl;
        this._webTitle = args.webTitle;
        this._webTemplate = args.webTemplate;
        this._webPermMasks = new sp_client_base_1.SPPermission(args.webPermMasks);
        this.state = PageContextItem_1.PageContextItemState.Ready;
    };
    Object.defineProperty(PageContextCore.prototype, "menuData", {
        /**
         * Common menu data that is shared throughout all Sharepoint applications.
         */
        get: function () {
            return this._menuData;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PageContextCore.prototype, "currentCultureName", {
        /**
         * The culture used for rendering date/time components.
         */
        get: function () {
            return this._currentCultureName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PageContextCore.prototype, "currentUICultureName", {
        /**
         * The culture used for rendering UI components.
         */
        get: function () {
            return this._currentUICultureName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PageContextCore.prototype, "initialCorrelationId", {
        /**
         * The GUID that identifies the CorrelationId of the request.
         */
        get: function () {
            return this._initialCorrelationId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PageContextCore.prototype, "spoEnvironment", {
        /**
         * The name of the SPO Environment (eDog, MSIT, Prod, ...) for this request.
         */
        get: function () {
            return this._spoEnvironment;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PageContextCore.prototype, "farmLabel", {
        /**
         * The farm Label for this request. (US_2_Content)
         */
        get: function () {
            return this._farmLabel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PageContextCore.prototype, "groupColor", {
        /**
         * The group Color (ie "0xFFFFFF"") (only from Group Sites)
         */
        get: function () {
            return this._groupColor;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PageContextCore.prototype, "layoutsUrl", {
        /**
         * The relative layout url of the web
         */
        get: function () {
            return this._layoutsUrl;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PageContextCore.prototype, "hasManageWebPermission", {
        /**
         * Indicates if the user has ManageWeb Permissions for the site this request was in.
         */
        get: function () {
            return this._hasManageWebPermission;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PageContextCore.prototype, "listPermsMask", {
        /**
         * The Mask of list Permissions for the current user in the list of this request.
         */
        get: function () {
            return this._listPermsMask;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PageContextCore.prototype, "siteAbsoluteUrl", {
        /**
         * The AbsoluteUrl of this request.
         */
        get: function () {
            return this._siteAbsoluteUrl;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PageContextCore.prototype, "siteClientTag", {
        /**
         * The site's version number of sharepoint.
         */
        get: function () {
            return this._siteClientTag;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PageContextCore.prototype, "siteId", {
        /**
           * The site's id on sharepoint.
           */
        get: function () {
            return this._siteId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PageContextCore.prototype, "siteServerRelativeUrl", {
        /**
         * The server relative Url to the SPSite
         */
        get: function () {
            return this._siteServerRelativeUrl;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PageContextCore.prototype, "siteSubscriptionId", {
        /**
         * The siteSubscriptionId of the Tenant for which this request was made.
         */
        get: function () {
            return this._siteSubscriptionId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PageContextCore.prototype, "systemUserKey", {
        /**
         * The string that represents the unique user.
         */
        get: function () {
            return this._systemUserKey;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PageContextCore.prototype, "themedCssFolderUrl", {
        /**
         * The url for the themed CSS if this site has a theme appplied, otherwise null.
         */
        get: function () {
            return this._themedCssFolderUrl;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PageContextCore.prototype, "userDisplayName", {
        /**
         * The absolute url to the SPWeb
         */
        get: function () {
            return this._userDisplayName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PageContextCore.prototype, "userLoginName", {
        /**
         * The absolute url to the SPWeb
         */
        get: function () {
            return this._userLoginName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PageContextCore.prototype, "webAbsoluteUrl", {
        /**
         * The absolute url to the SPWeb
         */
        get: function () {
            return this._webAbsoluteUrl;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PageContextCore.prototype, "webId", {
        /**
         * The absolute url to the SPWeb
         */
        get: function () {
            return this._webId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PageContextCore.prototype, "webLogoUrl", {
        /**
         * The server relative Url to the web Logo
         */
        get: function () {
            return this._webLogoUrl;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PageContextCore.prototype, "webServerRelativeUrl", {
        /**
         * The server Relative url to the SPWeb
         */
        get: function () {
            return this._webServerRelativeUrl;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PageContextCore.prototype, "webTitle", {
        /**
         * The Title of the Web
         */
        get: function () {
            return this._webTitle;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PageContextCore.prototype, "webTemplate", {
        /**
         * The site template used to create the web.
         */
        get: function () {
            return this._webTemplate;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns an ODATA object containing additional information for this list, if available.
     * Otherwise, this returns undefined.  If your application fetches this data itself, it
     * can call updateOdataObject() to update the context.
     */
    PageContextCore.prototype.getOdataObject = function () {
        return this._odataObject;
    };
    /**
     * Updates the ODATA object that will be returned when getOdataObject() is called.
     * This allows the application to share its data with other objects (e.g. web parts)
     * to avoid unnecessary REST calls.
     */
    PageContextCore.prototype.updateOdataObject = function (value) {
        this._odataObject = value;
    };
    Object.defineProperty(PageContextCore.prototype, "userPermissionsForWeb", {
        /**
         * The permissions mask of the current user on the web.
         */
        get: function () {
            return this._webPermMasks;
        },
        enumerable: true,
        configurable: true
    });
    return PageContextCore;
}(PageContextItem_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = PageContextCore;

//# sourceMappingURL=PageContextCore.js.map
