{"version":3,"sources":["local/utilities/misc/Utils.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;AAEH,+BAAoD,2BAA2B,CAAC,CAAA;AAEhF;;;;;;GAMG;AACH,gCAAgC;AAChC,+BAAsC,MAAkB,EAAE,SAAsB;IAC9E,+BAA+B;IAC/B,yBAAQ,CAAC,oBAAoB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;IAEhD,IAAI,CAAC;QACH,MAAM,EAAE,CAAC;IACX,CAAE;IAAA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACX,wDAAwD;QACxD,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YACd,6BAAY,CAAC,QAAQ,CAAC,SAAS,EAAE,IAAI,KAAK,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC;QAC7D,CAAC;IACH,CAAC;AACH,CAAC;AAZe,6BAAqB,wBAYpC,CAAA","file":"local/utilities/misc/Utils.js","sourcesContent":["/**\r\n * @Copyright (c) Microsoft Corporation.  All rights reserved.\r\n *\r\n * Utility code that does not fit in any other bucket.\r\n */\r\n\r\nimport { Validate, _ILogSource, _TraceLogger } from '@microsoft/sp-client-base';\r\n\r\n/**\r\n * Execute the passed in delegate with a guarantee that no exception will leak out.\r\n * Do not use this normally. Only in error handling scenarios where you would like\r\n * to be defesive.\r\n * @param {method} method to execute\r\n * @apram {logSource} log source\r\n */\r\n/* tslint:disable:export-name */\r\nexport function executeWithoutFailing(method: () => void, logSource: _ILogSource): void {\r\n  /* tslint:enable:export-name */\r\n  Validate.isNotNullOrUndefined(method, 'method');\r\n\r\n  try {\r\n    method();\r\n  } catch (e) {\r\n    // Defensive code as this method should never ever throw\r\n    if (logSource) {\r\n      _TraceLogger.logError(logSource, new Error('Error: ' + e));\r\n    }\r\n  }\r\n}"],"sourceRoot":"/src"}