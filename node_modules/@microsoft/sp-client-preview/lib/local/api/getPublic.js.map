{"version":3,"sources":["local/api/getPublic.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AAEb,IAAY,EAAE,WAAM,IAAI,CAAC,CAAA;AACzB,IAAY,IAAI,WAAM,MAAM,CAAC,CAAA;AAE7B,IAAM,OAAO,GAAY,OAAO,CAAC,GAAG,EAAE,CAAC;AAEvC,2BAA2B;AAC3B,oBAAoB,GAAQ,EAAE,GAAQ;IACtC,0BAA0B;IACxB,YAAY,CAAC;IACb,qCAAqC;IACrC,GAAG,CAAC,GAAG,CAAC,6BAA6B,EAAE,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAC3D,GAAG,CAAC,GAAG,CAAC,kCAAkC,EAAE,MAAM,CAAC,CAAC;AACtD,CAAC;AAED;;GAEG;AACH,2BAA2B;AAC3B,mBAAkC,GAAQ,EAAE,GAAQ;IACpD,0BAA0B;IACxB,YAAY,CAAC;IAEb,IAAM,KAAK,GAAa,GAAG,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACnD,IAAI,GAAW,CAAC;IAChB,IAAI,QAAQ,GAAW,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,aAAa,GAAG,GAAG,CAAC,WAAW,CAAC,CAAC;IAC3E,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;QACrB,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IAChC,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,0CAA0C;QAC1C,GAAG,GAAG,MAAM,CAAC;QACb,QAAQ,IAAI,OAAO,CAAC;IACtB,CAAC;IAED,IAAM,IAAI,GAAa,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IAE7C,UAAU,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IAErB,IAAI,WAAmB,CAAC;IACxB,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACZ,KAAK,KAAK;YACR,WAAW,GAAG,4BAA4B,CAAC;YAC3C,KAAK,CAAC;QACR,KAAK,MAAM;YACT,WAAW,GAAG,kBAAkB,CAAC;YACjC,KAAK,CAAC;QACR,KAAK,KAAK,CAAC;QACX,KAAK,MAAM;YACT,WAAW,GAAG,WAAW,CAAC;YAC1B,KAAK,CAAC;QACR,KAAK,IAAI;YACP,WAAW,GAAG,0BAA0B,CAAC;YACzC,KAAK,CAAC;QACR,KAAK,KAAK;YACR,WAAW,GAAG,0BAA0B,CAAC;YACzC,KAAK,CAAC;QACR,KAAK,KAAK;YACR,WAAW,GAAG,WAAW,CAAC;YAC1B,KAAK,CAAC;IACV,CAAC;IAED,GAAG,CAAC,SAAS,CAAC,GAAG,EAAE;QACjB,cAAc,EAAE,WAAW;QAC3B,gBAAgB,EAAE,IAAI,CAAC,IAAI;QAC3B,eAAe,EAAE,sBAAsB,CAAC,oBAAoB;KAC7D,CAAC,CAAC;IAEH,IAAM,EAAE,GAAkB,EAAE,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;IACxD,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACf,CAAC;AAlDD;2BAkDC,CAAA","file":"local/api/getPublic.js","sourcesContent":["'use strict';\r\n\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\n\r\nconst rootDir: string  = process.cwd();\r\n\r\n/* tslint:disable:no-any */\r\nfunction enableCORS(req: any, res: any): void {\r\n/* tslint:enable:no-any */\r\n  'use strict';\r\n  // add support for CORS by any caller\r\n  res.set('Access-Control-Allow-Origin', req.headers.origin);\r\n  res.set('Access-Control-Allow-Credentials', 'true');\r\n}\r\n\r\n/*\r\n * Return files of various mime content types.\r\n */\r\n/* tslint:disable:no-any */\r\nexport default function getPublic(req: any, res: any): void {\r\n/* tslint:enable:no-any */\r\n  'use strict';\r\n\r\n  const parts: string[] = req.originalUrl.split('.');\r\n  let ext: string;\r\n  let filePath: string = path.join(rootDir, 'dist/public' + req.originalUrl);\r\n  if (parts.length > 1) {\r\n    ext = parts[parts.length - 1];\r\n  } else {\r\n    // assume a service call that returns JSON\r\n    ext = 'json';\r\n    filePath += '.json';\r\n  }\r\n\r\n  const stat: fs.Stats = fs.statSync(filePath);\r\n\r\n  enableCORS(req, res);\r\n\r\n  let contentType: string;\r\n  switch (ext) {\r\n    case 'hbs':\r\n      contentType = 'text/x-handlebars-template';\r\n      break;\r\n    case 'json':\r\n      contentType = 'application/json';\r\n      break;\r\n    case 'htm':\r\n    case 'html':\r\n      contentType = 'text/html';\r\n      break;\r\n    case 'md':\r\n      contentType = 'text/x-markdown-template';\r\n      break;\r\n    case 'mst':\r\n      contentType = 'text/x-mustache-template';\r\n      break;\r\n    case 'png':\r\n      contentType = 'image/png';\r\n      break;\r\n  }\r\n\r\n  res.writeHead(200, {\r\n    'Content-Type': contentType,\r\n    'Content-Length': stat.size,\r\n    'Cache-Control': 'public, max-age=1440' // cache for 4 hours\r\n  });\r\n\r\n  const rs: fs.ReadStream = fs.createReadStream(filePath);\r\n  rs.pipe(res);\r\n}\r\n"],"sourceRoot":"/src"}