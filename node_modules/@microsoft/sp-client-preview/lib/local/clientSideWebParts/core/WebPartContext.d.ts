import { IClientSideWebPartManifestInstance } from '@microsoft/sp-module-interfaces';
import { HttpClient, BasicHttpClient, PageContext, ServiceScope, Environment } from '@microsoft/sp-client-base';
import ClientSideComponentContext from './ClientSideComponentContext';
import IClientSideWebPartStatusRenderer from './../../common/webParts/IClientSideWebPartStatusRenderer';
import { IEventAggregator } from '../../common/events/IEvent';
import IWebPartContext from './IWebPartContext';
import IWebPartHost from '../../common/webParts/IWebPartHost';
import IWebPartManagerContext from './IWebPartManagerContext';
import { PropertyPaneState } from '../../common/webParts/PropertyPaneDefinitions';
/**
 * Web part context object. This object contains the contextual services available to a web part. e.g.
 * a contextual instance to the http client.
 */
export default class WebPartContext extends ClientSideComponentContext<IClientSideWebPartManifestInstance<any>> implements IWebPartContext {
    private _instanceId;
    private _webPartTag;
    private _httpClient;
    private _basicHttpClient;
    private _pageContext;
    private _statusRenderer;
    private _eventAggregator;
    private _configureStart;
    private _serviceScope;
    private _host;
    private _environment;
    constructor(context: IWebPartManagerContext, manifestInstance: IClientSideWebPartManifestInstance<any>, host: IWebPartHost, statusRenderer: IClientSideWebPartStatusRenderer, eventAggregator: IEventAggregator, configureStart: (id: string, propertyPaneState?: PropertyPaneState) => void, webPartTag: string);
    /**
     * @see IWebPartContext
     */
    instanceId: string;
    /**
     * @see IWebPartContext
     */
    webPartTag: string;
    /**
     * @see IWebPartContext
     */
    httpClient: HttpClient;
    /**
     * @see IWebPartContext
     */
    basicHttpClient: BasicHttpClient;
    /**
     * @see IWebPartContext
     */
    pageContext: PageContext;
    /**
     * @see IWebPartContext
     */
    statusRenderer: IClientSideWebPartStatusRenderer;
    /**
     * @see IWebPartContext
     */
    eventAggregator: IEventAggregator;
    /**
     * @see IWebPartContext
     */
    configureStart: (id: string, propertyPaneState?: PropertyPaneState) => void;
    /**
     * @see IWebPartContext
     */
    host: IWebPartHost;
    /**
     * @see IWebPartContext
     */
    serviceScope: ServiceScope;
    /**
     * @see IWebPartContext
     */
    environment: Environment;
    /**
     * Create a web part specific service scope.
     *
     * @param context - Web part manager context
     */
    private _createWebPartServiceScope(parentScope);
}
