{"version":3,"sources":["local/clientSideWebParts/core/IClientSideWebPartInternal.ts"],"names":[],"mappings":"AAAA;;;;GAIG","file":"local/clientSideWebParts/core/IClientSideWebPartInternal.js","sourcesContent":["/**\r\n * @Copyright (c) Microsoft Corporation.  All rights reserved.\r\n *\r\n * @file Internal interfaces to help invoke web part private APIs.\r\n */\r\n\r\nimport {\r\n  DisplayMode,\r\n  _QosMonitor } from '@microsoft/sp-client-base';\r\n\r\nimport { default as IWebPartData } from './IWebPartData';\r\nimport { IPropertyPaneData } from '../propertyPane/propertyPane/IPropertyPane';\r\nimport IWebPartContext from './IWebPartContext';\r\n\r\n/**\r\n * Internal client side web part interface. This interface contains methods that internal code can call\r\n * on the web part object. TypeScript does not support internals yet. This is a work around to make code\r\n * type safe and not have to cast objects to any before calling private methods. We do not want to make\r\n * the internal methods public or protected. These methods should not be available to web part developers.\r\n *\r\n * @see BaseClientSideWebPart.ts for documentation.\r\n * @internal - this interface is not exposed to third party developers.\r\n */\r\nexport interface IClientSideWebPartInternal {\r\n\r\n  new (context: IWebPartContext): IClientSideWebPartInternal;\r\n\r\n  accessibleTitle: string;\r\n\r\n  previewImageUrl: string;\r\n\r\n  _internalDeserialize(data: IWebPartData): void;\r\n\r\n  _internalFirstTimeRender(\r\n    mode: DisplayMode,\r\n    qosMonitor?: _QosMonitor,\r\n    data?: IWebPartData): Promise<void>;\r\n\r\n  _internalSetDisplayMode(newDisplayMode: DisplayMode): void;\r\n\r\n  _internalGetPropertyPaneSettings(): IPropertyPaneData;\r\n\r\n  _internalSetDirtyBit(): void;\r\n\r\n  _internalSerialize(): IWebPartData;\r\n\r\n  _internalDispose(): void;\r\n}"],"sourceRoot":"/src"}