{"version":3,"sources":["local/clientSideWebParts/core/IWebPartData.ts"],"names":[],"mappings":"AAAA;;;;GAIG","file":"local/clientSideWebParts/core/IWebPartData.js","sourcesContent":["/**\r\n * @Copyright (c) Microsoft Corporation.  All rights reserved.\r\n *\r\n * @file IWebPartData.ts\r\n */\r\n\r\n/**\r\n * This structure represents the the serialized state of a webpart. When the serialize() API is called on\r\n * a webpart, the output should be this structure. The structure of the 'properties' field is owned by the\r\n * webpart and is specific to the webpart. Each webpart can decide the set of properties it wants to\r\n * serialialize.\r\n */\r\ninterface IWebPartData {\r\n   /**\r\n    * Definition: universally unique webpart Type id.\r\n    * Usage: uniquely identify a webpart.\r\n    * Required: yes\r\n    * Type: GUID\r\n    * Supported values: any GUID\r\n    * Example: \"dbef608d-3ad5-4f8f-b139-d916f2f0a294\"\r\n    */\r\n   id: string;\r\n\r\n   /**\r\n    * Definition: universally unique instance id of the webpart. A web part can have multiple instances on a page.\r\n    *             This id is expected to be universally unique accross time and page boundaries.\r\n    * how used: used by the framework to uniquely identify an instance of a webpart.\r\n    * mandatory: yes.\r\n    * type: string\r\n    * supported values: a unique string. Could be GUID or other uniquely identifiable formats.\r\n    * example: [\"dbef608d-3ad5-4f8f-b139-d916f2f0a294\"]\r\n    * experimental: yes\r\n    */\r\n   instanceId: string;\r\n\r\n   /**\r\n    * Definition: webpart title.\r\n    * Usage: display the name of the webpart in the toolbox, webpart gallery and the page.\r\n    * Required: yes\r\n    * Type: string\r\n    * Supported values: string less than 100 characters\r\n    * Example: \"Text\"\r\n    */\r\n   title: string;\r\n\r\n   /**\r\n    * Definition: webpart version.\r\n    * Usage: versioning and evolving a webpart safely.\r\n    * Required: yes\r\n    * Type: string representing a semantic version (http://semver.org)\r\n    * Supported values: MAJOR.MINOR.PATCH\r\n    * Example: \"1.0.0\"\r\n    */\r\n   version: string;\r\n\r\n  /**\r\n   * Definition: webpart specific properties. The individual webpart owns the definition of these properties.\r\n   * how used: used by the webpart to manage its internal metadata and config data. The framework code never\r\n   *           touches these properties.\r\n   * mandatory: yes.\r\n   * type: string\r\n   * supported values: any JSON stringifiable object hierarchy.\r\n   * example: { 'value': 'text value' }\r\n   */\r\n   /* tslint:disable:no-any */\r\n   properties?: any;\r\n   /* tslint:disable:no-any */\r\n\r\n  /**\r\n   * Definition: HTML markup equivalent for searchable properties and properties that need link fixup.\r\n   * format: pseudo HTML\r\n   * mandatory: no.\r\n   * type: string\r\n   * supported values: a string containing pseudo HTML.\r\n   * example: \"<div>searchable_property_value</div><link href='http://contoso.com/path_of_link.aspx' />\"\r\n   * experimental: no\r\n   */\r\n  htmlProperties?: string;\r\n}\r\n\r\n/**\r\n * Structure of the data that a webpart developer can return on the onBeforeSerialize() API.\r\n * The outcome contains 3 kay/value dictionaries for properties that need to be search indexed.\r\n * Both keys and values are expected to be strings and will be HTML encoded during serialization.\r\n *\r\n * {\r\n *   searchableProperties: { 'prop1': 'value_of_prop1' },\r\n *   linkProperties: { 'prop2': 'http://www.contoso.com/page1.aspx' },\r\n *   imageLinkPropertes: { 'prop3': 'http://www.contoso.com/imag.png' }\r\n * }\r\n *\r\n * This input would get translated to the following HTML string.\r\n *\r\n * \"<div data-sp-prop-name='prop1'>value1</div>\r\n * <link data-sp-prop-name='prop2' href='http://www.contoso.com/page1.aspx'>\r\n * <img data-sp-prop-name='prop2' href='http://www.contoso.com/image.png'>\"\r\n *\r\n */\r\nexport interface IHtmlProperties {\r\n  searchableProperties: { [propName: string]: string };\r\n  linkProperties: { [propName: string]: string };\r\n  imageLinkProperties: { [propName: string]: string };\r\n}\r\n\r\nexport default IWebPartData;\r\n"],"sourceRoot":"/src"}