{"version":3,"sources":["local/clientSideWebParts/core/BaseClientSideWebPart.ts"],"names":[],"mappings":"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","file":"local/clientSideWebParts/core/BaseClientSideWebPart.js","sourcesContent":["/**\r\n * @Copyright (c) Microsoft Corporation.  All rights reserved.\r\n *\r\n * @file Base class for client side web parts.\r\n */\r\n/* tslint:disable:member-ordering */\r\n\r\n'use strict';\r\n\r\nimport * as lodash from '@microsoft/sp-lodash-subset';\r\nimport { StringHelper } from '@ms/odsp-utilities-bundle';\r\nimport {\r\n  DisplayMode,\r\n  Validate,\r\n  _ILogSource,\r\n  _LogSource,\r\n  _PerformanceLogger,\r\n  _TraceLogger,\r\n  _QosMonitor } from '@microsoft/sp-client-base';\r\nimport { IClientSideWebPartManifestInstance } from '@microsoft/sp-module-interfaces';\r\n\r\nimport { PropertyPaneState } from '../../common/webParts/PropertyPaneDefinitions';\r\nimport {\r\n  IPropertyPaneData,\r\n  IPropertyPaneSettings } from '../propertyPane/propertyPane/IPropertyPane';\r\nimport IWebPartContext from './IWebPartContext';\r\nimport IWebPartEvent from './IWebPartEvent';\r\nimport { default as IWebPartData, IHtmlProperties } from './IWebPartData';\r\nimport { deepFreeze } from '../../utilities/misc/Object';\r\n\r\nimport strings from './loc/Strings.resx';\r\n\r\nimport baseStyles from './styles/cswp-base.module.scss';\r\nimport './styles/cswp-loading-spinner.scss';\r\n\r\n/**\r\n * This abstract class implements the the base functionality for a client side web part. Every client side web part\r\n * needs to inherit from this class. Along with the base functionality, this class provides some APIs that can be\r\n * used by the web part. These APIs fall in two catagories.\r\n *\r\n * The first category of APIs provide data and functionality. Example, the web part context (i.e. this.context). This\r\n * API should be used to access contextual data relevant to this web part instance.\r\n *\r\n * The second category of APIs provide a base implementation for the web part lifecycle and can be overridden for an\r\n * updated implementation. The render() API is the only API that is mandatory to be implemented/overridden by a web\r\n * part. All other life cycle APIs have a base implementation and can be overridden based on the needs of the web part.\r\n * Please refer to the documentation of the individual APIs to make the right decision.\r\n */\r\nexport default class BaseClientSideWebPart<TProperties> {\r\n  private _displayMode: DisplayMode;\r\n  private _context: IWebPartContext;\r\n  private _properties: TProperties;\r\n  private _logEntry: string;\r\n  private _initialized: boolean = false;\r\n  private _renderedOnce: boolean;\r\n  private _renderedFromDefaultProperties: boolean;\r\n  private _propertiesBackup: TProperties;\r\n  private _previousState: string;\r\n  private _logSource: _ILogSource = _LogSource.create('BaseClientSideWebPart');\r\n\r\n  // Readonly protected properties. To change these to readonly once TypeScript supports that feature.\r\n\r\n  /**\r\n   * This property is a pointer to the web part context.\r\n   * @see IWebPartContex for more details.\r\n   *\r\n   * @readonly\r\n   */\r\n  protected get context(): IWebPartContext { return this._context; }\r\n\r\n  /**\r\n   * This property is a pointer to the root DOM element of the web part. This is a DIV element and contains the whole\r\n   * DOM subtree of the web part.\r\n   *\r\n   * @readonly\r\n   */\r\n  protected get domElement(): HTMLElement { return this._context.domElement; }\r\n\r\n  /**\r\n   * This property is the current display mode of the web part.\r\n   *\r\n   * @readonly\r\n   */\r\n  protected get displayMode(): DisplayMode { return this._displayMode; }\r\n\r\n  /**\r\n   * This property is the pointer to the custom property bag of the web part.\r\n   *\r\n   * @readonly\r\n   */\r\n  protected get properties(): TProperties { return this._properties; }\r\n\r\n  /**\r\n   * This property indicates whether the web part has been rendered once or not. After the first time rendering,\r\n   * the value of this property is always true. Till a full re-render of the web part happens.\r\n   *\r\n   * @readonly\r\n   */\r\n  protected get renderedOnce(): boolean { return this._renderedOnce; }\r\n\r\n  /**\r\n   * This property indicates whether the web part was rendered from the default properties, as opposed to using\r\n   * serialized state from the last time that the web part was saved.\r\n   *\r\n   * @readonly\r\n   */\r\n  protected get renderedFromDefaultProperties(): boolean { return this._renderedFromDefaultProperties; }\r\n\r\n  /**\r\n   * This property is the pointer to the web part configuration settings. If the web part wants to use the PropertyPane\r\n   * for configuration, this API needs to be overridden and the web part needs to return the set of properties it wants\r\n   * to display in the PropertyPane.\r\n   *\r\n   * @see IPropertyPane and other PropertyPane integration wiki documentation for more details.\r\n   *\r\n   * @readonly\r\n   */\r\n  protected get propertyPaneSettings(): IPropertyPaneSettings { return undefined; }\r\n\r\n  /**\r\n   * This property is used to change the web part's PropertyPane interaction from Reactive to NonReactive. The default\r\n   * behaviour is Reactive. Where,\r\n   * Reactive implies that changes made in the PropertyPane are transmitted to the web part instantly and the user can\r\n   * see instant updates. This helps the page creator get instant feedback and decide if they should keep the new\r\n   * configuration changes or not.\r\n   * NonReactive implies that the configuraiton changes are transmitted to the web part only after 'Apply' PropertyPane\r\n   * button is clicked.\r\n   *\r\n   * @readonly\r\n   */\r\n  protected get disableReactivePropertyChanges(): boolean { return false; }\r\n\r\n  /**\r\n   * This property points to the preview image for the web part. The base implementation returns undefined. Web parts\r\n   * that want to provide a valid preview image url need to override this API. The preview image url can be used to\r\n   * create a preview of the web part or of the page on which the web part is present.\r\n   *\r\n   * @readonly\r\n   */\r\n  protected get previewImageUrl(): string { return undefined; }\r\n\r\n  /**\r\n   * This property points to the accessible title of web part made available to screen readers. The base implementation\r\n   * returns that default title in the manifest. Web parts that want to provide more descriptive title containing\r\n   * contextual information need to override this API.\r\n   *\r\n   * @readonly\r\n   */\r\n  protected get accessibleTitle(): string { return this._getDefaultAccessibleTitle(); }\r\n\r\n  /**\r\n   * Error on attempt to set readonly properties. The following properties will go away when TypeScript supports\r\n   * readonly.\r\n   * @internal\r\n   */\r\n  protected set context(o: IWebPartContext) { this._throwReadOnlyError(); }\r\n  protected set domElement(o: HTMLElement) { this._throwReadOnlyError(); }\r\n  protected set manifest(o: IClientSideWebPartManifestInstance<TProperties>) { this._throwReadOnlyError(); }\r\n  protected set instanceId(o: string) { this._throwReadOnlyError(); }\r\n  protected set displayMode(o: DisplayMode) { this._throwReadOnlyError(); }\r\n  protected set renderedOnce(o: boolean) { this._throwReadOnlyError(); }\r\n  protected set renderedFromDefaultProperties(o: boolean) { this._throwReadOnlyError(); }\r\n  protected set properties(o: TProperties) { this._throwReadOnlyError(); }\r\n  protected set previewImageUrl(o: string) { this._throwReadOnlyError(); }\r\n  protected set accessibleTitle(o: string) { this._throwReadOnlyError(); }\r\n\r\n  /**\r\n   * Constructor for the BaseClientSideWebPart class.\r\n   * If a sub class overrides the constructor, it needs to call super(context) as the first line of its constructor.\r\n   *\r\n   * @param context - web part context.\r\n   *\r\n   * e.g.\r\n   *   constructor(conext: IWebPartContext) {\r\n   *     super(context);\r\n   *     .\r\n   *     . class specific constructor code ..\r\n   *   }\r\n   */\r\n  constructor(ctx: IWebPartContext) {\r\n\r\n    // Disallow instantiation of the base class by itself\r\n    /* tslint:disable:no-string-literal */\r\n    if (this.constructor['name'] === 'BaseClientSideWebPart') {\r\n    /* tslint:enable:no-string-literal */\r\n      throw new Error(strings.BaseConstructError);\r\n    }\r\n\r\n    /* tslint:disable:use-named-parameter */\r\n    const context: IWebPartContext = arguments[0];\r\n    /* tslint:enable:use-named-parameter */\r\n    this._processInputParams(context);\r\n\r\n    _TraceLogger.logVerbose(this._logSource, StringHelper.format(strings.ConstructLog, this.context.instanceId));\r\n    this._initialized = true;\r\n    this._renderedOnce = false;\r\n\r\n    /* tslint:disable:no-string-literal */\r\n    this['__type'] = 'BaseClientSideWebPart';\r\n    /* tslint:enable:no-string-literal */\r\n\r\n    // Bind the callbacks\r\n    this.render = this.render.bind(this);\r\n    this.dispose = this.dispose.bind(this);\r\n    this.renderError = this.renderError.bind(this);\r\n    this.clearError = this.clearError.bind(this);\r\n    this.onPropertyConfigurationComplete = this.onPropertyConfigurationComplete.bind(this);\r\n    this.onPropertyPaneRendered = this.onPropertyPaneRendered.bind(this);\r\n  }\r\n\r\n  /**\r\n   * This API is called once during the lifetime of the web part during the intial render and just before the onInit\r\n   * API call. The purpose of this API is to help a web part developer deserialize the web part data and manage the\r\n   * versioning of their data as the web part code evolves. The web part data may have been persisted with an older\r\n   * or newer version of the web part code. This API gives the web part developer an opportunity to re-structure their\r\n   * data to the appropriate data schema. The persisted data contains the version number information. That information\r\n   * can be used to make decisions on how to re-structure the data.\r\n   *\r\n   * @param data - web part persisted data.\r\n   * @return - web part property bag.\r\n   *\r\n   */\r\n  protected deserialize(data: IWebPartData): TProperties {\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * This API should be overridden to perform long running operations e.g. data fetching from a remote service before\r\n   * the initial rendering of the web part. The loading indicator is displayed during the lifetime of this method.\r\n   * This API is called only once during the lifecycle of a web part.\r\n   */\r\n  protected onInit<T>(): Promise<T> {\r\n    return this._genericAsyncHandler();\r\n  }\r\n\r\n  /**\r\n   * This API is called to render the web part. There is no base implementation of this API and the web part is\r\n   * required to override this API.\r\n   */\r\n  public render(): void {\r\n    throw new Error(strings.MustOverrideRenderError);\r\n  }\r\n\r\n  /**\r\n   * This API is called when the display mode of a web part is changed. The default implementation of this API calls\r\n   * the web part render method to re-render the web part with the new display mode. If a web part developer does not\r\n   * want a full re-render to happen on display mode change, they can override this API and perform specific updates\r\n   * to the web part DOM to switch its display mode.\r\n   *\r\n   * @param oldDisplayMode - The old display mode.\r\n   *\r\n   */\r\n  protected onDisplayModeChanged(oldDisplayMode: DisplayMode): void {\r\n\r\n    // This API should not be called when there was no change in display mode.\r\n    Validate.isTrue(oldDisplayMode !== this.displayMode, strings.OnDisplayModeChangedInvalidInvocation);\r\n    this._renderWithAccessibileTitle();\r\n  }\r\n\r\n  /**\r\n   * This API is called before a web part is serialized. The default implementation is a no-op. A web part developer\r\n   * is expected to override this API when the web part's state is not fully reflected in the property bag i.e.\r\n   * this.properties. In the overridden method, the web part developer is expected to update the state of the web\r\n   * part property bag. This way the web part serialization process will use the upto date state of the web part.\r\n   *\r\n   * @return - reference to searchable properties and properties that need link fixup. Please read\r\n   * the documentation of IHtmlProperties interface for more details.\r\n   */\r\n  protected onBeforeSerialize(): IHtmlProperties {\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * This API is used to receive custom event notifications from the host page or another web part. ReservedEventNames\r\n   * defines some reserved events. Each web part may process web part specific events.\r\n   *\r\n   * @param eventName - Event name, such as \"configure:start\".\r\n   * @param eventObject - object containing event source, destination and property information.\r\n   *\r\n   * @internal\r\n   */\r\n  protected onEvent<T>(eventName: string, eventObject: IWebPartEvent<T>): void {\r\n    /* EMPTY BLOCK */\r\n  }\r\n\r\n  /**\r\n   * This API is called at the end of the web part lifecycle. It should be overridden to dispose any\r\n   * resources that the web part is holding onto.\r\n   */\r\n  protected dispose(): void {\r\n    /* EMPTY BLOCK */\r\n  }\r\n\r\n  /**\r\n   * This API should be used to invoke the PropertyPane to help configure the web part.\r\n   *\r\n   * @param boolean - If specified and true - refresh a PropertyPane that's already been open, but not open\r\n   * if it is not already open.\r\n   */\r\n  protected configureStart(refreshOnly?: boolean): void {\r\n     const state: PropertyPaneState = refreshOnly ? PropertyPaneState.Default : PropertyPaneState.Open;\r\n     this._context.configureStart(this.context.instanceId, state);\r\n  }\r\n\r\n  /**\r\n   * This API is invoked on property changes in the PropertyPane when the PropertyPane is being used in Reactive mode.\r\n   * The base implementation of this API updates the web part property bag and re-render the web part. This API also\r\n   * invokes the web part host's setDirty API.\r\n   *\r\n   * @param propertyPath - JSON path of the property in the property bag.\r\n   * @param newValue - New value of the property.\r\n   */\r\n  /* tslint:disable:no-any */\r\n  protected onPropertyChange(propertyPath: string, newValue: any): void {\r\n  /* tslint:enable:no-any */\r\n    this._updateProperty(propertyPath, newValue);\r\n\r\n    if (this.context.host.setDirty) {\r\n      this.context.host.setDirty(this.context.instanceId);\r\n    }\r\n\r\n    if (!this.disableReactivePropertyChanges) {\r\n        this._renderWithAccessibileTitle();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This API is called when the current web part configuration process is completed. ConfigurationComplete event\r\n   * is fired when user switches between web parts while the PropertyPane is open, and this event handler is called\r\n   * for the previously selected web part.\r\n   *\r\n   */\r\n  protected onPropertyConfigurationComplete(): void {\r\n    /* EMPTY BLOCK */\r\n  }\r\n\r\n  /**\r\n   * This API is involed when the PropertyPane is rendered.\r\n   */\r\n  protected onPropertyPaneRendered(): void {\r\n    /* EMPTY BLOCK */\r\n  }\r\n\r\n  /**\r\n   * this API is invoked when the the changes are applied on the PropertyPane when the PropertyPane is used in\r\n   * Non-Reactive mode. This API is not invoked when the PropertyPane is used in Reactive mode.\r\n   */\r\n  protected onPropertyPaneSave(): void {\r\n\r\n    if (this.disableReactivePropertyChanges) {\r\n        this._renderWithAccessibileTitle();\r\n    }\r\n\r\n    this._propertiesBackup = undefined;\r\n  }\r\n\r\n  /**\r\n   * This API should be used to render an error message in the web part display area. Also logs the error message\r\n   * using the trace logger.\r\n   *\r\n   * @param error - An error object containing the error message to render.\r\n   */\r\n  protected renderError(error: Error): void {\r\n    this.context.statusRenderer.clearLoadingIndicator(this.domElement);\r\n    this.context.statusRenderer.renderError(this.domElement, error);\r\n    _TraceLogger.logError(this._logSource, error);\r\n  }\r\n\r\n  /**\r\n   * This API should be used to clear the error message from the web part display area.\r\n   */\r\n  protected clearError(): void {\r\n    this.context.statusRenderer.clearError(this.domElement);\r\n  }\r\n\r\n  /**\r\n   * Internal base implemenation of the web part data deserialization.\r\n   *\r\n   * @param data - web part data\r\n   */\r\n  private _internalDeserialize(data: IWebPartData): void {\r\n    if (data && data.properties) {\r\n\r\n      // Give the web part an opportunity to deserialize the properties. If the web part\r\n      // returns a valid property bag, use it as is else perform default deserialization.\r\n      const p: TProperties = this.deserialize(data);\r\n      if (p) {\r\n        this._properties = p;\r\n      } else {\r\n        this._properties = data.properties;\r\n        this._renderedFromDefaultProperties = false;\r\n\r\n        // @todo: (SPPPLAT VSO#227730) removing a regression caused by manifest V2 change. The manifest\r\n        // is a part of the properties blob. Which then gets serialized into the page blob.\r\n        /* tslint:disable:no-string-literal */\r\n        delete data.properties['manifest'];\r\n        /* tslint:enable:no-string-literal */\r\n      }\r\n    } else {\r\n      this._renderedFromDefaultProperties = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Internal API for the first time render of the web part. The purpose of this API is to enforce intialization steps\r\n   * before the actual render is called. This API is called only once during the web part loading lifecycle.\r\n   *\r\n   * @return {Promise<void>} The promise indicates the render loop is finished (success or fail).\r\n   */\r\n  /* tslint:disable:no-unused-variable */\r\n  private _internalFirstTimeRender(\r\n    mode: DisplayMode = DisplayMode.Read,\r\n    qosMonitor?: _QosMonitor,\r\n    data?: IWebPartData): Promise<void> {\r\n    /* tslint:enable:no-unused-variable */\r\n    if (!this._initialized) {\r\n      qosMonitor.writeUnexpectedFailure('BaseConstructorNotCalled');\r\n      throw new Error(strings.BaseConstructorNotCalledError);\r\n    }\r\n\r\n    // Set the display mode of the web part\r\n    this._displayMode = mode;\r\n\r\n    // Deserialize the web part data\r\n    this._internalDeserialize(data);\r\n\r\n    // By this point in the lifecycle the web part should have a non-null property bag.\r\n    if (!this._properties) {\r\n      qosMonitor.writeUnexpectedFailure('PropertyBagNull');\r\n      throw new Error(strings.PropertyBagNullError);\r\n    }\r\n\r\n    // Perform web part initialization and then render the web part.\r\n    const promise: Promise<{}> = this.onInit<{}>();\r\n\r\n    if (!promise) {\r\n      throw new Error(strings.OnInitReturnedNullPromise);\r\n    }\r\n\r\n    return promise.then(() => {\r\n      _PerformanceLogger.markComponent(this.context.webPartTag, 'init');\r\n      this.context.statusRenderer.clearLoadingIndicator(this.domElement);\r\n\r\n      this._renderWithAccessibileTitle();\r\n      this._renderedOnce = true;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Internal API to switch the web part's display mode. This API updates the display mode and then re-renders the web\r\n   * part in the new mode.\r\n   */\r\n  /* tslint:disable:no-unused-variable */\r\n  private _internalSetDisplayMode(newDisplayMode: DisplayMode): void {\r\n  /* tslint:enable:no-unused-variable */\r\n    if (this._displayMode !== newDisplayMode) {\r\n      const oldDisplayMode: DisplayMode = this._displayMode;\r\n      this._displayMode = newDisplayMode;\r\n      this.onDisplayModeChanged(oldDisplayMode);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Internal API to get property pane settings.\r\n   *\r\n   * @return Property pane data\r\n   */\r\n  /* tslint:disable:no-unused-variable */\r\n  private _internalGetPropertyPaneSettings(): IPropertyPaneData {\r\n  /* tslint:enable:no-unused-variable */\r\n\r\n    // Keep a copy of the properties to be used for discard\r\n    if (!this._propertiesBackup) {\r\n      this._propertiesBackup = lodash.cloneDeep(this.properties);\r\n    }\r\n\r\n    return {\r\n      webPartId: this.context.instanceId,\r\n      title: this.context.manifest.title.default,\r\n      isReactive: !this.disableReactivePropertyChanges,\r\n      settings: this.propertyPaneSettings,\r\n      properties: lodash.cloneDeep(this.properties),\r\n\r\n      // The following handlers are being overridden in the PropertyPane controller and hence\r\n      // we do not need to bind them here. We still do not want to make them optional because\r\n      // that could lead to unwanted bugs.\r\n      onPropertyChange: undefined,\r\n      onClose: undefined,\r\n      onSave: undefined,\r\n      onConfigurationComplete: this.onPropertyConfigurationComplete,\r\n      onRendered: this.onPropertyPaneRendered,\r\n      onLostFocus: undefined\r\n    } as IPropertyPaneData;\r\n  }\r\n\r\n  /**\r\n   * Internal API to set the dirty bit on the web part host if the web part properties have changed.\r\n   */\r\n  /* tslint:disable:no-unused-variable */\r\n  private _internalSetDirtyBit(): void {\r\n  /* tslint:enable:no-unused-variable */\r\n\r\n    const serializedState: IWebPartData = this._internalSerialize();\r\n    const newState: string = JSON.stringify(serializedState);\r\n\r\n    // Don't set dirty bit the first time because the Canvas\r\n    // would have done it when the webpart got added.\r\n    if (!this._previousState) {\r\n      this._previousState = newState;\r\n    } else if (this._previousState !== newState && this.context.host.setDirty) {\r\n      this.context.host.setDirty(this.context.instanceId, serializedState);\r\n      this._previousState = newState;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Internal API to serialize the web part properties.\r\n   */\r\n  private _internalSerialize(): IWebPartData {\r\n\r\n    const htmlProps: IHtmlProperties = this.onBeforeSerialize();\r\n    const htmlPropsString: string = this._getHtmlProps(htmlProps);\r\n\r\n    return {\r\n      id: this.context.manifest.id,\r\n      instanceId: this.context.instanceId,\r\n      version: this.context.manifest.version,\r\n      title: this.context.manifest.title.default,\r\n      properties: this.properties,\r\n      htmlProperties: htmlPropsString\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Internal API to dispose resources that the web part might be holding on to.\r\n   */\r\n  /* tslint:disable:no-unused-variable */\r\n  private _internalDispose(): void {\r\n  /* tslint:enable:no-unused-variable */\r\n    this.dispose();\r\n    _TraceLogger.logVerbose(this._logSource, StringHelper.format(strings.DisposeLog, this.context.instanceId));\r\n  }\r\n\r\n  /**\r\n   * Update the web part property if it is in the property bag.\r\n   *\r\n   * @param propertyPath - property path as expected by lodash update (https://lodash.com/docs#update).\r\n   *   (e.g. 'o.a.b', 'o[0].a.b[1].c'). These paths are similar to those in the JSONPath spec described by\r\n   *   Stefan Goessner at (http://goessner.net/articles/JsonPath/). Currently we plan to use lodash.get, has\r\n   *   and update APIs which support paths. Some day we may migrate to using actual JSONPath.js. But that\r\n   *   should not be an issue because the path formatting conventions are same in lodash and JSONPath.\r\n   */\r\n  /* tslint:disable:no-any */\r\n  private _updateProperty(propertyPath: string, newValue: any): void {\r\n  /* tslint:enable:no-any */\r\n      // should we check if this is a valid property path. For now maybe not.\r\n      lodash.update(this.properties, propertyPath, () => newValue);\r\n  }\r\n\r\n  private _processInputParams(context: IWebPartContext): void {\r\n    Validate.isNotNullOrUndefined(context, 'webpart context');\r\n    Validate.isNotNullOrUndefined(context.domElement, 'webpart element');\r\n    Validate.isNotNullOrUndefined(context.instanceId, 'webpart instanceId');\r\n    Validate.isNotNullOrUndefined(context.manifest, 'webpart manifest');\r\n    Validate.isNotNullOrUndefined(context.webPartTag, 'webpart tag');\r\n    Validate.isNotNullOrUndefined(context.httpClient, 'webpart httpClient');\r\n    Validate.isNotNullOrUndefined(context.basicHttpClient, 'webpart basicHttpClient');\r\n    Validate.isNotNullOrUndefined(context.pageContext, 'webpart context pageContext');\r\n    Validate.isNotNullOrUndefined(context.eventAggregator, 'webpart context eventAggregator');\r\n    Validate.isNotNullOrUndefined(context.statusRenderer, 'webpart context statusRenderer');\r\n    Validate.isNotNullOrUndefined(context.configureStart, 'webpart context configureStart');\r\n    Validate.isNotNullOrUndefined(context.host, 'webpart host');\r\n    Validate.isNotNullOrUndefined(context.serviceScope, 'webpart service scope');\r\n\r\n    deepFreeze(context.manifest);\r\n    this._context = context;\r\n    this._properties = this._getMergedProperties();\r\n    this._logEntry = 'BaseClientSideWebPart';\r\n  }\r\n\r\n  /**\r\n   * Merge the provided properties with manifest properties and return the merged property bag.\r\n   */\r\n  private _getMergedProperties(p?: TProperties): TProperties {\r\n    return lodash.merge(lodash.clone(this._context.manifest.properties), p);\r\n  }\r\n\r\n  /**\r\n   * A generic NOP async handler.\r\n   */\r\n  private _genericAsyncHandler<T>(): Promise<T> {\r\n    return new Promise<T>((resolve: (args: T) => void, reject: (error: Error) => void) => {\r\n      resolve(undefined);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Generate an HTML string for searchable, link and imageLink properties from the web part data.\r\n   * The serialized page data needs to be stored in a way (pseudo HTML) that the server can index searchable\r\n   * properties and fix links when links change. The SharePoint server is a semantic HTML parser and processes\r\n   * HTML and not JSON blobs.\r\n   *\r\n   * This function returns multiple HTML tags, one for each searchable and link property. The format of the\r\n   * tags are as follows:\r\n   *\r\n   * Searchable properties: \"<div data-sp-prop-name='prop1'>value1</div>\"\r\n   * Link properties: \"<link data-sp-prop-name='prop2' href='http://www.contoso.com/page1.aspx'>\"\r\n   * Image properties: \"<img data-sp-prop-name='prop2' href='http://www.contoso.com/image.png'>\"\r\n   *\r\n   * @param htmlProps - reference to html properties key/value dictionaries.\r\n   * @return - pseudo HTML string equivalent of the HTML properties.\r\n   */\r\n  private _getHtmlProps(htmlProps: IHtmlProperties): string {\r\n\r\n    let htmlPropsString: string;\r\n    if (htmlProps) {\r\n      htmlPropsString = this._getHtmlPropsString(htmlProps);\r\n    } else {\r\n      htmlPropsString = this._getHtmlPropsStringFromManifest();\r\n    }\r\n    return htmlPropsString;\r\n  }\r\n\r\n  private _getHtmlPropsString(htmlProps: IHtmlProperties): string {\r\n\r\n    let htmlPropsString: string = '';\r\n\r\n    if (htmlProps.searchableProperties) {\r\n      Object.keys(htmlProps.searchableProperties).every((propName: string) => {\r\n        htmlPropsString +=\r\n          this._getHtmlPropString(propName, 'search', htmlProps.searchableProperties[propName]);\r\n        return true;\r\n      });\r\n    }\r\n\r\n    if (htmlProps.linkProperties) {\r\n      Object.keys(htmlProps.linkProperties).every((propName: string) => {\r\n        htmlPropsString +=\r\n          this._getHtmlPropString(propName, 'link', htmlProps.linkProperties[propName]);\r\n        return true;\r\n      });\r\n    }\r\n\r\n    if (htmlProps.imageLinkProperties) {\r\n      Object.keys(htmlProps.imageLinkProperties).every((propName: string) => {\r\n        htmlPropsString +=\r\n          this._getHtmlPropString(propName, 'imageLink', htmlProps.imageLinkProperties[propName]);\r\n        return true;\r\n      });\r\n    }\r\n\r\n    return htmlPropsString;\r\n  }\r\n\r\n  /**\r\n   * Generate the HTML string from the property names provided in the manifest.\r\n   */\r\n  private _getHtmlPropsStringFromManifest(): string {\r\n\r\n    let htmlPropsString: string = '';\r\n\r\n    if (this.context.manifest.searchablePropertyNames) {\r\n      this.context.manifest.searchablePropertyNames.forEach((propName: string) => {\r\n        htmlPropsString +=\r\n          this._getHtmlPropString(propName, 'search', lodash.get(this._properties, propName) as string);\r\n      });\r\n    }\r\n\r\n    if (this.context.manifest.linkPropertyNames) {\r\n      this.context.manifest.linkPropertyNames.forEach((propName: string) => {\r\n        htmlPropsString +=\r\n          this._getHtmlPropString(propName, 'link', lodash.get(this._properties, propName) as string);\r\n      });\r\n    }\r\n\r\n    if (this.context.manifest.imageLinkPropertyNames) {\r\n      this.context.manifest.imageLinkPropertyNames.forEach((propName: string) => {\r\n        htmlPropsString +=\r\n          this._getHtmlPropString(propName, 'imageLink', lodash.get(this._properties, propName) as string);\r\n      });\r\n    }\r\n\r\n    return htmlPropsString;\r\n  }\r\n\r\n  /**\r\n   * Get the HTML props string.\r\n   */\r\n  private _getHtmlPropString(propName: string, propType: string, propValue: string): string {\r\n    let htmlPropString: string = '';\r\n    if (propName) {\r\n      if (typeof propValue === 'string' && propValue) {\r\n        switch (propType) {\r\n          /* tslint:disable:max-line-length */\r\n          case 'search':\r\n            htmlPropString += `<div data-sp-prop-name='${lodash.escape(propName)}'>${lodash.escape(propValue)}</div>`;\r\n            break;\r\n\r\n          case 'link':\r\n            htmlPropString += `<link data-sp-prop-name='${lodash.escape(propName)}' href='${lodash.escape(propValue)}'/>`;\r\n            break;\r\n\r\n          case 'imageLink':\r\n            htmlPropString += `<img data-sp-prop-name='${lodash.escape(propName)}' src='${lodash.escape(propValue)}'/>`;\r\n            break;\r\n          /* tslint:enable:max-line-length */\r\n        }\r\n      }\r\n    }\r\n    return htmlPropString;\r\n  }\r\n\r\n  /**\r\n   * Throw an error indicating that this property is readonly and cannot be set.\r\n   */\r\n  private _throwReadOnlyError(): void {\r\n    throw new Error(strings.ReadOnlyPropertyError);\r\n  }\r\n\r\n  /**\r\n   * Wraps render to ensure any type of rendering has access to the latest context\r\n   * to provide the most accurate accessible info to screen readers.\r\n   */\r\n  private _renderWithAccessibileTitle(): void {\r\n    this.render();\r\n\r\n    // Render the accessible description after and associate by ID to avoid re-rendering the whole zone\r\n    // when webpart updates contextual info.\r\n    const accessibleContext: string = this.accessibleTitle || this._getDefaultAccessibleTitle();\r\n    if (accessibleContext) {\r\n      // Keep ID in sync with CanvasZone.render\r\n      const contextualLabelId: string = `cswpAccessibleLabelContextual_${this.context.instanceId}`;\r\n      let accessibleDiv: HTMLDivElement = this.domElement.querySelector(`#${contextualLabelId}`) as HTMLDivElement;\r\n      const isNewLabelElement: boolean = !accessibleDiv;\r\n      if (isNewLabelElement) {\r\n        accessibleDiv = document.createElement('div');\r\n\r\n        accessibleDiv.id = contextualLabelId;\r\n        accessibleDiv.className = baseStyles.screenReaderOnly;\r\n      }\r\n      accessibleDiv.textContent = accessibleContext;\r\n\r\n      if (isNewLabelElement) {\r\n        this.domElement.appendChild(accessibleDiv);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets default accessible title in the format \"{Web part name} web part\", such as \"Image web part\".\r\n   * Note: pulled into own method because TypeScript doesn't allow derived classes to call super protected properties.\r\n   */\r\n  private _getDefaultAccessibleTitle(): string {\r\n    return StringHelper.format(strings.GenericAccessibleLabelTemplate, this.context.manifest.title.default);\r\n  }\r\n}\r\n"],"sourceRoot":"/src"}