/**
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * @file Web part host for classic SharePoint pages.
 */
"use strict";
var sp_client_base_1 = require('@microsoft/sp-client-base');
var PropertyPaneDefinitions_1 = require('../../../../local/common/webParts/PropertyPaneDefinitions');
/**
 * This class represents the host for client side web parts on classic SharePoint pages.
 * @see IWebPartHost for more details on the role of a web part host.
 */
var ClassicPageHost = (function () {
    /**
     * constructor
     */
    function ClassicPageHost() {
        this.setDirty = this.setDirty.bind(this);
        this.webPartConfigurationEventCallback = this.webPartConfigurationEventCallback.bind(this);
    }
    ClassicPageHost.getInstance = function () {
        if (ClassicPageHost._instance === undefined) {
            ClassicPageHost._instance = new ClassicPageHost();
        }
        return ClassicPageHost._instance;
    };
    Object.defineProperty(ClassicPageHost.prototype, "serviceScope", {
        /**
         * @see IWebPartHost
         */
        get: function () {
            this._ensureInitialized();
            return this._serviceScope;
        },
        enumerable: true,
        configurable: true
    });
    /* tslint:disable:no-any */
    ClassicPageHost.prototype.setDirty = function (instanceId, data) {
        /* tslint:enable:no-any */
        this._setData(data);
    };
    /**
     * @see IWebPartHost.ts
     */
    ClassicPageHost.prototype.webPartConfigurationEventCallback = function (event, data) {
        if (event === PropertyPaneDefinitions_1.WebPartConfigurationEvent.ConfigurationComplete) {
            this._setData(data);
        }
    };
    /* tslint:disable:no-any */
    ClassicPageHost.prototype._setData = function (data) {
        /* tslint:enable:no-any */
        if (data) {
            var dataField = document.querySelector('#ClientSideToolPartData');
            var idField = document.querySelector('#ClientSideToolPartId');
            var webPartBeingConfiguredId = idField.getAttribute('value');
            if (dataField && webPartBeingConfiguredId === data.id) {
                dataField.setAttribute('value', sp_client_base_1.JsonUtilities.encode(JSON.stringify(data)));
            }
        }
    };
    ClassicPageHost.prototype._ensureInitialized = function () {
        var serviceScope = sp_client_base_1.ServiceScope.startNewRoot();
        // This bootstrapping code should be reconciled with how applications are loaded by the shell.
        // Task 228547 should remove this code
        var pageContext = serviceScope.createDefaultAndProvide(sp_client_base_1.pageContextServiceKey);
        var pageContextInfoName = '_spPageContextInfo';
        pageContext.initialize({
            cultureInfo: {
                currentCultureName: window[pageContextInfoName].currentCultureName,
                currentUICultureName: window[pageContextInfoName].currentUICultureName
            },
            web: {
                absoluteUrl: window[pageContextInfoName].webAbsoluteUrl,
                id: window[pageContextInfoName].webId,
                serverRelativeUrl: window[pageContextInfoName].webServerRelativeUrl,
                title: window[pageContextInfoName].webTitle
            },
            site: {
                id: window[pageContextInfoName].siteId
            },
            user: {
                displayName: window[pageContextInfoName].userDisplayName,
                loginName: window[pageContextInfoName].userLoginName
            }
        });
        serviceScope.finish();
        this._serviceScope = serviceScope;
    };
    return ClassicPageHost;
}());
exports.ClassicPageHost = ClassicPageHost;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ClassicPageHost;
/* tslint:enable:export-name */

//# sourceMappingURL=ClassicPageHost.js.map
