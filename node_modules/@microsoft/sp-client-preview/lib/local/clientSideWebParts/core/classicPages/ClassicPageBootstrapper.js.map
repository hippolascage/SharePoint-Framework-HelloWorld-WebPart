{"version":3,"sources":["local/clientSideWebParts/core/classicPages/ClassicPageBootstrapper.ts"],"names":[],"mappings":"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","file":"local/clientSideWebParts/core/classicPages/ClassicPageBootstrapper.js","sourcesContent":["  /**\r\n * @Copyright (c) Microsoft Corporation.  All rights reserved.\r\n *\r\n * Code to help boostrap client side web parts on classic pages.\r\n */\r\n\r\nimport { IClientSideWebPartManifest } from '@microsoft/sp-module-interfaces';\r\nimport { DisplayMode, _TraceLogger, _LogSource } from '@microsoft/sp-client-base';\r\n\r\nimport ClassicPageHost from './ClassicPageHost';\r\nimport ClientSideWebPartManager from '../ClientSideWebPartManager';\r\nimport IWebPartData from '../IWebPartData';\r\nimport IWebPartManagerContext from '../IWebPartManagerContext';\r\nimport { PropertyPaneState } from '../../../common/webParts/PropertyPaneDefinitions';\r\n\r\n/**\r\n * This class helps bootstrap client side web parts onto classic SharePoint pages.\r\n * Ideally client side web parts should be bootstrapped similar to the modern pages.\r\n * @todo (SPPPLAT VSO#228547) tracks fixing that.\r\n *\r\n * @internal\r\n */\r\nexport default class ClassicPageBootstrapper {\r\n\r\n    private _initialized: boolean = false;\r\n    private _manager: ClientSideWebPartManager = undefined;\r\n    private _logSource: _LogSource = _LogSource.create('ClientSideWebPart:ClassicPageBootstrapper');\r\n\r\n    /**\r\n     * Load client side web part on a classic page\r\n     *\r\n     * @param instanceId - Instance id of the webpart.\r\n     * @param manifest - The webp art manifest.\r\n     * @param data - Instance data for the control.\r\n     * @param mode - DisplayMode for the web part.\r\n     */\r\n    /* tslint:disable:no-any */\r\n    public loadClientSideWebPart(\r\n      instanceId: string,\r\n      manifest: IClientSideWebPartManifest<any>,\r\n      data: IWebPartData,\r\n      mode: DisplayMode = DisplayMode.Read): void {\r\n\r\n    /* tslint:enable:no-any */\r\n      this._initialize();\r\n\r\n      const context: IWebPartManagerContext = {\r\n        domElement: this._findWebPartContainer(instanceId),\r\n        instanceId: instanceId,\r\n        manifest: manifest,\r\n        webPartData: data,\r\n        displayMode: mode\r\n      };\r\n\r\n      _TraceLogger.logVerbose(this._logSource, `Loading the web part. manager context = '${JSON.stringify(context)}'.`);\r\n      this._manager.loadWebPart(context);\r\n    }\r\n\r\n    /**\r\n     * Log an error in case of loading failure.\r\n     *\r\n     * @param instanceId - Instance id of the webpart e.g. a GUID.\r\n     * @param error - The error string.\r\n     */\r\n    public logClientSideWebPartLoadError(instanceId: string, error: string): void {\r\n        this._initialize();\r\n\r\n        this._manager.renderError(this._findWebPartContainer(instanceId), new Error(error));\r\n    };\r\n\r\n    /**\r\n     * Global method called by the webpart configure button in the classic page\r\n     *\r\n     * @param instanceId - Instance id of the webpart e.g. a GUID.\r\n     * @param title - The title of the webpart.\r\n     */\r\n    public configureStart (instanceId: string, title: string): void {\r\n      this._initialize();\r\n\r\n      _TraceLogger.logVerbose(this._logSource, `Start configuring web part ${title} with id ${instanceId}.`);\r\n      this._manager.configureStart(instanceId, PropertyPaneState.Toggle);\r\n    };\r\n\r\n    /**\r\n     * Initialize the classic page bootstrapper.\r\n     */\r\n    private _initialize(): void {\r\n      if (!this._initialized) {\r\n        this._manager = new ClientSideWebPartManager(ClassicPageHost.getInstance());\r\n        this._initialized = true;\r\n        _TraceLogger.logVerbose(this._logSource, `Classic page bootstrapper initialized.`);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Find the web part container DOM element.\r\n     *\r\n     * @param instanceId - Instance id of the webpart e.g. a GUID.\r\n     */\r\n    private _findWebPartContainer(instanceId: string): HTMLElement {\r\n      const element: HTMLElement =\r\n        document.querySelector('[data-sp-cs-webpartid=' + instanceId + ']') as HTMLElement;\r\n\r\n      if (!element) {\r\n        _TraceLogger.logError(\r\n          this._logSource,\r\n          new Error(`Unable to find the container DOM element for the web part instanceId ${instanceId}.`));\r\n      }\r\n\r\n      return element;\r\n    }\r\n}\r\n\r\n// Kickoff the initialization\r\n/* tslint:disable:no-any */\r\nif (!(window as any).g_cswp) {\r\n  (window as any).g_cswp = new ClassicPageBootstrapper();\r\n/* tslint:enable:no-any */\r\n}\r\n"],"sourceRoot":"/src"}