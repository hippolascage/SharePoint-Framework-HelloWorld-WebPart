/**
* @Copyright (c) Microsoft Corporation.  All rights reserved.
*
* Code to help boostrap client side web parts on classic pages.
*/
"use strict";
var sp_client_base_1 = require('@microsoft/sp-client-base');
var ClassicPageHost_1 = require('./ClassicPageHost');
var ClientSideWebPartManager_1 = require('../ClientSideWebPartManager');
var PropertyPaneDefinitions_1 = require('../../../common/webParts/PropertyPaneDefinitions');
/**
 * This class helps bootstrap client side web parts onto classic SharePoint pages.
 * Ideally client side web parts should be bootstrapped similar to the modern pages.
 * @todo (SPPPLAT VSO#228547) tracks fixing that.
 *
 * @internal
 */
var ClassicPageBootstrapper = (function () {
    function ClassicPageBootstrapper() {
        this._initialized = false;
        this._manager = undefined;
        this._logSource = sp_client_base_1._LogSource.create('ClientSideWebPart:ClassicPageBootstrapper');
    }
    /**
     * Load client side web part on a classic page
     *
     * @param instanceId - Instance id of the webpart.
     * @param manifest - The webp art manifest.
     * @param data - Instance data for the control.
     * @param mode - DisplayMode for the web part.
     */
    /* tslint:disable:no-any */
    ClassicPageBootstrapper.prototype.loadClientSideWebPart = function (instanceId, manifest, data, mode) {
        if (mode === void 0) { mode = sp_client_base_1.DisplayMode.Read; }
        /* tslint:enable:no-any */
        this._initialize();
        var context = {
            domElement: this._findWebPartContainer(instanceId),
            instanceId: instanceId,
            manifest: manifest,
            webPartData: data,
            displayMode: mode
        };
        sp_client_base_1._TraceLogger.logVerbose(this._logSource, "Loading the web part. manager context = '" + JSON.stringify(context) + "'.");
        this._manager.loadWebPart(context);
    };
    /**
     * Log an error in case of loading failure.
     *
     * @param instanceId - Instance id of the webpart e.g. a GUID.
     * @param error - The error string.
     */
    ClassicPageBootstrapper.prototype.logClientSideWebPartLoadError = function (instanceId, error) {
        this._initialize();
        this._manager.renderError(this._findWebPartContainer(instanceId), new Error(error));
    };
    ;
    /**
     * Global method called by the webpart configure button in the classic page
     *
     * @param instanceId - Instance id of the webpart e.g. a GUID.
     * @param title - The title of the webpart.
     */
    ClassicPageBootstrapper.prototype.configureStart = function (instanceId, title) {
        this._initialize();
        sp_client_base_1._TraceLogger.logVerbose(this._logSource, "Start configuring web part " + title + " with id " + instanceId + ".");
        this._manager.configureStart(instanceId, PropertyPaneDefinitions_1.PropertyPaneState.Toggle);
    };
    ;
    /**
     * Initialize the classic page bootstrapper.
     */
    ClassicPageBootstrapper.prototype._initialize = function () {
        if (!this._initialized) {
            this._manager = new ClientSideWebPartManager_1.default(ClassicPageHost_1.default.getInstance());
            this._initialized = true;
            sp_client_base_1._TraceLogger.logVerbose(this._logSource, "Classic page bootstrapper initialized.");
        }
    };
    /**
     * Find the web part container DOM element.
     *
     * @param instanceId - Instance id of the webpart e.g. a GUID.
     */
    ClassicPageBootstrapper.prototype._findWebPartContainer = function (instanceId) {
        var element = document.querySelector('[data-sp-cs-webpartid=' + instanceId + ']');
        if (!element) {
            sp_client_base_1._TraceLogger.logError(this._logSource, new Error("Unable to find the container DOM element for the web part instanceId " + instanceId + "."));
        }
        return element;
    };
    return ClassicPageBootstrapper;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ClassicPageBootstrapper;
// Kickoff the initialization
/* tslint:disable:no-any */
if (!window.g_cswp) {
    window.g_cswp = new ClassicPageBootstrapper();
}

//# sourceMappingURL=ClassicPageBootstrapper.js.map
