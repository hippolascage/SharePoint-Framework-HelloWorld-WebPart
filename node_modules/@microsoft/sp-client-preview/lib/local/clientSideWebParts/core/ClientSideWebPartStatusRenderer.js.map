{"version":3,"sources":["local/clientSideWebParts/core/ClientSideWebPartStatusRenderer.ts"],"names":[],"mappings":"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","file":"local/clientSideWebParts/core/ClientSideWebPartStatusRenderer.js","sourcesContent":["/**\r\n * @Copyright (c) Microsoft Corporation.  All rights reserved.\r\n */\r\n'use strict';\r\n\r\nimport { StringHelper } from '@ms/odsp-utilities-bundle';\r\nimport { Validate } from '@microsoft/sp-client-base';\r\n\r\nimport IClientSideWebPartStatusRenderer from '../../common/webParts/IClientSideWebPartStatusRenderer';\r\nimport strings from './loc/Strings.resx';\r\nimport styles from './styles/cswp-base.module.scss';\r\n\r\n/**\r\n * This class provides the default implementation for displaying loading indicator and error messages\r\n * for webparts. The webpart host can decide to provide custom implemenation of how webparts display\r\n * loading indicators and error messages.\r\n */\r\nexport default class ClientSideWebPartStatusRenderer implements IClientSideWebPartStatusRenderer {\r\n\r\n  private _loadingIndicatorId: string = 'cswp-loading-indicator';\r\n  private _loadingIndicatorHtml: string;\r\n  private _errorId: string = 'cswp-error';\r\n  private _errorHtml: string;\r\n\r\n  /**\r\n   * Display a loading spinner.\r\n   * @param domElement - the webpart container div.\r\n   * @param loadingMessage - the message to be displayed when the loading spinner id displayed.\r\n   */\r\n  public displayLoadingIndicator(domElement: HTMLElement, loadingMessage: string): void {\r\n    Validate.isNotNullOrUndefined(domElement, 'domElement');\r\n\r\n    domElement.classList.add('cswp-loading');\r\n\r\n    if (!this._loadingIndicatorHtml) {\r\n\r\n      let html: string =\r\n        `<div data-sp-id='${this._loadingIndicatorId}' class='cswp-loading-spinner'>` +\r\n        `<div dir='ltr' class='cswp-loading-spinner-container cswp-small-spinner'>` +\r\n        `<div class='cswp-loading-spinner cswp-loading-spinner-animation'>`;\r\n\r\n      for (let i: number = 0; i < 8; i++) {\r\n        html += `<div class='cswp-loading-ball cswp-loading-ball-color'></div>`;\r\n      }\r\n\r\n      html +=\r\n        `</div></div><div class='cswp-spinner-message'>` + StringHelper.format(strings.LoadingStatus, '') +\r\n        `</div><div class='cswp-loading-screenReaderOnly' role='alert' aria-live='polite'>` +\r\n        StringHelper.format(strings.LoadingStatus, loadingMessage) +\r\n        `</div></div>`;\r\n\r\n      this._loadingIndicatorHtml = html;\r\n    }\r\n\r\n    domElement.innerHTML = this._loadingIndicatorHtml;\r\n  }\r\n\r\n  /**\r\n   * Clear the loading indicator.\r\n   * @param domElement - the webpart container div.\r\n   */\r\n  public clearLoadingIndicator(domElement: HTMLElement): void {\r\n    Validate.isNotNullOrUndefined(domElement, 'domElement');\r\n\r\n    const divMsg: HTMLDivElement =\r\n      domElement.querySelector(`div[data-sp-id='${this._loadingIndicatorId}']`) as HTMLDivElement;\r\n\r\n    if (divMsg) {\r\n      domElement.removeChild(divMsg);\r\n    }\r\n\r\n    domElement.classList.remove('cswp-loading');\r\n    domElement.classList.add('cswp');\r\n  }\r\n\r\n  /**\r\n   * Render the provided error message in the webpart container div.\r\n   * @param domElement - the webpart container div.\r\n   * @param error - the error message.\r\n   */\r\n  public renderError(domElement: HTMLElement, error: Error | string): void {\r\n    Validate.isNotNullOrUndefined(domElement, 'domElement');\r\n    Validate.isNotNullOrUndefined(error, 'error');\r\n\r\n    let divErr: HTMLDivElement =\r\n      domElement.querySelector(`div[data-sp-id='${this._errorId}']`) as HTMLDivElement;\r\n\r\n    if (divErr) {\r\n      divErr.style.display = 'block';\r\n    } else {\r\n\r\n      if (!this._errorHtml) {\r\n        this._errorHtml =\r\n          `<div class='${styles.errorBox}' role='alert' aria-live='assertive'>` +\r\n          `<span class='${styles.errorBoxText}'></span>` +\r\n          `</div>`;\r\n      }\r\n\r\n      divErr = document.createElement('div') as HTMLDivElement;\r\n      divErr.setAttribute('data-sp-id', this._errorId);\r\n      divErr.innerHTML = this._errorHtml;\r\n      domElement.appendChild(divErr);\r\n    }\r\n\r\n    const text: HTMLSpanElement = divErr.getElementsByTagName('span')[0] as HTMLSpanElement;\r\n    text.textContent = (DEBUG && (error as Error).stack)\r\n      ? (error as Error).stack\r\n      : (error as Error).message || error as string;\r\n  }\r\n\r\n  /**\r\n   * Clear the webpart error message.\r\n   * @param domElement - the webpart container div.\r\n   */\r\n  public clearError(domElement: HTMLElement): void {\r\n    Validate.isNotNullOrUndefined(domElement, 'domElement');\r\n\r\n    const divErr: HTMLDivElement =\r\n      domElement.querySelector(`div[data-sp-id='${this._errorId}']`) as HTMLDivElement;\r\n\r\n    if (divErr) {\r\n      divErr.style.display = 'none';\r\n    }\r\n  }\r\n}"],"sourceRoot":"/src"}