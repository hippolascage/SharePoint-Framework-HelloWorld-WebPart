import { BasicHttpClient, DisplayMode, Environment, HttpClient, PageContext, ServiceScope } from '@microsoft/sp-client-base';
import { ILocalizedString, IClientSideWebPartManifest, IClientSideWebPartManifestInstance, IClientSideWebPartManifestEntry, IClientSideComponentLoaderConfig } from '@microsoft/sp-module-interfaces';
import IClientSideWebPartStatusRenderer from '../../../common/webParts/IClientSideWebPartStatusRenderer';
import { IEventAggregator } from '../../../common/events/IEvent';
import IWebPartManagerContext from '../IWebPartManagerContext';
import IWebPartHost from '../../../common/webParts/IWebPartHost';
import IWebPartData from './../IWebPartData';
import { PropertyPaneState } from '../../../common/webParts/PropertyPaneDefinitions';
export declare class MockWebPartManifest implements IClientSideWebPartManifest<{}> {
    manifestVersion: number;
    id: string;
    componentType: 'WebPart';
    version: string;
    preconfiguredEntries: IClientSideWebPartManifestEntry<{}>[];
    loaderConfig: IClientSideComponentLoaderConfig;
}
export declare class MockWebPartManifestInstance implements IClientSideWebPartManifestInstance<{}> {
    manifestVersion: number;
    id: string;
    componentType: 'WebPart';
    version: string;
    title: ILocalizedString;
    description: ILocalizedString;
    officeFabricIconFontName: string;
    iconImageUrl: string;
    groupId: string;
    properties: {};
    loaderConfig: IClientSideComponentLoaderConfig;
}
export declare class MockWebPartManagerContext implements IWebPartManagerContext {
    domElement: HTMLElement;
    instanceId: string;
    manifest: MockWebPartManifest;
    webPartData: IWebPartData;
    displayMode: DisplayMode;
    host: IWebPartHost;
}
export declare class MockWebPartContext {
    domElement: HTMLElement;
    manifest: IClientSideWebPartManifestInstance<{}>;
    instanceId: string;
    webPartTag: string;
    httpClient: HttpClient;
    basicHttpClient: BasicHttpClient;
    pageContext: PageContext;
    statusRenderer: IClientSideWebPartStatusRenderer;
    eventAggregator: IEventAggregator;
    configureStart: (id: string, propertyPaneState?: PropertyPaneState) => void;
    serviceScope: ServiceScope;
    environment: Environment;
    host: IWebPartHost;
}
export declare class MockPreloadedPageData {
    appId: string;
    webServerRelativeUrl: string;
    webAbsoluteUrl: string;
}
export declare class MockWebPartHost implements IWebPartHost {
    pageContext: PageContext;
    basicHttpClient: BasicHttpClient;
    httpClient: HttpClient;
    eventAggregator: any;
    statusRenderer: MockClientSideWebPartStatusRenderer;
    serviceScope: ServiceScope;
    environment: Environment;
    renderPropertyPane: (props: {}) => void;
    constructor();
}
export declare class MockClientSideWebPartStatusRenderer implements IClientSideWebPartStatusRenderer {
    displayCalled: boolean;
    clearCalled: boolean;
    errorCalled: boolean;
    clearErrorCalled: boolean;
    displayLoadingIndicator(domElement: HTMLElement): void;
    clearLoadingIndicator(domElement: HTMLElement): void;
    renderError(domElement: HTMLElement, error: Error | string): void;
    clearError(domElement: HTMLElement): void;
}
