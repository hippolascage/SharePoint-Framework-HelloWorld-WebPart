{"version":3,"sources":["local/clientSideWebParts/core/test/TestWebPart.ts"],"names":[],"mappings":";;;;;;AAAA,+BAA4B,2BAA2B,CAAC,CAAA;AAGxD,sCAAkC,0BAA0B,CAAC,CAAA;AAG7D,sCAEO,mFAAmF,CAAC,CAAA;AAQ3F;IAAyC,+BAAwC;IAAjF;QAAyC,8BAAwC;QAEvE,gBAAW,GAAgB,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;IA2CpE,CAAC;IAxCC,sBAAW,yCAAgB;QAD3B,sEAAsE;aACtE,cAA6C,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;;;OAAA;IAEtE,sBAAW,uCAAc;QADzB,2BAA2B;aAC3B,cAAuE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;;;OAAA;IAEtG,sBAAW,yCAAgB;QAD3B,0BAA0B;aAC1B,cAAwC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;;;OAAA;IACzE,sBAAW,0CAAiB;aAA5B,cAA8C,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;;;OAAA;IACxE,sBAAW,mCAAU;aAArB,cAAwC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;;;OAAA;IACnE,sBAAW,yCAAgB;aAA3B,cAAmD,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;;;OAAA;IAC5E,sBAAW,2CAAkB;aAA7B,cAA2C,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;;;OAAA;IACtE,sBAAW,mDAA0B;aAArC,cAAiE,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC;;;OAAA;IACpG,sBAAW,sCAAa;aAAxB,cAA8C,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;;;OAAA;IAE7D,4BAAM,GAAb,UAAc,IAAoC,EAAE,IAAmB;QAAzD,oBAAoC,GAApC,OAAoB,4BAAW,CAAC,IAAI;QAChD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;YACvB,IAAI,CAAC,WAAW,CAAC,SAAS,GAAG,kBAAkB,CAAC;QAClD,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,WAAW,CAAC,SAAS,GAAG,mBAAmB,CAAC;QACnD,CAAC;IACH,CAAC;IAES,6BAAO,GAAjB;QACE,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC;IAC/B,CAAC;IAED,sBAAc,6CAAoB;aAAlC;YACE,MAAM,CAAC;gBACL,KAAK,EAAE,CAAC;wBACN,MAAM,EAAE;4BACN,WAAW,EAAE,uBAAuB;yBACrC;wBACD,MAAM,EAAE;4BACN;gCACE,SAAS,EAAE,EAAE;gCACb,WAAW,EAAE;oCACX,6CAAqB,CAAC,OAAO,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;6BACtD;yBACF;qBACF,CAAC;aACH,CAAC;QACJ,CAAC;;;OAAA;IACH,kBAAC;AAAD,CA7CA,AA6CC,CA7CwC,+BAAqB,GA6C7D;AA7CD;6BA6CC,CAAA;AAED;IAA6C,2CAAwC;IAArF;QAA6C,8BAAwC;IAOrF,CAAC;IAHW,yCAAO,GAAjB;QACE,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC;IAC/B,CAAC;IACH,8BAAC;AAAD,CAPA,AAOC,CAP4C,+BAAqB,GAOjE;AAPY,+BAAuB,0BAOnC,CAAA","file":"local/clientSideWebParts/core/test/TestWebPart.js","sourcesContent":["import { DisplayMode } from '@microsoft/sp-client-base';\r\nimport { IClientSideWebPartManifestInstance } from '@microsoft/sp-module-interfaces';\r\n\r\nimport BaseClientSideWebPart from '../BaseClientSideWebPart';\r\nimport IWebPartData from '../IWebPartData';\r\nimport { IPropertyPaneSettings } from '../../propertyPane/propertyPane/IPropertyPane';\r\nimport {\r\n  PropertyPaneTextField\r\n} from '../../propertyPane/propertyPaneFields/propertyPaneTextField/PropertyPaneTextField';\r\nimport IWebPartHost from '../../../common/webParts/IWebPartHost';\r\nimport IWebPartContext from '../IWebPartContext';\r\n\r\nexport interface ITestWebPartProps {\r\n  prop1: string;\r\n}\r\n\r\nexport default class TestWebPart extends BaseClientSideWebPart<ITestWebPartProps> {\r\n\r\n  private textElement: HTMLElement = document.createElement('span');\r\n\r\n  // Public equivalents of protected members to help with the unit tests\r\n  public get publicDomElement(): HTMLElement { return this.domElement; }\r\n  /* tslint:disable:no-any */\r\n  public get publicManifest(): IClientSideWebPartManifestInstance<any> { return this.context.manifest; }\r\n  /* tslint:enable:no-any */\r\n  public get publicInstanceId(): string { return this.context.instanceId; }\r\n  public get publicDisplayMode(): DisplayMode { return this.displayMode; }\r\n  public get publicHost(): IWebPartHost { return this.context.host; }\r\n  public get publicProperties(): ITestWebPartProps { return this.properties; }\r\n  public get publicRenderedOnce(): boolean { return this.renderedOnce; }\r\n  public get publicPropertyPaneSettings(): IPropertyPaneSettings { return this.propertyPaneSettings; }\r\n  public get publicContext(): IWebPartContext { return this.context; }\r\n\r\n  public render(mode: DisplayMode = DisplayMode.Read, data?: IWebPartData): void {\r\n    if (!this.renderedOnce) {\r\n      this.textElement.innerText = 'firstRenderValue';\r\n    } else {\r\n      this.textElement.innerText = 'secondRenderValue';\r\n    }\r\n  }\r\n\r\n  protected dispose(): void {\r\n    this.textElement = undefined;\r\n  }\r\n\r\n  protected get propertyPaneSettings(): IPropertyPaneSettings {\r\n    return {\r\n      pages: [{\r\n        header: {\r\n          description: 'Test WebPart Settings'\r\n        },\r\n        groups: [\r\n          {\r\n            groupName: '',\r\n            groupFields: [\r\n              PropertyPaneTextField('prop1', { label: 'Prop1' })]\r\n          }\r\n        ]\r\n      }]\r\n    };\r\n  }\r\n}\r\n\r\nexport class TestWebPartWithNoRender extends BaseClientSideWebPart<ITestWebPartProps> {\r\n\r\n  private textElement: HTMLElement;\r\n\r\n  protected dispose(): void {\r\n    this.textElement = undefined;\r\n  }\r\n}\r\n"],"sourceRoot":"/src"}