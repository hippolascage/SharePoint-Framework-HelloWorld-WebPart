"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var sp_client_base_1 = require('@microsoft/sp-client-base');
var BaseClientSideWebPart_1 = require('../BaseClientSideWebPart');
var PropertyPaneTextField_1 = require('../../propertyPane/propertyPaneFields/propertyPaneTextField/PropertyPaneTextField');
var TestWebPart = (function (_super) {
    __extends(TestWebPart, _super);
    function TestWebPart() {
        _super.apply(this, arguments);
        this.textElement = document.createElement('span');
    }
    Object.defineProperty(TestWebPart.prototype, "publicDomElement", {
        // Public equivalents of protected members to help with the unit tests
        get: function () { return this.domElement; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TestWebPart.prototype, "publicManifest", {
        /* tslint:disable:no-any */
        get: function () { return this.context.manifest; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TestWebPart.prototype, "publicInstanceId", {
        /* tslint:enable:no-any */
        get: function () { return this.context.instanceId; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TestWebPart.prototype, "publicDisplayMode", {
        get: function () { return this.displayMode; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TestWebPart.prototype, "publicHost", {
        get: function () { return this.context.host; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TestWebPart.prototype, "publicProperties", {
        get: function () { return this.properties; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TestWebPart.prototype, "publicRenderedOnce", {
        get: function () { return this.renderedOnce; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TestWebPart.prototype, "publicPropertyPaneSettings", {
        get: function () { return this.propertyPaneSettings; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TestWebPart.prototype, "publicContext", {
        get: function () { return this.context; },
        enumerable: true,
        configurable: true
    });
    TestWebPart.prototype.render = function (mode, data) {
        if (mode === void 0) { mode = sp_client_base_1.DisplayMode.Read; }
        if (!this.renderedOnce) {
            this.textElement.innerText = 'firstRenderValue';
        }
        else {
            this.textElement.innerText = 'secondRenderValue';
        }
    };
    TestWebPart.prototype.dispose = function () {
        this.textElement = undefined;
    };
    Object.defineProperty(TestWebPart.prototype, "propertyPaneSettings", {
        get: function () {
            return {
                pages: [{
                        header: {
                            description: 'Test WebPart Settings'
                        },
                        groups: [
                            {
                                groupName: '',
                                groupFields: [
                                    PropertyPaneTextField_1.PropertyPaneTextField('prop1', { label: 'Prop1' })]
                            }
                        ]
                    }]
            };
        },
        enumerable: true,
        configurable: true
    });
    return TestWebPart;
}(BaseClientSideWebPart_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = TestWebPart;
var TestWebPartWithNoRender = (function (_super) {
    __extends(TestWebPartWithNoRender, _super);
    function TestWebPartWithNoRender() {
        _super.apply(this, arguments);
    }
    TestWebPartWithNoRender.prototype.dispose = function () {
        this.textElement = undefined;
    };
    return TestWebPartWithNoRender;
}(BaseClientSideWebPart_1.default));
exports.TestWebPartWithNoRender = TestWebPartWithNoRender;

//# sourceMappingURL=TestWebPart.js.map
