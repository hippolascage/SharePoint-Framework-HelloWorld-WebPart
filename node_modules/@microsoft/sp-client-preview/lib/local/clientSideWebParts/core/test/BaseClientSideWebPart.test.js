"use strict";
var BaseClientSideWebPart_1 = require('../BaseClientSideWebPart');
var TestWebPart_1 = require('./TestWebPart');
var WebPartMocks_1 = require('./WebPartMocks');
var assert = chai.assert, expect = chai.expect;
describe('BaseClientSideWebPart', function () {
    it('Base class cannot be instantiated', function () {
        expect(function () {
            return new BaseClientSideWebPart_1.default(new WebPartMocks_1.MockWebPartContext());
        }).to.throw();
        expect(function () { return new TestWebPart_1.default(new WebPartMocks_1.MockWebPartContext()); }).to.not.throw();
    });
    it('Invalid parameters are not accepted', function () {
        var wpc = new WebPartMocks_1.MockWebPartContext();
        expect(function () { return new TestWebPart_1.default(wpc); })
            .to.not.throw();
        wpc = new WebPartMocks_1.MockWebPartContext();
        wpc.domElement = undefined;
        expect(function () {
            return new TestWebPart_1.default(wpc);
        })
            .to.throw('The value for \"webpart element\" must not be undefined');
        wpc = new WebPartMocks_1.MockWebPartContext();
        wpc.instanceId = undefined;
        expect(function () {
            return new TestWebPart_1.default(wpc);
        })
            .to.throw('The value for \"webpart instanceId\" must not be undefined');
        wpc = new WebPartMocks_1.MockWebPartContext();
        wpc.manifest = undefined;
        expect(function () { return new TestWebPart_1.default(wpc); })
            .to.throw('The value for \"webpart manifest\" must not be undefined');
        wpc = new WebPartMocks_1.MockWebPartContext();
        wpc.host = undefined;
        expect(function () { return new TestWebPart_1.default(wpc); })
            .to.throw('The value for \"webpart host\" must not be undefined');
        wpc = new WebPartMocks_1.MockWebPartContext();
        wpc.eventAggregator = undefined;
        expect(function () { return new TestWebPart_1.default(wpc); })
            .to.throw('The value for \"webpart context eventAggregator\" must not be undefined');
        wpc = new WebPartMocks_1.MockWebPartContext();
        wpc.statusRenderer = undefined;
        expect(function () { return new TestWebPart_1.default(wpc); })
            .to.throw('The value for \"webpart context statusRenderer\" must not be undefined');
        wpc = new WebPartMocks_1.MockWebPartContext();
        wpc.pageContext = undefined;
        expect(function () { return new TestWebPart_1.default(wpc); })
            .to.throw('The value for \"webpart context pageContext\" must not be undefined');
    });
    it('Has valid public properties after initialization', function () {
        var c = new WebPartMocks_1.MockWebPartContext();
        c.domElement.id = 'id1';
        var wp = new TestWebPart_1.default(c);
        assert.strictEqual(c.domElement.id, wp.publicDomElement.id, 'id');
        assert.deepEqual(c.manifest, wp.publicManifest, 'manifest');
        assert.strictEqual(c.instanceId, wp.publicInstanceId, 'instanceId');
        assert.deepEqual(c.host, wp.publicHost, 'host');
        assert.deepEqual(c.manifest.properties, wp.publicProperties, 'properties');
        assert.strictEqual(false, wp.publicRenderedOnce, 'renderedOnce');
        assert.strictEqual(wp.publicContext, c);
    });
    it('Base class render throws', function () {
        var wp = new TestWebPart_1.TestWebPartWithNoRender(new WebPartMocks_1.MockWebPartContext());
        /* tslint:disable:no-any */
        expect(function () { wp.render(); }).to.throw();
        /* tslint:enable:no-any */
    });
    it('Dispose does not nullify dom element', function () {
        var c = new WebPartMocks_1.MockWebPartContext();
        var wp = new TestWebPart_1.default(c);
        assert(!!c.domElement);
        /* tslint:disable:no-any */
        wp._internalDispose();
        /* tslint:enable:no-any */
        assert(c.domElement);
    });
    it('Serialize returns correct data', function () {
        var c = new WebPartMocks_1.MockWebPartContext();
        var wp = new TestWebPart_1.default(c);
        var data = {
            id: c.manifest.id,
            instanceId: c.instanceId,
            version: c.manifest.version,
            title: c.manifest.title.default,
            properties: c.manifest.properties,
            htmlProperties: ''
        };
        /* tslint:disable:no-any */
        assert.deepEqual(data, wp._internalSerialize(), 'serialized data');
        /* tslint:enable:no-any */
    });
    it('Serialize returns correct data with html properties', function () {
        var c = new WebPartMocks_1.MockWebPartContext();
        c.manifest.searchablePropertyNames = ['prop1'];
        c.manifest.linkPropertyNames = ['prop2'];
        c.manifest.imageLinkPropertyNames = ['prop3'];
        var wp = new TestWebPart_1.default(c);
        var htmlPropsString = "<div data-sp-prop-name='prop1'>value1</div>" +
            "<link data-sp-prop-name='prop2' href='http://www.contoso.com/page1.aspx'>" +
            "<img data-sp-prop-name='prop2' href='http://www.contoso.com/image.png'>";
        var data = {
            id: c.manifest.id,
            instanceId: c.instanceId,
            version: c.manifest.version,
            title: c.manifest.title.default,
            properties: c.manifest.properties,
            htmlProperties: htmlPropsString
        };
        // @todo: this should be deep equal
        /* tslint:disable:no-any */
        assert.notDeepEqual(data, wp._internalSerialize(), 'serialized data');
        /* tslint:enable:no-any */
    });
    // Property Pane
    it('Get property pane settings returns correct data', function () {
        var c = new WebPartMocks_1.MockWebPartContext();
        var wp = new TestWebPart_1.default(c);
        var data = {
            webPartId: c.instanceId,
            title: c.manifest.title.default,
            settings: wp.publicPropertyPaneSettings,
            onPropertyChange: undefined,
            onClose: undefined,
            onSave: undefined,
            onRendered: undefined,
            onConfigurationComplete: undefined,
            onLostFocus: undefined,
            properties: c.manifest.properties
        };
        /* tslint:disable:no-any */
        var props = wp._internalGetPropertyPaneSettings();
        /* tslint:enable:no-any */
        assert.strictEqual(data.webPartId, props.webPartId, 'webPartId');
        assert.strictEqual(data.settings.currentPage, props.settings.currentPage, 'currentPage');
        assert.deepEqual(data.properties, props.properties, 'properties');
        assert.strictEqual(data.settings.pages.length, 1, 'length');
    });
    it('Base class onEvent does not throw', function () {
        var wp = new TestWebPart_1.TestWebPartWithNoRender(new WebPartMocks_1.MockWebPartContext());
        /* tslint:disable:no-any */
        expect(function () { wp.onEvent('testEvent', undefined); }).to.not.throw();
        /* tslint:enable:no-any */
    });
    // Eventing
    it('Base class onEvent does not throw', function () {
        var wp = new TestWebPart_1.TestWebPartWithNoRender(new WebPartMocks_1.MockWebPartContext());
        /* tslint:disable:no-any */
        expect(function () { wp.onEvent('testEvent', undefined); }).to.not.throw();
        /* tslint:enable:no-any */
    });
});

//# sourceMappingURL=BaseClientSideWebPart.test.js.map
