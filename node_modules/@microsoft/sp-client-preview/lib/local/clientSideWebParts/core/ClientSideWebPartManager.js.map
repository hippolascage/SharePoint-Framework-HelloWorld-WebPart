{"version":3,"sources":["local/clientSideWebParts/core/ClientSideWebPartManager.ts"],"names":[],"mappings":"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","file":"local/clientSideWebParts/core/ClientSideWebPartManager.js","sourcesContent":["/**\r\n * @Copyright (c) Microsoft Corporation.  All rights reserved.\r\n *\r\n * This file contains code for the ClientSideWebPartManager. The webart host is expected to\r\n * load and manage webparts through the webpart manager APIs.\r\n */\r\n'use strict';\r\n\r\nimport * as lodash from '@microsoft/sp-lodash-subset';\r\nimport spModuleLoader from '@microsoft/sp-module-loader';\r\nimport {\r\n  httpClientServiceKey,\r\n  DisplayMode,\r\n  HttpClient,\r\n  PageContext,\r\n  pageContextServiceKey,\r\n  Validate,\r\n  _ILogSource,\r\n  _LogSource,\r\n  _TraceLogger,\r\n  _PerformanceLogger\r\n} from '@microsoft/sp-client-base';\r\nimport {\r\n  IClientSideComponentManifest,\r\n  IClientSideWebPartManifest,\r\n  IClientSideWebPartManifestInstance } from '@microsoft/sp-module-interfaces';\r\nimport { StringHelper } from '@ms/odsp-utilities-bundle';\r\n\r\nimport BaseClientSideWebPart from './BaseClientSideWebPart';\r\nimport ClientSideWebStatusRenderer from './ClientSideWebPartStatusRenderer';\r\nimport EventAggregator from '../../common/events/EventAggregator';\r\nimport { executeWithoutFailing } from '../../utilities/misc/Utils';\r\nimport { IClientSideWebPartInternal  } from './IClientSideWebPartInternal';\r\nimport IClientSideWebPartStatusRenderer from './../../common/webParts/IClientSideWebPartStatusRenderer';\r\nimport { IEventAggregator } from '../../common/events/IEvent';\r\nimport IWebPartContext from './IWebPartContext';\r\nimport IWebPartData from './IWebPartData';\r\nimport IWebPartEvent from './IWebPartEvent';\r\nimport IWebPartHost from '../../common/webParts/IWebPartHost';\r\nimport IWebPartManagerContext from './IWebPartManagerContext';\r\nimport { PropertyPaneState } from '../../common/webParts/PropertyPaneDefinitions';\r\nimport PropertyPaneController from '../propertyPane/propertyPaneController/propertyPaneController';\r\nimport { _QosMonitor } from '@microsoft/sp-client-base';\r\nimport strings from './loc/Strings.resx';\r\nimport WebPartContext from './WebPartContext';\r\n\r\n/**\r\n * The ClientSideWebPartManager is expected to be the external world interface to client side webparts. Each\r\n * host is expected to create an instance of this class and manage loading of all webparts in that host\r\n * through that one instance. e.g. On one page, if there are multiple Canvas objects, each one could have\r\n * one instance of this class. If the page hosts webparts without the Canvas, then the page can have an\r\n * instance of this class. Overall this class is expected to provide the following purpose:\r\n *\r\n *    - Orchestrates loading of one or more webparts in a host.\r\n *    - It takes care of loading webpart dependencies asynchronously. Each webpart loads completely\r\n *      independently of the other webparts in the host.\r\n *    - Keep a reference to all the loaded webparts and help provide bulk operations on the webparts.\r\n *    - Help manage memory leak type issues in one place.\r\n *    - Integrate the webparts with the PropertyPane and other external entities.\r\n *    - Help troubleshoot webparts during escalations.\r\n *\r\n *     loadWebPart   Load webpart in the provided host container. The host container can be a classic sharepoint page,\r\n *                   modern authoring canvas, or a custom sharepoint page.\r\n *     setDisplayMode    Switch mode of all webparts\r\n *     serialize     Return a serialized context of all webparts\r\n *     raiseEvent    Raise an event to the associated event aggregator\r\n *\r\n */\r\nexport default class ClientSideWebPartManager {\r\n\r\n  /**\r\n   * Dictionary of all the webparts\r\n   */\r\n  private _webparts: Map<string, IClientSideWebPartInternal> = new Map<string, IClientSideWebPartInternal>();\r\n\r\n  /**\r\n   * Host that contains this instance.\r\n   * Note, at the current time there is no support for multiple hostsand the host not is expected to change.\r\n   */\r\n  private _host: IWebPartHost;\r\n\r\n  /*\r\n   * WebPart manager log source\r\n   */\r\n  private _logSource: _ILogSource = _LogSource.create('ClientSideWebPartManager');\r\n\r\n  /**\r\n   * GUID validation regex\r\n   */\r\n  private _guidRegex: RegExp = new RegExp('^[a-z0-9]{8}(-([0-9a-fA-F]){4}){3}-[a-z0-9]{12}$', 'i');\r\n\r\n  /**\r\n   * Reference to the propertypane controller.\r\n   */\r\n  private _propertyPaneController: PropertyPaneController;\r\n\r\n  /**\r\n   * Timer to mark the canvas dirty.\r\n   */\r\n  private _dirtyBitTimer: number;\r\n\r\n  /**\r\n   * If true, webparts have already been fetched.\r\n   */\r\n  private _webpartsHaveBeenFetched: boolean = false;\r\n\r\n  /**\r\n   * Event aggregator instance scoped to this web part manager instance.\r\n   */\r\n  private _eventAggregator: IEventAggregator = new EventAggregator();\r\n\r\n  /**\r\n   * Web part status renderer instance scoped to this web part manager instance.\r\n   */\r\n  private _statusRenderer: IClientSideWebPartStatusRenderer = new ClientSideWebStatusRenderer();\r\n\r\n  /**\r\n   * Page context reference.\r\n   */\r\n  private _pageContext: PageContext;\r\n\r\n  /**\r\n   * Initialize the ClientSideWebPartManager.\r\n   *\r\n   * @param host - Reference to the host object. The host parameter is expetected to contain external\r\n   *        world references. e.g. preloadedPageData, eventAggregator, etc...\r\n   */\r\n  constructor(host: IWebPartHost) {\r\n    Validate.isNotNullOrUndefined(host, 'host');\r\n\r\n    this._host = host;\r\n    this._pageContext = host.serviceScope.consume(pageContextServiceKey);\r\n    this.configureStart = this.configureStart.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Load a webpart in the provided dom element. Does the following steps\r\n   *\r\n   *    - Validate params\r\n   *    - Perform an async import of the bootstrapModule and preLoadModules from the provided manifest\r\n   *    - Instantiate the webpart\r\n   *    - Call the render method on the webpart object\r\n   *\r\n   * @param context - Web part manager context.\r\n   */\r\n  public loadWebPart(context: IWebPartManagerContext): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      this._validateInput(context);\r\n\r\n      // If manifest is null, we should display an error. This can be a legitimate case when the manifest has\r\n      // been deleted or webpart removed from the tenant level repository or the webpart is not being shipped\r\n      // anymore but some page still contains\r\n      // a reference to an instance of that webpart.\r\n      if (!this._validateManifest(context.manifest, context.displayMode)) {\r\n        this.renderError(\r\n          context.domElement,\r\n          new Error(StringHelper.format(strings.ManifestNullError, context.instanceId))\r\n        );\r\n\r\n        return;\r\n      }\r\n\r\n      /* tslint:disable:no-any */\r\n      const manifest: IClientSideWebPartManifest<any> = context.manifest;\r\n      /* tslint:enable:no-any */\r\n      const instanceId: string = context.instanceId;\r\n      const domElement: HTMLElement = context.domElement;\r\n\r\n      // Performance and QOS markers\r\n      const performanceTag: string = this._createWebPartTag(manifest, instanceId);\r\n      const qosMonitor: _QosMonitor = this._createQosMonitor(manifest);\r\n      _PerformanceLogger.addComponent(performanceTag);\r\n      _PerformanceLogger.startMarkForComponent(performanceTag);\r\n\r\n      // Start the loading indicator\r\n      this._statusRenderer.displayLoadingIndicator(\r\n        domElement,\r\n        manifest.preconfiguredEntries[0].title.default.toString());\r\n\r\n      /* tslint:disable:no-any */\r\n      const modulePromise: Promise<any> = spModuleLoader.loadManifestModules(manifest.id);\r\n      /* tslint:enable:no-any */\r\n      if (modulePromise) {\r\n        modulePromise.then(\r\n          /* tslint:disable:no-any */\r\n          (moduleLibrary: any) => {\r\n            _PerformanceLogger.markComponent(performanceTag, 'modulesLoaded');\r\n            /* tslint:enable:no-any */\r\n            this._statusRenderer.clearLoadingIndicator(context.domElement);\r\n\r\n            _TraceLogger.logVerbose(this._logSource, `Successfully loaded modules for webpart ${manifest.id}`);\r\n\r\n            if (!moduleLibrary) {\r\n              throw new Error(strings.UndefinedModule);\r\n            }\r\n\r\n            try {\r\n              /* tslint:disable:no-any */\r\n              let wp: any = moduleLibrary;\r\n              /* tslint:enable:no-any */\r\n\r\n              // If the webpart has a default export, use that.\r\n              if (wp && wp.default) {\r\n                wp = wp.default;\r\n              }\r\n\r\n              if (!wp) {\r\n                const message: string = StringHelper.format(\r\n                  strings.ModuleNotLoaded,\r\n                  manifest.id,\r\n                  manifest.id,\r\n                  this._getLoadedModuleList(moduleLibrary)\r\n                );\r\n\r\n                throw new Error(message);\r\n              }\r\n\r\n              if (typeof (wp) !== 'function' && wp.default) {\r\n                wp = wp.default;\r\n              }\r\n\r\n              if (typeof (wp) !== 'function') {\r\n                throw new Error(StringHelper.format(strings.IncorrectBoostrapModule, manifest.id));\r\n              }\r\n\r\n              const typedWp: IClientSideWebPartInternal = wp as IClientSideWebPartInternal;\r\n\r\n              // @todo: add a mechanism to detect webpart DOM node removal such that if the app\r\n              // is switching between SPA pages, we can make sure webparts are consistently and\r\n              // appropriately disposed. VSO#144986.\r\n              const wpi: IClientSideWebPartInternal = new typedWp(this._getWebPartContext(context));\r\n              this._webparts.set(instanceId, wpi);\r\n\r\n              // Start the dirty bit timer if required\r\n              this._startDirtyBitTimer(context.displayMode);\r\n\r\n              // If the webpart is derived from the base class, we want to enforce a stricter call flow\r\n              // which will lead to simpler webpart code.\r\n              if (this._instanceOfBase(wpi)) {\r\n                // internal render will write out specific failures\r\n                return wpi._internalFirstTimeRender(context.displayMode, qosMonitor, context.webPartData).then(\r\n                  () => {\r\n                    qosMonitor.writeSuccess();\r\n                    _PerformanceLogger.endMarkForComponent(performanceTag);\r\n                    resolve();\r\n                  });\r\n\r\n              } else {\r\n                throw new Error(strings.NonBaseWebPart);\r\n              }\r\n              /* tslint:disable: max-line-length */\r\n            } catch (ex) {\r\n\r\n              const wpi: IClientSideWebPartInternal = this._webparts.get(instanceId);\r\n              if (wpi) {\r\n                executeWithoutFailing(() => { this._statusRenderer.clearLoadingIndicator(domElement); }, this._logSource);\r\n                executeWithoutFailing(() => { wpi._internalDispose(); }, this._logSource);\r\n                executeWithoutFailing(() => { this._webparts.delete(instanceId); }, this._logSource);\r\n              }\r\n\r\n              executeWithoutFailing(() => {\r\n                  qosMonitor.writeUnexpectedFailure('UnhandledLoadError', ex, {'instanceId': instanceId});\r\n                },\r\n                this._logSource);\r\n              this.renderError(domElement, ex);\r\n              reject();\r\n            }\r\n          }).catch(\r\n          (errorMsg: string) => {\r\n            const err: Error = new Error(StringHelper.format(strings.ScriptLoadErrorTemplate, errorMsg));\r\n            executeWithoutFailing(() => {\r\n                qosMonitor.writeUnexpectedFailure('ScriptLoad', err, {'instanceId': instanceId});\r\n              },\r\n              this._logSource);\r\n            this.renderError(domElement, err);\r\n            reject();\r\n          });\r\n        /* tslint:enable: max-line-length */\r\n      } else {\r\n        const error: Error = new Error(`No loader could be found, unable to load webpart ${manifest.id}.`);\r\n        this.renderError(domElement, error);\r\n        reject();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * This makes a REST call to load the current site's webparts into the module loader.\r\n   */\r\n  public fetchWebParts(): void {\r\n    interface IResponse {\r\n      value: IResponseValue[];\r\n    }\r\n\r\n    interface IResponseValue {\r\n      Manifest: string;\r\n    }\r\n\r\n    // If the webServerRelativeUrl is missing, or if webparts have already been fetched\r\n    //  we don't have anything to do here.\r\n    if (this._pageContext.web &&\r\n     this._pageContext.web.serverRelativeUrl &&\r\n     !this._webpartsHaveBeenFetched) {\r\n      this._webpartsHaveBeenFetched = true;\r\n      const requestUrl: string = `${this._pageContext.web.serverRelativeUrl}/_api/web/GetClientSideWebParts`;\r\n      this._host.serviceScope.whenFinished(() => {\r\n        const httpClient: HttpClient = this._host.serviceScope.consume(httpClientServiceKey);\r\n        httpClient.get(requestUrl)\r\n              .then((response: Response) => {\r\n                return response.json();\r\n              })\r\n              .then((value: IResponse) => {\r\n                const manifests: IClientSideComponentManifest[] = value.value.map((manifestObject: IResponseValue) =>\r\n                  JSON.parse(manifestObject.Manifest));\r\n                spModuleLoader.importManifests(manifests, /* overwriteExisting */ false);\r\n              })\r\n              .catch((error: Error) => {\r\n                console.error(`Error loading webparts: ${error}`);\r\n                this._webpartsHaveBeenFetched = false;\r\n              });\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get list of active webparts\r\n   *\r\n   * @return {IClientSideWebPartManifest[]}: returns array of manifests\r\n   */\r\n  /* tslint:disable:no-any */\r\n  public getWebParts(): IClientSideWebPartManifest<any>[] {\r\n  /* tslint:enable:no-any */\r\n    const manifests: IClientSideComponentManifest[] = spModuleLoader.getManifests();\r\n\r\n    /* tslint:disable:no-any */\r\n    const result: IClientSideWebPartManifest<any>[] = [];\r\n    /* tslint:enable:no-any */\r\n    if (manifests) {\r\n      for (const manifest of manifests) {\r\n        if (manifest &&\r\n            manifest.componentType === 'WebPart') {\r\n          /* tslint:disable:no-any */\r\n          result.push(manifest as IClientSideWebPartManifest<any>);\r\n          /* tslint:enable:no-any */\r\n        }\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Set the display mode of the specified web part. If no web part id is specified, switch mode of all web parts.\r\n   * If the display mode passed is same as the current mode, no change is applied.\r\n   *\r\n   * @param {DisplayMode} mode: the new DisplayMode\r\n   * @param {string} id: id of the webpart\r\n   */\r\n  public setDisplayMode(mode: DisplayMode, id?: string): void {\r\n    const cb: (wp: IClientSideWebPartInternal) => void = (wp: IClientSideWebPartInternal): void => {\r\n      if (wp) {\r\n        wp._internalSetDisplayMode(mode);\r\n      }\r\n    };\r\n\r\n    if (id) {\r\n      const wp: IClientSideWebPartInternal = this._webparts.get(id);\r\n      if (wp) {\r\n        wp._internalSetDisplayMode(mode);\r\n      }\r\n    } else {\r\n      this._executeForIdsOrAll(undefined, cb);\r\n    }\r\n\r\n    // Start the dirty bit timer if required\r\n    this._startDirtyBitTimer(mode);\r\n  }\r\n\r\n  /**\r\n   * Serialize the specified webparts. If no webparts are specified, serialize all webparts.\r\n   *\r\n   * @param {string[]} ids: Ids of the webparts\r\n   */\r\n  public serialize(ids: string[]): Map<string, IWebPartData> {\r\n    const sd: Map<string, IWebPartData> = new Map<string, IWebPartData>();\r\n    const cb: (wp: IClientSideWebPartInternal, id: string) => void =\r\n      (wp: IClientSideWebPartInternal, id: string): void => {\r\n        if (wp) {\r\n          sd.set(id, wp._internalSerialize());\r\n        }\r\n      };\r\n\r\n    this._executeForIdsOrAll(ids, cb);\r\n    return sd;\r\n  }\r\n\r\n  /**\r\n   * Dispose the specified webparts. If no webparts are specified, dispose all webparts.\r\n   *\r\n   * @param {string[]} ids: Ids of the webparts\r\n   */\r\n  public dispose(ids?: string[]): void {\r\n    const cb: (wp: IClientSideWebPartInternal, id: string) => void =\r\n      (wp: IClientSideWebPartInternal, id: string): void => {\r\n        if (wp) {\r\n          wp._internalDispose();\r\n          this._deleteWebPart(id);\r\n        }\r\n      };\r\n\r\n    this._executeForIdsOrAll(ids, cb);\r\n  }\r\n\r\n  /**\r\n   * Start the web part configuration process.\r\n   *\r\n   * @param id - web part id.\r\n   * @param propertyPaneState - indicates in what state the PropertyPane should be.\r\n   */\r\n  public configureStart(id: string, propertyPaneState: PropertyPaneState = PropertyPaneState.Default): void {\r\n    if (!this._propertyPaneController) {\r\n      this._propertyPaneController =\r\n        new PropertyPaneController(\r\n          (wpId: string) => {\r\n            return this._webparts.get(wpId);\r\n          },\r\n          this._host.webPartConfigurationEventCallback);\r\n    }\r\n\r\n    this._propertyPaneController.configureStart(id, propertyPaneState);\r\n  }\r\n\r\n /**\r\n   * Method to handle the webpart delete action.\r\n   * @param id - id of the webpart which is deleted.\r\n   */\r\n  public onWebPartDelete(id: string): void {\r\n    this._deleteWebPart(id);\r\n  }\r\n\r\n  /**\r\n   * Raise an event to the associated event aggregator\r\n   *\r\n   * @param {string} eventName: Event name, such as 'configure:start'.\r\n   * @param {Event} eventObject: object containing event properties.\r\n   */\r\n  public raiseEvent<T>(eventName: string, event: IWebPartEvent<T>): void {\r\n    this._eventAggregator.raiseEvent<T>(eventName, event);\r\n  }\r\n\r\n  /**\r\n   * Render an error message in the web part container div.  Also logs the error message to the IWebPartHost logger.\r\n   *\r\n   * @param {domElement} domElement: Container div for the webpart\r\n   * @param {Error} error: An error object containing the error message to render.\r\n   * @return {void}\r\n   */\r\n  public renderError(domElement: HTMLElement, error: Error): void {\r\n    executeWithoutFailing(\r\n      () => {\r\n        this._statusRenderer.renderError(domElement, error);\r\n        _TraceLogger.logError(this._logSource, error);\r\n      },\r\n      this._logSource);\r\n  }\r\n\r\n  /*\r\n   * Get the first webpart with preview image url specified\r\n   *\r\n   * @param {string[]} ids: Ids of the webparts\r\n   */\r\n  public tryGeneratePreviewImageUrl(ids: string[]): string {\r\n    let previewImageUrl: string = undefined;\r\n    const cb: (wp: IClientSideWebPartInternal, id: string) => void =\r\n      (wp: IClientSideWebPartInternal, id: string): void => {\r\n        // workaround for typescript targeting es5 only support for...of for array and string\r\n        // also Map does not support some or every\r\n        // @todo: Bug 222340 when switching to es6, use for...of and return after first match\r\n        if (!previewImageUrl) {\r\n          previewImageUrl = wp.previewImageUrl;\r\n        }\r\n      };\r\n    this._executeForIdsOrAll(ids, cb);\r\n\r\n    return previewImageUrl;\r\n  }\r\n\r\n  /**\r\n   * Internal method to validate and process input parameters\r\n   *\r\n   * @param context - provided webpart context\r\n   */\r\n  private _validateInput(context: IWebPartManagerContext): void {\r\n    Validate.isNotNullOrUndefined(context, 'webpart manager context');\r\n    Validate.isNotNullOrUndefined(context.domElement, 'webpart element');\r\n    Validate.isNotNullOrUndefined(context.instanceId, 'webpart instanceId');\r\n    Validate.isTrue(!this._webparts.get(context.instanceId), 'Duplicate webpart id not allowed');\r\n  }\r\n\r\n  /**\r\n   * Validate the manifest\r\n   *\r\n   * @param {IClientSideWebPartManifest} manifest: webpart manifest\r\n   * @param {DisplayMode} mode: display mode\r\n   * @return true if the manifest is valid\r\n   */\r\n  /* tslint:disable:no-any */\r\n  private _validateManifest(manifest: IClientSideWebPartManifest<any>, mode: DisplayMode): boolean {\r\n  /* tslint:enable:no-any */\r\n    // If the manifest is null, then\r\n    //    In read mode, we throw as the host should never attempt to load the webpart without the manifest.\r\n    //    In edit mode, we should display an error\r\n    if (!manifest) {\r\n      if (mode === DisplayMode.Read) {\r\n        // Note: not localizing this expception on purpose. This is an internal error that users should never see.\r\n        throw new Error('Null manifest. Code should never reach here in Read mode. The host should not attempt to ' +\r\n                        'display the webpart if the manifest is null.');\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // Clone the manifest and then validate the clone. This way we make sure there are no functions and other\r\n    // non-field based types in the manifest\r\n    /* tslint:disable:no-any */\r\n    const cm: IClientSideWebPartManifest<any> = lodash.cloneDeep(manifest);\r\n    /* tslint:enable:no-any */\r\n    /* tslint:disable:triple-equals */\r\n    Validate.isTrue(cm.manifestVersion == 1 || cm.manifestVersion == 2,\r\n                          'Only version 1 manifests are currently supported');\r\n    /* tslint:enable:triple-equals */\r\n    Validate.isTrue(!!cm.id, 'webpart id cannot be null or undefined');\r\n    Validate.isTrue(this._guidRegex.test(cm.id), 'webpart id has to be a GUID');\r\n    Validate.isTrue(!!cm.version, 'webpart version cannot be null or undefined');\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Execute the provided callback for the list of provided webpart ids. If no list if provided,\r\n   * execute the callback on all webparts.\r\n   */\r\n  private _executeForIdsOrAll(ids: string[], cb: (wp: IClientSideWebPartInternal, id: string) => void): void {\r\n    if (ids) {\r\n      ids.forEach((id: string) => {\r\n        const wp: IClientSideWebPartInternal = this._webparts.get(id);\r\n        cb(wp, id);\r\n      });\r\n    } else {\r\n      this._webparts.forEach((wp: IClientSideWebPartInternal, id: string) => {\r\n        cb(wp, id);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate webpart context\r\n   */\r\n  private _getWebPartContext(context: IWebPartManagerContext): IWebPartContext {\r\n\r\n    return new WebPartContext(\r\n      context,\r\n      this._getManifestInstance(context),\r\n      this._host,\r\n      this._statusRenderer,\r\n      this._eventAggregator,\r\n      this.configureStart,\r\n      this._createWebPartTag(context.manifest, context.instanceId));\r\n  }\r\n\r\n  /* tslint:disable:no-any */\r\n  private _instanceOfBase(wpi: any): boolean {\r\n  /* tslint:enable:no-any */\r\n    /* tslint:disable:no-string-literal */\r\n    return wpi instanceof BaseClientSideWebPart || wpi['__type'] === 'BaseClientSideWebPart';\r\n    /* tslint:enable:no-string-literal */\r\n  }\r\n\r\n  private _getLoadedModuleList(moduleLibrary: Object): string {\r\n    let loadedModulesString: string = '';\r\n    for (const m in moduleLibrary) {\r\n      if (moduleLibrary.hasOwnProperty(m)) {\r\n        if (loadedModulesString) {\r\n          loadedModulesString += ',';\r\n        }\r\n        loadedModulesString += `${m}`;\r\n      }\r\n    }\r\n\r\n    return loadedModulesString;\r\n  }\r\n\r\n  /**\r\n   * This is a temporary implementation of updating the host that a webpart has updated properties.\r\n   * Currently we run a timer that regularly checks for updated properties and raises the dirty bit\r\n   * handler to the host. @todo (VSO SPPPLAT#200728) tracks fixing this scenario in a better way.\r\n   */\r\n  private _startDirtyBitTimer(mode: DisplayMode): void {\r\n\r\n    // Clear the timer in read mode\r\n    if (mode === DisplayMode.Read) {\r\n      if (this._dirtyBitTimer) {\r\n        window.clearInterval(this._dirtyBitTimer);\r\n        this._dirtyBitTimer = undefined;\r\n      }\r\n      // If required start the timer in edit mode\r\n    } else if (!this._dirtyBitTimer) {\r\n      const cb: (wp: IClientSideWebPartInternal) => void = (wp: IClientSideWebPartInternal): void => {\r\n        if (wp) {\r\n          wp._internalSetDirtyBit();\r\n        }\r\n      };\r\n\r\n      this._dirtyBitTimer = window.setInterval(() => {\r\n        this._executeForIdsOrAll(undefined, cb);\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a new QosMonitor with a scenario name specific to the web part type.\r\n   */\r\n  /* tslint:disable:no-any */\r\n  private _createQosMonitor(manifest: IClientSideWebPartManifest<any>): _QosMonitor {\r\n  /* tslint:enable:no-any */\r\n    return new _QosMonitor(`WebPart.${manifest.id}`);\r\n  }\r\n\r\n  /**\r\n   * Web part tag is unique per every web part instance.\r\n   */\r\n  /* tslint:disable:no-any */\r\n  private _createWebPartTag(manifest: IClientSideWebPartManifest<any>, instanceId: string): string {\r\n  /* tslint:enable:no-any */\r\n    return `WebPart.${manifest.id}.${instanceId}`;\r\n  }\r\n\r\n  private _deleteWebPart(id: string): void {\r\n    Validate.isNotNullOrUndefined(id, 'id');\r\n\r\n    // Adding this condition because, this method can be called before instantiating\r\n    // propertypanecontroller. Instantiation happens only when user clicks 'ConfigureStart'.\r\n    if (this._propertyPaneController) {\r\n      this._propertyPaneController.onWebPartDelete(id);\r\n    }\r\n    this._webparts.delete(id);\r\n  }\r\n\r\n  /**\r\n   * Temporary fix till we have actual support for the multiple pre-configured entries feature.\r\n   * (SPPPLAT VSO#232724)\r\n   */\r\n  /* tslint:disable:no-any */\r\n  private _getManifestInstance(context: IWebPartManagerContext): IClientSideWebPartManifestInstance<any> {\r\n    const manifest: IClientSideWebPartManifest<any> = context.manifest;\r\n    const manifestClone: IClientSideWebPartManifest<any> = lodash.cloneDeep(manifest);\r\n    delete manifestClone.preconfiguredEntries;\r\n    const manifestInstance: IClientSideWebPartManifestInstance<any> =\r\n      manifestClone as any as IClientSideWebPartManifestInstance<any>;\r\n    /* tslint:enable:no-any */\r\n    lodash.merge(manifestInstance, manifest.preconfiguredEntries[0]);\r\n    return manifestInstance;\r\n  }\r\n}\r\n"],"sourceRoot":"/src"}