/**
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * @file IWebPartData.ts
 */
/**
 * This structure represents the the serialized state of a webpart. When the serialize() API is called on
 * a webpart, the output should be this structure. The structure of the 'properties' field is owned by the
 * webpart and is specific to the webpart. Each webpart can decide the set of properties it wants to
 * serialialize.
 */
interface IWebPartData {
    /**
     * Definition: universally unique webpart Type id.
     * Usage: uniquely identify a webpart.
     * Required: yes
     * Type: GUID
     * Supported values: any GUID
     * Example: "dbef608d-3ad5-4f8f-b139-d916f2f0a294"
     */
    id: string;
    /**
     * Definition: universally unique instance id of the webpart. A web part can have multiple instances on a page.
     *             This id is expected to be universally unique accross time and page boundaries.
     * how used: used by the framework to uniquely identify an instance of a webpart.
     * mandatory: yes.
     * type: string
     * supported values: a unique string. Could be GUID or other uniquely identifiable formats.
     * example: ["dbef608d-3ad5-4f8f-b139-d916f2f0a294"]
     * experimental: yes
     */
    instanceId: string;
    /**
     * Definition: webpart title.
     * Usage: display the name of the webpart in the toolbox, webpart gallery and the page.
     * Required: yes
     * Type: string
     * Supported values: string less than 100 characters
     * Example: "Text"
     */
    title: string;
    /**
     * Definition: webpart version.
     * Usage: versioning and evolving a webpart safely.
     * Required: yes
     * Type: string representing a semantic version (http://semver.org)
     * Supported values: MAJOR.MINOR.PATCH
     * Example: "1.0.0"
     */
    version: string;
    /**
     * Definition: webpart specific properties. The individual webpart owns the definition of these properties.
     * how used: used by the webpart to manage its internal metadata and config data. The framework code never
     *           touches these properties.
     * mandatory: yes.
     * type: string
     * supported values: any JSON stringifiable object hierarchy.
     * example: { 'value': 'text value' }
     */
    properties?: any;
    /**
     * Definition: HTML markup equivalent for searchable properties and properties that need link fixup.
     * format: pseudo HTML
     * mandatory: no.
     * type: string
     * supported values: a string containing pseudo HTML.
     * example: "<div>searchable_property_value</div><link href='http://contoso.com/path_of_link.aspx' />"
     * experimental: no
     */
    htmlProperties?: string;
}
/**
 * Structure of the data that a webpart developer can return on the onBeforeSerialize() API.
 * The outcome contains 3 kay/value dictionaries for properties that need to be search indexed.
 * Both keys and values are expected to be strings and will be HTML encoded during serialization.
 *
 * {
 *   searchableProperties: { 'prop1': 'value_of_prop1' },
 *   linkProperties: { 'prop2': 'http://www.contoso.com/page1.aspx' },
 *   imageLinkPropertes: { 'prop3': 'http://www.contoso.com/imag.png' }
 * }
 *
 * This input would get translated to the following HTML string.
 *
 * "<div data-sp-prop-name='prop1'>value1</div>
 * <link data-sp-prop-name='prop2' href='http://www.contoso.com/page1.aspx'>
 * <img data-sp-prop-name='prop2' href='http://www.contoso.com/image.png'>"
 *
 */
export interface IHtmlProperties {
    searchableProperties: {
        [propName: string]: string;
    };
    linkProperties: {
        [propName: string]: string;
    };
    imageLinkProperties: {
        [propName: string]: string;
    };
}
export default IWebPartData;
