{"version":3,"sources":["local/clientSideWebParts/propertyPane/propertyPaneGroup/PropertyPaneGroup.tsx"],"names":[],"mappings":"AAAA;;;;GAIG;;;;;;;AAEH,IAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAC/B,IAAY,MAAM,WAAM,6BAA6B,CAAC,CAAA;AAEtD,4CAAwC,2EAA2E,CAAC,CAAA;AACpH,uCAYa,wBAAwB,CAAC,CAAA;AACtC,mCAEgC,4DAA4D,CAAC,CAAA;AAI7F,8CAAoC,iCAAiC,CAAC,CAAA;AAEtE,IAAI,QAAQ,GAAW,CAAC,CAAC;AAUzB;;GAEG;AACH;IACU,qCAAiE;IAiBzE;;OAEG;IACH,2BAAmB,KAA8B;QAC/C,kBAAM,KAAK,CAAC,CAAC;QAEb,IAAI,CAAC,KAAK,GAAG;YACX,cAAc,EAAE,IAAI;YACpB,EAAE,EAAE,uBAAqB,QAAQ,EAAI;SACtC,CAAC;QAEF,mBAAmB;QACnB,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC3D,CAAC;IAED;;OAEG;IACI,kCAAM,GAAb;QACE,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC,CAAC,oDAAoD;QAErE;;;WAGG;QACH,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,wBAAwB,CAAC,CAAC,CAAC;YACzC,MAAM,CAAC,CACL,qBAAC,GAAG,IAAC,SAAS,EAAG,4BAAG,CAAC,uCAAuB,CAAC,iBAAiB,EAAE,uCAAuB,CAAC,UAAU,CAAG,GACjG,IAAI,CAAC,KAAK,CAAC,SAAS;gBACd,CAAC,qBAAC,GAAG,IAAC,SAAS,EAAG,4BAAG,CAAC,uCAAuB,CAAC,kCAAkC,EAClF,WAAW,EAAE,wBAAwB,CAAG,GACpC,IAAI,CAAC,KAAK,CAAC,SAAW,CACpB,CACP,GAAG,CAAC,qBAAC,GAAG,IAAC,SAAS,EAAG,uCAAuB,CAAC,kCAAoC,EAAO,CAC5F,EAEC,IAAI,CAAC,YAAY,EAAI,CACnB,CACP,CAAC;QACJ,CAAC;QAED,MAAM,CAAC,CACL,qBAAC,GAAG,IAAC,SAAS,EAAG,IAAI,CAAC,KAAK,CAAC,cAAc;cACtC,4BAAG,CAAC,uCAAuB,CAAC,iBAAiB,EAAE,uCAAuB,CAAC,UAAU,CAAC;cAClF,uCAAuB,CAAC,iBAAmB,GAC7C,qBAAC,MAAM,IACL,SAAS,EAAG,4BAAG,CAAC,uCAAuB,CAAC,uBAAuB,EAC7D,WAAW,EAAE,wBAAwB,CAAG,GAC1C,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,cAAgB,EAC3C,OAAO,EAAG,IAAI,CAAC,gBAAkB,GACjC,qBAAC,CAAC,IACA,SAAS,EAAG,IAAI,CAAC,KAAK,CAAC,cAAc;cACjC,4BAAG,CAAC,SAAS,EAAE,oBAAoB,CAAC;cACpC,4BAAG,CAAC,SAAS,EAAE,qBAAqB,CAAG,EACzC,EACF,IAAI,CAAC,KAAK,CAAC,SAAW,CACjB,EACR,IAAI,CAAC,KAAK,CAAC,cAAc;cACtB,IAAI,CAAC,YAAY,EAAE;cAEnB,IAEH,CACG,CACP,CAAC;IACJ,CAAC;IAEO,wCAAY,GAApB;QAAA,iBAMC;QALC,MAAM,CAAC,CACL,qBAAC,GAAG,IAAC,SAAS,EAAG,uCAAuB,CAAC,wBAA0B,GAC/D,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,GAAG,CAAC,UAAA,UAAU,IAAI,OAAA,KAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,EAAlC,CAAkC,CAAG,CAC5E,CACP,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,2BAA2B;IACnB,6CAAiB,GAAzB,UAA6B,UAAmC;QAAhE,iBAmKC;QAlKC,IAAM,SAAS,GAAQ,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC,cAAc,CAAC,CAAC;QACpF,0BAA0B;QAC1B,IAAI,iBAA8D,CAAC;QAEnE;;;;;;;;;;;;;;;WAeG;QACH,IAAI,GAAG,GAAW,SAAS,CAAC;QAC5B,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;YAC1C,GAAG,GAAG,UAAU,CAAC,cAAc,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;QACtD,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,EAAE,CAAC,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,CAAC;gBAC9B,GAAG,GAAG,UAAU,CAAC,cAAc,CAAC;YAClC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,GAAG,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC,QAAQ,EAAE,CAAC;YACrC,CAAC;QACH,CAAC;QACD,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;QAEvB,MAAM,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;YAExB,KAAK,2CAAsB,CAAC,MAAM;gBAChC,iBAAiB,GAAI,oBAAC,qCAA2B,qBAC1C,UAAU,CAAC,UAAU,EAC1B,CAAC;gBACL,KAAK,CAAC;YAEN,KAAK,2CAAsB,CAAC,MAAM;gBAChC,iBAAiB;oBACf,oBAAC,+BAAM,qBACF,UAAU,CAAC,UAAU,GAC1B,cAAc,EAAG,SAAW,EAC5B,MAAM,EAAG,UAAU,CAAC,UAAU,CAAC,MAAM,IAAI,IAAM,EAC/C,OAAO,EAAG,UAAU,CAAC,UAAU,CAAC,OAAO,IAAI,KAAO,EAClD,SAAS,EAAG,UAAC,KAAc;wBACzB,KAAI,CAAC,SAAS,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;oBACpC,CAAE,GACF,CAAC;gBACL,KAAK,CAAC;YAEN,KAAK,2CAAsB,CAAC,SAAS;gBACnC,iBAAiB,GAAG,oBAAC,kCAAS,qBACvB,UAAU,CAAC,UAAU,GAC1B,YAAY,EAAG,SAAW,EAC1B,SAAS,EAAG,UAAC,KAAa;oBACxB,KAAI,CAAC,SAAS,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;gBACpC,CAAG,EACH,wBAAwB,EAAK,UAAC,YAAoB,EAAE,KAAa;oBAC/D,MAAM,CAAC,KAAI,CAAC,yBAAyB,CACnC,YAAY,EACZ,KAAK,EACL,UAAU,EACV,KAAI,CAAC,KAAK,CAAC,aAAa,CACzB,CAAC;gBACJ,CAAE,GACF,CAAC;gBACL,KAAK,CAAC;YAEN,KAAK,2CAAsB,CAAC,QAAQ;gBAClC,iBAAiB,GAAG,oBAAC,iCAAQ,qBACtB,UAAU,CAAC,UAAU,GAC1B,WAAW,EAAG,SAAW,EACzB,KAAK,EAAG,UAAU,CAAC,UAAU,CAAC,KAAO,EACrC,SAAS,EAAG,UAAC,MAAuB,EAAE,KAAc;oBAClD,KAAI,CAAC,iBAAiB,CAAC,UAAU,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;gBACpD,CAAE,GACF,CAAC;gBACL,KAAK,CAAC;YAEN,KAAK,2CAAsB,CAAC,QAAQ;gBAClC,iBAAiB,GAAG,oBAAC,iCAAQ,qBACtB,UAAU,CAAC,UAAU,GAC1B,KAAK,EAAG,UAAU,CAAC,UAAU,CAAC,IAAM,EACpC,OAAO,EAAG,SAAW,EACrB,QAAQ,EAAG,UAAC,EAAoB,EAAE,SAAmB;oBACnD,KAAI,CAAC,SAAS,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;gBACxC,CAAE,GACF,CAAC;gBACL,KAAK,CAAC;YAEN,wBAAwB;YACxB,mFAAmF;YACnF,KAAK,2CAAsB,CAAC,KAAK;gBAC/B,iBAAiB,GAAG,oBAAC,8BAAK,qBACnB,UAAU,CAAC,UAAU,GAExB,UAAU,CAAC,UAAU,CAAC,IAAM,CACxB,CAAC;gBACX,KAAK,CAAC;YAEN,KAAK,2CAAsB,CAAC,MAAM;gBAChC,iBAAiB;oBACf,oBAAC,+BAAM,qBACA,UAAU,CAAC,UAAU,GAC1B,YAAY,EAAG,SAAW,EAC1B,QAAQ,EAAG,UAAC,KAAa;wBACvB,KAAI,CAAC,SAAS,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;oBACpC,CAAG,GACH,CAAC;gBACP,KAAK,CAAC;YAEN,KAAK,2CAAsB,CAAC,WAAW;gBACrC,iBAAiB;oBACf,oBAAC,oCAAW,qBACL,UAAU,CAAC,UAAU,GAC1B,OAAO,EAAG,UAAU,CAAC,UAAU,CAAC,OAAS,EACzC,SAAS,EAAG,uCAAuB,CAAC,uBAAyB,EAC7D,SAAS,EAAG,UAAC,aAAiC;wBAC5C,KAAI,CAAC,oBAAoB,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC;oBACvD,CAAG,GACH,CAAC;gBACP,KAAK,CAAC;YAEN,KAAK,2CAAsB,CAAC,MAAM;gBAChC,IAAM,WAAW,GAA4B;oBAC3C,IAAM,QAAQ,GAAQ,UAAU,CAAC,UAAU,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,6BAA6B;oBAC7F,KAAI,CAAC,SAAS,CACZ,UAAU,EACV,QAAQ,CACT,CAAC;gBACJ,CAAC,CAAC;gBACF,iBAAiB;oBACf,oBAAC,+BAAM,qBACA,UAAU,CAAC,UAAU,GAC1B,OAAO,EAAG,WAAa,EACvB,SAAS,EAAG,UAAU,CAAC,UAAU,CAAC,IAAM,IAEpC,UAAU,CAAC,UAAU,CAAC,IAAM,CACzB,CAAC;gBACZ,KAAK,CAAC;YAER,KAAK,2CAAsB,CAAC,cAAc;gBACxC,iBAAiB;oBACf,qBAAC,EAAE,sBAAM,UAAU,CAAC,UAAU,EAAK,CAAC;gBACtC,KAAK,CAAC;YAER,KAAK,2CAAsB,CAAC,IAAI;gBAC9B,iBAAiB,GAAG,oBAAC,6BAAI,qBAAM,UAAU,CAAC,UAAU,GAChD,UAAU,CAAC,UAAU,CAAC,IAAM,CACzB,CAAC;gBACR,KAAK,CAAC;YAER;gBACE,oCAAoC;gBACpC,iBAAiB,GAAG,IAAI,CAAC;QAE7B,CAAC;QAED,MAAM,CAAC,qBAAC,GAAG,IAAC,GAAG,EAAG,GAAK,QAAI,iBAAmB,MAAO,CAAC;IACxD,CAAC;IAED;;OAEG;IACH,qCAAqC;IAC7B,qCAAS,GAAjB,UAAmB,UAAmC,EAAE,KAAU;QAChE,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;YACxB,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;QACxD,CAAC;QAED,6BAA6B;QAC7B,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC,CAAC;YAC7C,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,UAAU,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;QAC5D,CAAC;IACH,CAAC;IAED;;;;;OAKG;IACK,gDAAoB,GAA5B,UACE,UAA6D,EAC7D,aAAiC;QACjC,6DAA6D;QAC7D,uFAAuF;QACvF,wBAAwB;QACxB,UAAU,CAAC,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC,UAAC,MAA0B;YAC/D,OAAA,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,GAAG,KAAK,aAAa,CAAC,GAAG;QAAnD,CAAmD,CAAC,CAAC;QAEvD,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,aAAa,CAAC,GAAG,CAAC,CAAC;IAChD,CAAC;IAED;;;;OAIG;IACK,6CAAiB,GAAzB,UACE,UAA0D,EAC1D,YAA6B,EAC7B,aAAqB;QAErB,gCAAgC;QAChC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;YACxB,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,cAAc,EAAE,YAAY,CAAC,GAAG,CAAC,CAAC;QACnE,CAAC;IACH,CAAC;IAED;;OAEG;IACK,4CAAgB,GAAxB;QACE,IAAI,CAAC,QAAQ,CAAC;YACZ,cAAc,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc;SAC3C,CAAC,CAAC;IACL,CAAC;IAEO,qDAAyB,GAAjC,UACE,YAAoB,EACpB,KAAa,EACb,UAAmC,EAAE,gCAAgC,CACrE,aAAsE;QAEtE,aAAa,CAAC,UAAU,CAAC,cAAc,EAAE,CAAC,YAAY,CAAC,CAAC;QACxD,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;YACjB,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;QACpC,CAAC;IACH,CAAC;IACH,wBAAC;AAAD,CA3UA,AA2UC,CA1US,KAAK,CAAC,SAAS,GA0UxB;AA3UD;mCA2UC,CAAA","file":"local/clientSideWebParts/propertyPane/propertyPaneGroup/PropertyPaneGroup.js","sourcesContent":["/**\r\n * @Copyright (c) Microsoft Corporation.  All rights reserved.\r\n *\r\n * @file PropertyPaneGroup.tsx\r\n */\r\n\r\nimport * as React from 'react';\r\nimport * as lodash from '@microsoft/sp-lodash-subset';\r\n\r\nimport PropertyPaneCustomFieldHost from '../propertyPaneFields/propertyPaneCustomField/PropertyPaneCustomFieldHost';\r\nimport {\r\n  Checkbox,\r\n  Dropdown,\r\n  IDropdownOption,\r\n  TextField,\r\n  Toggle,\r\n  Label,\r\n  Slider,\r\n  ChoiceGroup,\r\n  IChoiceGroupOption,\r\n  Button,\r\n  Link,\r\n  css } from 'office-ui-fabric-react';\r\nimport {\r\n  IPropertyPaneField,\r\n  IPropertyPaneFieldType } from '../propertyPaneFields/propertyPaneField/IPropertyPaneField';\r\nimport { IPropertyPaneChoiceGroupProps } from '../propertyPaneFields/propertyPaneChoiceGroup/IPropertyPaneChoiceGroup';\r\nimport { IPropertyPaneDropdownProps } from '../propertyPaneFields/propertyPaneDropDown/IPropertyPaneDropDown';\r\nimport { IPropertyPaneGroupProps } from './IPropertyPaneGroup';\r\nimport propertyPaneGroupStyles from './PropertyPaneGroup.module.scss';\r\n\r\nlet instance: number = 0;\r\n\r\n/**\r\n * Interface for PropertyPaneGroup state.\r\n */\r\nexport interface IPropertyPaneGroupState {\r\n  isDetailsShown: boolean;\r\n  id?: string;\r\n}\r\n\r\n/**\r\n * React Component: PropertyPaneGroup.\r\n */\r\nexport default class PropertyPaneGroup\r\n  extends React.Component<IPropertyPaneGroupProps, IPropertyPaneGroupState> {\r\n\r\n  public refs: {\r\n    [key: string]: Element,\r\n    propertyPaneGroup: HTMLElement\r\n  };\r\n\r\n  /**\r\n   * An array of keys associated with the PropertyPaneGroup fields. This array is\r\n   * to ensure that keys are unique for the fields within the PropertyPaneGroup.\r\n   * This resets on every render of the PropertyPaneGroup.\r\n   *\r\n   * @private\r\n   * @type {{[key: string]: boolean}}\r\n   */\r\n  private _keys: {[key: string]: boolean};\r\n\r\n  /**\r\n   * constructor\r\n   */\r\n  public constructor(props: IPropertyPaneGroupProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isDetailsShown: true,\r\n      id: `PropertyPaneGroup-${instance++}`\r\n    };\r\n\r\n    // method bindings.\r\n    this._onHeaderClicked = this._onHeaderClicked.bind(this);\r\n  }\r\n\r\n  /**\r\n   * render: renders the PropertyPaneGroup component.\r\n   */\r\n  public render(): React.ReactElement<{}> {\r\n    this._keys = {}; // Reset to ensure consistent and predictable order.\r\n\r\n    /**\r\n     * If displayGroupsAsAccordion is a falsy value and a group name is availble\r\n     * then display the group name.\r\n     */\r\n    if (!this.props.displayGroupsAsAccordion) {\r\n      return (\r\n        <div className={ css(propertyPaneGroupStyles.propertyPaneGroup, propertyPaneGroupStyles.isExpanded) }>\r\n          { this.props.groupName ?\r\n                  (<div className={ css(propertyPaneGroupStyles.propertyPaneGroupHeaderNoAccordion,\r\n                'ms-font-m', 'ms-fontWeight-semibold') }>\r\n                  { this.props.groupName }\r\n                </div>\r\n              ) : (<div className={ propertyPaneGroupStyles.propertyPaneGroupHeaderNoGroupName }></div>)\r\n          }\r\n\r\n          { this._renderGroup() }\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className={ this.state.isDetailsShown\r\n        ? css(propertyPaneGroupStyles.propertyPaneGroup, propertyPaneGroupStyles.isExpanded)\r\n        : propertyPaneGroupStyles.propertyPaneGroup }>\r\n        <button\r\n          className={ css(propertyPaneGroupStyles.propertyPaneGroupHeader,\r\n            'ms-font-m', 'ms-fontWeight-semibold') }\r\n          aria-expanded={ this.state.isDetailsShown }\r\n          onClick={ this._onHeaderClicked }>\r\n          <i\r\n            className={ this.state.isDetailsShown\r\n              ? css('ms-Icon', 'ms-Icon--caretDown')\r\n              : css('ms-Icon', 'ms-Icon--caretRight') }>\r\n          </i>\r\n          { this.props.groupName }\r\n        </button>\r\n        {this.state.isDetailsShown\r\n          ? this._renderGroup()\r\n          /* tslint:disable:no-null-keyword */\r\n          : null\r\n          /* tslint:enable:no-null-keyword */\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _renderGroup(): React.ReactElement<{}> {\r\n    return (\r\n      <div className={ propertyPaneGroupStyles.propertyPaneGroupContent }>\r\n        { this.props.groupFields.map(groupField => this._renderGroupField(groupField)) }\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * _renderGroupField: renders the individual groupField based on the field type.\r\n   */\r\n  /* tslint:disable:no-any */\r\n  private _renderGroupField<T>(groupField: IPropertyPaneField<any>): React.ReactElement<IPropertyPaneGroupProps> {\r\n    const propValue: any = lodash.get(this.props.properties, groupField.targetProperty);\r\n    /* tslint:enable:no-any */\r\n    let groupFieldElement: React.ReactElement<IPropertyPaneGroupProps>;\r\n\r\n    /**\r\n     * React requires a key to be set for each item in the collection.\r\n     *\r\n     * Key should be unique and consistent. With the way PropertyPane works today, it's very difficult to ensure the\r\n     * consistency of the keys all the time. The only way we can achieve consistency all the time is when the web part\r\n     * developer supplies a unique key with each field. From the framework standpoint, we did not want to keep the onus\r\n     * of sending in the unique key with the web part developers. We are keeping it simple. Hence, solving the problem\r\n     * for most of the cases. Uniqueness is obtained by maintaining a dictionary of keys.\r\n     *\r\n     * Choosing 'targetProperty' as the key ensures that in most of the cases consistency is achieved. This is because\r\n     * every field will have an associated target property. For the corner cases where there is no targetProperty or\r\n     * same targetProperty is assigned to multiple fields, we are generating a rondom key.\r\n     * This will result in a compromised performance, but not very noticeable and hence we are okay with it.\r\n     *\r\n     * If we can think of any better and simple solution to keep the consistency, we will revisit this logic.\r\n     */\r\n    let key: string = undefined;\r\n    if (this._keys[groupField.targetProperty]) {\r\n      key = groupField.targetProperty + performance.now();\r\n    } else {\r\n      if (groupField.targetProperty) {\r\n        key = groupField.targetProperty;\r\n      } else {\r\n        key = performance.now().toString();\r\n      }\r\n    }\r\n    this._keys[key] = true;\r\n\r\n    switch (groupField.type) {\r\n\r\n      case IPropertyPaneFieldType.Custom:\r\n        groupFieldElement =  <PropertyPaneCustomFieldHost\r\n          { ...groupField.properties }\r\n        />;\r\n      break;\r\n\r\n      case IPropertyPaneFieldType.Toggle:\r\n        groupFieldElement =\r\n          <Toggle\r\n          { ...groupField.properties }\r\n          defaultChecked={ propValue }\r\n          onText={ groupField.properties.onText || 'On' }\r\n          offText={ groupField.properties.offText || 'Off' }\r\n          onChanged={ (value: boolean): void => {\r\n            this._onChange(groupField, value);\r\n          }}\r\n        />;\r\n      break;\r\n\r\n      case IPropertyPaneFieldType.TextField:\r\n        groupFieldElement = <TextField\r\n          { ...groupField.properties }\r\n          defaultValue={ propValue }\r\n          onChanged={ (value: string): void => {\r\n            this._onChange(groupField, value);\r\n          } }\r\n          onNotifyValidationResult = { (errorMessage: string, value: string): void => {\r\n            return this._onNotifyValidationResult(\r\n              errorMessage,\r\n              value,\r\n              groupField,\r\n              this.props.setEntryState\r\n            );\r\n          }}\r\n        />;\r\n      break;\r\n\r\n      case IPropertyPaneFieldType.Dropdown:\r\n        groupFieldElement = <Dropdown\r\n          { ...groupField.properties }\r\n          selectedKey={ propValue }\r\n          label={ groupField.properties.label }\r\n          onChanged={ (option: IDropdownOption, index?: number): void => {\r\n            this._onDropDownChange(groupField, option, index);\r\n          }}\r\n        />;\r\n      break;\r\n\r\n      case IPropertyPaneFieldType.CheckBox:\r\n        groupFieldElement = <Checkbox\r\n          { ...groupField.properties }\r\n          label={ groupField.properties.text }\r\n          checked={ propValue }\r\n          onChange={ (ev?: React.FormEvent, isChecked?: boolean): void => {\r\n            this._onChange(groupField, isChecked);\r\n          }}\r\n        />;\r\n      break;\r\n\r\n      // (SOX VSO bug #203642)\r\n      // Accessibility doesn't work in PropertyPane, it need change code in fabric-react.\r\n      case IPropertyPaneFieldType.Label:\r\n        groupFieldElement = <Label\r\n          { ...groupField.properties }\r\n        >\r\n          { groupField.properties.text }\r\n        </Label>;\r\n      break;\r\n\r\n      case IPropertyPaneFieldType.Slider:\r\n        groupFieldElement =\r\n          <Slider\r\n            { ...groupField.properties }\r\n            defaultValue={ propValue }\r\n            onChange={ (value: number): void => {\r\n              this._onChange(groupField, value);\r\n            } }\r\n          />;\r\n      break;\r\n\r\n      case IPropertyPaneFieldType.ChoiceGroup:\r\n        groupFieldElement =\r\n          <ChoiceGroup\r\n            { ...groupField.properties }\r\n            options={ groupField.properties.options }\r\n            className={ propertyPaneGroupStyles.propertyPaneChoiceGroup }\r\n            onChanged={ (checkedOption: IChoiceGroupOption): void => {\r\n              this._onChoiceGroupChange(groupField, checkedOption);\r\n            } }\r\n          />;\r\n      break;\r\n\r\n      case IPropertyPaneFieldType.Button:\r\n        const handleClick: React.MouseEventHandler = () => {\r\n          const newValue: any = groupField.properties.onClick(propValue); // tslint:disable-line:no-any\r\n          this._onChange(\r\n            groupField,\r\n            newValue\r\n          );\r\n        };\r\n        groupFieldElement =\r\n          <Button\r\n            { ...groupField.properties }\r\n            onClick={ handleClick }\r\n            ariaLabel={ groupField.properties.text }\r\n          >\r\n              { groupField.properties.text }\r\n          </Button>;\r\n        break;\r\n\r\n      case IPropertyPaneFieldType.HorizontalRule:\r\n        groupFieldElement =\r\n          <hr { ...groupField.properties } />;\r\n        break;\r\n\r\n      case IPropertyPaneFieldType.Link:\r\n        groupFieldElement = <Link { ...groupField.properties } >\r\n          { groupField.properties.text }\r\n        </Link>;\r\n        break;\r\n\r\n      default:\r\n        /* tslint:disable:no-null-keyword */\r\n        groupFieldElement = null;\r\n      /* tslint:enable:no-null-keyword */\r\n    }\r\n\r\n    return <div key={ key }> { groupFieldElement } </div>;\r\n  }\r\n\r\n  /**\r\n   * Event handler for a group field's onChange event.\r\n   */\r\n  /* tslint:disable-next-line:no-any */\r\n  private _onChange( groupField: IPropertyPaneField<any>, value: any): void {\r\n    if (this.props.onChange) {\r\n      this.props.onChange(groupField.targetProperty, value);\r\n    }\r\n\r\n    // enable/disable Save button\r\n    if (!groupField.properties.onGetErrorMessage) {\r\n      this.props.setEntryState(groupField.targetProperty, true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event handler for a ChoiceGroup's onChange event.\r\n   *\r\n   * @params {IPropertyPaneField} groupField: the property pane control which has just invoked onChanged event.\r\n   * @params {IChoiceGroupOption} checkedOption: the option representing the field which is checked now.\r\n   */\r\n  private _onChoiceGroupChange(\r\n    groupField: IPropertyPaneField<IPropertyPaneChoiceGroupProps>,\r\n    checkedOption: IChoiceGroupOption): void {\r\n    // Maintain the choice group props before EVERYTHING happens.\r\n    // It is needed because the design flaw of Fabric-React ChoiceGroup. Discussions in PR:\r\n    // https://aka.ms/fociu0\r\n    groupField.properties.options.forEach((option: IChoiceGroupOption) =>\r\n      option.isChecked = option.key === checkedOption.key);\r\n\r\n    this._onChange(groupField, checkedOption.key);\r\n  }\r\n\r\n  /**\r\n   * Event handler for a DropDown's onChange event.\r\n   * @todo (SPPPLAT VSO#169096) Change fabric controls to send in a common type for all the events.\r\n   * Then change this method to use the common type.\r\n   */\r\n  private _onDropDownChange(\r\n    groupField: IPropertyPaneField<IPropertyPaneDropdownProps>,\r\n    selectedItem: IDropdownOption,\r\n    selectedIndex: number): void {\r\n\r\n    // invoke onPropertyChange event\r\n    if (this.props.onChange) {\r\n      this.props.onChange(groupField.targetProperty, selectedItem.key);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event handler for header click.\r\n   */\r\n  private _onHeaderClicked(): void {\r\n    this.setState({\r\n      isDetailsShown: !this.state.isDetailsShown\r\n    });\r\n  }\r\n\r\n  private _onNotifyValidationResult(\r\n    errorMessage: string,\r\n    value: string,\r\n    groupField: IPropertyPaneField<any>, /* tslint:disable-line:no-any */\r\n    setEntryState: (targetProperty: string, isValidEntry: boolean) => void): void {\r\n\r\n    setEntryState(groupField.targetProperty, !errorMessage);\r\n    if (errorMessage) {\r\n      this._onChange(groupField, value);\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"/src"}