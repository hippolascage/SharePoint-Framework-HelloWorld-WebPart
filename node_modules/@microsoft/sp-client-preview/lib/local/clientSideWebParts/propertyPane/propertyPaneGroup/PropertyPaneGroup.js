/**
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * @file PropertyPaneGroup.tsx
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var React = require('react');
var lodash = require('@microsoft/sp-lodash-subset');
var PropertyPaneCustomFieldHost_1 = require('../propertyPaneFields/propertyPaneCustomField/PropertyPaneCustomFieldHost');
var office_ui_fabric_react_1 = require('office-ui-fabric-react');
var IPropertyPaneField_1 = require('../propertyPaneFields/propertyPaneField/IPropertyPaneField');
var PropertyPaneGroup_module_scss_1 = require('./PropertyPaneGroup.module.scss');
var instance = 0;
/**
 * React Component: PropertyPaneGroup.
 */
var PropertyPaneGroup = (function (_super) {
    __extends(PropertyPaneGroup, _super);
    /**
     * constructor
     */
    function PropertyPaneGroup(props) {
        _super.call(this, props);
        this.state = {
            isDetailsShown: true,
            id: "PropertyPaneGroup-" + instance++
        };
        // method bindings.
        this._onHeaderClicked = this._onHeaderClicked.bind(this);
    }
    /**
     * render: renders the PropertyPaneGroup component.
     */
    PropertyPaneGroup.prototype.render = function () {
        this._keys = {}; // Reset to ensure consistent and predictable order.
        /**
         * If displayGroupsAsAccordion is a falsy value and a group name is availble
         * then display the group name.
         */
        if (!this.props.displayGroupsAsAccordion) {
            return (React.createElement("div", {className: office_ui_fabric_react_1.css(PropertyPaneGroup_module_scss_1.default.propertyPaneGroup, PropertyPaneGroup_module_scss_1.default.isExpanded)}, this.props.groupName ?
                (React.createElement("div", {className: office_ui_fabric_react_1.css(PropertyPaneGroup_module_scss_1.default.propertyPaneGroupHeaderNoAccordion, 'ms-font-m', 'ms-fontWeight-semibold')}, this.props.groupName)) : (React.createElement("div", {className: PropertyPaneGroup_module_scss_1.default.propertyPaneGroupHeaderNoGroupName})), this._renderGroup()));
        }
        return (React.createElement("div", {className: this.state.isDetailsShown
            ? office_ui_fabric_react_1.css(PropertyPaneGroup_module_scss_1.default.propertyPaneGroup, PropertyPaneGroup_module_scss_1.default.isExpanded)
            : PropertyPaneGroup_module_scss_1.default.propertyPaneGroup}, React.createElement("button", {className: office_ui_fabric_react_1.css(PropertyPaneGroup_module_scss_1.default.propertyPaneGroupHeader, 'ms-font-m', 'ms-fontWeight-semibold'), "aria-expanded": this.state.isDetailsShown, onClick: this._onHeaderClicked}, React.createElement("i", {className: this.state.isDetailsShown
            ? office_ui_fabric_react_1.css('ms-Icon', 'ms-Icon--caretDown')
            : office_ui_fabric_react_1.css('ms-Icon', 'ms-Icon--caretRight')}), this.props.groupName), this.state.isDetailsShown
            ? this._renderGroup()
            : null));
    };
    PropertyPaneGroup.prototype._renderGroup = function () {
        var _this = this;
        return (React.createElement("div", {className: PropertyPaneGroup_module_scss_1.default.propertyPaneGroupContent}, this.props.groupFields.map(function (groupField) { return _this._renderGroupField(groupField); })));
    };
    /**
     * _renderGroupField: renders the individual groupField based on the field type.
     */
    /* tslint:disable:no-any */
    PropertyPaneGroup.prototype._renderGroupField = function (groupField) {
        var _this = this;
        var propValue = lodash.get(this.props.properties, groupField.targetProperty);
        /* tslint:enable:no-any */
        var groupFieldElement;
        /**
         * React requires a key to be set for each item in the collection.
         *
         * Key should be unique and consistent. With the way PropertyPane works today, it's very difficult to ensure the
         * consistency of the keys all the time. The only way we can achieve consistency all the time is when the web part
         * developer supplies a unique key with each field. From the framework standpoint, we did not want to keep the onus
         * of sending in the unique key with the web part developers. We are keeping it simple. Hence, solving the problem
         * for most of the cases. Uniqueness is obtained by maintaining a dictionary of keys.
         *
         * Choosing 'targetProperty' as the key ensures that in most of the cases consistency is achieved. This is because
         * every field will have an associated target property. For the corner cases where there is no targetProperty or
         * same targetProperty is assigned to multiple fields, we are generating a rondom key.
         * This will result in a compromised performance, but not very noticeable and hence we are okay with it.
         *
         * If we can think of any better and simple solution to keep the consistency, we will revisit this logic.
         */
        var key = undefined;
        if (this._keys[groupField.targetProperty]) {
            key = groupField.targetProperty + performance.now();
        }
        else {
            if (groupField.targetProperty) {
                key = groupField.targetProperty;
            }
            else {
                key = performance.now().toString();
            }
        }
        this._keys[key] = true;
        switch (groupField.type) {
            case IPropertyPaneField_1.IPropertyPaneFieldType.Custom:
                groupFieldElement = React.createElement(PropertyPaneCustomFieldHost_1.default, React.__spread({}, groupField.properties));
                break;
            case IPropertyPaneField_1.IPropertyPaneFieldType.Toggle:
                groupFieldElement =
                    React.createElement(office_ui_fabric_react_1.Toggle, React.__spread({}, groupField.properties, {defaultChecked: propValue, onText: groupField.properties.onText || 'On', offText: groupField.properties.offText || 'Off', onChanged: function (value) {
                        _this._onChange(groupField, value);
                    }}));
                break;
            case IPropertyPaneField_1.IPropertyPaneFieldType.TextField:
                groupFieldElement = React.createElement(office_ui_fabric_react_1.TextField, React.__spread({}, groupField.properties, {defaultValue: propValue, onChanged: function (value) {
                    _this._onChange(groupField, value);
                }, onNotifyValidationResult: function (errorMessage, value) {
                    return _this._onNotifyValidationResult(errorMessage, value, groupField, _this.props.setEntryState);
                }}));
                break;
            case IPropertyPaneField_1.IPropertyPaneFieldType.Dropdown:
                groupFieldElement = React.createElement(office_ui_fabric_react_1.Dropdown, React.__spread({}, groupField.properties, {selectedKey: propValue, label: groupField.properties.label, onChanged: function (option, index) {
                    _this._onDropDownChange(groupField, option, index);
                }}));
                break;
            case IPropertyPaneField_1.IPropertyPaneFieldType.CheckBox:
                groupFieldElement = React.createElement(office_ui_fabric_react_1.Checkbox, React.__spread({}, groupField.properties, {label: groupField.properties.text, checked: propValue, onChange: function (ev, isChecked) {
                    _this._onChange(groupField, isChecked);
                }}));
                break;
            // (SOX VSO bug #203642)
            // Accessibility doesn't work in PropertyPane, it need change code in fabric-react.
            case IPropertyPaneField_1.IPropertyPaneFieldType.Label:
                groupFieldElement = React.createElement(office_ui_fabric_react_1.Label, React.__spread({}, groupField.properties), groupField.properties.text);
                break;
            case IPropertyPaneField_1.IPropertyPaneFieldType.Slider:
                groupFieldElement =
                    React.createElement(office_ui_fabric_react_1.Slider, React.__spread({}, groupField.properties, {defaultValue: propValue, onChange: function (value) {
                        _this._onChange(groupField, value);
                    }}));
                break;
            case IPropertyPaneField_1.IPropertyPaneFieldType.ChoiceGroup:
                groupFieldElement =
                    React.createElement(office_ui_fabric_react_1.ChoiceGroup, React.__spread({}, groupField.properties, {options: groupField.properties.options, className: PropertyPaneGroup_module_scss_1.default.propertyPaneChoiceGroup, onChanged: function (checkedOption) {
                        _this._onChoiceGroupChange(groupField, checkedOption);
                    }}));
                break;
            case IPropertyPaneField_1.IPropertyPaneFieldType.Button:
                var handleClick = function () {
                    var newValue = groupField.properties.onClick(propValue); // tslint:disable-line:no-any
                    _this._onChange(groupField, newValue);
                };
                groupFieldElement =
                    React.createElement(office_ui_fabric_react_1.Button, React.__spread({}, groupField.properties, {onClick: handleClick, ariaLabel: groupField.properties.text}), groupField.properties.text);
                break;
            case IPropertyPaneField_1.IPropertyPaneFieldType.HorizontalRule:
                groupFieldElement =
                    React.createElement("hr", React.__spread({}, groupField.properties));
                break;
            case IPropertyPaneField_1.IPropertyPaneFieldType.Link:
                groupFieldElement = React.createElement(office_ui_fabric_react_1.Link, React.__spread({}, groupField.properties), groupField.properties.text);
                break;
            default:
                /* tslint:disable:no-null-keyword */
                groupFieldElement = null;
        }
        return React.createElement("div", {key: key}, " ", groupFieldElement, " ");
    };
    /**
     * Event handler for a group field's onChange event.
     */
    /* tslint:disable-next-line:no-any */
    PropertyPaneGroup.prototype._onChange = function (groupField, value) {
        if (this.props.onChange) {
            this.props.onChange(groupField.targetProperty, value);
        }
        // enable/disable Save button
        if (!groupField.properties.onGetErrorMessage) {
            this.props.setEntryState(groupField.targetProperty, true);
        }
    };
    /**
     * Event handler for a ChoiceGroup's onChange event.
     *
     * @params {IPropertyPaneField} groupField: the property pane control which has just invoked onChanged event.
     * @params {IChoiceGroupOption} checkedOption: the option representing the field which is checked now.
     */
    PropertyPaneGroup.prototype._onChoiceGroupChange = function (groupField, checkedOption) {
        // Maintain the choice group props before EVERYTHING happens.
        // It is needed because the design flaw of Fabric-React ChoiceGroup. Discussions in PR:
        // https://aka.ms/fociu0
        groupField.properties.options.forEach(function (option) {
            return option.isChecked = option.key === checkedOption.key;
        });
        this._onChange(groupField, checkedOption.key);
    };
    /**
     * Event handler for a DropDown's onChange event.
     * @todo (SPPPLAT VSO#169096) Change fabric controls to send in a common type for all the events.
     * Then change this method to use the common type.
     */
    PropertyPaneGroup.prototype._onDropDownChange = function (groupField, selectedItem, selectedIndex) {
        // invoke onPropertyChange event
        if (this.props.onChange) {
            this.props.onChange(groupField.targetProperty, selectedItem.key);
        }
    };
    /**
     * Event handler for header click.
     */
    PropertyPaneGroup.prototype._onHeaderClicked = function () {
        this.setState({
            isDetailsShown: !this.state.isDetailsShown
        });
    };
    PropertyPaneGroup.prototype._onNotifyValidationResult = function (errorMessage, value, groupField, /* tslint:disable-line:no-any */ setEntryState) {
        setEntryState(groupField.targetProperty, !errorMessage);
        if (errorMessage) {
            this._onChange(groupField, value);
        }
    };
    return PropertyPaneGroup;
}(React.Component));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = PropertyPaneGroup;

//# sourceMappingURL=PropertyPaneGroup.js.map
