/**
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * @file Root component of the inbuilt webpart property configuration user experience.
 *
 */
import * as React from 'react';
import { IPropertyPaneData } from './IPropertyPane';
/**
 * Propertypane component props.
 */
export interface IPropertyPaneProps {
    data: IPropertyPaneData;
}
/**
 * Propertypane component state.
 */
export interface IPropertyPaneState {
    isSaveButtonEnabled: boolean;
    saveConfirmationMessage: string;
    currentPage: number;
}
/**
 * Propertypane component.
 */
export default class PropertyPane extends React.Component<IPropertyPaneProps, IPropertyPaneState> {
    refs: {
        [key: string]: Element;
        propertyPane: HTMLElement;
    };
    private _properties;
    private _descriptionId;
    private _invalidEntries;
    private _cssClassForActionableElement;
    private _propertyPane;
    private _propertyPaneContent;
    private _currentlyConfiguredWebPartId;
    private _isPropertyPaneReplaced;
    /**
     * Constructor to instantiate the propertypane component.
     */
    constructor(props: IPropertyPaneProps);
    /**
     * React component lifecycle event.
     * @param props - new props for the component.
     */
    componentWillReceiveProps(props: IPropertyPaneProps): void;
    componentDidMount(): void;
    componentDidUpdate(props: IPropertyPaneProps): void;
    /**
     * React component lifecycle method.
     * Added this method to avoid, unnecessary renders.
     */
    shouldComponentUpdate(nextProps: IPropertyPaneProps, nextState: IPropertyPaneState): boolean;
    render(): React.ReactElement<{}>;
    /**
     * Resetting the PropertyPane state.
     * @param webPartId - web part id to be configured with.
     */
    private _resetState(webPartId);
    /**
     * Renders the content on the property pane, below the title.
     */
    private _renderContent();
    /**
     * Returns if the empty page should be rendered in property pane.
     */
    private _shouldRenderEmptyPage;
    /**
     * Renders the Apply button, if property pane is not reactive.
     */
    private _renderApplyButton();
    /**
     * Renders page navigation buttons.
     */
    private _pageNavigationButtons();
    /**
     * Flips the page based on the direction.
     * @param direction - direction of the page flip. Positive value is forward direction, negative is backwards.
     */
    private _flipPage(direction);
    /**
     * Renders page on the property pane.
     */
    private _renderPage();
    private _setContainerDiv(containerDiv);
    /**
     * Renders the description for no configuration scenario.
     */
    private _renderNoConfigurationState();
    private _setEntryState(targetProperty, isValidEntry);
    private _enableSaveButton(enabled);
    private _onChange(targetProperty, value);
    private _handleSaveClick();
    private _handleCloseClick();
    private _raiseEvent(targetProperty, value);
    private _onPropertyPaneKeyDown(ev);
    private _arrowKeyIcon(dir);
    private _setTimeOutForFocus();
    private _focusOnFirstActionableElement(propertyPane);
    /**
     * Method to update the tab indexes of all the elements in the root to the given value.
     * @param tabIndex
     */
    private _updateTabIndexes(tabIndex, ignoreTabIndexes);
}
