{"version":3,"sources":["local/clientSideWebParts/propertyPane/propertyPaneController/PropertyPaneController.ts"],"names":[],"mappings":"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","file":"local/clientSideWebParts/propertyPane/propertyPaneController/PropertyPaneController.js","sourcesContent":["/**\r\n * @Copyright (c) Microsoft Corporation.  All rights reserved.\r\n *\r\n * @file  This file contains code to help control the web part PropertyPane\r\n */\r\n'use strict';\r\n\r\nimport ReactDOM = require('react-dom');\r\nimport React = require('react');\r\nimport { Validate } from '@microsoft/sp-client-base';\r\n\r\nimport {\r\n  PropertyPaneState,\r\n  WebPartConfigurationEvent,\r\n  IWebPartConfigurationEventCallback } from '../../../common/webParts/PropertyPaneDefinitions';\r\nimport { IClientSideWebPartInternal }from '../../core/IClientSideWebPartInternal';\r\nimport { IPropertyPaneData } from '../propertyPane/IPropertyPane';\r\nimport PropertyPane from '../propertyPane/PropertyPane';\r\nimport styles from './PropertyPaneController.module.scss';\r\n\r\n/**\r\n * This is to ensure we get the Strings as part of our bundle. As the webpack's require.ensure is not\r\n * recognizing the external module, referenced in the Strings. Hence, loading this module in the\r\n * base module which will internally load the external module, and make it available before the\r\n * require.ensure is called. Potential bug in webpack(VSO# 205556).\r\n */\r\nrequire('../loc/Strings.resx');\r\n\r\n/**\r\n * @todo: (SPPPLAT VSO#186293) After adding require.ensure for creating the PropertyPane async bundle,\r\n * this line is required because the PropertyPane depends on office-ui-react-fabric. This is a known\r\n * problem and will be investigated as a part of the bug mentioned above.\r\n */\r\nrequire('office-ui-fabric-react');\r\n\r\n/**\r\n * Type definition of the web part getter delegate.\r\n */\r\nexport interface IWebPartGetter { (id: string): IClientSideWebPartInternal; }\r\n\r\n/*\r\n * This class helps control the web part configuration PropertyPane. The web part framework comes with an inbuilt\r\n * PropertyPane. The web part developer should be able to use this PropertyPane with ease. Alternatively, the web part\r\n * developer can also create their own configuration pane if they do not like the functionality provided by the inbuilt\r\n * PropertyPane.\r\n */\r\nexport default class PropertyPaneController {\r\n\r\n  /**\r\n   * PropertyPane animation timeout (in milliseconds).\r\n   */\r\n  private static ANIMATION_TIMEOUT: number = 400;\r\n\r\n  /**\r\n   * PropertyPane configuration complete timeout for Reactive webparts (in milliseconds).\r\n   */\r\n  private static CONFIGURATION_COMPLETE_TIMEOUT: number = 5000;\r\n\r\n  /**\r\n   * PropertyPane container id.\r\n   */\r\n  private static PROPERTY_PANE_CONTAINER_ID: string = 'spPropertyPaneContainer';\r\n\r\n  /**\r\n   * PropertyPane data of the web part currently being configured.\r\n   */\r\n  private _currentPropertyPaneData: IPropertyPaneData;\r\n\r\n  /**\r\n   * Indicating whether the PropertyPane is open or not.\r\n   */\r\n  private _isOpen: boolean;\r\n\r\n  /**\r\n   * Id of the web part being configured.\r\n   */\r\n  private _currentlyConfiguredWebPartId: string;\r\n\r\n  /**\r\n   * Page content DOM element, which is the sibling of the PropertyPane container element. If available, this element\r\n   * will be animated in and out as the PropertyPane opens and closes.\r\n   */\r\n  private _pageContentElement: HTMLElement;\r\n\r\n  /**\r\n   * PropertyPane container DOM element on the host page.\r\n   */\r\n  private _propertyPaneContainer: HTMLElement;\r\n\r\n  /**\r\n   * The root DOM element (div) of the PropertyPane component.\r\n   */\r\n  private _propertyPaneElement: HTMLDivElement;\r\n\r\n  /**\r\n   * Method to get a web part instance.\r\n   */\r\n  private _webPartGetter: IWebPartGetter;\r\n\r\n  /**\r\n   * Configuration completion timeout\r\n   */\r\n  private _configurationCompletionTimeout: number;\r\n\r\n  /**\r\n   * PropertyPane lifecycle event callback (e.g. OpenComplete, CloseComplete, etc...).\r\n   */\r\n  private _configurationEventCallback: IWebPartConfigurationEventCallback;\r\n\r\n  /**\r\n   * @todo: This should be removed once the task (SPPPLAT VSO#222337) is completed.\r\n   */\r\n  private _workbenchCommandBarElement: HTMLDivElement;\r\n\r\n  /**\r\n   * Instantiates the PropertyPaneController object.\r\n   *\r\n   * @param webPartGetter - delegate to get the web part.\r\n   * @param callback - callback to be called when a configuration event happens.\r\n   */\r\n  constructor(webPartGetter: IWebPartGetter, callback?: IWebPartConfigurationEventCallback) {\r\n    Validate.isNotNullOrUndefined(webPartGetter, 'webPartGetter');\r\n\r\n    this._webPartGetter = webPartGetter;\r\n    this._configurationEventCallback = callback;\r\n\r\n    // method bindings\r\n    this._onPropertyChange = this._onPropertyChange.bind(this);\r\n    this._onPropertyPaneSave = this._onPropertyPaneSave.bind(this);\r\n    this._onPropertyPaneClose = this._onPropertyPaneClose.bind(this);\r\n    this._onPropertyPaneLostFocus = this._onPropertyPaneLostFocus.bind(this);\r\n    this._fireConfigurationCompleteEvent = this._fireConfigurationCompleteEvent.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Start configuring a web part. If the web part implements the configureStart API, this implies that the\r\n   * web part wants to own its configuration experience.  If the web part does not implenent that API,\r\n   * the inbuilt PropertyPane is used and there are the following conditions:\r\n   *\r\n   *   - propertyPaneState is Open and then open the PropertyPane.\r\n   *   - propertyPaneState is Close and then close the PropertyPane.\r\n   *   - propertyPaneState is Toggle and the PropertyPane is closed: in this case we open the PropertyPane and\r\n   *       start the configuration process. This should happen on web part configure button being clicked.\r\n   *   - propertyPaneState is Toggle and the PropertyPane is opened: in this case, if the web part id\r\n   *       is that of a different web part than being currently configured, we keep the PropertyPane open\r\n   *       and change the web part being configured.\r\n   *   - propertyPaneState is Default and the PropertyPane is closed: do nothing\r\n   *   - propertyPaneState is Default and the PropertyPane is opened: change the PropertyPane to display the\r\n   *       settings of the newly selected web part. This should happen when the user navigates between web parts.\r\n   *\r\n   * @param id - instance id of the web part.\r\n   * @param propertyPaneState - indicates in what state the PropertyPane should be.\r\n   */\r\n  public configureStart(\r\n    id: string,\r\n    propertyPaneState?: PropertyPaneState): void {\r\n\r\n    if (id !== this._currentlyConfiguredWebPartId && this._isCurrentlyConfiguredPropertyPaneReactive()) {\r\n      this._fireConfigurationCompleteEvent();\r\n    }\r\n\r\n    if (propertyPaneState === PropertyPaneState.Close) {\r\n      if (this._isOpen) {\r\n        this._toggleProperyPanePosition();\r\n      }\r\n    } else {\r\n      // 'id' can be 'undefined'. It happens when user selects RTE.\r\n      // When 'id' is 'undefined' then 'wp' will be 'undefined'. In that case we render empty PropertyPane.\r\n      if (id) {\r\n        const toBeConfiguredWebPart: IClientSideWebPartInternal = this._webPartGetter(id);\r\n        this._resolvePropertyPaneElements();\r\n        this._configureStart(toBeConfiguredWebPart, id, propertyPaneState);\r\n      } else {\r\n        this._configureStart(undefined, id, propertyPaneState);\r\n      }\r\n    }\r\n\r\n    this._currentlyConfiguredWebPartId = id;\r\n  }\r\n\r\n  /**\r\n   * Make the PropertyPane disappear when the web part being configured is deleted from the page.\r\n   *\r\n   * @param id - Instance id of the web part.\r\n   */\r\n  public onWebPartDelete(id: string): void {\r\n    Validate.isNonemptyString(id, 'id');\r\n\r\n    if (id === this._currentlyConfiguredWebPartId) {\r\n      if (this._isOpen) {\r\n        this._renderPropertyPane(undefined, true);\r\n      }\r\n\r\n      this._currentlyConfiguredWebPartId = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Method to render the PropertyPane.\r\n   *\r\n   * @param currentWebpart - Current web part for which the PropertyPane is to be displayed.\r\n   * @param shouldRecreatePropertyPaneElement - Indicating whether PropertyPane should be recreated or not.\r\n   * @param resetPropertyPaneState - Indicating whether PropertyPane state should be reset.\r\n   */\r\n  private _renderPropertyPane(\r\n    currentWebpart: IClientSideWebPartInternal,\r\n    shouldRecreatePropertyPaneElement?: boolean,\r\n    resetPropertyPaneState?: boolean): void {\r\n\r\n    // @todo: (SPPPLAT VSO#188120) Disabling for now due to webpack async loading bugs.\r\n    // Load the PropertyPane asynchronously in a separate bundle.\r\n    require.ensure([], (require: <T>(path: string) => T) => {\r\n      const propertyPane: typeof PropertyPane =\r\n        require('../propertyPane/PropertyPane')['default'];\r\n\r\n      this._currentPropertyPaneData = currentWebpart ?\r\n        currentWebpart._internalGetPropertyPaneSettings() : this._getEmptyPropertyPaneData();\r\n\r\n      // PropertyPane is rendered only when the web part supplies the settings for the\r\n      // PropertyPane. If there are no settings to be displayed, we empty the PropertyPane\r\n      // container and toggle back if the pane is already open.\r\n      // We will re-visit this logic, once the decission is made, as to what to needs to be done.\r\n      if (this._currentPropertyPaneData) {\r\n        // Only if this flag is true, re-insert the PropertyPane element into the DOM.\r\n        let insertIntoDom: boolean = false;\r\n\r\n        if (shouldRecreatePropertyPaneElement) {\r\n          // Recreating the PropertyPane. This will enable the PropertyPane to be in a valid state.\r\n          if (!this._propertyPaneElement) {\r\n            this._propertyPaneElement = document.createElement('div');\r\n            insertIntoDom = true;\r\n          }\r\n        }\r\n\r\n        if (currentWebpart) {\r\n          this._propertyPaneElement.className = this._currentPropertyPaneData.webPartId;\r\n          this._currentPropertyPaneData.onPropertyChange = this._onPropertyChange;\r\n          this._currentPropertyPaneData.onSave = this._onPropertyPaneSave;\r\n          this._currentPropertyPaneData.onClose = this._onPropertyPaneClose;\r\n          this._currentPropertyPaneData.onLostFocus = this._onPropertyPaneLostFocus;\r\n          this._currentPropertyPaneData.render = () => { this._render(); };\r\n          this._currentPropertyPaneData.shouldResetState = resetPropertyPaneState;\r\n        }\r\n\r\n        const el: React.ReactElement<{}> = React.createElement(propertyPane, { data: this._currentPropertyPaneData });\r\n        ReactDOM.render(el, this._propertyPaneElement);\r\n\r\n        // If the consumer app provides a container div, the PropertyPane will slide-in/out.\r\n        // Else, the PropertyPane will be a popup and overlay over the content area.\r\n        // Further, if not required, do not re-insert the element into dom.\r\n        if (this._propertyPaneContainer) {\r\n          if (insertIntoDom) {\r\n            this._clearPropertyPaneContainer();\r\n            this._propertyPaneContainer.appendChild(this._propertyPaneElement);\r\n          }\r\n\r\n          if (!this._isOpen) {\r\n            this._toggleProperyPanePosition();\r\n          }\r\n        } else {\r\n          if (insertIntoDom) {\r\n            document.body.insertBefore(this._propertyPaneElement, document.body.lastChild.nextSibling);\r\n          }\r\n        }\r\n      }\r\n    }, 'sp-client-preview-propertypane');\r\n  }\r\n\r\n  /**\r\n   * Internal configure start.\r\n   * @param wp - Web part to be configured.\r\n   * @param id - Instance id of the web part to be configured.\r\n   * @param propertyPaneState - State of the PropertyPane.\r\n   */\r\n  private _configureStart(\r\n    wp: IClientSideWebPartInternal,\r\n    id: string,\r\n    propertyPaneState?: PropertyPaneState): void {\r\n\r\n    switch (propertyPaneState) {\r\n      case PropertyPaneState.Open:\r\n        this._renderPropertyPane(wp, true, true);\r\n        break;\r\n\r\n      case PropertyPaneState.Close:\r\n        if (this._isOpen) {\r\n          this._renderPropertyPane(undefined);\r\n          this._toggleProperyPanePosition();\r\n        }\r\n        break;\r\n\r\n      case PropertyPaneState.Toggle:\r\n        if (!this._isOpen) {\r\n          this._renderPropertyPane(wp, true, true);\r\n        } else {\r\n          this._renderPropertyPane(undefined);\r\n          this._toggleProperyPanePosition();\r\n        }\r\n        break;\r\n\r\n      case PropertyPaneState.Default:\r\n        if (this._isOpen) {\r\n          this._renderPropertyPane(wp, true, true);\r\n        }\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Allow the PropertyPane to re-render itself. Used when navigating pages.\r\n   */\r\n  private _render(): void {\r\n    const wp: IClientSideWebPartInternal = this._webPartGetter(this._currentPropertyPaneData.webPartId);\r\n\r\n    if (wp) {\r\n      this._renderPropertyPane(wp);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * PropertyPane field change event handler.\r\n   *\r\n   * @param propertyName - Name of the PropertyPane field changed.\r\n   * @param newValue - New value.\r\n   */\r\n  /* tslint:disable:no-any */\r\n  private _onPropertyChange(propertyName: string, newValue: any): void {\r\n    /* tslint:enable:no-any */\r\n    Validate.isNonemptyString(propertyName, 'propertyName');\r\n    Validate.isNotNullOrUndefined(newValue, 'newValue');\r\n\r\n    if (!this._currentPropertyPaneData.webPartId) {\r\n      throw new Error('onPropertyChange event is not expected when no web part is being configured');\r\n    }\r\n\r\n    const wp: IClientSideWebPartInternal = this._webPartGetter(this._currentPropertyPaneData.webPartId);\r\n\r\n    if (wp) {\r\n      /* tslint:disable:no-any */\r\n      (wp as any).onPropertyChange(propertyName, newValue);\r\n      /* tslint:enable:no-any */\r\n      this._renderPropertyPane(wp);\r\n    }\r\n\r\n    if (this._isCurrentlyConfiguredPropertyPaneReactive()) {\r\n      this._resetConfigurationCompleteTimeout();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Method to handle PropertyPane close.\r\n   */\r\n  private _onPropertyPaneClose(): void {\r\n    this._toggleProperyPanePosition();\r\n\r\n    if (this._isCurrentlyConfiguredPropertyPaneReactive()) {\r\n      this._fireConfigurationCompleteEvent();\r\n    }\r\n  }\r\n\r\n  private _onPropertyPaneLostFocus(): void {\r\n    if (this._configurationEventCallback) {\r\n      this._configurationEventCallback(WebPartConfigurationEvent.LostFocus);\r\n    }\r\n\r\n    if (this._isCurrentlyConfiguredPropertyPaneReactive()) {\r\n      this._fireConfigurationCompleteEvent();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Method to handle PropertyPane save.\r\n   */\r\n  private _onPropertyPaneSave(): void {\r\n    const wp: IClientSideWebPartInternal = this._webPartGetter(this._currentPropertyPaneData.webPartId);\r\n\r\n    if (wp) {\r\n      // @todo: (SPPPLAT VSO#200681) This is a temporary fix, as we do not have 'intenal' scope identifier.\r\n      /* tslint:disable:no-any */\r\n      (wp as any).onPropertyPaneSave();\r\n      (wp as any).onPropertyConfigurationComplete();\r\n      /* tslint:enable:no-any */\r\n\r\n      // Firing configurationcompleteevent for host awareness.\r\n      this._fireConfigurationCompleteEvent();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Slide-in/out the PropertyPane\r\n   * @param shouldPaneOpen - indicates whether the proeprty pane should open or not.\r\n   */\r\n  private _toggleProperyPanePosition(): void {\r\n\r\n    if (this._isOpen) {\r\n      if (this._pageContentElement) {\r\n        this._pageContentElement.classList.remove(styles.shrinkContent);\r\n      } else {\r\n        /**\r\n         * If there is no page content element, then it means that it is classic page. So unmounting\r\n         * the PropertyPane node, because for some reason PropertyPane is not respecting PropertyPaneContainer\r\n         * styles.\r\n         *\r\n         *  This is a temporary fix, to unblock public preview. Permanent fix will be checked in soon.\r\n         * TODO: (SPPPLAT VSO: Bug 237945:Fix the PropertyPane rendering on the classic page)\r\n         */\r\n        ReactDOM.unmountComponentAtNode(this._propertyPaneElement);\r\n      }\r\n\r\n      if (this._workbenchCommandBarElement) {\r\n        this._workbenchCommandBarElement.classList.remove(styles.shrinkContent);\r\n      }\r\n\r\n      this._propertyPaneContainer.classList.remove(styles.showPane);\r\n    } else {\r\n      if (this._pageContentElement) {\r\n        this._pageContentElement.classList.add(styles.shrinkContent);\r\n      } else {\r\n        /**\r\n         * If there is no page content element, then it means that it is classic page. So unmounting\r\n         * the PropertyPane node, because for some reason PropertyPane is not respecting PropertyPaneContainer\r\n         * styles.\r\n         *\r\n         *  This is a temporary fix, to unblock public preview. Permanent fix will be checked in soon.\r\n         * TODO: (SPPPLAT VSO: Bug 237945:Fix the PropertyPane rendering on the classic page)\r\n         */\r\n        this._propertyPaneContainer.style.top = '50px';\r\n        this._propertyPaneContainer.style.zIndex = '999';\r\n      }\r\n\r\n      if (this._workbenchCommandBarElement) {\r\n        this._workbenchCommandBarElement.classList.add(styles.shrinkContent);\r\n      }\r\n\r\n      this._propertyPaneContainer.classList.add(styles.showPane);\r\n    }\r\n\r\n    this._isOpen = !this._isOpen;\r\n\r\n    if (this._configurationEventCallback) {\r\n      // @todo: this is a temporary fix to let the host (e.g. Canvas) know that the PropertyPane has completed\r\n      // animating. The current PropertyPane animation is 367ms and hence the 400ms timeout. The correct fix is\r\n      // to hookup to the animation end event.\r\n      window.setTimeout(() => {\r\n        this._configurationEventCallback(\r\n          this._isOpen\r\n            ? WebPartConfigurationEvent.OpenComplete\r\n            : WebPartConfigurationEvent.CloseComplete);\r\n      },\r\n        PropertyPaneController.ANIMATION_TIMEOUT);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Private method to resolve the elements, which are used in slide in slide out effect.\r\n   */\r\n  private _resolvePropertyPaneElements(): void {\r\n    const workbenchElement: HTMLDivElement = document.getElementById('workbenchPageContent') as HTMLDivElement;\r\n\r\n    // TODO: (SPPPLAT VSO#222337) - Refactor Workbench page layout\r\n    if (workbenchElement) {\r\n      this._pageContentElement = workbenchElement;\r\n      this._workbenchCommandBarElement = document.getElementById('workbenchCommandBar') as HTMLDivElement;\r\n    } else {\r\n      this._pageContentElement = document.getElementById('spPageChromeAppDiv') as HTMLDivElement;\r\n    }\r\n\r\n    // All modern apps should have the spPageChromeAppDiv. If not, then we should treat like the Classic page scenario.\r\n    // i.e.the container div should be hanging off the root node. And we should create it only the first time.\r\n    if (!this._pageContentElement) {\r\n      if (!this._propertyPaneContainer) {\r\n        this._propertyPaneContainer = document.createElement('div');\r\n        this._propertyPaneContainer.id = PropertyPaneController.PROPERTY_PANE_CONTAINER_ID;\r\n        this._propertyPaneContainer.className = PropertyPaneController.PROPERTY_PANE_CONTAINER_ID;\r\n        document.body.appendChild(this._propertyPaneContainer);\r\n      }\r\n    } else {\r\n      this._propertyPaneContainer = document.getElementById(PropertyPaneController.PROPERTY_PANE_CONTAINER_ID);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes all the children of the PropertyPane container.\r\n   */\r\n  private _clearPropertyPaneContainer(): void {\r\n    while (this._propertyPaneContainer && this._propertyPaneContainer.firstChild) {\r\n      this._propertyPaneContainer.removeChild(this._propertyPaneContainer.firstChild);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reset configuration completion timeout.\r\n   */\r\n  private _resetConfigurationCompleteTimeout(): void {\r\n    this._clearConfigurationCompleteTimeout();\r\n    this._configurationCompletionTimeout = window.setTimeout(\r\n      this._fireConfigurationCompleteEvent,\r\n      PropertyPaneController.CONFIGURATION_COMPLETE_TIMEOUT);\r\n  }\r\n\r\n  /**\r\n   * Fire configuration completion timeout.\r\n   */\r\n  private _fireConfigurationCompleteEvent(): void {\r\n    this._clearConfigurationCompleteTimeout();\r\n\r\n    // Do this only if there is a web part currently being configured\r\n    if (this._currentlyConfiguredWebPartId) {\r\n\r\n      // Raise an event to the host with the webpart data. This is required by the Classic page scenario\r\n      // in order to serialize the configuration data.\r\n      const wp: IClientSideWebPartInternal = this._webPartGetter(this._currentlyConfiguredWebPartId);\r\n\r\n      if (this._configurationEventCallback) {\r\n        this._configurationEventCallback(\r\n          WebPartConfigurationEvent.ConfigurationComplete,\r\n          wp._internalSerialize());\r\n      }\r\n\r\n      // Raise the configuration complete event to webpart,\r\n      // If there is a web part already configured.\r\n      if (this._currentPropertyPaneData && this._currentPropertyPaneData.onConfigurationComplete) {\r\n        this._currentPropertyPaneData.onConfigurationComplete();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear configuration completion timeout.\r\n   */\r\n  private _clearConfigurationCompleteTimeout(): void {\r\n    if (this._configurationCompletionTimeout) {\r\n      window.clearTimeout(this._configurationCompletionTimeout);\r\n      this._configurationCompletionTimeout = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Method to check whether the currently configured PropertyPane is reactive or not.\r\n   */\r\n  private _isCurrentlyConfiguredPropertyPaneReactive(): boolean {\r\n    if (this._currentlyConfiguredWebPartId) {\r\n      const currentlyConfiguredWebPart: IClientSideWebPartInternal =\r\n        this._webPartGetter(this._currentlyConfiguredWebPartId);\r\n\r\n      return currentlyConfiguredWebPart._internalGetPropertyPaneSettings().isReactive;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Returns the PropertyPane data which has only 'onClose' defined. This is used when we have to display\r\n   * empty property pane, when there is nothing to configure.\r\n   */\r\n  private _getEmptyPropertyPaneData(): IPropertyPaneData {\r\n    return {\r\n      webPartId: undefined,\r\n      title: undefined,\r\n      shouldResetState: true,\r\n      onPropertyChange: undefined,\r\n      onSave: undefined,\r\n      onClose: this._onPropertyPaneClose,\r\n      onConfigurationComplete: undefined,\r\n      onRendered: undefined,\r\n      onLostFocus: undefined,\r\n      properties: undefined,\r\n      settings: undefined\r\n    };\r\n  }\r\n}\r\n"],"sourceRoot":"/src"}