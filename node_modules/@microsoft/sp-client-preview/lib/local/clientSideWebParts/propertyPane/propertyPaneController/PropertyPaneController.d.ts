import { PropertyPaneState, IWebPartConfigurationEventCallback } from '../../../common/webParts/PropertyPaneDefinitions';
import { IClientSideWebPartInternal } from '../../core/IClientSideWebPartInternal';
/**
 * Type definition of the web part getter delegate.
 */
export interface IWebPartGetter {
    (id: string): IClientSideWebPartInternal;
}
export default class PropertyPaneController {
    /**
     * PropertyPane animation timeout (in milliseconds).
     */
    private static ANIMATION_TIMEOUT;
    /**
     * PropertyPane configuration complete timeout for Reactive webparts (in milliseconds).
     */
    private static CONFIGURATION_COMPLETE_TIMEOUT;
    /**
     * PropertyPane container id.
     */
    private static PROPERTY_PANE_CONTAINER_ID;
    /**
     * PropertyPane data of the web part currently being configured.
     */
    private _currentPropertyPaneData;
    /**
     * Indicating whether the PropertyPane is open or not.
     */
    private _isOpen;
    /**
     * Id of the web part being configured.
     */
    private _currentlyConfiguredWebPartId;
    /**
     * Page content DOM element, which is the sibling of the PropertyPane container element. If available, this element
     * will be animated in and out as the PropertyPane opens and closes.
     */
    private _pageContentElement;
    /**
     * PropertyPane container DOM element on the host page.
     */
    private _propertyPaneContainer;
    /**
     * The root DOM element (div) of the PropertyPane component.
     */
    private _propertyPaneElement;
    /**
     * Method to get a web part instance.
     */
    private _webPartGetter;
    /**
     * Configuration completion timeout
     */
    private _configurationCompletionTimeout;
    /**
     * PropertyPane lifecycle event callback (e.g. OpenComplete, CloseComplete, etc...).
     */
    private _configurationEventCallback;
    /**
     * @todo: This should be removed once the task (SPPPLAT VSO#222337) is completed.
     */
    private _workbenchCommandBarElement;
    /**
     * Instantiates the PropertyPaneController object.
     *
     * @param webPartGetter - delegate to get the web part.
     * @param callback - callback to be called when a configuration event happens.
     */
    constructor(webPartGetter: IWebPartGetter, callback?: IWebPartConfigurationEventCallback);
    /**
     * Start configuring a web part. If the web part implements the configureStart API, this implies that the
     * web part wants to own its configuration experience.  If the web part does not implenent that API,
     * the inbuilt PropertyPane is used and there are the following conditions:
     *
     *   - propertyPaneState is Open and then open the PropertyPane.
     *   - propertyPaneState is Close and then close the PropertyPane.
     *   - propertyPaneState is Toggle and the PropertyPane is closed: in this case we open the PropertyPane and
     *       start the configuration process. This should happen on web part configure button being clicked.
     *   - propertyPaneState is Toggle and the PropertyPane is opened: in this case, if the web part id
     *       is that of a different web part than being currently configured, we keep the PropertyPane open
     *       and change the web part being configured.
     *   - propertyPaneState is Default and the PropertyPane is closed: do nothing
     *   - propertyPaneState is Default and the PropertyPane is opened: change the PropertyPane to display the
     *       settings of the newly selected web part. This should happen when the user navigates between web parts.
     *
     * @param id - instance id of the web part.
     * @param propertyPaneState - indicates in what state the PropertyPane should be.
     */
    configureStart(id: string, propertyPaneState?: PropertyPaneState): void;
    /**
     * Make the PropertyPane disappear when the web part being configured is deleted from the page.
     *
     * @param id - Instance id of the web part.
     */
    onWebPartDelete(id: string): void;
    /**
     * Method to render the PropertyPane.
     *
     * @param currentWebpart - Current web part for which the PropertyPane is to be displayed.
     * @param shouldRecreatePropertyPaneElement - Indicating whether PropertyPane should be recreated or not.
     * @param resetPropertyPaneState - Indicating whether PropertyPane state should be reset.
     */
    private _renderPropertyPane(currentWebpart, shouldRecreatePropertyPaneElement?, resetPropertyPaneState?);
    /**
     * Internal configure start.
     * @param wp - Web part to be configured.
     * @param id - Instance id of the web part to be configured.
     * @param propertyPaneState - State of the PropertyPane.
     */
    private _configureStart(wp, id, propertyPaneState?);
    /**
     * Allow the PropertyPane to re-render itself. Used when navigating pages.
     */
    private _render();
    /**
     * PropertyPane field change event handler.
     *
     * @param propertyName - Name of the PropertyPane field changed.
     * @param newValue - New value.
     */
    private _onPropertyChange(propertyName, newValue);
    /**
     * Method to handle PropertyPane close.
     */
    private _onPropertyPaneClose();
    private _onPropertyPaneLostFocus();
    /**
     * Method to handle PropertyPane save.
     */
    private _onPropertyPaneSave();
    /**
     * Slide-in/out the PropertyPane
     * @param shouldPaneOpen - indicates whether the proeprty pane should open or not.
     */
    private _toggleProperyPanePosition();
    /**
     * Private method to resolve the elements, which are used in slide in slide out effect.
     */
    private _resolvePropertyPaneElements();
    /**
     * Removes all the children of the PropertyPane container.
     */
    private _clearPropertyPaneContainer();
    /**
     * Reset configuration completion timeout.
     */
    private _resetConfigurationCompleteTimeout();
    /**
     * Fire configuration completion timeout.
     */
    private _fireConfigurationCompleteEvent();
    /**
     * Clear configuration completion timeout.
     */
    private _clearConfigurationCompleteTimeout();
    /**
     * Method to check whether the currently configured PropertyPane is reactive or not.
     */
    private _isCurrentlyConfiguredPropertyPaneReactive();
    /**
     * Returns the PropertyPane data which has only 'onClose' defined. This is used when we have to display
     * empty property pane, when there is nothing to configure.
     */
    private _getEmptyPropertyPaneData();
}
