"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var css_1 = require('office-ui-fabric-react/lib/utilities/css');
var sp_client_base_1 = require('@microsoft/sp-client-base');
var React = require('react');
var ReactDOM = require('react-dom');
require('./CanvasToolboxHint.scss');
var CanvasToolboxHint = (function (_super) {
    __extends(CanvasToolboxHint, _super);
    function CanvasToolboxHint(props, context) {
        _super.call(this, props, context);
        this._handleClick = this._handleClick.bind(this);
    }
    CanvasToolboxHint.prototype.componentDidMount = function () {
        this._domNode = ReactDOM.findDOMNode(this);
        if (this.props.shouldFocus) {
            this.focus();
        }
    };
    CanvasToolboxHint.prototype.componentDidUpdate = function () {
        /**
         * Calling componentDidMount because we want the code to run
         * during each update as well.
         */
        this.componentDidMount();
    };
    CanvasToolboxHint.prototype.render = function () {
        var _a = this.props, ariaLabel = _a.ariaLabel, isVisible = _a.isVisible;
        var hintClassName = css_1.css('CanvasToolboxHint', {
            'is-visible': isVisible
        });
        return this.context.store.displayMode === sp_client_base_1.DisplayMode.Edit && (React.createElement("button", {"aria-haspopup": true, "aria-label": ariaLabel, className: hintClassName, onClick: this._handleClick}, React.createElement("div", {className: 'CanvasToolboxHint-plusButton'}, React.createElement("i", {className: 'ms-Icon ms-Icon--Add'}))));
    };
    CanvasToolboxHint.prototype.focus = function () {
        var _this = this;
        /**
         * Setting a 0ms timeout to let the browser drawing finish before we set focus to an element.
         * Chrome's event queue lags more than IE's in this particular instance. Without this timeout
         * the focus will not be correct set in Chrome.
         */
        window.setTimeout(function () { return _this._domNode.focus(); }, 0);
    };
    CanvasToolboxHint.prototype._handleClick = function () {
        this.context.store.selectedControlId = undefined;
        this.context.store.openToolbox(this.props.row, this._domNode.offsetTop);
    };
    CanvasToolboxHint.contextTypes = {
        store: React.PropTypes.object.isRequired
    };
    return CanvasToolboxHint;
}(React.Component));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = CanvasToolboxHint;

//# sourceMappingURL=CanvasToolboxHint.js.map
