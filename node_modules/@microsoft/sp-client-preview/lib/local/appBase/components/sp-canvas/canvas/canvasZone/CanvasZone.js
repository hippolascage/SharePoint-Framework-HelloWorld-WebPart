"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var React = require('react');
var css_1 = require('office-ui-fabric-react/lib/utilities/css');
var sp_client_base_1 = require('@microsoft/sp-client-base');
var odsp_utilities_bundle_1 = require('@ms/odsp-utilities-bundle');
var CanvasControlType_1 = require('../../../canvas/canvas/CanvasControlType');
var CanvasA11y_1 = require('../../a11y/CanvasA11y');
var PropertyPaneDefinitions_1 = require('../../../../../common/webParts/PropertyPaneDefinitions');
require('./CanvasZone.scss');
var CanvasStrings_resx_1 = require('../../loc/CanvasStrings.resx');
var CanvasZone = (function (_super) {
    __extends(CanvasZone, _super);
    function CanvasZone(props, context) {
        _super.call(this, props, context);
        this._handleClickCapture = this._handleClickCapture.bind(this);
        this._handleKeydownCapture = this._handleKeydownCapture.bind(this);
        this._handleMouseOut = this._handleMouseOut.bind(this);
        this._handleMouseOver = this._handleMouseOver.bind(this);
        this._handleToolbarKeydown = this._handleToolbarKeydown.bind(this);
        this._handleTrapFocus = this._handleTrapFocus.bind(this);
        this._handleControlFocus = this._handleControlFocus.bind(this);
        this._selectControl = this._selectControl.bind(this);
    }
    CanvasZone.prototype.shouldComponentUpdate = function (nextProps) {
        var _a = this.props, displayMode = _a.displayMode, isSelected = _a.isSelected, row = _a.row;
        return (displayMode !== nextProps.displayMode ||
            isSelected !== nextProps.isSelected ||
            row !== nextProps.row);
    };
    CanvasZone.prototype.componentDidMount = function () {
        if (this.context.store.selectedControlId === this.props.id) {
            // 500ms animation duration
            this.context.store.scrollIntoView('partial', this._domElement, 500, CanvasZone._VERTICAL_MARGIN * 2);
            this.context.store.a11yManager.navigateTo(this._domElement);
        }
        this._childControl = this.context.store.getControl(this.props.id);
        if (this.props.displayMode === sp_client_base_1.DisplayMode.Edit) {
            this._toolbarElement.addEventListener('keydown', this._handleToolbarKeydown);
            this._childControlElement.addEventListener('keydown', this._handleKeydownCapture, true);
        }
    };
    CanvasZone.prototype.componentDidUpdate = function (prevProps) {
        var displayMode = this.props.displayMode;
        if (prevProps.displayMode !== displayMode) {
            if (displayMode === sp_client_base_1.DisplayMode.Edit) {
                this._toolbarElement.addEventListener('keydown', this._handleToolbarKeydown);
                this._childControlElement.addEventListener('keydown', this._handleKeydownCapture, true);
            }
            else if (displayMode === sp_client_base_1.DisplayMode.Read) {
                this._toolbarElement.removeEventListener('keydown', this._handleToolbarKeydown);
                this._childControlElement.removeEventListener('keydown', this._handleKeydownCapture, true);
            }
        }
    };
    CanvasZone.prototype.render = function () {
        var _this = this;
        var _a = this.props, children = _a.children, displayMode = _a.displayMode, isSelected = _a.isSelected, id = _a.id;
        var controlType = children[0].props.controlType;
        var isReadMode = displayMode === sp_client_base_1.DisplayMode.Read;
        var accessibleLabel = '';
        var ariaPrimaryLabelById = "cswpAccessibleLabel_" + id;
        // Keep ID in sync with BaseClientSideWebpart._renderWithAccessibileTitle,
        // where each webpart can provide contextual info based on its properties:
        // ie. "image of a house" instead of just "image"
        var ariaContextualLabelId = "cswpAccessibleLabelContextual_" + id;
        // Have to provide multiple IDs because IE doesn't care for aria-describedBy on DIVs
        var ariaLabelledBy;
        if (controlType === CanvasControlType_1.default.WebPartZone) {
            // Want additional listed first since it will provide most contextual info
            ariaLabelledBy = ariaContextualLabelId;
        }
        else if (controlType === CanvasControlType_1.default.RTE) {
            accessibleLabel = odsp_utilities_bundle_1.StringHelper.format(CanvasStrings_resx_1.default.CanvasZoneAriaWebpartName || '', CanvasStrings_resx_1.default.TextWebPartDisplayName || '') || '';
            // No contextual info available for text
            ariaLabelledBy = ariaPrimaryLabelById;
        }
        if (displayMode === sp_client_base_1.DisplayMode.Edit) {
            accessibleLabel = odsp_utilities_bundle_1.StringHelper.format(CanvasStrings_resx_1.default.AriaWebPartEnterTemplate || '', accessibleLabel) || '';
            if (controlType === CanvasControlType_1.default.WebPartZone) {
                ariaLabelledBy += " " + ariaPrimaryLabelById;
            }
        }
        var zoneClassName = css_1.css('CanvasZone', {
            'CanvasZone--edit': !isReadMode,
            'CanvasZone--selected': isSelected
        });
        return (
        /**
         * Passing undefined once you set the tab index does not remove the tab index in React 14.
         * This is fixed in React 15. https://github.com/facebook/react/issues/2528
         */
        React.createElement("div", {"aria-labelledby": ariaLabelledBy, className: zoneClassName, ref: function (ref) { return _this._domElement = ref; }, onMouseOut: this._handleMouseOut, onMouseOver: this._handleMouseOver, tabIndex: isReadMode ? -1 : 0}, React.createElement("div", null, React.createElement("div", {className: 'CanvasZone-control', isHidden: isReadMode, onClickCapture: isReadMode ? undefined : this._handleClickCapture, onFocus: isReadMode ? undefined : this._handleControlFocus, ref: function (ref) { return _this._childControlElement = ref; }}, children[0]), React.createElement("div", {isHidden: isReadMode, ref: function (ref) { return _this._toolbarElement = ref; }}, children[1]), React.createElement("div", {id: ariaPrimaryLabelById, className: 'CanvasZone-screenReaderOnly'}, accessibleLabel))));
    };
    CanvasZone.prototype._handleControlFocus = function (e) {
        this._selectControl();
    };
    CanvasZone.prototype._handleClickCapture = function (e) {
        this._selectControl();
    };
    CanvasZone.prototype._handleKeydownCapture = function (evt) {
        if (this._childControl && this._childControl.props.controlType === CanvasControlType_1.default.WebPartZone) {
            if (CanvasA11y_1.isEscape(evt)) {
                this.context.store.a11yManager.navigateTo(this._domElement);
                evt.stopPropagation();
                evt.preventDefault();
            }
            else if (CanvasA11y_1.isKey(CanvasA11y_1.KeyCodes.F10, evt, true)) {
                this.context.store.a11yManager.navigateTo(this._toolbarElement);
                this.context.store.a11yManager.ariaAlert(CanvasStrings_resx_1.default.ToolbarNavigationArrowKeys);
                evt.stopPropagation();
                evt.preventDefault();
            }
            else if (CanvasA11y_1.isKey(CanvasA11y_1.KeyCodes.P, evt, true)) {
                this.context.store.webPartManager.configureStart(this._childControl.props.id, PropertyPaneDefinitions_1.PropertyPaneState.Open);
                evt.stopPropagation();
                evt.preventDefault();
            }
            else {
                this.context.store.a11yManager.skipEvent(evt);
            }
        }
    };
    CanvasZone.prototype._handleToolbarKeydown = function (evt) {
        if (this._childControl && this._childControl.props.controlType === CanvasControlType_1.default.RTE) {
            // Only for RTE: pressing escape on toolbar takes the focus inside the editor
            if (CanvasA11y_1.isEscape(evt)) {
                this._childControl.focus();
                evt.stopPropagation();
                evt.preventDefault();
            }
        }
    };
    CanvasZone.prototype._handleMouseOut = function (e) {
        this.context.store.hoveredControlId = undefined;
    };
    CanvasZone.prototype._handleMouseOver = function (e) {
        this.context.store.hoveredControlId = this.props.id;
    };
    CanvasZone.prototype._handleTrapFocus = function (e) {
        if (e.target === this._trapDiv) {
            this._childControl.focus();
        }
    };
    CanvasZone.prototype._selectControl = function () {
        if (this.context.store.selectedControlId !== this.props.id) {
            this.context.store.selectedControlId = this.props.id;
        }
    };
    CanvasZone.contextTypes = {
        store: React.PropTypes.object.isRequired
    };
    /**
     * @ readOnly
     */
    CanvasZone._VERTICAL_MARGIN = 22;
    return CanvasZone;
}(React.Component));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = CanvasZone;

//# sourceMappingURL=CanvasZone.js.map
