/**
 * @copyright (c) Microsoft Corporation. All rights reserved.
 */
"use strict";
var React = require('react');
var reactDOM = require('react-dom');
var CanvasComponent_1 = require('../canvasComponent/CanvasComponent');
var CanvasStore_1 = require('../canvasComponent/CanvasStore');
require('./Canvas.scss');
/**
 * SharePoint Client-side Applications can use the SharePoint Canvas to enable rich content authoring
 * as part of their experience. The SharePoint canvas provides Rich Text Editing capabilities, SharePoint
 * Client-side WebPart aggregation and hosting, and a beautiful railed design experience.
 *
 * @unreleased
 * @public
 */
var Canvas = (function () {
    /**
     * Construct a new instance of the Canvas.
     *
     * @param serviceScope - A context object that will provide dependencies needed by the canvas and
     *   any web parts that it loads.
     * @param container - The host DOM container for the Canvas. When render() is invoked the Canvas will
     *   render into 'container'.
     * @param mode - The initial DisplayMode of the Canvas.
     * @param serializedCanvas - Optional. Used to initialize a Canvas' state when render() is invoked. The
     *   string must have been created by a previous instance of the Canvas. If absent, an empty Canvas will
     *   be rendered. If present, the Canvas will rehydrate to represent the state of the Canvas when
     *   serialized.
     * @param handleCanvasChanged - Optional. When text is editied or canvas controls are added/removed this
     *   callback will be invoked. Web parts will also invoke this call back when there is interaction with
     *   the web part.
     * @param scrollThreshold - Optional. If the Canvas is inside a scrollable element, this value can be passed
     * to let the Canvas know how much of the initial scrolling must be ignored in re-positioning its inner elements.
     * This is useful when the Canvas has a non-zero top relative to its scrollable parent. In that case, a part of
     * the initial scrolling does not move the Canvas out of view and must be ignored by the Canvas. Defaults to zero
     */
    function Canvas(serviceScope, container, mode, serializedCanvas, handleCanvasChanged, scrollThreshold) {
        this._render = this._render.bind(this);
        this._container = container;
        this._store =
            new CanvasStore_1.default(serviceScope, this._render, mode, serializedCanvas, handleCanvasChanged, scrollThreshold);
    }
    /**
     * Render the Canvas into its container DOM element. The Canvas will use the DisplayMode it was
     * constructed with.
     * If the Canvas has already been rendered once, the Canvas will clear its contents and then, if present,
     * use 'serializedCanvas' to rehydrate itself.
     *
     * @param serializedCanvas - Optional. The string must have been created by a previous instance of
     *   the Canvas. If absent, an empty Canvas will be rendered. If present, the Canvas will rehydrate
     *   to represent the state of the Canvas when serialized.
     */
    Canvas.prototype.render = function (serializedCanvas) {
        // Unmount any existing Canvas instances
        this.dispose();
        this._store.webPartManager.dispose();
        /**
         * @see CanvasStore.handleWindowBlur
         */
        window.addEventListener('blur', this._store.handleWindowBlur, true);
        this._store.deserialize(serializedCanvas);
        this._render();
    };
    Object.defineProperty(Canvas.prototype, "count", {
        /**
         * @return The number of controls in the Canvas.
         */
        get: function () {
            return this._store.controlsProps.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Canvas.prototype, "previewImageUrl", {
        /**
          * Get the preview image url generated from webpart manager if it is available.
          * The preview image is the first preview image provided by a webpart
          *
          * @return the URL of the preview image
          */
        get: function () {
            return this._store.tryGeneratePreviewImageUrl();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Canvas.prototype, "displayMode", {
        /**
         * Re-render the Canvas in a new DisplayMode.
         *
         * @param newMode - The desired DisplayMode of the Canvas
         */
        set: function (newMode) {
            this._store.displayMode = newMode;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Unmount the Canvas from the container it was constructed with.
     */
    Canvas.prototype.dispose = function () {
        window.removeEventListener('blur', this._store.handleWindowBlur, true);
        reactDOM.unmountComponentAtNode(this._container);
    };
    /**
     * Display the Canvas' Toolbox at a given row. If the Toolbox is already open, the Toolbox will close
     * at its previous row and re-open at the new row.
     *
     * @param row - The desired row for the Toolbox to open at. The rows are zero-based numbered.
     *   If an invalid row is passed, no changes will occur.
     *
     * @return A boolean indicating whether the Toolbox successfully opened.
     */
    Canvas.prototype.openToolbox = function (row) {
        var didToolboxOpen = false;
        if (0 <= row && row <= this._store.controlsProps.length) {
            var hint = document.querySelectorAll('.CanvasToolboxHint')[row];
            this._store.openToolbox(row, hint.offsetTop);
            didToolboxOpen = true;
        }
        return didToolboxOpen;
    };
    /**
     * Serialize the current contents of the Canvas. The serialized string is in a HTML format understood by
     * SharePoint's Rich Text Field. The returned string can be crawled by search. Modifying the returned
     * string outside of the Canvas is not supported.
     *
     * @return Serialized representation of the Canvas at the time the method is invoked.
     */
    Canvas.prototype.serialize = function () {
        return this._store.serialize();
    };
    Canvas.prototype._render = function () {
        var props = {
            store: this._store
        };
        var coreElement = React.createElement(CanvasComponent_1.default, props);
        this._coreComponent = reactDOM.render(coreElement, this._container);
    };
    return Canvas;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Canvas;

//# sourceMappingURL=Canvas.js.map
