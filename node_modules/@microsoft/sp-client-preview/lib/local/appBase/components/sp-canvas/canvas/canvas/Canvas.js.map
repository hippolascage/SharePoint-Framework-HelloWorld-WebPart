{"version":3,"sources":["local/appBase/components/sp-canvas/canvas/canvas/Canvas.ts"],"names":[],"mappings":"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","file":"local/appBase/components/sp-canvas/canvas/canvas/Canvas.js","sourcesContent":["/**\r\n * @copyright (c) Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nimport * as React from 'react';\r\nimport * as reactDOM from 'react-dom';\r\nimport { DisplayMode, ServiceScope } from '@microsoft/sp-client-base';\r\n\r\nimport CanvasComponent from '../canvasComponent/CanvasComponent';\r\nimport { ICanvasComponentProps } from '../canvasComponent/ICanvasComponent';\r\nimport CanvasStore from '../canvasComponent/CanvasStore';\r\n\r\nimport './Canvas.scss';\r\n\r\n/**\r\n * SharePoint Client-side Applications can use the SharePoint Canvas to enable rich content authoring\r\n * as part of their experience. The SharePoint canvas provides Rich Text Editing capabilities, SharePoint\r\n * Client-side WebPart aggregation and hosting, and a beautiful railed design experience.\r\n *\r\n * @unreleased\r\n * @public\r\n */\r\nexport default class Canvas {\r\n  private _container: HTMLElement;\r\n  private _coreComponent: React.Component<ICanvasComponentProps, {}>;\r\n  private _store: CanvasStore;\r\n\r\n  /**\r\n   * Construct a new instance of the Canvas.\r\n   *\r\n   * @param serviceScope - A context object that will provide dependencies needed by the canvas and\r\n   *   any web parts that it loads.\r\n   * @param container - The host DOM container for the Canvas. When render() is invoked the Canvas will\r\n   *   render into 'container'.\r\n   * @param mode - The initial DisplayMode of the Canvas.\r\n   * @param serializedCanvas - Optional. Used to initialize a Canvas' state when render() is invoked. The\r\n   *   string must have been created by a previous instance of the Canvas. If absent, an empty Canvas will\r\n   *   be rendered. If present, the Canvas will rehydrate to represent the state of the Canvas when\r\n   *   serialized.\r\n   * @param handleCanvasChanged - Optional. When text is editied or canvas controls are added/removed this\r\n   *   callback will be invoked. Web parts will also invoke this call back when there is interaction with\r\n   *   the web part.\r\n   * @param scrollThreshold - Optional. If the Canvas is inside a scrollable element, this value can be passed\r\n   * to let the Canvas know how much of the initial scrolling must be ignored in re-positioning its inner elements.\r\n   * This is useful when the Canvas has a non-zero top relative to its scrollable parent. In that case, a part of\r\n   * the initial scrolling does not move the Canvas out of view and must be ignored by the Canvas. Defaults to zero\r\n   */\r\n  constructor(\r\n    serviceScope: ServiceScope,\r\n    container: HTMLElement,\r\n    mode: DisplayMode,\r\n    serializedCanvas?: string,\r\n    handleCanvasChanged?: () => void,\r\n    scrollThreshold?: number\r\n  ) {\r\n    this._render = this._render.bind(this);\r\n    this._container = container;\r\n    this._store =\r\n      new CanvasStore(serviceScope, this._render, mode, serializedCanvas, handleCanvasChanged, scrollThreshold);\r\n  }\r\n\r\n  /**\r\n   * Render the Canvas into its container DOM element. The Canvas will use the DisplayMode it was\r\n   * constructed with.\r\n   * If the Canvas has already been rendered once, the Canvas will clear its contents and then, if present,\r\n   * use 'serializedCanvas' to rehydrate itself.\r\n   *\r\n   * @param serializedCanvas - Optional. The string must have been created by a previous instance of\r\n   *   the Canvas. If absent, an empty Canvas will be rendered. If present, the Canvas will rehydrate\r\n   *   to represent the state of the Canvas when serialized.\r\n   */\r\n  public render(serializedCanvas?: string): void {\r\n    // Unmount any existing Canvas instances\r\n    this.dispose();\r\n    this._store.webPartManager.dispose();\r\n\r\n    /**\r\n     * @see CanvasStore.handleWindowBlur\r\n     */\r\n    window.addEventListener('blur', this._store.handleWindowBlur, true);\r\n\r\n    this._store.deserialize(serializedCanvas);\r\n    this._render();\r\n  }\r\n\r\n  /**\r\n   * @return The number of controls in the Canvas.\r\n   */\r\n  public get count(): number {\r\n    return this._store.controlsProps.length;\r\n  }\r\n\r\n /**\r\n   * Get the preview image url generated from webpart manager if it is available.\r\n   * The preview image is the first preview image provided by a webpart\r\n   *\r\n   * @return the URL of the preview image\r\n   */\r\n  public get previewImageUrl(): string {\r\n    return this._store.tryGeneratePreviewImageUrl();\r\n  }\r\n\r\n  /**\r\n   * Re-render the Canvas in a new DisplayMode.\r\n   *\r\n   * @param newMode - The desired DisplayMode of the Canvas\r\n   */\r\n  public set displayMode(newMode: DisplayMode) {\r\n    this._store.displayMode = newMode;\r\n  }\r\n\r\n  /**\r\n   * Unmount the Canvas from the container it was constructed with.\r\n   */\r\n  public dispose(): void {\r\n    window.removeEventListener('blur', this._store.handleWindowBlur, true);\r\n    reactDOM.unmountComponentAtNode(this._container);\r\n  }\r\n\r\n  /**\r\n   * Display the Canvas' Toolbox at a given row. If the Toolbox is already open, the Toolbox will close\r\n   * at its previous row and re-open at the new row.\r\n   *\r\n   * @param row - The desired row for the Toolbox to open at. The rows are zero-based numbered.\r\n   *   If an invalid row is passed, no changes will occur.\r\n   *\r\n   * @return A boolean indicating whether the Toolbox successfully opened.\r\n   */\r\n  public openToolbox(row: number): boolean {\r\n    let didToolboxOpen: boolean = false;\r\n\r\n    if (0 <= row && row <= this._store.controlsProps.length) {\r\n      const hint: HTMLElement = document.querySelectorAll('.CanvasToolboxHint')[row] as HTMLElement;\r\n      this._store.openToolbox(row, hint.offsetTop);\r\n      didToolboxOpen = true;\r\n    }\r\n\r\n    return didToolboxOpen;\r\n  }\r\n\r\n  /**\r\n   * Serialize the current contents of the Canvas. The serialized string is in a HTML format understood by\r\n   * SharePoint's Rich Text Field. The returned string can be crawled by search. Modifying the returned\r\n   * string outside of the Canvas is not supported.\r\n   *\r\n   * @return Serialized representation of the Canvas at the time the method is invoked.\r\n   */\r\n  public serialize(): string {\r\n    return this._store.serialize();\r\n  }\r\n\r\n  private _render(): void {\r\n    const props: ICanvasComponentProps = {\r\n      store: this._store\r\n    };\r\n\r\n    const coreElement: React.ReactElement<ICanvasComponentProps> = React.createElement(CanvasComponent, props);\r\n    this._coreComponent = reactDOM.render(coreElement, this._container);\r\n  }\r\n}\r\n"],"sourceRoot":"/src"}