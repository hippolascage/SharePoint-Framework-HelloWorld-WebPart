/**
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * @file Classifies ToolBox items into Featured and NonFeatured items
 */
"use strict";
var FEATURED_ITEM_IDS = [
    'd1d91016-032f-456d-98a4-721247c305e8',
    'b7dd04e1-19ce-4b24-9132-b60a1c2b910d',
    '275c0095-a77e-4f6d-a2a0-6a7626911518',
    '490d7c76-1824-45b2-9de3-676421c997fa',
    'daf0b71c-6de8-4ef7-b511-faae7c388708' // Highlighted content
];
var GENERIC_ITEM_ID = '00000000-0000-0000-0000-000000000000';
/**
 * ToolBoxItemClassifier classifies tool box items into Featured and non-featured
 */
var ToolBoxItemClassifier = (function () {
    /**
     * Initializes a new instance of the ToolBoxItemClassifier
     */
    function ToolBoxItemClassifier() {
        var _this = this;
        this._toolBoxItemIdToPropsMap = new Map();
        FEATURED_ITEM_IDS.forEach(function (id) {
            _this._toolBoxItemIdToPropsMap.set(id, []);
        });
        this._toolBoxItemIdToPropsMap.set(GENERIC_ITEM_ID, []);
    }
    /**
     * Registers a new item with the Classifier
     * @param itemId represents the item Id
     * @param itemProps represents the item properties
     */
    ToolBoxItemClassifier.prototype.registerItem = function (itemId, itemProps) {
        var registeredItemProps = this._toolBoxItemIdToPropsMap.get(itemId);
        if (Array.isArray(registeredItemProps)) {
            registeredItemProps.push(itemProps);
        }
        else {
            // If not registered, then place item in generic item bucket
            this._toolBoxItemIdToPropsMap.get(GENERIC_ITEM_ID).push(itemProps);
        }
    };
    /**
     * Gets items classified by a specific type
     * @param isFeatured determines the classification type
     * @param sortPredicate is optional sorting predicate
     * @returns items classified by a particular type
     */
    ToolBoxItemClassifier.prototype.classify = function (isFeatured, sortPredicate) {
        var toolBoxItemProps = [];
        if (isFeatured) {
            this._toolBoxItemIdToPropsMap.forEach(function (items, id) {
                if (id !== GENERIC_ITEM_ID && items.length > 0) {
                    toolBoxItemProps.push(items[0]);
                }
            });
        }
        else {
            toolBoxItemProps = this._toolBoxItemIdToPropsMap.get(GENERIC_ITEM_ID);
        }
        if (Boolean(sortPredicate)) {
            toolBoxItemProps = toolBoxItemProps.sort(sortPredicate);
        }
        return toolBoxItemProps;
    };
    return ToolBoxItemClassifier;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ToolBoxItemClassifier;

//# sourceMappingURL=ToolBoxItemClassifier.js.map
