"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var React = require('react');
var ReactDOM = require('react-dom');
var css_1 = require('office-ui-fabric-react/lib/utilities/css');
var sp_client_base_1 = require('@microsoft/sp-client-base');
var CanvasControlFactory_1 = require('../canvasControl/CanvasControlFactory');
var CanvasZone_1 = require('../canvasZone/CanvasZone');
var CanvasA11y_1 = require('../../a11y/CanvasA11y');
var CanvasToolboxHint_1 = require('../canvasToolboxHint/CanvasToolboxHint');
var ConfirmationDialog_1 = require('../confirmationDialog/ConfirmationDialog');
var Toolbar_1 = require('../../toolbar/Toolbar');
var Toolbox_1 = require('../../toolbox/toolbox/Toolbox');
var CanvasStrings_resx_1 = require('../../loc/CanvasStrings.resx');
var CanvasComponent = (function (_super) {
    __extends(CanvasComponent, _super);
    function CanvasComponent(props, context) {
        _super.call(this, props, context);
    }
    CanvasComponent.prototype.getChildContext = function () {
        return {
            store: this.props.store
        };
    };
    CanvasComponent.prototype.render = function () {
        var store = this.props.store;
        var controlsProps = store.controlsProps;
        var deletedRow = store.deletedRow;
        var displayMode = store.displayMode;
        var toolboxProps = store.toolboxProps;
        var rows = [];
        var row = 0;
        if (controlsProps) {
            for (var _i = 0, controlsProps_1 = controlsProps; _i < controlsProps_1.length; _i++) {
                var control = controlsProps_1[_i];
                var isSelected = store.selectedControlId === control.id;
                if (isSelected && row) {
                    // Replace the last hint pushed with a hint that is visible
                    rows.pop();
                    rows.push(React.createElement(CanvasToolboxHint_1.default, {ariaLabel: CanvasStrings_resx_1.default.ToolboxHintTitle, isVisible: true, key: row, row: row}));
                }
                rows.push(React.createElement(CanvasZone_1.default, {displayMode: displayMode, id: control.id, isSelected: isSelected, key: control.id, row: row}, CanvasControlFactory_1.default.CreateCanvasControl(control, store), React.createElement(Toolbar_1.default, {controlType: control.controlType, displayMode: displayMode, id: control.id, row: row, onConfigureButtonClick: store.handleConfigureButtonClicked, onDeleteButtonClick: store.handleDeleteButtonClicked})));
                ++row;
                rows.push(React.createElement(CanvasToolboxHint_1.default, {ariaLabel: CanvasStrings_resx_1.default.ToolboxHintTitle, isVisible: toolboxProps.row === row, shouldFocus: deletedRow === row, key: row, row: row}));
            }
        }
        /**
         * Only set focus on a hint during the render after control is deleted.
         */
        store.deletedRow = undefined;
        var className = css_1.css('Canvas', {
            'Canvas--edit': displayMode === sp_client_base_1.DisplayMode.Edit
        });
        return (React.createElement("div", {className: className, role: displayMode === sp_client_base_1.DisplayMode.Edit ? 'application' : undefined}, React.createElement(CanvasToolboxHint_1.default, {ariaLabel: CanvasStrings_resx_1.default.ToolboxHintTitle, shouldFocus: deletedRow === 0, isVisible: rows[0] && rows[0].props.isSelected || toolboxProps.row === 0, row: 0}), rows, React.createElement(Toolbox_1.default, React.__spread({}, toolboxProps)), React.createElement(ConfirmationDialog_1.default, {isOpen: store.isDeleteDialogOpen, message: CanvasStrings_resx_1.default.DeleteConfirmationDialogMessage, onConfirmation: store.handleDeleteDialogConfirmation, onDismiss: store.handleDeleteDialogDismiss, title: CanvasStrings_resx_1.default.DeleteConfirmationDialogTitle})));
    };
    CanvasComponent.prototype.componentDidMount = function () {
        var canvasElement = ReactDOM.findDOMNode(this);
        this.props.store.canvasElement = canvasElement;
        this.props.store.a11yManager = new CanvasA11y_1.CanvasA11yManager(canvasElement);
        // Find and set scrollable parent
        var canvasContainer = canvasElement;
        var hasScrollbar = false;
        do {
            canvasContainer = canvasContainer.parentElement;
            var overflowY = window.getComputedStyle(canvasContainer)['overflow-y'];
            hasScrollbar = (overflowY === 'scroll' || overflowY === 'auto');
        } while (!hasScrollbar && canvasContainer.tagName !== 'BODY');
        this.props.store.scrollableParent = canvasContainer;
    };
    CanvasComponent.childContextTypes = {
        store: React.PropTypes.object.isRequired
    };
    return CanvasComponent;
}(React.Component));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = CanvasComponent;

//# sourceMappingURL=CanvasComponent.js.map
