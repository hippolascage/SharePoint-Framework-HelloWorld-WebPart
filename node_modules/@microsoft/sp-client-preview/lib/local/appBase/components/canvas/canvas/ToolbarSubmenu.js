/**
 * @copyright Microsoft Corporation. All rights reserved.
 *
 * @file Contains ToolbarSubmenu class which is used to group related buttons in toolbar
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var React = require('react');
var office_ui_fabric_react_1 = require('office-ui-fabric-react');
var ToolbarButton_1 = require('./ToolbarButton');
var CanvasA11y_1 = require('../../sp-canvas/a11y/CanvasA11y');
require('./ToolbarSubmenu.scss');
/**
 * @class Submenu can be used in as toolbar item just like a button, to group a number of related buttons
 * that do different variations of an action (like text alignment). Only one of the buttons in a submenu
 * can be active at a time. The icon shown in the closed state is the icon of the active button
 */
var ToolbarSubmenu = (function (_super) {
    __extends(ToolbarSubmenu, _super);
    function ToolbarSubmenu(props) {
        _super.call(this, props);
        this._bindButtonClickHandlers = this._bindButtonClickHandlers.bind(this);
        this._handleCloseSubmenu = this._handleCloseSubmenu.bind(this);
        this._handleKeyDown = this._handleKeyDown.bind(this);
        this._handleOpenSubmenu = this._handleOpenSubmenu.bind(this);
        this._hasExplicitActiveButton = false;
        // Submenu closed by default
        this.state = {
            isOpen: props.isOpen
        };
    }
    ToolbarSubmenu.prototype.componentDidUpdate = function (prevProps, prevState) {
        /**
         * Ensure focus isn't lost when navigating out of a submenu via the left/right arrow keys.
         * Set the focus back to the submenu active button.
         */
        if (!this.state.isOpen && this._isKeyboardNav && this._focusElement) {
            this._focusElement.focus();
            this._focusElement = undefined;
            this._isKeyboardNav = false;
        }
        if (this.state.isOpen && !prevState.isOpen && this._menuElement) {
            CanvasA11y_1.navigateInside(this._menuElement);
        }
    };
    ToolbarSubmenu.prototype.componentWillReceiveProps = function (nextProps) {
        this.setState({ isOpen: nextProps.isOpen });
    };
    /**
     *  Render the submenu, depending on its open state
     */
    ToolbarSubmenu.prototype.render = function () {
        var _this = this;
        var openedCssClass = this.state.isOpen ? 'is-open' : '';
        var wideCssClass = this.props.isWide ? 'ToolbarSubmenu--wide' : '';
        this._bindButtonClickHandlers();
        var buttonElements = [];
        for (var _i = 0, _a = this.props.buttons; _i < _a.length; _i++) {
            var buttonProps = _a[_i];
            buttonProps.tabIndex = this.state.isOpen ? 0 : -1;
            buttonElements.push(React.createElement(ToolbarButton_1.default, React.__spread({}, buttonProps)));
        }
        var activeButton = this._getActiveButton();
        return (React.createElement("div", {"aria-selected": this.state.isOpen, className: "ToolbarSubmenu " + openedCssClass + " " + wideCssClass}, React.createElement(ToolbarButton_1.default, {className: 'ToolbarSubmenu-displayButton', fabricIconKey: activeButton.fabricIconKey, iconClassName: activeButton.iconClassName, key: 'displayButton', onClick: this._handleOpenSubmenu, isActive: this._hasExplicitActiveButton, label: activeButton.label, tabIndex: this.state.isOpen ? -1 : 0}), React.createElement("i", {className: 'ms-Icon ms-Icon--caretDown ToolbarSubmenu-caret'}), React.createElement(office_ui_fabric_react_1.FocusZone, {isCircularNavigation: true}, React.createElement("div", {className: 'ToolbarSubmenu-menuItems', ref: function (c) { return _this._menuElement = c; }, onKeyDown: this._handleKeyDown}, buttonElements))));
    };
    ToolbarSubmenu.prototype._bindButtonClickHandlers = function () {
        // Bind submenu button click handler to the exisiting one for each button
        // This makes sure the submenu closes after the action is done
        for (var _i = 0, _a = this.props.buttons; _i < _a.length; _i++) {
            var buttonProps = _a[_i];
            buttonProps.onClick = this._handleOnButtonClick.bind(this, buttonProps.onClick);
        }
    };
    /**
     * Return the props of the currently active button
     */
    ToolbarSubmenu.prototype._getActiveButton = function () {
        this._hasExplicitActiveButton = false;
        for (var _i = 0, _a = this.props.buttons; _i < _a.length; _i++) {
            var button = _a[_i];
            if (button.isActive) {
                this._hasExplicitActiveButton = true;
                return button;
            }
        }
        // No active button found, return the first one
        return this.props.buttons[0];
    };
    ToolbarSubmenu.prototype._handleKeyDown = function (e) {
        if (this.state.isOpen &&
            (e.key === 'ArrowRight' || e.key === 'ArrowLeft')) {
            this._isKeyboardNav = true;
            this._handleCloseSubmenu();
        }
    };
    ToolbarSubmenu.prototype._handleOpenSubmenu = function () {
        this._focusElement = document.activeElement;
        this.props.onOpen();
        this.setState({ isOpen: true });
    };
    ToolbarSubmenu.prototype._handleCloseSubmenu = function () {
        this.setState({ isOpen: false });
    };
    /**
     * @param onClickAction - The original onClick callback passed for the button
     *
     * Closes the submenu after calling the action of the button
     * All the button props must be updated to use this function as their onClick handler
     */
    ToolbarSubmenu.prototype._handleOnButtonClick = function (onClickCallback) {
        onClickCallback();
        // Close the submenu to the OnClick behavior of each button
        this._handleCloseSubmenu();
    };
    return ToolbarSubmenu;
}(React.Component));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ToolbarSubmenu;

//# sourceMappingURL=ToolbarSubmenu.js.map
