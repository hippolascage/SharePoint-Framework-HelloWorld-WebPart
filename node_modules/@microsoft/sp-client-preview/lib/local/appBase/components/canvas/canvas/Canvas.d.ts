import { DisplayMode, ServiceScope } from '@microsoft/sp-client-base';
import './Canvas.scss';
/**
 * SharePoint Client-side Applications can use the SharePoint Canvas to enable rich content authoring
 * as part of their experience. The SharePoint canvas provides Rich Text Editing capabilities, SharePoint
 * Client-side WebPart aggregation and hosting, and a beautiful railed design experience.
 *
 * @unreleased
 * @public
 */
export default class Canvas {
    private _container;
    private _coreComponent;
    private _store;
    /**
     * Construct a new instance of the Canvas.
     *
     * @param serviceScope - A context object that will provide dependencies needed by the canvas and
     *   any web parts that it loads.
     * @param container - The host DOM container for the Canvas. When render() is invoked the Canvas will
     *   render into 'container'.
     * @param mode - The initial DisplayMode of the Canvas.
     * @param serializedCanvas - Optional. Used to initialize a Canvas' state when render() is invoked. The
     *   string must have been created by a previous instance of the Canvas. If absent, an empty Canvas will
     *   be rendered. If present, the Canvas will rehydrate to represent the state of the Canvas when
     *   serialized.
     * @param handleCanvasChanged - Optional. When text is editied or canvas controls are added/removed this
     *   callback will be invoked. Web parts will also invoke this call back when there is interaction with
     *   the web part.
     */
    constructor(serviceScope: ServiceScope, container: HTMLElement, mode: DisplayMode, serializedCanvas?: string, handleCanvasChanged?: () => void);
    /**
     * Render the Canvas into its container DOM element. The Canvas will use the DisplayMode it was
     * constructed with.
     * If the Canvas has already been rendered once, the Canvas will clear its contents and then, if present,
     * use 'serializedCanvas' to rehydrate itself.
     *
     * @param serializedCanvas - Optional. The string must have been created by a previous instance of
     *   the Canvas. If absent, an empty Canvas will be rendered. If present, the Canvas will rehydrate
     *   to represent the state of the Canvas when serialized.
     */
    render(serializedCanvas?: string): void;
    /**
     * EXPERIMENTAL -- NOT FINAL
     *
     * Set the Canvas to the "state" of the JSON argument.
     */
    renderFromJSON(serializedCanvas?: string): void;
    /**
     * Get an array of the component IDs of web parts currently in the Canvas.
     *
     * @return Array of component IDs
     */
    componentIds: string[];
    /**
     * Re-render the Canvas in a new DisplayMode.
     *
     * @param newMode - The desired DisplayMode of the Canvas
     */
    displayMode: DisplayMode;
    /**
     * Unmount the Canvas from the container it was constructed with.
     */
    dispose(): void;
    /**
     * Serialize the current contents of the Canvas. The serialized string is in a HTML format understood by
     * SharePoint's Rich Text Field. The returned string can be crawled by search. Modifying the returned
     * string outside of the Canvas is not supported.
     *
     * @return Serialized representation of the Canvas at the time the method is invoked.
     */
    serialize(): string;
    /**
     * EXPERIMENTAL -- NOT FINAL
     *
     * serializeToJSON returns the order and type of controls in the Canvas when serialized. If a Canvas
     * is deserialized using the JSON, the Canvas will be effectively adding a "new" control. If the a web
     * part changes its data contract, this will probably break.
     *
     * @return The array representation of the order of controls in the Canvas when serialized.
     */
    serializeToJSON(): string;
    private _render();
}
