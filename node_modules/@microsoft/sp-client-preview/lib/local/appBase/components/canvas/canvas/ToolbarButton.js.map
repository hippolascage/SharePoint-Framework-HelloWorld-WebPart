{"version":3,"sources":["local/appBase/components/canvas/canvas/ToolbarButton.tsx"],"names":[],"mappings":"AAAA;;;;;;GAMG;;;;;;;AAEH,oBAAoB,0CAA0C,CAAC,CAAA;AAC/D,IAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAG/B,QAAO,sBAAsB,CAAC,CAAA;AAE9B,WAAY,WAAW;IACrB,iDAAM,CAAA;IACN,qDAAQ,CAAA;IACR,iDAAM,CAAA;AACR,CAAC,EAJW,mBAAW,KAAX,mBAAW,QAItB;AAJD,IAAY,WAAW,GAAX,mBAIX,CAAA;AA8BD;;GAEG;AACH;IAA2C,iCAA0C;IAenF;;OAEG;IACH,uBAAY,KAA0B;QACpC,kBAAM,KAAK,CAAC,CAAC;IACf,CAAC;IAED;;OAEG;IACI,8BAAM,GAAb;QACE,IAAM,eAAe,GAAW,SAAG,CACjC,eAAe,EACf,IAAI,CAAC,KAAK,CAAC,SAAS,EACpB;YACE,yBAAyB,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ;YAC9C,uBAAuB,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ;SAC7C,CACF,CAAC;QAEF,qDAAqD;QACrD,IAAM,YAAY,GAAW,IAAI,CAAC,KAAK,CAAC,aAAa;YACnD,sBAAoB,IAAI,CAAC,KAAK,CAAC,aAAe,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,IAAI,EAAE,CAAC,CAAC;QAEpF,MAAM,CAAC,CACL,qBAAC,MAAM,KACL,aAAa,GAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,IAAI,GAAG,SAAU,GACtD,UAAU,GAAE,IAAI,CAAC,KAAK,CAAC,KAAM,GAC7B,YAAY,GAAE,IAAI,CAAC,KAAK,CAAC,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,SAAU,EACvE,SAAS,EAAE,eAAgB,EAC3B,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,GAAI,EACpB,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,OAAQ,EAC5B,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAM,EACxB,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,QAAS,GAE9B,qBAAC,CAAC,IACA,SAAS,EAAE,YAAa,EACxB,EACA,IAAI,CAAC,KAAK,CAAC,KAAO,CACb,CACV,CAAC;IACJ,CAAC;IAvDD,kCAAkC;IAC3B,0BAAY,GAAwB;QACzC,uCAAuC;QACvC,GAAG,EAAE,SAAS;QACd,aAAa,EAAE,SAAS;QACxB,OAAO,EAAE,SAAS;QAElB,iCAAiC;QACjC,WAAW,EAAE,IAAI;QACjB,SAAS,EAAE,2BAA2B;QACtC,QAAQ,EAAE,KAAK;QACf,QAAQ,EAAE,KAAK;KAChB,CAAC;IA4CJ,oBAAC;AAAD,CAzDA,AAyDC,CAzD0C,KAAK,CAAC,SAAS,GAyDzD;AAzDD;+BAyDC,CAAA","file":"local/appBase/components/canvas/canvas/ToolbarButton.js","sourcesContent":["/**\r\n * @copyright Microsoft Corporation. All rights reserved.\r\n *\r\n * @file The button component used by toolbars on the Canvas.\r\n * It implements all common functionalities expected of a toolbar button.\r\n * It is used in the Canvas control toolbar and Rich Text Editor formatting bar.\r\n */\r\n\r\nimport { css } from 'office-ui-fabric-react/lib/utilities/css';\r\nimport * as React from 'react';\r\nimport { IToolbarButton } from './IToolbarButton';\r\n\r\nimport './ToolbarButton.scss';\r\n\r\nexport enum ButtonState {\r\n  Active,\r\n  Disabled,\r\n  Normal\r\n}\r\n\r\n/**\r\n * Interface of ToolbarButton.\r\n * The toolbar needs to provide the fields for its buttons\r\n */\r\nexport interface IToolbarButtonProps extends IToolbarButton {\r\n  /**\r\n   * Button onClick callback\r\n   */\r\n  onClick: () => void;\r\n\r\n  /**\r\n   * If the button should be rendered in disabled state\r\n   */\r\n  disabled?: boolean;\r\n\r\n  /**\r\n   * If the button should be rendered in active state\r\n   */\r\n  isActive?: boolean;\r\n\r\n  /**\r\n   * Unique string used to identify the button inside the toolbar\r\n   */\r\n  key?: string;\r\n\r\n  tabIndex?: number;\r\n}\r\n\r\n/**\r\n * @class The button component used by toolbars on the Canvas.\r\n */\r\nexport default class ToolbarButton extends React.Component<IToolbarButtonProps, void> {\r\n  /* tslint:disable:member-access */\r\n  static defaultProps: IToolbarButtonProps = {\r\n    // required fields default to undefined\r\n    key: undefined,\r\n    fabricIconKey: undefined,\r\n    onClick: undefined,\r\n\r\n    // optional fields default values\r\n    canBeActive: true,\r\n    className: 'CanvasControlToolbar-item',\r\n    disabled: false,\r\n    isActive: false\r\n  };\r\n\r\n  /**\r\n   * Constructs an instance of ToolbarButton\r\n   */\r\n  constructor(props: IToolbarButtonProps) {\r\n    super(props);\r\n  }\r\n\r\n  /**\r\n   * Renders ToolbarButton\r\n   */\r\n  public render(): React.ReactElement<IToolbarButtonProps> {\r\n    const buttonClassName: string = css(\r\n      'ToolbarButton',\r\n      this.props.className,\r\n      {\r\n        'ToolbarButton--disabled': this.props.disabled,\r\n        'ToolbarButton--active': this.props.isActive\r\n      }\r\n    );\r\n\r\n    // @todo 198107: Clean this up when mdl2 icons are in\r\n    const iconCssClass: string = this.props.fabricIconKey ?\r\n      `ms-Icon ms-Icon--${this.props.fabricIconKey}` : (this.props.iconClassName || '');\r\n\r\n    return (\r\n      <button\r\n        aria-disabled={this.props.disabled ? true : undefined}\r\n        aria-label={this.props.title}\r\n        aria-pressed={this.props.canBeActive ? this.props.isActive : undefined}\r\n        className={buttonClassName}\r\n        key={this.props.key}\r\n        onClick={this.props.onClick}\r\n        title={this.props.title}\r\n        tabIndex={this.props.tabIndex}\r\n      >\r\n        <i\r\n          className={iconCssClass}\r\n        />\r\n        { this.props.label }\r\n      </button>\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":"/src"}