{"version":3,"sources":["local/appBase/components/canvas/canvas/CanvasCore.tsx"],"names":[],"mappings":";;;;;;AAAA,IAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAC/B,+BAA4B,2BAA2B,CAAC,CAAA;AAGxD,0BAAsD,aAAa,CAAC,CAAA;AAEpE,8BAAmD,iBAAiB,CAAC,CAAA;AACrE,kCAA8B,qBAAqB,CAAC,CAAA;AAepD;IAAwC,8BAAmC;IAKzE,oBAAY,KAAmB;QAC7B,kBAAM,KAAK,CAAC,CAAC;IACf,CAAC;IAEM,oCAAe,GAAtB;QACE,MAAM,CAAC;YACL,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK;SACxB,CAAC;IACJ,CAAC;IAEM,2BAAM,GAAb;QACE,IAAM,IAAI,GAA0C,EAAE,CAAC;QAEvD,IAAI,CAAC,GAAW,CAAC,CAAC;QAClB,GAAG,CAAC,CAAoB,UAA0B,EAA1B,KAAA,IAAI,CAAC,KAAK,CAAC,eAAe,EAA1B,cAA0B,EAA1B,IAA0B,CAAC;YAA9C,IAAM,SAAS,SAAA;YAClB,SAAS,CAAC,QAAQ,GAAG,CAAC,CAAC;YACvB,IAAI,CAAC,IAAI,CACP,oBAAC,mBAAS,GACR,eAAe,EAAE,SAAU,EAC3B,WAAW,EAAE,SAAS,CAAC,WAAY,EACnC,GAAG,EAAE,SAAS,CAAC,GAAI,EACnB,QAAQ,EAAE,CAAC,EAAG,EACd,CACH,CAAC;SACH;QAED,IAAI,WAAmC,CAAC;QACxC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,KAAK,4BAAW,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YAC3F,WAAW,GAAG,oBAAC,2BAAiB,GAC9B,UAAU,EAAC,KAAK,EAChB,kBAAkB,EAAE,IAAI,CAAC,KAAK,CAAC,kBAAmB,EAClD,QAAQ,EAAE,CAAE,EACZ,CAAC;QACL,CAAC;QAED,MAAM,CAAC,CACL,qBAAC,GAAG,IAAC,SAAS,EAAC,QAAQ,GACrB,qBAAC,GAAG,IAAC,SAAS,EAAC,SAAS,GACpB,WAAa,EACb,IAAM,CACJ,EACN,oBAAC,uBAAa,qBAAK,IAAI,CAAC,KAAK,CAAC,YAAY,EAAG,CACzC,CACP,CAAC;IACJ,CAAC;IAhDa,4BAAiB,GAAkD;QAC/E,KAAK,EAAE,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,UAAU;KACzC,CAAC;IA+CJ,iBAAC;AAAD,CAlDA,AAkDC,CAlDuC,KAAK,CAAC,SAAS,GAkDtD;AAlDD;4BAkDC,CAAA","file":"local/appBase/components/canvas/canvas/CanvasCore.js","sourcesContent":["import * as React from 'react';\r\nimport { DisplayMode } from '@microsoft/sp-client-base';\r\n\r\nimport { ICanvasZoneProps } from './CanvasZone';\r\nimport { default as CanvasRow, ICanvasRowProps } from './CanvasRow';\r\nimport CanvasStore from './CanvasStore';\r\nimport CanvasToolbox, { ICanvasToolboxProps } from './CanvasToolbox';\r\nimport CanvasToolboxHint from './CanvasToolboxHint';\r\nimport ClientSideWebPartManager from '../../../../clientSideWebParts/core/ClientSideWebPartManager';\r\n\r\nexport interface ICanvasProps {\r\n  canvasZoneProps: ICanvasZoneProps[];\r\n  displayMode: DisplayMode;\r\n  onToolboxHintClick: (rowIndex: number, verticalPosition: number) => void;\r\n  store: CanvasStore;\r\n  toolboxProps: ICanvasToolboxProps;\r\n}\r\n\r\nexport interface ICanvasContext {\r\n  store: CanvasStore;\r\n}\r\n\r\nexport default class CanvasCore extends React.Component<ICanvasProps, void> {\r\n  public static childContextTypes: React.ValidationMap<ClientSideWebPartManager> = {\r\n    store: React.PropTypes.object.isRequired\r\n  };\r\n\r\n  constructor(props: ICanvasProps) {\r\n    super(props);\r\n  }\r\n\r\n  public getChildContext(): ICanvasContext {\r\n    return {\r\n      store: this.props.store\r\n    };\r\n  }\r\n\r\n  public render(): React.ReactElement<ICanvasProps> {\r\n    const rows: React.ReactElement<ICanvasRowProps>[] = [];\r\n\r\n    let i: number = 0;\r\n    for (const zoneProps of this.props.canvasZoneProps) {\r\n      zoneProps.rowIndex = i;\r\n      rows.push(\r\n        <CanvasRow\r\n          canvasZoneProps={zoneProps}\r\n          displayMode={zoneProps.displayMode}\r\n          key={zoneProps.key}\r\n          rowIndex={i++}\r\n        />\r\n      );\r\n    }\r\n\r\n    let toolboxHint: React.ReactElement<{}>;\r\n    if (this.props.displayMode === DisplayMode.Edit && this.props.canvasZoneProps.length === 0) {\r\n      toolboxHint = <CanvasToolboxHint\r\n        attachedTo='row'\r\n        onToolboxHintClick={this.props.onToolboxHintClick}\r\n        rowIndex={0}\r\n      />;\r\n    }\r\n\r\n    return (\r\n      <div className='Canvas'>\r\n        <div className='ms-Grid'>\r\n          { toolboxHint }\r\n          { rows }\r\n        </div>\r\n        <CanvasToolbox {...this.props.toolboxProps}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":"/src"}