"use strict";
var sp_client_base_1 = require('@microsoft/sp-client-base');
var CanvasControlType_1 = require('./CanvasControlType');
var CanvasWebPartHost_1 = require('./CanvasWebPartHost');
var ClientSideWebPartManager_1 = require('../../../../clientSideWebParts/core/ClientSideWebPartManager');
var CanvasStore = (function () {
    function CanvasStore(serviceScope, render, mode, serializedCanvas, handleCanvasChanged) {
        sp_client_base_1.Validate.isNotNullOrUndefined(serviceScope, 'serviceScope');
        sp_client_base_1.Validate.isNotNullOrUndefined(render, 'render');
        sp_client_base_1.Validate.isNotNullOrUndefined(mode, 'mode');
        this.addControl = this.addControl.bind(this);
        this.closeToolbox = this.closeToolbox.bind(this);
        this.deleteControl = this.deleteControl.bind(this);
        this.openToolbox = this.openToolbox.bind(this);
        this.deserialize = this.deserialize.bind(this);
        this.deserializeFromJSON = this.deserializeFromJSON.bind(this);
        this._render = render;
        this._handleCanvasChanged = handleCanvasChanged;
        this._zones = {};
        this._componentIds = [];
        this._displayMode = mode;
        this._webPartManager = new ClientSideWebPartManager_1.default(new CanvasWebPartHost_1.default(serviceScope, handleCanvasChanged));
        this.deserialize(serializedCanvas);
        this._serviceScope = serviceScope;
        this._toolboxProps = {
            isOpen: false,
            onToolboxItemClick: this.addControl,
            rowIndex: undefined,
            verticalPosition: undefined
        };
    }
    Object.defineProperty(CanvasStore.prototype, "canvasDisplayMode", {
        get: function () {
            return this._displayMode;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CanvasStore.prototype, "componentIds", {
        get: function () {
            return this._componentIds;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CanvasStore.prototype, "controls", {
        get: function () {
            return this._canvasZonesProps;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CanvasStore.prototype, "serviceScope", {
        get: function () {
            return this._serviceScope;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CanvasStore.prototype, "toolboxProps", {
        get: function () {
            return this._toolboxProps;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CanvasStore.prototype, "webPartManager", {
        get: function () {
            return this._webPartManager;
        },
        enumerable: true,
        configurable: true
    });
    CanvasStore.prototype.addControl = function (controlType, itemProps, rowIndex) {
        this._addControl(controlType, itemProps, rowIndex);
        this._render();
        this._notifyChanged();
    };
    CanvasStore.prototype.closeToolbox = function () {
        this._toolboxProps.isOpen = false;
        document.removeEventListener('click', this.closeToolbox);
        this._render();
    };
    CanvasStore.prototype.deleteControl = function (rowIndex) {
        this._canvasZonesProps.splice(rowIndex, 1);
        this._componentIds.splice(rowIndex, 1);
        this._render();
        this._notifyChanged();
    };
    CanvasStore.prototype.openToolbox = function (rowIndex, verticalPosition) {
        if (this._toolboxProps.isOpen) {
            this.closeToolbox();
        }
        this._toolboxProps.isOpen = true;
        this._toolboxProps.rowIndex = rowIndex;
        this._toolboxProps.verticalPosition = verticalPosition;
        document.addEventListener('click', this.closeToolbox);
        this._render();
    };
    CanvasStore.prototype.serialize = function () {
        var body = document.createElement('div');
        var controlRow = document.createElement('div');
        controlRow.setAttribute('data-sp-canvascontrol', '');
        for (var _i = 0, _a = this._canvasZonesProps; _i < _a.length; _i++) {
            var zone = _a[_i];
            var row = controlRow.cloneNode();
            var zoneCopy = JSON.parse(JSON.stringify(zone));
            var serialization = this._zones[zone.key.toString()].serialize();
            if (zoneCopy.childControlProps.controlType === CanvasControlType_1.default.RTE) {
                row.innerHTML = serialization.innerHTML;
            }
            zoneCopy.childControlProps = undefined;
            row.setAttribute('data-sp-config', JSON.stringify(zoneCopy));
            row.setAttribute('data-sp-controldata', encodeURI(JSON.stringify(serialization)));
            body.appendChild(row);
        }
        var wrapper = document.createElement('div');
        wrapper.appendChild(body);
        return wrapper.innerHTML;
    };
    CanvasStore.prototype.serializeToJSON = function () {
        return JSON.stringify(this._canvasZonesProps);
    };
    CanvasStore.prototype.setDisplayMode = function (newMode) {
        this._displayMode = newMode;
        for (var _i = 0, _a = this._canvasZonesProps; _i < _a.length; _i++) {
            var zone = _a[_i];
            zone.displayMode = newMode;
            this._zones[zone.key.toString()].setDisplayMode(newMode);
        }
        this._render();
    };
    CanvasStore.prototype.deserialize = function (serializedCanvas) {
        this._canvasZonesProps = [];
        if (serializedCanvas) {
            var wrapper = document.createElement('div');
            wrapper.innerHTML = serializedCanvas;
            var rows = wrapper.querySelectorAll('[data-sp-canvascontrol]');
            var numRows = rows.length;
            for (var i = 0; i < numRows; ++i) {
                var row = rows[i];
                var childControlData = JSON.parse(decodeURI(row.getAttribute('data-sp-controldata')));
                childControlData.displayMode = this._displayMode;
                this._addControl(childControlData.controlType, childControlData, i);
            }
        }
    };
    CanvasStore.prototype.deserializeFromJSON = function (serializedCanvas) {
        var rows = JSON.parse(serializedCanvas);
        if (rows.length) {
            for (var i = 0; i < rows.length; ++i) {
                this._addControl(rows[i].childControlProps.controlType, rows[i].childControlProps, i);
            }
        }
        else {
            this._canvasZonesProps = [];
        }
    };
    CanvasStore.prototype._addControl = function (controlType, itemProps, rowIndex) {
        var _this = this;
        var key = Math.random();
        itemProps.controlType = controlType;
        itemProps.displayMode = this._displayMode;
        itemProps.onChange = this._handleCanvasChanged;
        if (controlType === CanvasControlType_1.default.WebPartZone) {
            /* tslint:disable:no-any */
            var webPartManifest = itemProps.webPartManifest;
            /* tslint:enable:no-any */
            if (!webPartManifest) {
                /* tslint:disable:no-any */
                var manifests = this._webPartManager.getWebParts();
                /* tslint:enable:no-any */
                if (manifests) {
                    for (var _i = 0, manifests_1 = manifests; _i < manifests_1.length; _i++) {
                        var manifest = manifests_1[_i];
                        if (itemProps.webPartId === manifest.id) {
                            itemProps.webPartManifest = webPartManifest = manifest;
                            break;
                        }
                    }
                }
            }
            if (webPartManifest) {
                this._componentIds.splice(rowIndex, 0, webPartManifest.id);
            }
        }
        this._canvasZonesProps.splice(rowIndex, 0, {
            key: key,
            childControlProps: itemProps,
            displayMode: this._displayMode,
            onDeleteButtonClick: this.deleteControl,
            onToolboxHintClick: this.openToolbox,
            ref: function (ref) { return _this._zones[key.toString()] = ref; },
            rowIndex: rowIndex
        });
    };
    CanvasStore.prototype._notifyChanged = function () {
        if (this._handleCanvasChanged) {
            this._handleCanvasChanged();
        }
    };
    return CanvasStore;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = CanvasStore;

//# sourceMappingURL=CanvasStore.js.map
