{"version":3,"sources":["local/appBase/components/canvas/canvas/CanvasToolboxHint.tsx"],"names":[],"mappings":";;;;;;AAAA,IAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAC/B,IAAY,QAAQ,WAAM,WAAW,CAAC,CAAA;AAEtC,QAAO,yBAAyB,CAAC,CAAA;AASjC;IAA+C,qCAA4C;IAGzF,2BAAY,KAA8B;QACxC,kBAAM,KAAK,CAAC,CAAC;QACb,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACnD,CAAC;IAEM,6CAAiB,GAAxB;QACE,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAgB,CAAC;IAC5D,CAAC;IAEM,kCAAM,GAAb;QACE,IAAM,gBAAgB,GAAW,qBAAqB,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC;QAE/E,IAAM,IAAI,GAAgB,CACxB,qBAAC,MAAM,KACN,UAAU,GAAE,IAAI,CAAC,KAAK,CAAC,SAAU,EACjC,SAAS,EAAE,wBAAsB,gBAAmB,EACpD,OAAO,EAAE,IAAI,CAAC,YAAa,GAE1B,qBAAC,GAAG,IAAC,SAAS,EAAC,8BAA8B,GAC3C,qBAAC,CAAC,IAAC,SAAS,EAAC,uBAAuB,EAAE,CAClC,CACC,CACV,CAAC;QAEF,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,KAAK,KAAK,GAAG,IAAI,GAAG,CAC9C,qBAAC,GAAG,IAAC,SAAS,EAAC,aAAa,GAC1B,qBAAC,GAAG,IAAC,SAAS,EAAC,uBAAuB,GAClC,IAAM,CACJ,CACF,CACP,CAAC;IACJ,CAAC;IAEO,wCAAY,GAApB;QACE,IAAM,gBAAgB,GAAW,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,aAAa,CAAC,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC;QAC/G,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,gBAAgB,CAAC,CAAC;IACvE,CAAC;IACH,wBAAC;AAAD,CAxCA,AAwCC,CAxC8C,KAAK,CAAC,SAAS,GAwC7D;AAxCD;mCAwCC,CAAA","file":"local/appBase/components/canvas/canvas/CanvasToolboxHint.js","sourcesContent":["import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\n\r\nimport './CanvasToolboxHint.css';\r\n\r\nexport interface ICanvasToolboxHintProps {\r\n  attachedTo: 'bottom' | 'row' | 'top';\r\n  onToolboxHintClick: (rowIndex: number, verticalPosition: number) => void;\r\n  rowIndex: number;\r\n  ariaLabel?: string;\r\n}\r\n\r\nexport default class CanvasToolboxHint extends React.Component<ICanvasToolboxHintProps, {}> {\r\n  private _domNode: HTMLElement;\r\n\r\n  constructor(props: ICanvasToolboxHintProps) {\r\n    super(props);\r\n    this._handleClick = this._handleClick.bind(this);\r\n  }\r\n\r\n  public componentDidMount(): void {\r\n    this._domNode = ReactDOM.findDOMNode(this) as HTMLElement;\r\n  }\r\n\r\n  public render(): React.ReactElement<ICanvasToolboxHintProps> {\r\n    const attachedCssClass: string = 'CanvasToolboxHint--' + this.props.attachedTo;\r\n\r\n    const hint: JSX.Element = (\r\n      <button\r\n       aria-label={this.props.ariaLabel}\r\n       className={`CanvasToolboxHint  ${attachedCssClass}`}\r\n       onClick={this._handleClick}\r\n      >\r\n        <div className='CanvasToolboxHint-plusButton'>\r\n          <i className='ms-Icon ms-Icon--plus'/>\r\n        </div>\r\n      </button>\r\n    );\r\n\r\n    return this.props.attachedTo !== 'row' ? hint : (\r\n      <div className='ms-Grid-row'>\r\n        <div className='ms-Grid-col ms-u-sm12'>\r\n          { hint }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _handleClick(): void {\r\n    const verticalPosition: number = this._domNode.parentElement.parentElement.offsetTop + this._domNode.offsetTop;\r\n    this.props.onToolboxHintClick(this.props.rowIndex, verticalPosition);\r\n  }\r\n}\r\n"],"sourceRoot":"/src"}