import { DisplayMode, ServiceScope } from '@microsoft/sp-client-base';
import { ICanvasZoneProps } from './CanvasZone';
import CanvasControlType from './CanvasControlType';
import { ICanvasToolboxProps } from './CanvasToolbox';
import ClientSideWebPartManager from '../../../../clientSideWebParts/core/ClientSideWebPartManager';
import ICanvasControlProps from './ISerializedCanvasControl';
export default class CanvasStore {
    private _canvasZonesProps;
    private _componentIds;
    private _displayMode;
    private _handleCanvasChanged;
    private _render;
    private _serviceScope;
    private _toolboxProps;
    private _webPartManager;
    private _zones;
    constructor(serviceScope: ServiceScope, render: () => void, mode: DisplayMode, serializedCanvas?: string, handleCanvasChanged?: () => void);
    canvasDisplayMode: DisplayMode;
    componentIds: string[];
    controls: ICanvasZoneProps[];
    serviceScope: ServiceScope;
    toolboxProps: ICanvasToolboxProps;
    webPartManager: ClientSideWebPartManager;
    addControl(controlType: CanvasControlType, itemProps: ICanvasControlProps, rowIndex: number): void;
    closeToolbox(): void;
    deleteControl(rowIndex: number): void;
    openToolbox(rowIndex: number, verticalPosition: number): void;
    serialize(): string;
    serializeToJSON(): string;
    setDisplayMode(newMode: DisplayMode): void;
    deserialize(serializedCanvas: string): void;
    deserializeFromJSON(serializedCanvas: string): void;
    private _addControl(controlType, itemProps, rowIndex);
    private _notifyChanged();
}
