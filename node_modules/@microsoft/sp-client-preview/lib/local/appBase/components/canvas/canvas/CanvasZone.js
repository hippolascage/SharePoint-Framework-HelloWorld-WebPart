"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var React = require('react');
var sp_client_base_1 = require('@microsoft/sp-client-base');
var CanvasControlFactory_1 = require('./CanvasControlFactory');
var CanvasControlType_1 = require('./CanvasControlType');
var CanvasControlToolbar_1 = require('./CanvasControlToolbar');
var CanvasToolboxHint_1 = require('./CanvasToolboxHint');
require('./CanvasZone.scss');
var CanvasStrings_resx_1 = require('../../sp-canvas/loc/CanvasStrings.resx');
var CanvasZone = (function (_super) {
    __extends(CanvasZone, _super);
    function CanvasZone(props) {
        var _this = this;
        _super.call(this, props);
        this._handleConfigureButtonClick = this._handleConfigureButtonClick.bind(this);
        this._handleDeleteButtonClick = this._handleDeleteButtonClick.bind(this);
        this._css = ['ms-Grid-col', 'ms-u-sm12'];
        if (this.props.displayMode === sp_client_base_1.DisplayMode.Edit) {
            this._css.push('Authoring-element');
        }
        var tempOnChangeCallback = this.props.childControlProps.onChange;
        this._childControlProps = JSON.parse(JSON.stringify(this.props.childControlProps));
        this._childControlProps.onChange = tempOnChangeCallback;
        this._childControlProps.ref = function (ref) {
            _this._childControl = ref;
        };
    }
    CanvasZone.prototype.render = function () {
        var toolbar;
        var topHint;
        var bottomHint;
        var onConfigureButtonClick = this._childControlProps.controlType === CanvasControlType_1.default.WebPartZone ?
            this._handleConfigureButtonClick : undefined;
        var toolbarProps = {
            onConfigureButtonClick: onConfigureButtonClick,
            onDeleteButtonClick: this._handleDeleteButtonClick
        };
        if (this.props.displayMode === sp_client_base_1.DisplayMode.Edit) {
            toolbar = (React.createElement(CanvasControlToolbar_1.default, React.__spread({}, toolbarProps)));
            topHint = (React.createElement(CanvasToolboxHint_1.default, {attachedTo: 'top', onToolboxHintClick: this.props.onToolboxHintClick, rowIndex: this.props.rowIndex, ariaLabel: CanvasStrings_resx_1.default.ToolboxHintTitle}));
            bottomHint = (React.createElement(CanvasToolboxHint_1.default, {attachedTo: 'bottom', onToolboxHintClick: this.props.onToolboxHintClick, rowIndex: this.props.rowIndex + 1, ariaLabel: CanvasStrings_resx_1.default.ToolboxHintTitle}));
        }
        var displayModeCssClass = this.props.displayMode === sp_client_base_1.DisplayMode.Edit ? 'CanvasZone--edit' : '';
        return (React.createElement("div", {className: 'ms-Grid-col ms-u-sm12'}, React.createElement("div", {className: "CanvasZone " + displayModeCssClass}, topHint, CanvasControlFactory_1.default.CreateCanvasControl(this._childControlProps.controlType, this._childControlProps), toolbar, bottomHint)));
    };
    CanvasZone.prototype.serialize = function () {
        return this._childControl.serialize();
    };
    CanvasZone.prototype.setDisplayMode = function (newMode) {
        this._childControl.setDisplayMode(newMode);
    };
    CanvasZone.prototype._handleConfigureButtonClick = function () {
        this._childControl.handleConfigureButtonClicked(true);
    };
    CanvasZone.prototype._handleDeleteButtonClick = function () {
        // WebPartZone will use the web part manager to call onWebPartDelete
        if (this._childControlProps.controlType === CanvasControlType_1.default.WebPartZone) {
            this._childControl.handleDeleteButtonClicked();
        }
        this.props.onDeleteButtonClick(this.props.rowIndex);
    };
    return CanvasZone;
}(React.Component));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = CanvasZone;

//# sourceMappingURL=CanvasZone.js.map
