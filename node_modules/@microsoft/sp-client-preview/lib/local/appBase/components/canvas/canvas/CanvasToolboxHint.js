"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var React = require('react');
var ReactDOM = require('react-dom');
require('./CanvasToolboxHint.css');
var CanvasToolboxHint = (function (_super) {
    __extends(CanvasToolboxHint, _super);
    function CanvasToolboxHint(props) {
        _super.call(this, props);
        this._handleClick = this._handleClick.bind(this);
    }
    CanvasToolboxHint.prototype.componentDidMount = function () {
        this._domNode = ReactDOM.findDOMNode(this);
    };
    CanvasToolboxHint.prototype.render = function () {
        var attachedCssClass = 'CanvasToolboxHint--' + this.props.attachedTo;
        var hint = (React.createElement("button", {"aria-label": this.props.ariaLabel, className: "CanvasToolboxHint  " + attachedCssClass, onClick: this._handleClick}, React.createElement("div", {className: 'CanvasToolboxHint-plusButton'}, React.createElement("i", {className: 'ms-Icon ms-Icon--plus'}))));
        return this.props.attachedTo !== 'row' ? hint : (React.createElement("div", {className: 'ms-Grid-row'}, React.createElement("div", {className: 'ms-Grid-col ms-u-sm12'}, hint)));
    };
    CanvasToolboxHint.prototype._handleClick = function () {
        var verticalPosition = this._domNode.parentElement.parentElement.offsetTop + this._domNode.offsetTop;
        this.props.onToolboxHintClick(this.props.rowIndex, verticalPosition);
    };
    return CanvasToolboxHint;
}(React.Component));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = CanvasToolboxHint;

//# sourceMappingURL=CanvasToolboxHint.js.map
