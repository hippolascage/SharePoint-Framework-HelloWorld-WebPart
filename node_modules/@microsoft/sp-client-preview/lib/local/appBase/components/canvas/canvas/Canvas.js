/**
 * @copyright (c) Microsoft Corporation. All rights reserved.
 */
"use strict";
var React = require('react');
var reactDOM = require('react-dom');
var CanvasCore_1 = require('./CanvasCore');
var CanvasStore_1 = require('./CanvasStore');
require('./Canvas.scss');
/**
 * SharePoint Client-side Applications can use the SharePoint Canvas to enable rich content authoring
 * as part of their experience. The SharePoint canvas provides Rich Text Editing capabilities, SharePoint
 * Client-side WebPart aggregation and hosting, and a beautiful railed design experience.
 *
 * @unreleased
 * @public
 */
var Canvas = (function () {
    /**
     * Construct a new instance of the Canvas.
     *
     * @param serviceScope - A context object that will provide dependencies needed by the canvas and
     *   any web parts that it loads.
     * @param container - The host DOM container for the Canvas. When render() is invoked the Canvas will
     *   render into 'container'.
     * @param mode - The initial DisplayMode of the Canvas.
     * @param serializedCanvas - Optional. Used to initialize a Canvas' state when render() is invoked. The
     *   string must have been created by a previous instance of the Canvas. If absent, an empty Canvas will
     *   be rendered. If present, the Canvas will rehydrate to represent the state of the Canvas when
     *   serialized.
     * @param handleCanvasChanged - Optional. When text is editied or canvas controls are added/removed this
     *   callback will be invoked. Web parts will also invoke this call back when there is interaction with
     *   the web part.
     */
    function Canvas(serviceScope, container, mode, serializedCanvas, handleCanvasChanged) {
        this._render = this._render.bind(this);
        this._container = container;
        this._store = new CanvasStore_1.default(serviceScope, this._render, mode, serializedCanvas, handleCanvasChanged);
    }
    /**
     * Render the Canvas into its container DOM element. The Canvas will use the DisplayMode it was
     * constructed with.
     * If the Canvas has already been rendered once, the Canvas will clear its contents and then, if present,
     * use 'serializedCanvas' to rehydrate itself.
     *
     * @param serializedCanvas - Optional. The string must have been created by a previous instance of
     *   the Canvas. If absent, an empty Canvas will be rendered. If present, the Canvas will rehydrate
     *   to represent the state of the Canvas when serialized.
     */
    Canvas.prototype.render = function (serializedCanvas) {
        this._store.deserialize(serializedCanvas);
        this._render();
    };
    /**
     * EXPERIMENTAL -- NOT FINAL
     *
     * Set the Canvas to the "state" of the JSON argument.
     */
    Canvas.prototype.renderFromJSON = function (serializedCanvas) {
        if (serializedCanvas) {
            this._store.deserializeFromJSON(serializedCanvas);
        }
        this._render();
    };
    Object.defineProperty(Canvas.prototype, "componentIds", {
        /**
         * Get an array of the component IDs of web parts currently in the Canvas.
         *
         * @return Array of component IDs
         */
        get: function () {
            return this._store.componentIds;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Canvas.prototype, "displayMode", {
        /**
         * Re-render the Canvas in a new DisplayMode.
         *
         * @param newMode - The desired DisplayMode of the Canvas
         */
        set: function (newMode) {
            this._store.setDisplayMode(newMode);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Unmount the Canvas from the container it was constructed with.
     */
    Canvas.prototype.dispose = function () {
        reactDOM.unmountComponentAtNode(this._container);
    };
    /**
     * Serialize the current contents of the Canvas. The serialized string is in a HTML format understood by
     * SharePoint's Rich Text Field. The returned string can be crawled by search. Modifying the returned
     * string outside of the Canvas is not supported.
     *
     * @return Serialized representation of the Canvas at the time the method is invoked.
     */
    Canvas.prototype.serialize = function () {
        return this._store.serialize();
    };
    /**
     * EXPERIMENTAL -- NOT FINAL
     *
     * serializeToJSON returns the order and type of controls in the Canvas when serialized. If a Canvas
     * is deserialized using the JSON, the Canvas will be effectively adding a "new" control. If the a web
     * part changes its data contract, this will probably break.
     *
     * @return The array representation of the order of controls in the Canvas when serialized.
     */
    Canvas.prototype.serializeToJSON = function () {
        return this._store.serializeToJSON();
    };
    Canvas.prototype._render = function () {
        var props = {
            canvasZoneProps: this._store.controls,
            displayMode: this._store.canvasDisplayMode,
            onToolboxHintClick: this._store.openToolbox,
            store: this._store,
            toolboxProps: this._store.toolboxProps
        };
        var coreElement = React.createElement(CanvasCore_1.default, props);
        this._coreComponent = reactDOM.render(coreElement, this._container);
    };
    return Canvas;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Canvas;

//# sourceMappingURL=Canvas.js.map
