/**
 * @file WebPartZone.ts
 * @copyright (c) Microsoft Corporation. All rights reserved.
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var React = require('react');
var sp_client_base_1 = require('@microsoft/sp-client-base');
var PropertyPaneDefinitions_1 = require('../../../../common/webParts/PropertyPaneDefinitions');
var CanvasA11y_1 = require('../../sp-canvas/a11y/CanvasA11y');
var WebPartZone = (function (_super) {
    __extends(WebPartZone, _super);
    function WebPartZone(props, context) {
        _super.call(this, props, context);
        this._webPartManager = this.context.store.webPartManager;
        this.handleConfigureButtonClicked = this.handleConfigureButtonClicked.bind(this);
        this.state = {
            displayMode: this.props.displayMode
        };
    }
    // @todo This is a workaround for deserialization of a Canvas without the manifests.
    // We need to think about a longer term solution.
    WebPartZone.prototype.componentDidMount = function () {
        var _this = this;
        var context = {
            domElement: this._webPartDiv,
            instanceId: this.props.id,
            manifest: this.props.webPartManifest,
            displayMode: this.props.displayMode,
            webPartData: this.props.webPartData
        };
        this._loadWebPartPromise = this._webPartManager.loadWebPart(context).then(function () {
            if (_this.state.displayMode === sp_client_base_1.DisplayMode.Edit && _this.props.id === _this.context.store.selectedControlId) {
                _this.context.store.webPartManager.configureStart(_this.props.id);
            }
            // @todo: Currently loadWebPart() swallows exceptions
            _this._isLoaded = true;
        });
    };
    WebPartZone.prototype.shouldComponentUpdate = function (newProps, newState) {
        // Defer all updating to the web part manager and the web part
        return false;
    };
    WebPartZone.prototype.render = function () {
        var _this = this;
        return (React.createElement("div", {ref: function (htmlElement) { return _this._webPartDiv = htmlElement; }, style: { width: '100%' }}));
    };
    Object.defineProperty(WebPartZone.prototype, "instanceId", {
        get: function () {
            return this.props.id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WebPartZone.prototype, "isFocusable", {
        get: function () {
            return !!CanvasA11y_1.getFirstFocusableChild(this._webPartDiv);
        },
        enumerable: true,
        configurable: true
    });
    WebPartZone.prototype.focus = function () {
        if (!this.context.store.a11yManager.navigateInside(this._webPartDiv)) {
            this.context.store.a11yManager.navigateOutOf(this._webPartDiv);
        }
    };
    WebPartZone.prototype.handleConfigureButtonClicked = function (shouldToggle) {
        /**
         * Using _isLoaded flag instead of the promise because we want a click on the configure button to
         * no-op. If we had used a promise, the web part selection could have shifted by the time the
         * loading is complete and thus incorrectly change the context of the property pane. A no-op makes
         * sense because the web part would have no UI rendered yet, and the framework indicates the web part
         * is still in the process of loading.
         */
        if (this._isLoaded) {
            this._webPartManager.configureStart(this.props.id, shouldToggle ? PropertyPaneDefinitions_1.PropertyPaneState.Toggle : PropertyPaneDefinitions_1.PropertyPaneState.Open);
        }
    };
    WebPartZone.prototype.handleDeleteButtonClicked = function () {
        var _this = this;
        /**
         * If a web part was still in the process of loading and then the zone is deleted from the Canvas,
         * we still want to ensure the web part manager cleans up its references and disposes the web part.
         */
        this._loadWebPartPromise.then(function () { return _this._webPartManager.onWebPartDelete(_this.props.id); });
    };
    WebPartZone.prototype.serialize = function () {
        var tempArray = [this.props.id];
        /**
         * If the web part has not loaded, we can safely return the web part data we are trying to load with because
         * the data could not have been modified.
         */
        var webPartData = this._isLoaded ? this._webPartManager.serialize(tempArray).get(this.props.id) : this.props.webPartData;
        var serialization = JSON.parse(JSON.stringify(this.props));
        serialization.webPartManifest = undefined;
        serialization.webPartData = webPartData;
        return serialization;
    };
    WebPartZone.prototype.setDisplayMode = function (newDisplayMode) {
        var _this = this;
        this.setState({
            displayMode: newDisplayMode
        });
        /**
         * The Canvas zone will switch mode, and then wait for the web part to fully render before asking
         * the web part manager to switch the mode of the web part.
         */
        this._loadWebPartPromise.then(function () { return _this._webPartManager.setDisplayMode(newDisplayMode, _this.props.id); });
    };
    WebPartZone.contextTypes = {
        store: React.PropTypes.object.isRequired
    };
    WebPartZone.webPartManagerInitialized = false;
    return WebPartZone;
}(React.Component));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = WebPartZone;

//# sourceMappingURL=WebPartZone.js.map
