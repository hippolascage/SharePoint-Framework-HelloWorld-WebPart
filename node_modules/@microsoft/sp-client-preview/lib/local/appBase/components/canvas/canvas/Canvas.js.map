{"version":3,"sources":["local/appBase/components/canvas/canvas/Canvas.ts"],"names":[],"mappings":"AAAA;;GAEG;;AAEH,IAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAC/B,IAAY,QAAQ,WAAM,WAAW,CAAC,CAAA;AAGtC,2BAAyC,cAAc,CAAC,CAAA;AACxD,4BAAwB,eAAe,CAAC,CAAA;AAExC,QAAO,eAAe,CAAC,CAAA;AAEvB;;;;;;;GAOG;AACH;IAKE;;;;;;;;;;;;;;;OAeG;IACH,gBACE,YAA0B,EAC1B,SAAsB,EACtB,IAAiB,EACjB,gBAAyB,EACzB,mBAAgC;QAEhC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvC,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,IAAI,CAAC,MAAM,GAAG,IAAI,qBAAW,CAAC,YAAY,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,gBAAgB,EAAE,mBAAmB,CAAC,CAAC;IACzG,CAAC;IAED;;;;;;;;;OASG;IACI,uBAAM,GAAb,UAAc,gBAAyB;QACrC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC;QAC1C,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IAED;;;;OAIG;IACI,+BAAc,GAArB,UAAsB,gBAAyB;QAC7C,EAAE,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC;YACrB,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,CAAC;QACpD,CAAC;QAED,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IAOD,sBAAW,gCAAY;QALvB;;;;WAIG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC;QAClC,CAAC;;;OAAA;IAOD,sBAAW,+BAAW;QALtB;;;;WAIG;aACH,UAAuB,OAAoB;YACzC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QACtC,CAAC;;;OAAA;IAED;;OAEG;IACI,wBAAO,GAAd;QACE,QAAQ,CAAC,sBAAsB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACnD,CAAC;IAED;;;;;;OAMG;IACI,0BAAS,GAAhB;QACE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC;IACjC,CAAC;IAED;;;;;;;;OAQG;IACI,gCAAe,GAAtB;QACE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,eAAe,EAAE,CAAC;IACvC,CAAC;IAEO,wBAAO,GAAf;QACE,IAAM,KAAK,GAAiB;YAC1B,eAAe,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ;YACrC,WAAW,EAAE,IAAI,CAAC,MAAM,CAAC,iBAAiB;YAC1C,kBAAkB,EAAE,IAAI,CAAC,MAAM,CAAC,WAAW;YAC3C,KAAK,EAAE,IAAI,CAAC,MAAM;YAClB,YAAY,EAAE,IAAI,CAAC,MAAM,CAAC,YAAY;SACvC,CAAC;QACF,IAAM,WAAW,GAAqC,KAAK,CAAC,aAAa,CAAC,oBAAU,EAAE,KAAK,CAAC,CAAC;QAC7F,IAAI,CAAC,cAAc,GAAG,QAAQ,CAAC,MAAM,CAAC,WAAW,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;IACtE,CAAC;IACH,aAAC;AAAD,CAzHA,AAyHC,IAAA;AAzHD;wBAyHC,CAAA","file":"local/appBase/components/canvas/canvas/Canvas.js","sourcesContent":["/**\r\n * @copyright (c) Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nimport * as React from 'react';\r\nimport * as reactDOM from 'react-dom';\r\nimport { DisplayMode, ServiceScope } from '@microsoft/sp-client-base';\r\n\r\nimport CanvasCore, { ICanvasProps } from './CanvasCore';\r\nimport CanvasStore from './CanvasStore';\r\n\r\nimport './Canvas.scss';\r\n\r\n/**\r\n * SharePoint Client-side Applications can use the SharePoint Canvas to enable rich content authoring\r\n * as part of their experience. The SharePoint canvas provides Rich Text Editing capabilities, SharePoint\r\n * Client-side WebPart aggregation and hosting, and a beautiful railed design experience.\r\n *\r\n * @unreleased\r\n * @public\r\n */\r\nexport default class Canvas {\r\n  private _container: HTMLElement;\r\n  private _coreComponent: React.Component<ICanvasProps, {}>;\r\n  private _store: CanvasStore;\r\n\r\n  /**\r\n   * Construct a new instance of the Canvas.\r\n   *\r\n   * @param serviceScope - A context object that will provide dependencies needed by the canvas and\r\n   *   any web parts that it loads.\r\n   * @param container - The host DOM container for the Canvas. When render() is invoked the Canvas will\r\n   *   render into 'container'.\r\n   * @param mode - The initial DisplayMode of the Canvas.\r\n   * @param serializedCanvas - Optional. Used to initialize a Canvas' state when render() is invoked. The\r\n   *   string must have been created by a previous instance of the Canvas. If absent, an empty Canvas will\r\n   *   be rendered. If present, the Canvas will rehydrate to represent the state of the Canvas when\r\n   *   serialized.\r\n   * @param handleCanvasChanged - Optional. When text is editied or canvas controls are added/removed this\r\n   *   callback will be invoked. Web parts will also invoke this call back when there is interaction with\r\n   *   the web part.\r\n   */\r\n  constructor(\r\n    serviceScope: ServiceScope,\r\n    container: HTMLElement,\r\n    mode: DisplayMode,\r\n    serializedCanvas?: string,\r\n    handleCanvasChanged?: () => void\r\n  ) {\r\n    this._render = this._render.bind(this);\r\n    this._container = container;\r\n    this._store = new CanvasStore(serviceScope, this._render, mode, serializedCanvas, handleCanvasChanged);\r\n  }\r\n\r\n  /**\r\n   * Render the Canvas into its container DOM element. The Canvas will use the DisplayMode it was\r\n   * constructed with.\r\n   * If the Canvas has already been rendered once, the Canvas will clear its contents and then, if present,\r\n   * use 'serializedCanvas' to rehydrate itself.\r\n   *\r\n   * @param serializedCanvas - Optional. The string must have been created by a previous instance of\r\n   *   the Canvas. If absent, an empty Canvas will be rendered. If present, the Canvas will rehydrate\r\n   *   to represent the state of the Canvas when serialized.\r\n   */\r\n  public render(serializedCanvas?: string): void {\r\n    this._store.deserialize(serializedCanvas);\r\n    this._render();\r\n  }\r\n\r\n  /**\r\n   * EXPERIMENTAL -- NOT FINAL\r\n   *\r\n   * Set the Canvas to the \"state\" of the JSON argument.\r\n   */\r\n  public renderFromJSON(serializedCanvas?: string): void {\r\n    if (serializedCanvas) {\r\n      this._store.deserializeFromJSON(serializedCanvas);\r\n    }\r\n\r\n    this._render();\r\n  }\r\n\r\n  /**\r\n   * Get an array of the component IDs of web parts currently in the Canvas.\r\n   *\r\n   * @return Array of component IDs\r\n   */\r\n  public get componentIds(): string[] {\r\n    return this._store.componentIds;\r\n  }\r\n\r\n  /**\r\n   * Re-render the Canvas in a new DisplayMode.\r\n   *\r\n   * @param newMode - The desired DisplayMode of the Canvas\r\n   */\r\n  public set displayMode(newMode: DisplayMode) {\r\n    this._store.setDisplayMode(newMode);\r\n  }\r\n\r\n  /**\r\n   * Unmount the Canvas from the container it was constructed with.\r\n   */\r\n  public dispose(): void {\r\n    reactDOM.unmountComponentAtNode(this._container);\r\n  }\r\n\r\n  /**\r\n   * Serialize the current contents of the Canvas. The serialized string is in a HTML format understood by\r\n   * SharePoint's Rich Text Field. The returned string can be crawled by search. Modifying the returned\r\n   * string outside of the Canvas is not supported.\r\n   *\r\n   * @return Serialized representation of the Canvas at the time the method is invoked.\r\n   */\r\n  public serialize(): string {\r\n    return this._store.serialize();\r\n  }\r\n\r\n  /**\r\n   * EXPERIMENTAL -- NOT FINAL\r\n   *\r\n   * serializeToJSON returns the order and type of controls in the Canvas when serialized. If a Canvas\r\n   * is deserialized using the JSON, the Canvas will be effectively adding a \"new\" control. If the a web\r\n   * part changes its data contract, this will probably break.\r\n   *\r\n   * @return The array representation of the order of controls in the Canvas when serialized.\r\n   */\r\n  public serializeToJSON(): string {\r\n    return this._store.serializeToJSON();\r\n  }\r\n\r\n  private _render(): void {\r\n    const props: ICanvasProps = {\r\n      canvasZoneProps: this._store.controls,\r\n      displayMode: this._store.canvasDisplayMode,\r\n      onToolboxHintClick: this._store.openToolbox,\r\n      store: this._store,\r\n      toolboxProps: this._store.toolboxProps\r\n    };\r\n    const coreElement: React.ReactElement<ICanvasProps> = React.createElement(CanvasCore, props);\r\n    this._coreComponent = reactDOM.render(coreElement, this._container);\r\n  }\r\n}\r\n"],"sourceRoot":"/src"}