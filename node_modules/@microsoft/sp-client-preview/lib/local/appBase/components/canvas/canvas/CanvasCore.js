"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var React = require('react');
var sp_client_base_1 = require('@microsoft/sp-client-base');
var CanvasRow_1 = require('./CanvasRow');
var CanvasToolbox_1 = require('./CanvasToolbox');
var CanvasToolboxHint_1 = require('./CanvasToolboxHint');
var CanvasCore = (function (_super) {
    __extends(CanvasCore, _super);
    function CanvasCore(props) {
        _super.call(this, props);
    }
    CanvasCore.prototype.getChildContext = function () {
        return {
            store: this.props.store
        };
    };
    CanvasCore.prototype.render = function () {
        var rows = [];
        var i = 0;
        for (var _i = 0, _a = this.props.canvasZoneProps; _i < _a.length; _i++) {
            var zoneProps = _a[_i];
            zoneProps.rowIndex = i;
            rows.push(React.createElement(CanvasRow_1.default, {canvasZoneProps: zoneProps, displayMode: zoneProps.displayMode, key: zoneProps.key, rowIndex: i++}));
        }
        var toolboxHint;
        if (this.props.displayMode === sp_client_base_1.DisplayMode.Edit && this.props.canvasZoneProps.length === 0) {
            toolboxHint = React.createElement(CanvasToolboxHint_1.default, {attachedTo: 'row', onToolboxHintClick: this.props.onToolboxHintClick, rowIndex: 0});
        }
        return (React.createElement("div", {className: 'Canvas'}, React.createElement("div", {className: 'ms-Grid'}, toolboxHint, rows), React.createElement(CanvasToolbox_1.default, React.__spread({}, this.props.toolboxProps))));
    };
    CanvasCore.childContextTypes = {
        store: React.PropTypes.object.isRequired
    };
    return CanvasCore;
}(React.Component));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = CanvasCore;

//# sourceMappingURL=CanvasCore.js.map
