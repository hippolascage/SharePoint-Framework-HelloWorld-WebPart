{"version":3,"sources":["local/appBase/components/canvas/canvas/ToolbarSubmenu.tsx"],"names":[],"mappings":"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","file":"local/appBase/components/canvas/canvas/ToolbarSubmenu.js","sourcesContent":["/**\r\n * @copyright Microsoft Corporation. All rights reserved.\r\n *\r\n * @file Contains ToolbarSubmenu class which is used to group related buttons in toolbar\r\n */\r\n\r\nimport * as React from 'react';\r\nimport { FocusZone } from 'office-ui-fabric-react';\r\n\r\nimport ToolbarButton, { IToolbarButtonProps } from './ToolbarButton';\r\nimport { navigateInside } from '../../sp-canvas/a11y/CanvasA11y';\r\n\r\nimport './ToolbarSubmenu.scss';\r\n\r\nexport interface IToolbarSubmenuProps extends React.Props<ToolbarSubmenu> {\r\n  isOpen: boolean;\r\n  buttons?: IToolbarButtonProps[];\r\n  onOpen?: () => void;\r\n  title?: string;\r\n  /**\r\n   * By default, the submenu will take on the width of the button it contains.\r\n   * Set this to true when you want to make it wide, such as when showing text formats.\r\n   * This also overrides the size of any buttons contained in the menu, so that\r\n   * they occupy the full width of the menu.\r\n   */\r\n  isWide?: boolean;\r\n}\r\n\r\nexport interface IToolbarSubmenuState {\r\n  isOpen: boolean;\r\n}\r\n\r\n/**\r\n * @class Submenu can be used in as toolbar item just like a button, to group a number of related buttons\r\n * that do different variations of an action (like text alignment). Only one of the buttons in a submenu\r\n * can be active at a time. The icon shown in the closed state is the icon of the active button\r\n */\r\nexport default class ToolbarSubmenu extends React.Component<IToolbarSubmenuProps, IToolbarSubmenuState> {\r\n  /**\r\n   * We only want to show button in closed state active, if a button was explicitly active in props\r\n   */\r\n  private _hasExplicitActiveButton: boolean;\r\n\r\n  /**\r\n   * Keep track of the button to set focus to when the submenu closes during keyboard navigation.\r\n   */\r\n  private _focusElement: HTMLElement;\r\n  private _isKeyboardNav: boolean;\r\n  private _menuElement: HTMLElement;\r\n\r\n  constructor(props: IToolbarSubmenuProps) {\r\n    super(props);\r\n\r\n    this._bindButtonClickHandlers = this._bindButtonClickHandlers.bind(this);\r\n    this._handleCloseSubmenu = this._handleCloseSubmenu.bind(this);\r\n    this._handleKeyDown = this._handleKeyDown.bind(this);\r\n    this._handleOpenSubmenu = this._handleOpenSubmenu.bind(this);\r\n\r\n    this._hasExplicitActiveButton = false;\r\n\r\n    // Submenu closed by default\r\n    this.state = {\r\n      isOpen: props.isOpen\r\n    };\r\n  }\r\n\r\n  public componentDidUpdate(prevProps: IToolbarSubmenuProps, prevState: IToolbarSubmenuState): void {\r\n    /**\r\n     * Ensure focus isn't lost when navigating out of a submenu via the left/right arrow keys.\r\n     * Set the focus back to the submenu active button.\r\n     */\r\n    if (!this.state.isOpen && this._isKeyboardNav && this._focusElement) {\r\n      this._focusElement.focus();\r\n      this._focusElement = undefined;\r\n      this._isKeyboardNav = false;\r\n    }\r\n\r\n    if (this.state.isOpen && !prevState.isOpen && this._menuElement) {\r\n      navigateInside(this._menuElement);\r\n    }\r\n  }\r\n\r\n  public componentWillReceiveProps(nextProps: IToolbarSubmenuProps): void {\r\n    this.setState({isOpen: nextProps.isOpen});\r\n  }\r\n\r\n  /**\r\n   *  Render the submenu, depending on its open state\r\n   */\r\n  public render(): React.ReactElement<IToolbarSubmenuProps> {\r\n    const openedCssClass: string = this.state.isOpen ? 'is-open' : '';\r\n    const wideCssClass: string = this.props.isWide ? 'ToolbarSubmenu--wide' : '';\r\n\r\n    this._bindButtonClickHandlers();\r\n\r\n    const buttonElements: React.ReactElement<IToolbarButtonProps>[] = [];\r\n    for (const buttonProps of this.props.buttons) {\r\n      buttonProps.tabIndex = this.state.isOpen ? 0 : -1;\r\n      buttonElements.push(<ToolbarButton {...buttonProps} />);\r\n    }\r\n\r\n    const activeButton: IToolbarButtonProps = this._getActiveButton();\r\n\r\n    return (\r\n      <div\r\n        aria-selected={this.state.isOpen}\r\n        className={`ToolbarSubmenu ${openedCssClass} ${wideCssClass}`}\r\n      >\r\n        <ToolbarButton\r\n          className='ToolbarSubmenu-displayButton'\r\n          fabricIconKey={activeButton.fabricIconKey}\r\n          iconClassName={activeButton.iconClassName}\r\n          key='displayButton'\r\n          onClick={this._handleOpenSubmenu}\r\n          isActive={this._hasExplicitActiveButton}\r\n          label={activeButton.label}\r\n          tabIndex={this.state.isOpen ? -1 : 0}\r\n        />\r\n        <i className='ms-Icon ms-Icon--caretDown ToolbarSubmenu-caret'></i>\r\n          <FocusZone isCircularNavigation={true}>\r\n            <div\r\n              className='ToolbarSubmenu-menuItems'\r\n              ref={(c) => this._menuElement = c}\r\n              onKeyDown={this._handleKeyDown}\r\n            >\r\n              { buttonElements }\r\n          </div>\r\n        </FocusZone>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _bindButtonClickHandlers(): void {\r\n    // Bind submenu button click handler to the exisiting one for each button\r\n    // This makes sure the submenu closes after the action is done\r\n    for (const buttonProps of this.props.buttons) {\r\n      buttonProps.onClick = this._handleOnButtonClick.bind(this, buttonProps.onClick);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return the props of the currently active button\r\n   */\r\n  private _getActiveButton(): IToolbarButtonProps {\r\n    this._hasExplicitActiveButton = false;\r\n    for (const button of this.props.buttons) {\r\n      if (button.isActive) {\r\n        this._hasExplicitActiveButton = true;\r\n        return button;\r\n      }\r\n    }\r\n\r\n    // No active button found, return the first one\r\n    return this.props.buttons[0];\r\n  }\r\n\r\n  private _handleKeyDown(e: React.KeyboardEvent): void {\r\n    if (\r\n      this.state.isOpen &&\r\n      (e.key === 'ArrowRight' || e.key === 'ArrowLeft')\r\n    ) {\r\n      this._isKeyboardNav = true;\r\n      this._handleCloseSubmenu();\r\n    }\r\n  }\r\n\r\n  private _handleOpenSubmenu(): void {\r\n    this._focusElement = document.activeElement as HTMLElement;\r\n    this.props.onOpen();\r\n    this.setState({isOpen: true});\r\n  }\r\n\r\n  private _handleCloseSubmenu(): void {\r\n    this.setState({isOpen: false});\r\n  }\r\n\r\n  /**\r\n   * @param onClickAction - The original onClick callback passed for the button\r\n   *\r\n   * Closes the submenu after calling the action of the button\r\n   * All the button props must be updated to use this function as their onClick handler\r\n   */\r\n  private _handleOnButtonClick(onClickCallback: () => void): void {\r\n    onClickCallback();\r\n\r\n    // Close the submenu to the OnClick behavior of each button\r\n    this._handleCloseSubmenu();\r\n  }\r\n}\r\n"],"sourceRoot":"/src"}