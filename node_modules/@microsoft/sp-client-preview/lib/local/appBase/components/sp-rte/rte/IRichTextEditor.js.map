{"version":3,"sources":["local/appBase/components/sp-rte/rte/IRichTextEditor.ts"],"names":[],"mappings":"AAAA;;GAEG","file":"local/appBase/components/sp-rte/rte/IRichTextEditor.js","sourcesContent":["/**\r\n * @copyright Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nimport { IBounds } from './IBounds';\r\nimport { IRange } from './IRange';\r\nimport { IRichTextFormat } from './IRichTextFormat';\r\n\r\n/**\r\n * The interface for SPRte interaction with Quill\r\n * SPRte only depend on this interface and should not directly depend on Quill API\r\n * In case of a Quill upgrade, we can create a new implementation of this interface to use in SPRte\r\n */\r\n\r\nexport interface IRichTextEditor {\r\n\r\n  /**\r\n   * @return editor's HTML content\r\n   *\r\n   * Destroy the editor instance\r\n   */\r\n  destroy(): string;\r\n\r\n  /**\r\n   * Set the focus inside the editor\r\n   */\r\n  focus(): void;\r\n\r\n  /**\r\n   * @param start - Start position of selection\r\n   * @param end - End position of selection\r\n   * @param formats - Map of key:value pairs for formats to apply\r\n   * @param applyAllFormatsToLine - Forces all formats to be applied to the whole line(s). If not provided,\r\n   * formats are divided into two buckets (line vs non-line) based on their isLine field\r\n   *\r\n   * A unified method for applying Quill formats to any selection\r\n   */\r\n  format(start: number, end: number, formats: Object, applyAllFormatsToLine?: boolean): void;\r\n\r\n  /**\r\n   * Get rendered position of the cursor for a given cursor position\r\n   */\r\n  getBounds(position: number): IBounds;\r\n\r\n  /**\r\n   * Get editor's HTML content\r\n   */\r\n  getHTML(): string;\r\n\r\n  /**\r\n   * Get the current selection in the editor\r\n   */\r\n  getSelection(): IRange;\r\n\r\n  /**\r\n   * @param start - Optional desired range of the text\r\n   *\r\n   * Get editor's text content\r\n   */\r\n  getText(range?: IRange): string;\r\n\r\n  /**\r\n   * @param format - Format to apply\r\n   * @param start - Start value of range\r\n   * @param end - End value of range\r\n   *\r\n   * @return The value of the format on the given range; undefined if the format is not applied\r\n   */\r\n  getFormatValue(start: number, end: number, format: IRichTextFormat): boolean | string | number;\r\n\r\n  /**\r\n   * @param format - Format to apply\r\n   * @param start - Start value of range\r\n   * @param end - End value of range\r\n   *\r\n   * @return If the format is applied to the given range\r\n   */\r\n  isFormatAppliedToRange(start: number, end: number, format: IRichTextFormat): boolean;\r\n\r\n  /**\r\n   * Set the current selection in the editor\r\n   */\r\n  setSelection(range: IRange): void;\r\n}\r\n"],"sourceRoot":"/src"}