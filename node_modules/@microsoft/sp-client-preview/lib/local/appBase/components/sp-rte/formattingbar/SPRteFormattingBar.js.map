{"version":3,"sources":["local/appBase/components/sp-rte/formattingbar/SPRteFormattingBar.tsx"],"names":[],"mappings":";;;;;;AAAA;;GAEG;AACH,uCAGO,wBAAwB,CAAC,CAAA;AAChC,IAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAK/B,QAAO,2BAA2B,CAAC,CAAA;AAkBnC;;GAEG;AACH;IAAgD,sCAAmE;IAIjH,4BAAY,KAA+B;QACzC,kBAAM,KAAK,CAAC,CAAC;QAEb,IAAI,CAAC,KAAK,GAAG;YACX,OAAO,EAAE,KAAK;SACf,CAAC;IACJ,CAAC;IAEM,8CAAiB,GAAxB;QACE,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;IAClE,CAAC;IAEM,sDAAyB,GAAhC,UAAiC,SAAmC;QAClE,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,KAAK,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;YACvD,IAAI,CAAC,QAAQ,CAAC;gBACZ,OAAO,EAAE,IAAI;aACd,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAEM,+CAAkB,GAAzB;QAAA,iBAQC;QAPC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;YACvB,MAAM,CAAC,UAAU,CAAC;gBAChB,KAAI,CAAC,QAAQ,CAAC;oBACZ,OAAO,EAAE,KAAK;iBACf,CAAC,CAAC;YACL,CAAC,EAAE,GAAG,CAAC,CAAC;QACV,CAAC;IACH,CAAC;IAED;;;;OAIG;IACI,mCAAM,GAAb;QAAA,iBAyBC;QAxBC,IAAM,KAAK,GAAwB,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;QACvD,IAAM,SAAS,GAAW,4BAAG,CAC3B,oBAAoB,EACpB,mBAAmB,EACnB,mBAAmB,EACnB,kBAAkB,EAClB;YACE,OAAO,EAAG,IAAI,CAAC,KAAK,CAAC,OAAO;SAC7B,CACF,CAAC;QAEF,MAAM,CAAC,CACL,qBAAC,GAAG,IACF,IAAI,EAAC,SAAS,GACd,UAAU,GAAC,YAAY,EACvB,SAAS,EAAE,SAAU,EACrB,GAAG,EAAE,UAAC,GAAG,IAAK,OAAA,KAAI,CAAC,QAAQ,GAAG,GAAG,EAAnB,CAAoB,EAClC,KAAK,EAAE,KAAM,GAEb,oBAAC,kCAAS,GAAC,GAAG,EAAE,UAAC,GAAG,IAAK,OAAA,KAAI,CAAC,UAAU,GAAG,GAAG,EAArB,CAAsB,EAAC,oBAAoB,EAAE,IAAK,GACxE,IAAI,CAAC,KAAK,CAAC,OAAQ,CACV,CACR,CACP,CAAC;IACJ,CAAC;IAEM,kCAAK,GAAZ;QACE,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;IAC1B,CAAC;IACH,yBAAC;AAAD,CArEA,AAqEC,CArE+C,KAAK,CAAC,SAAS,GAqE9D;AArED;oCAqEC,CAAA","file":"local/appBase/components/sp-rte/formattingbar/SPRteFormattingBar.js","sourcesContent":["/**\r\n * @copyright Microsoft Corporation. All rights reserved. *\r\n */\r\nimport {\r\n  css,\r\n  FocusZone\r\n} from 'office-ui-fabric-react';\r\nimport * as React from 'react';\r\n\r\nimport { IToolbarButtonProps } from '../../canvas/canvas/ToolbarButton';\r\nimport { IToolbarSubmenuProps } from '../../canvas/canvas/ToolbarSubmenu';\r\n\r\nimport './SPRteFormattingBar.scss';\r\n\r\nexport interface ISPRteFormattingBarPosition {\r\n  left: number;\r\n  top: number;\r\n  position: string;\r\n}\r\n\r\nexport interface ISPRteFormattingBarProps {\r\n  buttons?: React.ReactElement<IToolbarButtonProps | IToolbarSubmenuProps>[];\r\n  position?: ISPRteFormattingBarPosition;\r\n  onKeyDown?: (e: KeyboardEvent) => void;\r\n}\r\n\r\nexport interface ISPRteFormattingBarState {\r\n  isFaded: boolean;\r\n}\r\n\r\n/**\r\n * @class The formatting bar for the SPRte exposes text editing actions.\r\n */\r\nexport default class SPRteFormattingBar extends React.Component<ISPRteFormattingBarProps, ISPRteFormattingBarState> {\r\n  private _focusZone: FocusZone;\r\n  private _domNode: HTMLDivElement;\r\n\r\n  constructor(props: ISPRteFormattingBarProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isFaded: false\r\n    };\r\n  }\r\n\r\n  public componentDidMount(): void {\r\n    this._domNode.addEventListener('keydown', this.props.onKeyDown);\r\n  }\r\n\r\n  public componentWillReceiveProps(nextProps: ISPRteFormattingBarProps): void {\r\n    if (this.props.position.top !== nextProps.position.top) {\r\n      this.setState({\r\n        isFaded: true\r\n      });\r\n    }\r\n  }\r\n\r\n  public componentDidUpdate(): void {\r\n    if (this.state.isFaded) {\r\n      window.setTimeout(() => {\r\n        this.setState({\r\n          isFaded: false\r\n        });\r\n      }, 300);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Renders the formatting bar in the position given in props\r\n   * Formatting bar renders on top left side of the control by default\r\n   * If there is a text selection the bar renders above the selection\r\n   */\r\n  public render(): React.ReactElement<ISPRteFormattingBarProps> {\r\n    const style: React.CSSProperties = this.props.position;\r\n    const className: string = css(\r\n      'SPRteFormattingBar',\r\n      'rteFlyout-visible',\r\n      'stack-panel-class',\r\n      'ms-u-slideUpIn10',\r\n      {\r\n        'faded':  this.state.isFaded\r\n      }\r\n    );\r\n\r\n    return (\r\n      <div\r\n        role='toolbar'\r\n        aria-label='Formatting'\r\n        className={className}\r\n        ref={(ref) => this._domNode = ref}\r\n        style={style}\r\n      >\r\n        <FocusZone ref={(ref) => this._focusZone = ref} isCircularNavigation={true}>\r\n          {this.props.buttons}\r\n        </FocusZone>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  public focus(): void {\r\n    this._focusZone.focus();\r\n  }\r\n}\r\n"],"sourceRoot":"/src"}