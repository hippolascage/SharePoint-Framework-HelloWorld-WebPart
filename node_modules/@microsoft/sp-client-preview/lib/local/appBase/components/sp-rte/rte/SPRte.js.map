{"version":3,"sources":["local/appBase/components/sp-rte/rte/SPRte.tsx"],"names":[],"mappings":"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","file":"local/appBase/components/sp-rte/rte/SPRte.js","sourcesContent":["/**\r\n * @copyright Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nimport * as React from 'react';\r\nimport * as ReactDom from 'react-dom';\r\nimport { DisplayMode } from '@microsoft/sp-client-base';\r\nimport { StringHelper } from '@ms/odsp-utilities-bundle';\r\n\r\nimport { IBounds } from './IBounds';\r\nimport { ICanvasContext } from '../../sp-canvas/canvas/canvasComponent/ICanvasComponent';\r\nimport ISerializedCanvasControl from '../../canvas/canvas/ISerializedCanvasControl';\r\nimport { IRange } from './IRange';\r\nimport { IRichTextEditor } from './IRichTextEditor';\r\nimport { IRichTextFormat } from './IRichTextFormat';\r\nimport SPRteConfiguration from './SPRteConfiguration';\r\nimport SPRteFormattingBar, {\r\n  ISPRteFormattingBarProps,\r\n  ISPRteFormattingBarPosition\r\n} from '../formattingbar/SPRteFormattingBar';\r\nimport SPRteLinkDialog from '../formattingbar/SPRteLinkDialog';\r\nimport QuillEditor from '../quill/QuillEditor';\r\nimport ToolbarButton, { ButtonState, IToolbarButtonProps } from '../../canvas/canvas/ToolbarButton';\r\nimport ToolbarSubmenu, { IToolbarSubmenuProps } from '../../canvas/canvas/ToolbarSubmenu';\r\nimport {\r\n  isEscape,\r\n  isKey,\r\n  KeyCodes\r\n} from '../../sp-canvas/a11y/CanvasA11y';\r\n\r\nimport './SPRte.scss';\r\nimport Strings from '../../sp-canvas/loc/CanvasStrings.resx';\r\n\r\nexport interface ISPRteProps extends ISerializedCanvasControl {\r\n  innerHTML?: string;\r\n}\r\n\r\nexport interface ISPRteState {\r\n  currentSubmenuOpen?: 'alignment' | 'format' | 'list';\r\n  displayMode?: DisplayMode;\r\n  formattingBarPosition?: ISPRteFormattingBarPosition;\r\n  isFormattingBarHidden?: boolean;\r\n  isLinkDialogOpen?: boolean;\r\n}\r\n\r\n/**\r\n * @class Rich Text Editor class. This component wraps around all the RTE logic including the text editor\r\n * and the formatting bar and is used as a canvas control.\r\n */\r\nexport default class SPRte extends React.Component<ISPRteProps, ISPRteState> {\r\n  public static contextTypes: React.ValidationMap<SPRte> = {\r\n    store: React.PropTypes.object.isRequired\r\n  };\r\n\r\n  /**\r\n   * @ readOnly\r\n   */\r\n  private static _TOOLBAR_DEFAULT_POSITION: ISPRteFormattingBarPosition = {\r\n    left: 0,\r\n    top: -36,\r\n    position: 'absolute'\r\n  };\r\n\r\n  /* tslint:disable:max-line-length */\r\n  private static _URL_VALIDATION_REGEX: RegExp = new RegExp('((^https?:\\/\\/)|(^ftp:\\/\\/)|(^file:\\/\\/)|(^mailto:)|(^news:)|(^pnm:\\/\\/)|(^mms:\\/\\/)|(^\\/)|(^#)|(^\\\\\\\\)).+', 'i');\r\n  /* tslint:enable:max-line-length */\r\n  /**\r\n   * @ readOnly\r\n   *\r\n   * The scrollOffset that works for a full-height canvas\r\n   */\r\n  private static _BASE_SCROLL_THRESHOLD: number = -10;\r\n\r\n  /**\r\n   * @ readOnly\r\n   */\r\n  private static _CANVASZONE_PADDING_HORIZONTAL: number = 8;\r\n\r\n  public context: ICanvasContext;\r\n\r\n  private _config: SPRteConfiguration;\r\n  private _currentScrollTop: number;\r\n  private _currentSelection: IRange;\r\n  private _domElement: HTMLDivElement;\r\n  private _editor: IRichTextEditor;\r\n  private _editorElement: HTMLDivElement;\r\n  private _editableDiv: HTMLElement;\r\n  private _formattingbar: SPRteFormattingBar;\r\n  private _formattingbarElement: HTMLElement;\r\n  private _formattingbarWidth: number;\r\n\r\n  private _buttonStates: Map<string, ButtonState>;\r\n\r\n  private _linkAddress: string;\r\n  private _linkDialog: SPRteLinkDialog;\r\n  private _linkElement: HTMLElement;\r\n\r\n  /**\r\n   * _previousHTML is set when a the _quill instance is destroyed.\r\n   * We destroy the quill editor when SPRte is in read mode. The Quill HTML content is used to create a new\r\n   * Quill instance if SPRte is switched from edit -> read -> edit modes in one session.\r\n   */\r\n  private _previousHTML: string;\r\n  /**\r\n   * This stores reference to .ql-editor element to avoid finding it on every render\r\n   */\r\n\r\n  private _restoreSelectionOnNextFocus: boolean;\r\n  private _restoreScrollTopOnNextFocus: boolean;\r\n\r\n  private _selectionInitiated: boolean;\r\n  private _selectionShouldEnd: boolean;\r\n\r\n  constructor(props: ISPRteProps) {\r\n    super(props);\r\n\r\n    this._checkSelectionChange = this._checkSelectionChange.bind(this);\r\n    this._getFormatButtonProps = this._getFormatButtonProps.bind(this);\r\n    this._handleAlignCenter = this._handleAlignCenter.bind(this);\r\n    this._handleAlignLeft = this._handleAlignLeft.bind(this);\r\n    this._handleAlignRight = this._handleAlignRight.bind(this);\r\n    this._handleBold = this._handleBold.bind(this);\r\n    this._handleClearFormatting = this._handleClearFormatting.bind(this);\r\n    this._handleEditorFocus = this._handleEditorFocus.bind(this);\r\n    this._handleHeading2 = this._handleHeading2.bind(this);\r\n    this._handleHeading3 = this._handleHeading3.bind(this);\r\n    this._handleHeading4 = this._handleHeading4.bind(this);\r\n    this._handleItalic = this._handleItalic.bind(this);\r\n    this._handleLink = this._handleLink.bind(this);\r\n    this._handleListBullets = this._handleListBullets.bind(this);\r\n    this._handleListNumbered = this._handleListNumbered.bind(this);\r\n    this._handlePlainText = this._handlePlainText.bind(this);\r\n    this._handleQuote = this._handleQuote.bind(this);\r\n    this._handleSelectionChange = this._handleSelectionChange.bind(this);\r\n    this._handleTextChange = this._handleTextChange.bind(this);\r\n    this._handleUnderline = this._handleUnderline.bind(this);\r\n    this._handleUnlink = this._handleUnlink.bind(this);\r\n\r\n    this._handleFormattingBarKeyDown = this._handleFormattingBarKeyDown.bind(this);\r\n    this._handleKeyDown = this._handleKeyDown.bind(this);\r\n    this._handleKeyUp = this._handleKeyUp.bind(this);\r\n    this._handleScroll = this._handleScroll.bind(this);\r\n    this._restoreOnFocus = this._restoreOnFocus.bind(this);\r\n\r\n    this._onLinkDialogSaved = this._onLinkDialogSaved.bind(this);\r\n    this._openLinkDialog = this._openLinkDialog.bind(this);\r\n    this._closeLinkDialog = this._closeLinkDialog.bind(this);\r\n\r\n    this.state = {\r\n      displayMode: this.props.displayMode,\r\n      formattingBarPosition: undefined,\r\n      isFormattingBarHidden: true,\r\n      isLinkDialogOpen: false\r\n    };\r\n\r\n    this._config = new SPRteConfiguration();\r\n    this._restoreScrollTopOnNextFocus = false;\r\n    this._restoreSelectionOnNextFocus = false;\r\n    this._buttonStates = new Map<string, ButtonState>();\r\n    this._selectionInitiated = false;\r\n    this._selectionShouldEnd = false;\r\n\r\n    if (this.state.displayMode === DisplayMode.Edit && !this._editor) {\r\n      QuillEditor.moduleLoader.loadModule();\r\n    }\r\n  }\r\n\r\n  public render(): React.ReactElement<ISPRteProps> {\r\n    let formattingBar: React.ReactElement<ISPRteFormattingBarProps>;\r\n\r\n    let html: string;\r\n    let className: string;\r\n    if (this.state.displayMode === DisplayMode.Read) {\r\n      className = 'ql-container';\r\n      html = this._previousHTML || this.props.innerHTML;\r\n    }\r\n\r\n    // Do not render a formatting bar if the control is not in edit mode and the\r\n    // formatting bar is hidden\r\n    const isEditMode: boolean = this.state.displayMode === DisplayMode.Edit;\r\n    if (isEditMode && !this.state.isFormattingBarHidden) {\r\n      formattingBar = <SPRteFormattingBar\r\n        buttons={this._formattingBarButtons}\r\n        position={this.state.formattingBarPosition}\r\n        onKeyDown={this._handleFormattingBarKeyDown}\r\n        ref={(c: SPRteFormattingBar) => this._formattingbar = c}\r\n      />;\r\n    }\r\n\r\n    return (\r\n      <div ref={(c: HTMLDivElement) => this._domElement = c }>\r\n        <div\r\n          aria-role={ isEditMode ? 'textbox' : undefined }\r\n          aria-multiline={ isEditMode || undefined }\r\n          dangerouslySetInnerHTML={{__html: html}}\r\n          className={ className }\r\n          onKeyUp={ this._handleKeyUp }\r\n          ref={ (c: HTMLDivElement) => this._editorElement = c }\r\n        />\r\n        { formattingBar }\r\n        <SPRteLinkDialog\r\n          editorElement={this._editableDiv}\r\n          isOpen={this.state.isLinkDialogOpen}\r\n          onCancelClicked={this._closeLinkDialog}\r\n          onDismiss={this._closeLinkDialog}\r\n          onSaveClicked={this._onLinkDialogSaved}\r\n          ref={(c: SPRteLinkDialog) => this._linkDialog = c}\r\n          textFieldValue={this._linkAddress || ''}\r\n          validationRegex={SPRte._URL_VALIDATION_REGEX}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  public componentDidMount(): void {\r\n    if (this.state.displayMode === DisplayMode.Edit) {\r\n      this._createNewEditor(this.props.innerHTML || '').then((editor) => {\r\n        this._afterEditorCreated(editor);\r\n        this.context.store.webPartManager.configureStart(undefined);\r\n        this.focus();\r\n      });\r\n    }\r\n  }\r\n\r\n  public componentDidUpdate(prevProps: ISPRteProps, prevState: ISPRteState): void {\r\n    if (this._formattingbar) {\r\n      this._formattingbarElement = ReactDom.findDOMNode<HTMLElement>(this._formattingbar);\r\n      this._formattingbarWidth = this._formattingbarElement.offsetWidth || this._formattingbarWidth;\r\n\r\n      if (this.context.store.scrollableParent) {\r\n        this.context.store.scrollableParent.addEventListener('scroll', this._handleScroll);\r\n      }\r\n\r\n      /* If formattingbar exists and editable div doesn't have focus, make the editable div un-tabbable\r\n        This is because we want tab to switch between the toolbars and only ESC can set the focus back to editor */\r\n      const tabIndex: string =\r\n        (this._editableDiv && this._editableDiv.isEqualNode(document.activeElement)) ? '0' : '-1';\r\n      this._editableDiv.setAttribute('tabindex', tabIndex);\r\n    } else {\r\n      this._formattingbarElement = undefined;\r\n      if (this.context.store.scrollableParent) {\r\n        this.context.store.scrollableParent.removeEventListener('scroll', this._handleScroll);\r\n      }\r\n      if (this._editableDiv) {\r\n        this._editableDiv.setAttribute('tabindex', '0');\r\n      }\r\n    }\r\n  }\r\n\r\n  public componentWillUnmount(): void {\r\n    if (this._editor) {\r\n      this._previousHTML = this._editor.destroy();\r\n      this._editor = undefined;\r\n    }\r\n  }\r\n\r\n  public componentWillUpdate(nextProps: ISPRteProps, nextState: ISPRteState): void {\r\n    if (this.state.displayMode !== nextState.displayMode) {\r\n      if (nextState.displayMode === DisplayMode.Edit) {\r\n        /**\r\n         * Switching from Read mode to Edit mode. Create a new editor\r\n         * If SPRte has previously been in edit mode during the same session we want to use the saved HTML.\r\n         * The props value is used if the editor is switching to edit mode for the first time since\r\n         * _previousHTML will be null.\r\n         */\r\n        this._createNewEditor(this._previousHTML || this.props.innerHTML || '').then((editor) => {\r\n          this._afterEditorCreated(editor);\r\n          this._setButtonStates();\r\n        });\r\n\r\n      } else if (nextState.displayMode === DisplayMode.Read) {\r\n        // Switching from Edit mode to Read mode. Remove the editor instance\r\n        this.componentWillUnmount();\r\n      }\r\n    } else if (nextState.displayMode === DisplayMode.Edit && this._editor) {\r\n      /* Re-evaluate button activeness map before every render\r\n      We assume that we only need to change activeness if the focus is inside the editor\r\n      IMPORTANT: this._quill.focus() should not be called during state-transition, because it will trigger\r\n      selection-change and cause another state-transition which is forbidden by React */\r\n      this._setButtonStates();\r\n    }\r\n  }\r\n\r\n  public focus(): void {\r\n    if (this._editableDiv) {\r\n      // If focus() is explicitly called on the React component, force the editor to be tabbable\r\n      this._editableDiv.setAttribute('tabindex', '0');\r\n    }\r\n\r\n    this._editor.focus();\r\n  }\r\n\r\n  public setDisplayMode(newMode: DisplayMode): void {\r\n    if (this.state.displayMode !== newMode) {\r\n      this.setState({\r\n        displayMode: newMode,\r\n        formattingBarPosition: undefined,\r\n        isFormattingBarHidden: true,\r\n        isLinkDialogOpen: false\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return the serialized instance of this control\r\n   */\r\n  public serialize(): ISerializedCanvasControl {\r\n    const serialization: ISPRteProps = JSON.parse(JSON.stringify(this.props));\r\n    serialization.innerHTML = this._editor ? this._editor.getHTML() : this.props.innerHTML;\r\n\r\n    return serialization;\r\n  }\r\n\r\n  private _afterEditorCreated(editor: IRichTextEditor): void {\r\n    this._editor = editor;\r\n    this._handleTextChange();\r\n    this._editorElement.addEventListener('keydown', this._handleKeyDown);\r\n    document.addEventListener('mouseup', this._checkSelectionChange);\r\n    this._editableDiv = this._editorElement.querySelector('.ql-editor') as HTMLElement;\r\n    if (this._editableDiv) {\r\n      this._editableDiv.setAttribute('aria-label', Strings.RichTextEditorAriaLabel);\r\n      this._editableDiv.addEventListener('focus', this._handleEditorFocus);\r\n    }\r\n  }\r\n\r\n  private _ariaConfirmAction(formatKeyOrName: string): void {\r\n    const format: IRichTextFormat = this._config.formats.get(formatKeyOrName);\r\n    const name: string = format ? format.button.title : formatKeyOrName;\r\n\r\n    let message: string = StringHelper.format(Strings.FormattingBarConfirmAction, name);\r\n    if (this._currentSelection &&  this._currentSelection.start !== this._currentSelection.end &&\r\n      !(format && format.isLine)) {\r\n      const text: string = this._editor.getText(this._currentSelection);\r\n      message = StringHelper.format(Strings.FormattingBarConfirmActionOnSelection, name, text);\r\n    }\r\n    this.context.store.a11yManager.ariaAlert(message);\r\n}\r\n\r\n /**\r\n  * Note: keyup and mouseup can happen before or after selection-change depending on the user input\r\n  * That's why we need to mark these events in separate flags (_selectionInitiated and _selectionShouldEnd)\r\n  * Whenever one of them happens, we check if the other one has happened so we could complete the action\r\n  *\r\n  * Checks if a selection change should complete, then:\r\n  * - If the selection was already initiated, completes it\r\n  * - Otherwise, markes the selection to be completed after initiation\r\n  */\r\n  private _checkSelectionChange(): void {\r\n    if (this._editor) {\r\n      this._selectionShouldEnd = true;\r\n      if (this._selectionInitiated) {\r\n        const range: IRange = this._editor.getSelection();\r\n        this._currentSelection = range;\r\n        this._updateFormattingBar();\r\n        // Reset completion flag because selection change is already handled\r\n        this._selectionShouldEnd = false;\r\n      }\r\n      // Reset initiation flag for future events\r\n      this._selectionInitiated = false;\r\n    }\r\n  }\r\n\r\n  private _closeLinkDialog(): void {\r\n    this._restoreSelectionOnNextFocus = true;\r\n    this._restoreScrollTopOnNextFocus = true;\r\n    this._currentScrollTop = this.context.store.scrollableParent.scrollTop;\r\n    this._linkAddress = '';\r\n\r\n    this.setState({\r\n      isLinkDialogOpen: false\r\n    });\r\n  }\r\n\r\n  private _createNewEditor(innerHTML: string): Promise<QuillEditor> {\r\n    return QuillEditor.createNewEditor(\r\n      this._config,\r\n      innerHTML,\r\n      this._editorElement,\r\n      this._handleSelectionChange,\r\n      this._handleTextChange\r\n    );\r\n  }\r\n\r\n  private _shouldFormattingBarStick(): boolean {\r\n    const editorRelativeTop: number =\r\n      this._editorElement.getBoundingClientRect().top - this.context.store.canvasElement.getBoundingClientRect().top;\r\n\r\n    return this.context.store.scrollableParent.scrollTop >\r\n      this.context.store.scrollThreshold + SPRte._BASE_SCROLL_THRESHOLD +\r\n      editorRelativeTop + SPRte._TOOLBAR_DEFAULT_POSITION.top;\r\n  }\r\n\r\n  private _getFormattingBarPosition(): ISPRteFormattingBarPosition {\r\n    let left: number = SPRte._TOOLBAR_DEFAULT_POSITION.left;\r\n    let top: number = SPRte._TOOLBAR_DEFAULT_POSITION.top;\r\n    let position: string = 'absolute';\r\n    let isFloating: boolean = false;\r\n\r\n    if (this._formattingbarElement) {\r\n      if (this._currentSelection && this._currentSelection.start !== this._currentSelection.end) {\r\n        // Use range.end - 1, because getBounds returns left:0 when the selection ends at the end of line\r\n        const startBounds: IBounds = this._editor.getBounds(this._currentSelection.start);\r\n        const endBounds: IBounds = this._editor.getBounds(Math.max(0, this._currentSelection.end - 1));\r\n\r\n        if (startBounds.top === endBounds.top) {\r\n          isFloating = true;\r\n          // Fix the problem where Quill returns faulty endBounds.left when the selection ends close to end of line\r\n          endBounds.left = startBounds.left <= endBounds.left ? endBounds.left : this._editorElement.offsetWidth;\r\n          const toolbarLeft: number =\r\n            (startBounds.left + endBounds.left) / 2 - this._formattingbarWidth / 2;\r\n          const canvasZoneWidth: number = this._editorElement.offsetWidth + SPRte._CANVASZONE_PADDING_HORIZONTAL * 2;\r\n\r\n          left = toolbarLeft + this._formattingbarWidth <= canvasZoneWidth ?\r\n            Math.max(toolbarLeft, SPRte._TOOLBAR_DEFAULT_POSITION.left) :\r\n            canvasZoneWidth - this._formattingbarWidth;\r\n\r\n          // If the floating top is too close to the fixed top (<line-height), use the fixed top to avoid funkiness\r\n          top = startBounds.top < 23 ?\r\n            SPRte._TOOLBAR_DEFAULT_POSITION.top :\r\n            startBounds.top + SPRte._TOOLBAR_DEFAULT_POSITION.top;\r\n\r\n          position = 'absolute';\r\n        }\r\n      }\r\n    }\r\n\r\n    // Even if the formatting bar element doesn't exist, we can still calculate the sticky bar position\r\n    if (!isFloating && this._shouldFormattingBarStick()) {\r\n      left = SPRte._TOOLBAR_DEFAULT_POSITION.left +\r\n        this._editorElement.getBoundingClientRect().left - SPRte._CANVASZONE_PADDING_HORIZONTAL;\r\n      top = this.context.store.canvasElement.getBoundingClientRect().top +\r\n        this.context.store.scrollableParent.scrollTop - this.context.store.scrollThreshold;\r\n      position = 'fixed';\r\n    }\r\n\r\n    return {left, top, position};\r\n  }\r\n\r\n  private _getFormatButtonProps(formatKey: string, onClick: () => void): IToolbarButtonProps {\r\n    const format: IRichTextFormat = this._config.formats.get(formatKey);\r\n    return {\r\n      key: format.key,\r\n      fabricIconKey: format.button.fabricIconKey,\r\n      iconClassName: format.button.iconClassName,\r\n      onClick: onClick,\r\n      canBeActive: format.button.canBeActive,\r\n      isActive: this._buttonStates.get(format.key) === ButtonState.Active,\r\n      disabled: this._buttonStates.get(format.key) === ButtonState.Disabled,\r\n      title: format.button.title + (format.button.shortcut ? ` (${format.button.shortcut})` : ''),\r\n      label: format.button.label,\r\n      className: format.button.className\r\n    };\r\n  }\r\n\r\n  private get _formattingBarButtons(): JSX.Element[] {\r\n    const formatSubmenuButtons: IToolbarButtonProps[] = [\r\n      {\r\n        canBeActive: true,\r\n        title: Strings.FormattingBarNormalTextButtonTitle,\r\n        label: Strings.FormattingBarNormalTextButtonTitle,\r\n        onClick: this._handlePlainText\r\n      },\r\n      this._getFormatButtonProps('h2', this._handleHeading2),\r\n      this._getFormatButtonProps('h3', this._handleHeading3),\r\n      this._getFormatButtonProps('h4', this._handleHeading4),\r\n      this._getFormatButtonProps('blockquote', this._handleQuote)\r\n    ];\r\n\r\n    const alignmentSubmenuButtons: IToolbarButtonProps[] = [\r\n      this._getFormatButtonProps('alignLeft', this._handleAlignLeft),\r\n      this._getFormatButtonProps('alignCenter', this._handleAlignCenter),\r\n      this._getFormatButtonProps('alignRight', this._handleAlignRight)\r\n    ];\r\n\r\n    const listSubmenuButtons: IToolbarButtonProps[] = [\r\n      this._getFormatButtonProps('bullet', this._handleListBullets),\r\n      this._getFormatButtonProps('list', this._handleListNumbered)\r\n    ];\r\n\r\n    const buttons: React.ReactElement<IToolbarButtonProps | IToolbarSubmenuProps>[] = [\r\n      <ToolbarSubmenu\r\n        key='format' buttons={formatSubmenuButtons}\r\n        isOpen={this.state.currentSubmenuOpen === 'format'}\r\n        isWide={true}\r\n        onOpen={() => this.setState({ currentSubmenuOpen: 'format'})}\r\n      />,\r\n      <ToolbarButton {...this._getFormatButtonProps('bold', this._handleBold)} />,\r\n      <ToolbarButton {...this._getFormatButtonProps('italic', this._handleItalic)} />,\r\n      <ToolbarButton {...this._getFormatButtonProps('underline', this._handleUnderline)} />,\r\n      <ToolbarSubmenu\r\n        key='alignment'\r\n        buttons={alignmentSubmenuButtons}\r\n        isOpen={this.state.currentSubmenuOpen === 'alignment'}\r\n        onOpen={() => this.setState({ currentSubmenuOpen: 'alignment' })}\r\n      />,\r\n      <ToolbarSubmenu\r\n        key='list'\r\n        buttons={listSubmenuButtons}\r\n        isOpen={this.state.currentSubmenuOpen === 'list'}\r\n        onOpen={() => this.setState({ currentSubmenuOpen: 'list' })}\r\n      />,\r\n      <ToolbarButton {...this._getFormatButtonProps('link', this._handleLink)} />,\r\n      <ToolbarButton\r\n        key='unlink'\r\n        canBeActive={false}\r\n        className='button_linkRemove_temp'\r\n        fabricIconKey='Link'\r\n        onClick={this._handleUnlink}\r\n        title={Strings.FormattingBarUnlinkButtonTitle}\r\n        disabled={this._buttonStates.get('link') !== ButtonState.Active}\r\n      />,\r\n      <ToolbarButton\r\n        key='clearFormatting'\r\n        canBeActive={false}\r\n        fabricIconKey='ClearFormatting'\r\n        onClick={this._handleClearFormatting}\r\n        title={Strings.FormattingBarClearFormattingButtonTitle}\r\n      />\r\n    ];\r\n\r\n    return buttons;\r\n  }\r\n\r\n  private _finalizeAction(ariaActionName?: string): void {\r\n    if (ariaActionName) {\r\n      this._ariaConfirmAction(ariaActionName);\r\n    }\r\n    this._updateActiveButtons();\r\n  }\r\n\r\n  /**\r\n   * @param format - Name of the format to apply\r\n   */\r\n  private _formatOrPrepare(formatKey: string): void {\r\n    this.focus();\r\n\r\n    const format: IRichTextFormat = this._config.formats.get(formatKey);\r\n    // Check if the format is masked and skip action\r\n    if (format.maskedBy) {\r\n      for (const maskingFormat of format.maskedBy) {\r\n        if (this._buttonStates.get(maskingFormat) === ButtonState.Active) {\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    const range: IRange = this._currentSelection;\r\n    const [start, end]: number[] = [range.start, range.end];\r\n\r\n    const value: string | boolean =\r\n      format.editorValue ? format.editorValue : !this._editor.isFormatAppliedToRange(start, end, format);\r\n\r\n    this._cleanupBeforeFormatting(start, end, format);\r\n    const formats: Object = {};\r\n    formats[format.editorKey] = value;\r\n    this._editor.format(start, end, formats);\r\n    this._finalizeAction(formatKey);\r\n  }\r\n\r\n  private _handleAlignCenter(): void {\r\n    this._formatOrPrepare('alignCenter');\r\n  }\r\n\r\n  private _handleAlignLeft(): void {\r\n    this._formatOrPrepare('alignLeft');\r\n  }\r\n\r\n  private _handleAlignRight(): void {\r\n    this._formatOrPrepare('alignRight');\r\n  }\r\n\r\n  private _handleBold(): void {\r\n    this._formatOrPrepare('bold');\r\n  }\r\n\r\n  private _handleHeading2(): void {\r\n    this._formatOrPrepare('h2');\r\n  }\r\n\r\n  private _handleHeading3(): void {\r\n    this._formatOrPrepare('h3');\r\n  }\r\n\r\n  private _handleHeading4(): void {\r\n    this._formatOrPrepare('h4');\r\n  }\r\n\r\n  private _handleItalic(): void {\r\n    this._formatOrPrepare('italic');\r\n  }\r\n\r\n  private _handleLink(): void {\r\n    if (this._currentSelection) {\r\n      // If there is existing link modify its URL, otherwise create new one if selection is not collapsed\r\n      if (this._buttonStates.get('link') === ButtonState.Active) {\r\n        const linkAddress: string =\r\n          this._editor.getFormatValue(\r\n            this._currentSelection.start,\r\n            this._currentSelection.end,\r\n            this._config.formats.get('link')\r\n          ) as string;\r\n        this._openLinkDialog(linkAddress);\r\n      } else if (this._currentSelection.start !== this._currentSelection.end) {\r\n        this._openLinkDialog();\r\n      }\r\n      this._updateActiveButtons();\r\n    }\r\n  }\r\n\r\n  private _handleListBullets(): void {\r\n    this._formatOrPrepare('bullet');\r\n  }\r\n\r\n  private _handleListNumbered(): void {\r\n    this._formatOrPrepare('list');\r\n  }\r\n\r\n  private _handlePlainText(): void {\r\n    this.focus();\r\n    if (this._currentSelection) {\r\n      // Use the clean method for any styling format\r\n      const blockStyles: IRichTextFormat[] =\r\n        this._config.supportedFormatsArray.filter((format) => { return format.isBlockStyle; });\r\n      this._cleanupBeforeFormatting(this._currentSelection.start, this._currentSelection.end, blockStyles[0]);\r\n      this._finalizeAction();\r\n    }\r\n  }\r\n\r\n  private _handleQuote(): void {\r\n    this._formatOrPrepare('blockquote');\r\n  }\r\n\r\n  /**\r\n    * Checks if a selection change should initiate, then:\r\n    * - If the selection was marked for completion, completes it\r\n    * - Otherwise, markes the selection as initiated to be completed later\r\n    */\r\n  private _handleSelectionChange(range: IRange): void {\r\n    if (range) {\r\n      this.setState({currentSubmenuOpen: undefined});\r\n      if (this._restoreOnFocus()) {\r\n        this._updateFormattingBar();\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (!range) {\r\n      this._updateFormattingBar(true);\r\n    } else if (!this._currentSelection || this.state.isFormattingBarHidden) {\r\n      this._currentSelection = range;\r\n      this._updateFormattingBar();\r\n    } else if (this._currentSelection.start !== range.start || this._currentSelection.end !== range.end) {\r\n      // Initiate a selection and complete it if it was marked for completion\r\n      this._selectionInitiated = true;\r\n      if (this._selectionShouldEnd) {\r\n        this._currentSelection = range;\r\n        this._updateFormattingBar();\r\n        // Reset initiation flag because selection change is already handled\r\n        this._selectionInitiated = false;\r\n      }\r\n      // Clear completion flag for future events\r\n      this._selectionShouldEnd = false;\r\n    }\r\n  }\r\n\r\n  private _handleClearFormatting(): void {\r\n    this.focus();\r\n    const range: IRange = this._currentSelection;\r\n    const [start, end]: number[] = [range.start, range.end];\r\n\r\n    const formats: Object = {};\r\n    for (const format of this._config.supportedFormatsArray) {\r\n      formats[format.editorKey] = false;\r\n    }\r\n    this._editor.format(start, end, formats);\r\n    this._finalizeAction(Strings.FormattingBarClearFormattingButtonTitle);\r\n  }\r\n\r\n  private _handleTextChange(): void {\r\n    if (this.state.displayMode === DisplayMode.Edit) {\r\n      // Note: Use if-else because classList.toggle doesn't work properly in IE\r\n      if (this._editorElement.textContent === '') {\r\n        this._editorElement.classList.add('ql-container--blank');\r\n      } else {\r\n        this._editorElement.classList.remove('ql-container--blank');\r\n      }\r\n\r\n      if (this._editor) {\r\n        this._currentSelection = this._editor.getSelection() || this._currentSelection;\r\n      }\r\n\r\n      if (this.props.onChange) {\r\n        this.props.onChange();\r\n      }\r\n    }\r\n  }\r\n\r\n  private _handleUnderline(): void {\r\n    this._formatOrPrepare('underline');\r\n  }\r\n\r\n  private _handleUnlink(): void {\r\n    this.focus();\r\n    if (this._currentSelection) {\r\n      this._editor.format(this._currentSelection.start, this._currentSelection.end, {'link': false});\r\n      this._finalizeAction(Strings.FormattingBarUnlinkButtonTitle);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clean up the existing formatting of given range before applying the new format, by doing:\r\n   *  - Clear all styling formats if new format is also a styling format\r\n   *  - Clear all the formats masked by the new format\r\n   *\r\n   * @param start - Start of the range getting formatted\r\n   * @param end - End of the range getting formatted\r\n   * @param newFormat - Name of new format being applied\r\n   */\r\n  private _cleanupBeforeFormatting(start: number, end: number, newFormat: IRichTextFormat): void {\r\n    const formatsToClear: Object = {};\r\n\r\n    // If this is a styling format, clear all styling formats\r\n    if (newFormat.isBlockStyle) {\r\n      const blockStyles: IRichTextFormat[] =\r\n        this._config.supportedFormatsArray.filter((format) => { return format.isBlockStyle; });\r\n      for (const format of blockStyles) {\r\n        formatsToClear[format.editorKey] = false;\r\n      }\r\n    }\r\n\r\n    // Clear all formats masked by this format\r\n    if (newFormat.masks) {\r\n      for (const maskedFormatKey of newFormat.masks) {\r\n        formatsToClear[this._config.formats.get(maskedFormatKey).editorKey] = false;\r\n      }\r\n    }\r\n\r\n    this._editor.format(start, end, formatsToClear, true);\r\n  }\r\n\r\n  private _onLinkDialogSaved(): void {\r\n    if (this._linkDialog.textFieldValue) {\r\n      this._editor.format(this._currentSelection.start, this._currentSelection.end,\r\n        {'link': this._linkDialog.textFieldValue});\r\n    }\r\n    this._linkElement = undefined;\r\n    this._finalizeAction(Strings.FormattingBarLinkButtonTitle);\r\n    this._closeLinkDialog();\r\n  }\r\n\r\n  private _openLinkDialog(defaultAddress: string = ''): void {\r\n    this._linkAddress = defaultAddress;\r\n\r\n    this.setState({\r\n      isLinkDialogOpen: true\r\n    });\r\n  }\r\n\r\n  private _handleEditorFocus(evt: FocusEvent): void {\r\n    this._restoreOnFocus();\r\n  }\r\n\r\n  private _handleFormattingBarKeyDown(evt: KeyboardEvent): void {\r\n    if (isEscape(evt)) {\r\n      if (this._editableDiv && !this._editableDiv.isEqualNode(document.activeElement)) {\r\n        this.focus();\r\n        evt.stopPropagation();\r\n        evt.preventDefault();\r\n      }\r\n    }\r\n  }\r\n\r\n  private _handleKeyDown(evt: KeyboardEvent): void {\r\n    if (isKey(KeyCodes.F10, evt, true) && this._formattingbarElement) {\r\n      this.context.store.a11yManager.navigateInside(this._formattingbarElement);\r\n      this.context.store.a11yManager.\r\n        ariaAlert(`${Strings.ToolbarNavigationArrowKeys} ${Strings.ToolbarNavigationTabKeys}`);\r\n      evt.stopPropagation();\r\n      evt.preventDefault();\r\n    } else if (isKey('K'.charCodeAt(0), evt, false, true)) {\r\n      this._handleLink();\r\n      evt.stopPropagation();\r\n      evt.preventDefault();\r\n    }\r\n  }\r\n\r\n  private _handleKeyUp(evt: KeyboardEvent): void {\r\n    this._checkSelectionChange();\r\n    this._updateActiveButtons();\r\n  }\r\n\r\n  private _handleScroll(): void {\r\n    if (this.state.formattingBarPosition) {\r\n      const isSticky: boolean = this.state.formattingBarPosition.position === 'fixed';\r\n\r\n      if (this._shouldFormattingBarStick() ? !isSticky : isSticky) {\r\n        const newState: ISPRteState = {\r\n          formattingBarPosition: this._getFormattingBarPosition(),\r\n          isLinkDialogOpen: false\r\n        };\r\n        this.setState(newState);\r\n      }\r\n    }\r\n  }\r\n\r\n  private _restoreOnFocus(): boolean {\r\n    let restore: boolean = false;\r\n\r\n    if (this._restoreSelectionOnNextFocus && this._currentSelection) {\r\n      this._restoreSelectionOnNextFocus = false;\r\n      this._editor.setSelection(this._currentSelection);\r\n      restore = true;\r\n    }\r\n\r\n    if (this._restoreScrollTopOnNextFocus && this._currentScrollTop) {\r\n      this._restoreScrollTopOnNextFocus = false;\r\n      this.context.store.scrollableParent.scrollTop = this._currentScrollTop;\r\n      restore = true;\r\n    }\r\n\r\n    return restore;\r\n  }\r\n\r\n  private _setButtonStates(): void {\r\n    const range: IRange = this._currentSelection;\r\n    if (range) {\r\n      /* Make a map to keep track of updated buttons. Its goal is to minimize the number\r\n      of calls to isFormatAppliedToRange (equal to the number of currently non-masked formats) */\r\n      const updatedFormats: Map<string, boolean> = new Map<string, boolean>();\r\n      for (const format of this._config.supportedFormatsArray) {\r\n        updatedFormats.set(format.key, false);\r\n      }\r\n\r\n      // First figure out the state of masking formats and their masked formats\r\n      const maskingFormats: IRichTextFormat[] =\r\n        this._config.supportedFormatsArray.filter((format) => { return !!format.masks; });\r\n      for (const maskingFormat of maskingFormats) {\r\n        if (!updatedFormats.get(maskingFormat.key)) {\r\n          const isActive: boolean = this._editor.isFormatAppliedToRange(range.start, range.end, maskingFormat);\r\n          this._buttonStates.set(maskingFormat.key, isActive ? ButtonState.Active : ButtonState.Normal);\r\n          updatedFormats.set(maskingFormat.key, true);\r\n          if (isActive) {\r\n            for (const maskedFormat of maskingFormat.masks){\r\n              this._buttonStates.set(maskedFormat, ButtonState.Disabled);\r\n              updatedFormats.set(maskedFormat, true);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // Figure out activeness for the rest of the formats\r\n      for (const format of this._config.supportedFormatsArray) {\r\n        if (!updatedFormats.get(format.key)) {\r\n          const isActive: boolean = this._editor.isFormatAppliedToRange(range.start, range.end, format);\r\n          this._buttonStates.set(format.key, isActive ? ButtonState.Active : ButtonState.Normal);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This should be called whenever the activeness of buttons could have changed\r\n   * It rerenders the component to make sure the change is rendered\r\n   */\r\n  private _updateActiveButtons(): void {\r\n    this.forceUpdate();\r\n  }\r\n\r\n  /**\r\n   * Hide/Show the formatting bar and update the formatting bar position if needed\r\n   * If the editor is not focused, hide the formatting bar\r\n   * If the selection is collapsed the formatting bar will render in a static location\r\n   * If the selection is not collapsed the formatting bar will appear near the selection\r\n   */\r\n  private _updateFormattingBar(isHidden: boolean = false): void {\r\n    if (!this._editorElement) {\r\n      return;\r\n    }\r\n\r\n    let updatePosition: boolean = true;\r\n\r\n    const newState: ISPRteState = {\r\n      formattingBarPosition: {\r\n        left: SPRte._TOOLBAR_DEFAULT_POSITION.left,\r\n        top: SPRte._TOOLBAR_DEFAULT_POSITION.top,\r\n        position: SPRte._TOOLBAR_DEFAULT_POSITION.position\r\n      },\r\n      isFormattingBarHidden: isHidden\r\n    };\r\n\r\n    if (isHidden && this._formattingbarElement) {\r\n      // If the editor or a toolbar button has the focus, don't hide the toolbar\r\n      if (document.activeElement.isEqualNode(this._editableDiv)) {\r\n        isHidden = false;\r\n      } else {\r\n        const buttonNodes: NodeList =\r\n          this._formattingbarElement.querySelectorAll('.ToolbarButton');\r\n\r\n        for (let i: number = 0; i < buttonNodes.length; i++) {\r\n          if (document.activeElement.isEqualNode(buttonNodes[i])) {\r\n            newState.isFormattingBarHidden = false;\r\n            newState.formattingBarPosition = this.state.formattingBarPosition;\r\n            isHidden = false;\r\n            // Don't update the position if isHidden got overriden because a button was clicked\r\n            updatePosition = false;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (isHidden && !(document.activeElement as HTMLDivElement).isContentEditable) {\r\n        // This makes the contenteditable element non-editable\r\n        window.getSelection().removeAllRanges();\r\n      }\r\n    }\r\n\r\n    if (!isHidden) {\r\n      newState.isFormattingBarHidden = false;\r\n\r\n      if (updatePosition) {\r\n        newState.formattingBarPosition = this._getFormattingBarPosition();\r\n      }\r\n    }\r\n\r\n    this.setState(newState);\r\n  }\r\n}\r\n"],"sourceRoot":"/src"}