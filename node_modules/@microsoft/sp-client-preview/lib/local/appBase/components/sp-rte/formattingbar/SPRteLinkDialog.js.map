{"version":3,"sources":["local/appBase/components/sp-rte/formattingbar/SPRteLinkDialog.tsx"],"names":[],"mappings":"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","file":"local/appBase/components/sp-rte/formattingbar/SPRteLinkDialog.js","sourcesContent":["/**\r\n * @copyright Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nimport * as React from 'react';\r\nimport Strings from '../../sp-canvas/loc/CanvasStrings.resx';\r\n\r\nimport {\r\n  Dialog,\r\n  DialogType,\r\n  DialogFooter,\r\n  Button,\r\n  ButtonType,\r\n  TextField\r\n} from 'office-ui-fabric-react';\r\n\r\nimport {\r\n  isEnter\r\n} from '../../sp-canvas/a11y/CanvasA11y';\r\n\r\nexport interface ISPRteLinkDialogProps {\r\n  editorElement: HTMLElement;\r\n  isOpen: boolean;\r\n  onDismiss: () => void;\r\n  onSaveClicked: () => void;\r\n  onCancelClicked: () => void;\r\n  textFieldValue: string;\r\n  validationRegex: RegExp;\r\n}\r\n\r\nexport interface ISPRteLinkDialogState {\r\n  isURLValid: boolean;\r\n}\r\n\r\nexport default class SPRteLinkDialog extends React.Component<ISPRteLinkDialogProps, ISPRteLinkDialogState> {\r\n  private _initCursorSet: boolean;\r\n  private _textField: TextField;\r\n\r\n  public constructor(props: ISPRteLinkDialogProps) {\r\n    super(props);\r\n\r\n    this._getErrorMessage = this._getErrorMessage.bind(this);\r\n    this._handleKeyDown = this._handleKeyDown.bind(this);\r\n    this._handleTextFieldChange = this._handleTextFieldChange.bind(this);\r\n    this._isURLValid = this._isURLValid.bind(this);\r\n\r\n    this.state = {\r\n      isURLValid: true\r\n   };\r\n }\r\n\r\n  public render():  React.ReactElement<ISPRteLinkDialogProps> {\r\n    const {\r\n      editorElement,\r\n      isOpen,\r\n      onDismiss,\r\n      onSaveClicked,\r\n      onCancelClicked,\r\n      textFieldValue\r\n   }: ISPRteLinkDialogProps = this.props;\r\n\r\n    return (\r\n      <Dialog\r\n        isOpen={isOpen}\r\n        type={DialogType.normal}\r\n        onDismiss={onDismiss}\r\n        title={Strings.LinkDialogTitle}\r\n        isBlocking={true}\r\n        elementToFocusOnDismiss={editorElement}\r\n      >\r\n        <TextField\r\n          className='SPRteLinkDialog-textField'\r\n          label={Strings.LinkDialogTextFieldLabel}\r\n          ariaLabel={Strings.LinkDialogTextFieldAriaLabel}\r\n          onChanged={this._handleTextFieldChange}\r\n          onGetErrorMessage={this._getErrorMessage}\r\n          onKeyDown={this._handleKeyDown}\r\n          defaultValue={textFieldValue}\r\n          ref={(c: TextField) => this._textField = c}\r\n        />\r\n        <DialogFooter>\r\n          <Button\r\n            buttonType={ButtonType.primary}\r\n            disabled={!this.state.isURLValid}\r\n            onClick={onSaveClicked}\r\n            ariaLabel={Strings.RichTextLinkDialogSaveButtonLabel}>\r\n              {Strings.RichTextLinkDialogSaveButtonLabel}\r\n            </Button>\r\n          <Button\r\n            onClick={onCancelClicked}\r\n            ariaLabel={Strings.RichTextLinkDialogCancelButtonLabel}>\r\n            {Strings.RichTextLinkDialogCancelButtonLabel}\r\n          </Button>\r\n        </DialogFooter>\r\n      </Dialog>\r\n    );\r\n }\r\n\r\n  public componentDidUpdate(prevProps: ISPRteLinkDialogProps): void {\r\n    if (this._textField && this.props.isOpen && !this._initCursorSet) {\r\n      this._initCursorSet = true;\r\n      this._textField.select();\r\n\r\n      const textValue: string = this._textField.value;\r\n      if (textValue) {\r\n        this._textField.setSelectionStart(textValue.length);\r\n        this._textField.setSelectionEnd(textValue.length);\r\n     }\r\n   } else if (!this.props.isOpen) {\r\n     this._initCursorSet = false;\r\n   }\r\n }\r\n\r\n  public componentWillReceiveProps(newProps: ISPRteLinkDialogProps): void {\r\n    this.state = {\r\n      isURLValid: this._isURLValid(newProps.textFieldValue)\r\n   };\r\n }\r\n\r\n  public get textFieldValue(): string {\r\n    let url: string = '';\r\n    if (this._textField) {\r\n      url = this._textField.value;\r\n      if (!this._hasProtocol(url)) {\r\n        url = 'http://' + url;\r\n     }\r\n   }\r\n    return url;\r\n }\r\n\r\n  private _getErrorMessage(): string {\r\n    return !this._isURLValid(this.textFieldValue) && this.textFieldValue !== '' ?\r\n      Strings.LinkDialogErrorNotSupportedLink : '';\r\n }\r\n\r\n  private _handleKeyDown(evt: KeyboardEvent): void {\r\n    if (isEnter(evt) && this.state.isURLValid) {\r\n      this.props.onSaveClicked();\r\n      evt.stopPropagation();\r\n      evt.preventDefault();\r\n    }\r\n  }\r\n\r\n  private _handleTextFieldChange(): void {\r\n    this.setState({\r\n      isURLValid: this._isURLValid(this.textFieldValue)\r\n   });\r\n }\r\n\r\n  private _hasProtocol(url: string): boolean {\r\n    const hasProtocolRegex: RegExp = new RegExp('^([A-Za-z0-9]+:(\\/\\/)?|#|\\/|\\\\\\\\).+', 'i');\r\n    return hasProtocolRegex.test(url);\r\n }\r\n\r\n  private _isURLValid(url: string): boolean {\r\n    return this.props.validationRegex.test(url);\r\n }\r\n}\r\n"],"sourceRoot":"/src"}