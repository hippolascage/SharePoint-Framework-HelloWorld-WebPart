{"version":3,"sources":["local/appBase/components/sp-rte/quill/QuillEditor.ts"],"names":[],"mappings":"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","file":"local/appBase/components/sp-rte/quill/QuillEditor.js","sourcesContent":["/**\r\n * @copyright Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nimport { IBounds } from '../rte/IBounds';\r\nimport { IRange } from '../rte/IRange';\r\nimport { IRichTextFormat } from '../rte/IRichTextFormat';\r\nimport { IRichTextEditor } from '../rte/IRichTextEditor';\r\nimport { IRichTextEditorLoader } from '../rte/IRichTextEditorLoader';\r\nimport QuillInstance = require('QuillInstance');\r\nimport QuillLoader from './QuillLoader';\r\nimport SPRteConfiguration from '../rte/SPRteConfiguration';\r\n\r\nimport Strings from '../../sp-canvas/loc/CanvasStrings.resx';\r\n\r\n/**\r\n * Implmentation of ISPRteQuillIntegration for Quill 0.20.1\r\n */\r\nexport default class QuillEditor implements IRichTextEditor {\r\n  public static moduleLoader: IRichTextEditorLoader = new QuillLoader();\r\n\r\n  private static quillDelta: QuillDelta;\r\n  private static quillDocument: QuillDocument;\r\n\r\n  private _config: SPRteConfiguration;\r\n  private _editorElement: HTMLDivElement;\r\n  private _quill: QuillInstance;\r\n  private _quillEditorElement: HTMLElement;\r\n  private _handleSelectionChange: (range: IRange) => void;\r\n  private _handleTextChange: () => void;\r\n\r\n  /**\r\n   * @return Promise of the instance that resolves once the editor is loaded on the element\r\n   *\r\n   * Static wrapper for constructing an instance\r\n   */\r\n  public static createNewEditor(\r\n      config: SPRteConfiguration,\r\n      currentHTML: string,\r\n      editorElement: HTMLDivElement,\r\n      selectionChangeCallback: (range: IRange) => void,\r\n      textChangeCallback: () => void\r\n    ): Promise<QuillEditor> {\r\n    return new Promise<QuillEditor>(\r\n      (resolve?: (result: QuillEditor) => void) => {\r\n        QuillEditor.moduleLoader.loadModule().then(() => {\r\n          const editor: QuillEditor = new QuillEditor(\r\n            config,\r\n            currentHTML,\r\n            editorElement,\r\n            selectionChangeCallback,\r\n            textChangeCallback\r\n          );\r\n          resolve(editor);\r\n        });\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Use createNewEditor instead of constructor to ensure using the editor after it's loaded\r\n   * Note: TypeScript doesn't allow private constructors\r\n   */\r\n  public constructor(\r\n    config: SPRteConfiguration,\r\n    currentHTML: string,\r\n    editorElement: HTMLDivElement,\r\n    selectionChangeCallback: (range: IRange) => void,\r\n    textChangeCallback: () => void\r\n  ) {\r\n    this._config = config;\r\n    this._editorElement = editorElement;\r\n    this._findWrappingElementByTagName = this._findWrappingElementByTagName.bind(this);\r\n    this._handleSelectionChange = selectionChangeCallback;\r\n    this._handleTextChange = textChangeCallback;\r\n\r\n    this.focus = this.focus.bind(this);\r\n    this.format = this.format.bind(this);\r\n    this.getSelection = this.getSelection.bind(this);\r\n\r\n    this._initialize(currentHTML);\r\n  }\r\n\r\n  public destroy(): string {\r\n    if (this._quill) {\r\n      const previousHTML: string = this._quill.destroy();\r\n      this._quill = undefined;\r\n      return previousHTML;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * @param start - Start position of selection\r\n   * @param end - End position of selection\r\n   * @param formats - Map of key:value pairs for formats to apply\r\n   * @param applyAllFormatsToLine - Forces all formats to be applied to the whole line(s). If not provided,\r\n   * formats are divided into two buckets (line vs non-line) based on their isLine field\r\n   *\r\n   * A unified method for applying Quill formats to any selection\r\n   */\r\n  public format(start: number, end: number, formats: Object, applyAllFormatsToLine?: boolean): void {\r\n    const lineFormats: Object = applyAllFormatsToLine ? formats : {};\r\n    const nonLineFormats: Object = {};\r\n\r\n    if (!applyAllFormatsToLine) {\r\n      // Divide formats into two buckets: Line and Non-Line\r\n      /* tslint:disable */\r\n      for (const formateditorKey in formats) {\r\n      /* tslint:enable */\r\n        const format: IRichTextFormat = this._config.supportedFormatsArray\r\n            .filter((format) => { return format.editorKey === formateditorKey; })[0];\r\n        if (format.isLine) {\r\n          lineFormats[format.editorKey] = formats[format.editorKey];\r\n        } else {\r\n          nonLineFormats[format.editorKey] = formats[format.editorKey];\r\n        }\r\n      }\r\n    }\r\n\r\n    /* Apply line formats: If there is a newline character at the end of the selection, Quill.formatLine\r\n    formats an extra line. We don't want the extra line by design so we remove the last character if\r\n    it's a newline character */\r\n    const firstLineOffset: number = this._quill.editor.doc.findLineAt(start)[1];\r\n    const [lastLine, lastLineOffset]: [QuillLine, number] = this._quill.editor.doc.findLineAt(end);\r\n    const startOfFirstLine: number = start - firstLineOffset;\r\n    const endOfLastLine: number =\r\n      (start !== end && lastLineOffset === 0) ? end - 1 : end + lastLine.length - lastLineOffset - 1;\r\n    this._quill.formatLine(startOfFirstLine, endOfLastLine, lineFormats);\r\n\r\n    if (!applyAllFormatsToLine) {\r\n      // Apply Non-Line formats\r\n      /* tslint:disable */\r\n      if (nonLineFormats.hasOwnProperty('link') &&\r\n        this.isFormatAppliedToRange(start, end, this._config.formats.get('link'))) {\r\n        // There is already a link on the selection, remove or edit it\r\n        if (start === end) {\r\n          const linkElement: HTMLElement = this._findWrappingElementByTagName(start, 'A');\r\n          if (linkElement) {\r\n            if (nonLineFormats['link'] as boolean) {\r\n              linkElement.setAttribute('href', nonLineFormats['link']);\r\n              linkElement.setAttribute('target', '_blank');\r\n            } else {\r\n              const container: HTMLElement = linkElement.parentElement;\r\n              if (container) {\r\n                const textNode: Text = document.createTextNode(linkElement.textContent);\r\n                container.insertBefore(textNode, linkElement);\r\n                container.removeChild(linkElement);\r\n              }\r\n            }\r\n            nonLineFormats['link'] = undefined;\r\n          }\r\n        } else if(nonLineFormats['link'] as boolean) {\r\n          // Edit link on non-collapsed selection\r\n          let linkElement: HTMLElement;\r\n          const linkAtEnd: HTMLElement = this._findWrappingElementByTagName(end, 'A');\r\n          // If the selection size is larger than 1, make sure the whole selection is on the same link\r\n          if (end - start > 1) {\r\n            const linkAtStart: HTMLElement = this._findWrappingElementByTagName(start + 1, 'A');\r\n            linkElement = linkAtStart && linkAtEnd && linkAtStart.isEqualNode(linkAtEnd) ? linkAtEnd : undefined;\r\n          } else {\r\n            linkElement = linkAtEnd;\r\n          }\r\n\r\n          if (linkElement) {\r\n            linkElement.setAttribute('href', nonLineFormats['link']);\r\n            linkElement.setAttribute('target', '_blank');\r\n            nonLineFormats['link'] = undefined;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (start === end) {\r\n        for (let format in nonLineFormats) {\r\n          if (format === 'bold' || format === 'italic' || format === 'underline') {\r\n            this._quill.prepareFormat(format, nonLineFormats[format]);\r\n          }\r\n        }\r\n      } else {\r\n        this._quill.formatText(start, end, nonLineFormats);\r\n\r\n        if (nonLineFormats.hasOwnProperty('link') && nonLineFormats['link'] as boolean) {\r\n          const linkElement: HTMLElement = this._findWrappingElementByTagName(end, 'A');\r\n          if (linkElement) {\r\n            linkElement.setAttribute('target', '_blank');\r\n          }\r\n        }\r\n      }\r\n    }\r\n    /* tslint:enable */\r\n  }\r\n\r\n  public getBounds(position: number): IBounds {\r\n    return this._quill.getBounds(position);\r\n  }\r\n\r\n  public getSelection(): IRange {\r\n    return this._quill.getSelection();\r\n  }\r\n\r\n  public getText(range?: IRange): string {\r\n    return range ?\r\n      this._quill.getText(range.start, range.end) :\r\n      this._quill.getText();\r\n  }\r\n\r\n  public getHTML(): string {\r\n    return this._quill.getHTML();\r\n  }\r\n\r\n  public getFormatValue(start: number, end: number, format: IRichTextFormat): boolean | string {\r\n    if (format.key === 'link') {\r\n      let linkElement: HTMLElement;\r\n      const linkAtEnd: HTMLElement = this._findWrappingElementByTagName(end, 'A');\r\n      // If the selection size is larger than 1, make sure the whole selection is on the same link\r\n      if (end - start > 1) {\r\n        const linkAtStart: HTMLElement = this._findWrappingElementByTagName(start + 1, 'A');\r\n        linkElement = linkAtStart && linkAtEnd && linkAtStart.isEqualNode(linkAtEnd) ? linkAtEnd : undefined;\r\n      } else {\r\n        linkElement = linkAtEnd;\r\n      }\r\n      return linkElement ? linkAtEnd.getAttribute('href') : undefined;\r\n    } else {\r\n      return this.isFormatAppliedToRange(start, end, format);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param format - Name of the format to apply from QUILL_FORMATS or SPRTE_FORMATS\r\n   * @param start - Start value of range\r\n   * @param end - End value of range\r\n   *\r\n   * @return A dictionary of string=>boolean indicating if the format is applied to the given range\r\n   */\r\n  public isFormatAppliedToRange(start: number, end: number, format: IRichTextFormat): boolean {\r\n    let canBrowserHandle: boolean = !!format.browserKey;\r\n\r\n    /* Chrome has a bug that returns true for bold, italic, underline if an empty line is selected\r\n    We temporarily add this block to use Quill for those formats until the issue is fixed.\r\n    Issue filed at: https://bugs.chromium.org/p/chromium/issues/detail?id=606047 */\r\n    if (start !== end && ['bold', 'italic', 'underline'].indexOf(format.key) !== -1) {\r\n      canBrowserHandle = false;\r\n    }\r\n\r\n    // IE and FF don't support justification commands, use Quill API instead\r\n    if (['alignCenter', 'alignLeft', 'alignRight'].indexOf(format.key) !== -1 ) {\r\n      const line: QuillLine = this._quill.editor.doc.findLineAt(end)[0];\r\n      if (line.delta.ops.length > 0) {\r\n        /* tslint:disable */\r\n        // The align attribute is always set in last delta attributes because it contains the newline character\r\n        const attributes: any = line.delta.ops[line.delta.ops.length - 1].attributes;\r\n        // @todo #188988: default alignment should match locale (LTR vs RTL)\r\n        const textAlign: string = attributes && attributes.align ? attributes.align : 'left';\r\n        /* tslint:disable */\r\n\r\n        if (format.key === 'alignCenter') {\r\n           return textAlign === 'center';\r\n        } else if (format.key === 'alignLeft') {\r\n           return textAlign === 'left';\r\n        } else if (format.key === 'alignRight') {\r\n           return textAlign === 'right';\r\n        }\r\n      }\r\n    }\r\n\r\n    // If the format can't be handled by browser use Quill to find active formats\r\n    if (!canBrowserHandle) {\r\n      // If the selection is collapsed, check the last character\r\n      start = start === end ? Math.max(0, end - 1) : start;\r\n      const activeFormats: Map<string, number> = this._getActiveFormatsInRange(start, end, format.isLine);\r\n      return (format.isLine || start === 0) ?\r\n        !!activeFormats.get(format.key) :\r\n        activeFormats.get('count') === activeFormats.get(format.key);\r\n    } else {\r\n      return document.queryCommandState(format.browserKey);\r\n    }\r\n  }\r\n\r\n  public setSelection(range: IRange): void {\r\n    this._quill.setSelection(range.start, range.end);\r\n  }\r\n\r\n  public focus(): void {\r\n    // Use setActive() instead of focus() if available, because focus() scrolls to view in IE\r\n    if (this._quillEditorElement && this._quillEditorElement.setActive) {\r\n      this._quillEditorElement.setActive();\r\n    } else {\r\n      this._quill.focus();\r\n    }\r\n  }\r\n\r\n  private _findWrappingElementByTagName(position: number, tagName: string): HTMLElement {\r\n    const leafNode: Node = this._quill.editor.doc.findLeafAt(Math.max(0, position - 1))[0].node;\r\n\r\n    /* Move up the dom tree until find the first node with the given tag name or reach the editor element\r\n    Note: Use .parentNode instead of .parentElement, because IE doesn't have .parentElement on text nodes */\r\n    let parentNode: HTMLElement = leafNode.parentNode as HTMLElement;\r\n    while (parentNode && parentNode.tagName !== tagName && !parentNode.isEqualNode(this._editorElement)) {\r\n      parentNode = parentNode.parentNode as HTMLElement;\r\n    }\r\n\r\n    return parentNode.tagName === tagName ? parentNode : undefined;\r\n  }\r\n\r\n  /**\r\n   * @param start - start value of a selection\r\n   * @param end - end value of a selection\r\n   *\r\n   * Find and calculate all the non-sequential formattings in a selection.\r\n   *\r\n   * @return A dictionary mapping of format to non-sequential occurrences in the range of start to end\r\n   */\r\n  private _getActiveFormatsInRange(start: number, end: number, isLine: boolean = false): Map<string, number> {\r\n    start = start === end ? Math.max(0, end - 1) : start;\r\n    /* tslint:disable:no-any */\r\n    let contentAttributes: any[];\r\n    /* tslint:enable:no-any */\r\n\r\n    if (isLine) {\r\n      const line: QuillLine = this._quill.editor.doc.findLineAt(end)[0];\r\n      contentAttributes = line ? line.delta.ops : [];\r\n    } else {\r\n      contentAttributes = this._quill.getContents(start, end).ops;\r\n    }\r\n\r\n    /* The length of contentAttributes is the number of non-sequential formatting parts in the selection.\r\n       Keeping track of count for the special case of formatting an entire selection where only a portion\r\n       of the selection is formatted with a given format. */\r\n    const attrDict: Map<string, number> = new Map<string, number>([['count', contentAttributes.length]]);\r\n\r\n    const formats: string[] = this._config.supportedFormatsArray.map((format) => { return format.key; });\r\n    for (const format of formats) {\r\n      attrDict.set(format, 0);\r\n    }\r\n\r\n    for (const op of contentAttributes) {\r\n      // op.attributes can be undefined if the chunk is unformatted\r\n      if (op.attributes) {\r\n        for (const attr in op.attributes) {\r\n          // Verify the attribute is a recognized format\r\n          if (attrDict.has(attr)) {\r\n            attrDict.set(attr, attrDict.get(attr) + 1);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return attrDict;\r\n  }\r\n\r\n  /**\r\n   * Initialize Quill with whitelist of formats, prevent default css,\r\n   * add custom formats, and registering event handlers.\r\n   */\r\n  private _initialize(currentHTML: string): void {\r\n    QuillEditor.moduleLoader.loadModule().then((quillModule) => {\r\n      if (!QuillEditor.quillDelta) {\r\n        QuillEditor.quillDelta = quillModule.require('delta') as QuillDelta;\r\n      }\r\n\r\n      if (!QuillEditor.quillDocument) {\r\n        QuillEditor.quillDocument = quillModule.require('document') as QuillDocument;\r\n      }\r\n\r\n      const quillFormatKeys: string[] = this._config.supportedFormatsArray\r\n        .filter((format) => { return format.isEditorNative; })\r\n        .map((format) => { return format.editorKey; })\r\n        .filter((formatKey, index, self) => { return self.indexOf(formatKey) === index; });  // Distinct keys\r\n\r\n      const quill: QuillInstance = new quillModule(this._editorElement, {\r\n        formats: quillFormatKeys,\r\n        readOnly: false,\r\n        styles: false,\r\n        modules: {\r\n          'paste-manager': {\r\n            onConvert: function(container: HTMLDivElement) {\r\n              // Remove images\r\n              const wordImages: NodeList = container.querySelectorAll('img, .MsoNormal [src]:not([src=\\'\\']');\r\n              for (let i: number = 0; i < wordImages.length; i++) {\r\n                wordImages[i].parentElement.removeChild(wordImages[i]);\r\n              }\r\n\r\n              const doc: QuillDocument = new QuillEditor.quillDocument(container, {\r\n                formats: quillFormatKeys,\r\n                readOnly: false,\r\n                styles: false\r\n              });\r\n\r\n              // Clean up children with no text content\r\n              let line: QuillLine = doc.lines.first;\r\n              while (line) {\r\n                const next: QuillLine = line.next;\r\n                if (!line.data.textContent.length) {\r\n                  doc.removeLine(line);\r\n                }\r\n                line = next;\r\n              }\r\n\r\n              const delta: QuillDelta = doc.toDelta();\r\n\r\n              // Remove added newline if applicable\r\n              const lengthAdded: number = delta.length();\r\n              if (lengthAdded === 0) {\r\n                return delta;\r\n              }\r\n              return delta.compose(new QuillEditor.quillDelta().retain(lengthAdded - 1)['delete'](1));\r\n            }\r\n          }\r\n        }\r\n      });\r\n\r\n      this._quillEditorElement = this._editorElement.querySelector('.ql-editor') as HTMLElement;\r\n      // @todo 181437, get placeholder text via props later\r\n\r\n      this._quillEditorElement.setAttribute('data-placeholder', Strings.TextWebPartPlaceholder);\r\n\r\n      // Add custom non-Quill formats to Quill\r\n      // @todo 198188: Do this using _supportedFormatsArray after upgrading to Quill 1.0\r\n      quill.addFormat('blockquote', {\r\n        class: 'quote-',\r\n        type: 'line'\r\n      });\r\n\r\n      quill.addFormat('h2', {\r\n        tag: 'H2',\r\n        type: 'line'\r\n      });\r\n\r\n      quill.addFormat('h3', {\r\n        tag: 'H3',\r\n        type: 'line'\r\n      });\r\n\r\n      quill.addFormat('h4', {\r\n        tag: 'H4',\r\n        type: 'line'\r\n      });\r\n\r\n      quill.on('text-change', this._handleTextChange);\r\n      quill.on('selection-change', this._handleSelectionChange);\r\n\r\n      quill.setHTML(currentHTML);\r\n\r\n      this._quill = quill;\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":"/src"}