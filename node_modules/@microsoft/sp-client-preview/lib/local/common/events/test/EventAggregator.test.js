// import EventAggregator from '../EventAggregator';
// import { IEvent, IEventCallback, IEventAggregator } from '../IEvent';
// import { IMockEventData, MockEvent } from './EventMocks';
// const { assert, expect } = chai;
describe('EventAggregator', function () {
    // it('Instantiation does not throw', () => {
    //   expect(function () { new EventAggregator(); }).to.not.throw();
    // });
    // it('Invalid parameters are not accepted', () => {
    //   let ea = new EventAggregator();
    //   expect(function () { ea.subscribeByEventName('ev', 'subscriberId', () => { }) }).to.throw();
    //   expect(function () { ea.subscribeByEventName('ev:action', null, () => { }) }).to.throw();
    //   expect(function () { ea.subscribeByEventName('ev:action', 'subscriberId', null) }).to.throw();
    //   expect(function () { ea.subscribeByEventName('ev:action', 'subscriberId', () => { }) }).to.not.throw();
    //   expect(function () { ea.subscribeBySourceId(null, 'subscriberId', () => { }) }).to.throw();
    //   expect(function () { ea.subscribeBySourceId('sourceId', null, () => { }) }).to.throw();
    //   expect(function () { ea.subscribeBySourceId('sourceId', 'subscriberId', null) }).to.throw();
    //   expect(function () { ea.subscribeBySourceId('sourceId', 'subscriberId', () => { }) }).to.not.throw();
    //   expect(function () { ea.raiseEvent(null, new MockEvent()) }).to.throw();
    //   expect(function () { ea.subscribeBySourceId('sourceId', null, () => { }) }).to.throw();
    //   expect(function () { ea.subscribeBySourceId('sourceId', 'subscriberId', null) }).to.throw();
    //   expect(function () { ea.subscribeBySourceId('sourceId', 'subscriberId', () => { }) }).to.not.throw();
    // });
    // it('Subscribe for event by name', () => {
    //   let ea = new EventAggregator();
    //   let calledEvent: string = null;
    //   ea.subscribeByEventName<IMockEventData>('ev1:action1', 'subscriberId', (eventName, eventObject) =>
    //   {
    //     calledEvent = eventName;
    //     assert.strictEqual(eventName, 'ev1:action1', 'incorrect event name');
    //     assert.strictEqual(eventObject.data.value, 'eventValue', 'incorrect event value');
    //   });
    //   // Callback is called for the right event
    //   ea.raiseEvent<IMockEventData>('ev1:action1', new MockEvent());
    //   assert.strictEqual(calledEvent, 'ev1:action1', 'Callback was called');
    //   // Callback is not called for a different event
    //   ea.raiseEvent<IMockEventData>('ev2:action2', new MockEvent());
    //   assert.strictEqual(calledEvent, 'ev1:action1', 'Callback was called');
    // });
    // it('Subscribe by source', () => {
    //   let ea = new EventAggregator();
    //   let calledSource;
    //   ea.subscribeBySourceId<IMockEventData>('sourceId1', 'subscriberId', (eventName, eventObject) => {
    //     calledSource = eventObject.sourceId;
    //     assert.strictEqual(eventName, 'ev1:action1', 'incorrect event name');
    //     assert.strictEqual(eventObject.sourceId, 'sourceId1', 'incorrect source');
    //     assert.strictEqual(eventObject.data.value, 'eventValue', 'incorrect event value');
    //   });
    //   // Subscribed source
    //   let event = new MockEvent();
    //   ea.raiseEvent<IMockEventData>('ev1:action1', event);
    //   assert.strictEqual(calledSource, 'sourceId1', 'Callback was called');
    //   event.sourceId = 'otherSourceId';
    //   ea.raiseEvent<IMockEventData>('ev1:action1', event);
    //   assert.strictEqual(calledSource, 'sourceId1', 'Callback was called');
    // });
    // it('Callback is called only once', () => {
    //   let ea = new EventAggregator();
    //   let calledCount = 0;
    //   let callback = (eventName, eventObject) => {
    //     calledCount++;
    //   }
    //   // Two subscriptions but called only once
    //   ea.subscribeByEventName<IMockEventData>('ev1:action1', 'subscriberId', callback);
    //   ea.subscribeBySourceId<IMockEventData>('sourceId1', 'subscriberId', callback);
    //   ea.raiseEvent<IMockEventData>('ev1:action1', new MockEvent());
    //   assert.strictEqual(calledCount, 1, 'Called only once');
    // });
    // it('Last subscription wins', () => {
    //   let ea = new EventAggregator();
    //   let firstCallbackCount = 0;
    //   let secondCallbackCount = 0;
    //   // Two subscriptions but called only once
    //     ea.subscribeByEventName<IMockEventData>('ev1:action1', 'subscriberId', (eventName, eventObject) => {
    //       firstCallbackCount++;
    //     });
    //   ea.subscribeByEventName<IMockEventData>('ev1:action1', 'subscriberId', (eventName, eventObject) => {
    //     secondCallbackCount++;
    //   });
    //   ea.raiseEvent<IMockEventData>('ev1:action1', new MockEvent());
    //   assert.strictEqual(firstCallbackCount, 0, 'Fist callback is not called');
    //   assert.strictEqual(secondCallbackCount, 1, 'Second callback is called');
    // });
});

//# sourceMappingURL=EventAggregator.test.js.map
