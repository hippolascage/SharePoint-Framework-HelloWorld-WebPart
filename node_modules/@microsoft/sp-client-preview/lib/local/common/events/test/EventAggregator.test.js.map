{"version":3,"sources":["local/common/events/test/EventAggregator.test.ts"],"names":[],"mappings":"AAAA,oDAAoD;AACpD,wEAAwE;AACxE,4DAA4D;AAE5D,mCAAmC;AAEnC,QAAQ,CAAC,iBAAiB,EAAE;IAC1B,6CAA6C;IAC7C,mEAAmE;IACnE,MAAM;IAEN,oDAAoD;IACpD,oCAAoC;IACpC,iGAAiG;IACjG,8FAA8F;IAC9F,mGAAmG;IACnG,4GAA4G;IAE5G,gGAAgG;IAChG,4FAA4F;IAC5F,iGAAiG;IACjG,0GAA0G;IAE1G,6EAA6E;IAC7E,4FAA4F;IAC5F,iGAAiG;IACjG,0GAA0G;IAC1G,MAAM;IAEN,4CAA4C;IAC5C,oCAAoC;IACpC,oCAAoC;IAEpC,uGAAuG;IACvG,MAAM;IACN,+BAA+B;IAC/B,4EAA4E;IAC5E,yFAAyF;IACzF,QAAQ;IAER,8CAA8C;IAC9C,mEAAmE;IACnE,2EAA2E;IAE3E,oDAAoD;IACpD,mEAAmE;IACnE,2EAA2E;IAC3E,MAAM;IAEN,oCAAoC;IACpC,oCAAoC;IACpC,sBAAsB;IAEtB,sGAAsG;IACtG,2CAA2C;IAC3C,4EAA4E;IAC5E,iFAAiF;IACjF,yFAAyF;IACzF,QAAQ;IAER,yBAAyB;IACzB,iCAAiC;IACjC,yDAAyD;IACzD,0EAA0E;IAE1E,sCAAsC;IACtC,yDAAyD;IACzD,0EAA0E;IAC1E,MAAM;IAEN,6CAA6C;IAC7C,oCAAoC;IACpC,yBAAyB;IAEzB,iDAAiD;IACjD,qBAAqB;IACrB,MAAM;IAEN,8CAA8C;IAC9C,sFAAsF;IACtF,mFAAmF;IACnF,mEAAmE;IACnE,4DAA4D;IAC5D,MAAM;IAEN,uCAAuC;IACvC,oCAAoC;IACpC,gCAAgC;IAChC,iCAAiC;IAEjC,8CAA8C;IAC9C,2GAA2G;IAC3G,8BAA8B;IAC9B,UAAU;IACV,yGAAyG;IACzG,6BAA6B;IAC7B,QAAQ;IACR,mEAAmE;IACnE,8EAA8E;IAC9E,6EAA6E;IAC7E,MAAM;AACR,CAAC,CAAC,CAAC","file":"local/common/events/test/EventAggregator.test.js","sourcesContent":["// import EventAggregator from '../EventAggregator';\r\n// import { IEvent, IEventCallback, IEventAggregator } from '../IEvent';\r\n// import { IMockEventData, MockEvent } from './EventMocks';\r\n\r\n// const { assert, expect } = chai;\r\n\r\ndescribe('EventAggregator', () => {\r\n  // it('Instantiation does not throw', () => {\r\n  //   expect(function () { new EventAggregator(); }).to.not.throw();\r\n  // });\r\n\r\n  // it('Invalid parameters are not accepted', () => {\r\n  //   let ea = new EventAggregator();\r\n  //   expect(function () { ea.subscribeByEventName('ev', 'subscriberId', () => { }) }).to.throw();\r\n  //   expect(function () { ea.subscribeByEventName('ev:action', null, () => { }) }).to.throw();\r\n  //   expect(function () { ea.subscribeByEventName('ev:action', 'subscriberId', null) }).to.throw();\r\n  //   expect(function () { ea.subscribeByEventName('ev:action', 'subscriberId', () => { }) }).to.not.throw();\r\n\r\n  //   expect(function () { ea.subscribeBySourceId(null, 'subscriberId', () => { }) }).to.throw();\r\n  //   expect(function () { ea.subscribeBySourceId('sourceId', null, () => { }) }).to.throw();\r\n  //   expect(function () { ea.subscribeBySourceId('sourceId', 'subscriberId', null) }).to.throw();\r\n  //   expect(function () { ea.subscribeBySourceId('sourceId', 'subscriberId', () => { }) }).to.not.throw();\r\n\r\n  //   expect(function () { ea.raiseEvent(null, new MockEvent()) }).to.throw();\r\n  //   expect(function () { ea.subscribeBySourceId('sourceId', null, () => { }) }).to.throw();\r\n  //   expect(function () { ea.subscribeBySourceId('sourceId', 'subscriberId', null) }).to.throw();\r\n  //   expect(function () { ea.subscribeBySourceId('sourceId', 'subscriberId', () => { }) }).to.not.throw();\r\n  // });\r\n\r\n  // it('Subscribe for event by name', () => {\r\n  //   let ea = new EventAggregator();\r\n  //   let calledEvent: string = null;\r\n\r\n  //   ea.subscribeByEventName<IMockEventData>('ev1:action1', 'subscriberId', (eventName, eventObject) =>\r\n  //   {\r\n  //     calledEvent = eventName;\r\n  //     assert.strictEqual(eventName, 'ev1:action1', 'incorrect event name');\r\n  //     assert.strictEqual(eventObject.data.value, 'eventValue', 'incorrect event value');\r\n  //   });\r\n\r\n  //   // Callback is called for the right event\r\n  //   ea.raiseEvent<IMockEventData>('ev1:action1', new MockEvent());\r\n  //   assert.strictEqual(calledEvent, 'ev1:action1', 'Callback was called');\r\n\r\n  //   // Callback is not called for a different event\r\n  //   ea.raiseEvent<IMockEventData>('ev2:action2', new MockEvent());\r\n  //   assert.strictEqual(calledEvent, 'ev1:action1', 'Callback was called');\r\n  // });\r\n\r\n  // it('Subscribe by source', () => {\r\n  //   let ea = new EventAggregator();\r\n  //   let calledSource;\r\n\r\n  //   ea.subscribeBySourceId<IMockEventData>('sourceId1', 'subscriberId', (eventName, eventObject) => {\r\n  //     calledSource = eventObject.sourceId;\r\n  //     assert.strictEqual(eventName, 'ev1:action1', 'incorrect event name');\r\n  //     assert.strictEqual(eventObject.sourceId, 'sourceId1', 'incorrect source');\r\n  //     assert.strictEqual(eventObject.data.value, 'eventValue', 'incorrect event value');\r\n  //   });\r\n\r\n  //   // Subscribed source\r\n  //   let event = new MockEvent();\r\n  //   ea.raiseEvent<IMockEventData>('ev1:action1', event);\r\n  //   assert.strictEqual(calledSource, 'sourceId1', 'Callback was called');\r\n\r\n  //   event.sourceId = 'otherSourceId';\r\n  //   ea.raiseEvent<IMockEventData>('ev1:action1', event);\r\n  //   assert.strictEqual(calledSource, 'sourceId1', 'Callback was called');\r\n  // });\r\n\r\n  // it('Callback is called only once', () => {\r\n  //   let ea = new EventAggregator();\r\n  //   let calledCount = 0;\r\n\r\n  //   let callback = (eventName, eventObject) => {\r\n  //     calledCount++;\r\n  //   }\r\n\r\n  //   // Two subscriptions but called only once\r\n  //   ea.subscribeByEventName<IMockEventData>('ev1:action1', 'subscriberId', callback);\r\n  //   ea.subscribeBySourceId<IMockEventData>('sourceId1', 'subscriberId', callback);\r\n  //   ea.raiseEvent<IMockEventData>('ev1:action1', new MockEvent());\r\n  //   assert.strictEqual(calledCount, 1, 'Called only once');\r\n  // });\r\n\r\n  // it('Last subscription wins', () => {\r\n  //   let ea = new EventAggregator();\r\n  //   let firstCallbackCount = 0;\r\n  //   let secondCallbackCount = 0;\r\n\r\n  //   // Two subscriptions but called only once\r\n  //     ea.subscribeByEventName<IMockEventData>('ev1:action1', 'subscriberId', (eventName, eventObject) => {\r\n  //       firstCallbackCount++;\r\n  //     });\r\n  //   ea.subscribeByEventName<IMockEventData>('ev1:action1', 'subscriberId', (eventName, eventObject) => {\r\n  //     secondCallbackCount++;\r\n  //   });\r\n  //   ea.raiseEvent<IMockEventData>('ev1:action1', new MockEvent());\r\n  //   assert.strictEqual(firstCallbackCount, 0, 'Fist callback is not called');\r\n  //   assert.strictEqual(secondCallbackCount, 1, 'Second callback is called');\r\n  // });\r\n});\r\n"],"sourceRoot":"/src"}