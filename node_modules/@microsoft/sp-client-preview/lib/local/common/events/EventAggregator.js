/**
 * @copyright Microsoft Corporation. All rights reserved.
 *
 * @file Event aggregator utility. This utility is a generic publish-subscribe
 * model to help two or more components pass events to each other.
 */
"use strict";
var sp_client_base_1 = require('@microsoft/sp-client-base');
var ReservedEventNames_1 = require('./ReservedEventNames');
/**
 * Event Aggregator
 *
 * @internal
 */
var EventAggregator = (function () {
    function EventAggregator() {
        this._events = new Map();
        this._sources = new Map();
    }
    /**
     * Subscribe for an event from all sources
     *
     * @param Name of the event
     * @param Id of the subscriber to the event
     * @param Callback for when the event is raised
     */
    EventAggregator.prototype.subscribeByEventName = function (eventName, subscriberId, callback) {
        sp_client_base_1.Validate.isNotNullOrUndefined(eventName, 'eventName');
        this._validateEvent(eventName);
        this._setSubscription(eventName, subscriberId, callback, this._events);
    };
    /**
     * Subscribe for all events from a specific source.
     *
     * @param Source of the event
     * @param Id of the subscriber to the event
     * @param Callback for when the event is raised
     */
    EventAggregator.prototype.subscribeBySourceId = function (sourceId, subscriberId, callback) {
        sp_client_base_1.Validate.isNotNullOrUndefined(sourceId, 'sourceId');
        this._setSubscription(sourceId, subscriberId, callback, this._sources);
    };
    /**
     * Raise an event
     *
     * @param Event name
     * @param Event object
     */
    EventAggregator.prototype.raiseEvent = function (eventName, eventObject) {
        sp_client_base_1.Validate.isNotNullOrUndefined(eventName, 'eventName');
        sp_client_base_1.Validate.isNotNullOrUndefined(eventObject, 'eventObject');
        sp_client_base_1.Validate.isNotNullOrUndefined(eventObject.sourceId, 'eventObject.sourceId');
        var targets = {};
        this._validateEvent(eventName);
        // First process all eventName subscriptions and then sourceId subscriptions
        this._processEvent(eventName, eventObject, targets, this._events.get(eventName));
        this._processEvent(eventName, eventObject, targets, this._sources.get(eventObject.sourceId));
    };
    EventAggregator.prototype._validateEvent = function (eventName) {
        var e = eventName.split(ReservedEventNames_1.default.delimitor);
        if (e.length !== 2) {
            throw new Error('Event ' + eventName + ' not in eventName:action format');
        }
    };
    EventAggregator.prototype._processEvent = function (eventName, eventObject, targets, map) {
        if (map) {
            map.forEach(function (callback, targetId) {
                if (!targets[targetId]) {
                    targets[targetId] = true;
                    callback(eventName, eventObject);
                }
            });
        }
    };
    EventAggregator.prototype._setSubscription = function (id, subscriberId, callback, eventBucket) {
        sp_client_base_1.Validate.isNotNullOrUndefined(subscriberId, 'subscriberId');
        sp_client_base_1.Validate.isNotNullOrUndefined(callback, 'callback');
        if (!eventBucket.get(id)) {
            eventBucket.set(id, new Map());
        }
        var map = eventBucket.get(id);
        map.set(subscriberId, callback);
    };
    return EventAggregator;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = EventAggregator;

//# sourceMappingURL=EventAggregator.js.map
