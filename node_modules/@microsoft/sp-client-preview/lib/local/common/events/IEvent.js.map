{"version":3,"sources":["local/common/events/IEvent.ts"],"names":[],"mappings":"AAAA;;;;GAIG","file":"local/common/events/IEvent.js","sourcesContent":["/**\r\n * @copyright Microsoft Corporation. All rights reserved.\r\n *\r\n * @file Eventing related interfaces\r\n */\r\n\r\n/**\r\n * Event object\r\n *\r\n * @alpha\r\n */\r\nexport interface IEvent<T> {\r\n  sourceId: string;\r\n  targetId: string;\r\n  data?: T;\r\n}\r\n\r\n/**\r\n * Event callback\r\n *\r\n * @alpha\r\n */\r\nexport interface IEventCallback<T> {\r\n  (eventName: string, eventObject: IEvent<T>): void;\r\n}\r\n\r\n/**\r\n * Publis APIs for the EventAggregator. Event names must follow the following format\r\n * \"eventName:action\" e.g. \"configure:start\" and \"configure:end\"\r\n *\r\n * @alpha\r\n */\r\nexport interface IEventAggregator {\r\n\r\n  /**\r\n   * Subscribe for an event from all sources\r\n   *\r\n   * @param Name of the event\r\n   * @param Id of the subscriber to the event\r\n   * @param Callback for when the event is raised\r\n   */\r\n  subscribeByEventName<T>(eventName: string, subscriberId: string, callback: IEventCallback<T>): void;\r\n\r\n  /**\r\n   * Subscribe for all events from a specific source.\r\n   *\r\n   * @param Source of the event\r\n   * @param Id of the subscriber to the event\r\n   * @param Callback for when the event is raised\r\n   */\r\n  subscribeBySourceId<T>(sourceId: string, subscriberId: string, callback: IEventCallback<T>): void;\r\n\r\n  /**\r\n   * Raise an event\r\n   *\r\n   * @param Event name\r\n   * @param Event object\r\n   */\r\n  raiseEvent<T>(eventName: string, eventObject: IEvent<T>): void;\r\n}\r\n"],"sourceRoot":"/src"}