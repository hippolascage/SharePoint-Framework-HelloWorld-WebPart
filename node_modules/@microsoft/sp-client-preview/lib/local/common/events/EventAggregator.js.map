{"version":3,"sources":["local/common/events/EventAggregator.ts"],"names":[],"mappings":"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","file":"local/common/events/EventAggregator.js","sourcesContent":["/**\r\n * @copyright Microsoft Corporation. All rights reserved.\r\n *\r\n * @file Event aggregator utility. This utility is a generic publish-subscribe\r\n * model to help two or more components pass events to each other.\r\n */\r\n\r\nimport { Validate } from '@microsoft/sp-client-base';\r\n\r\nimport { IEvent, IEventCallback, IEventAggregator } from './IEvent';\r\nimport ReservedEventNames from './ReservedEventNames';\r\n\r\n/**\r\n * Event Aggregator\r\n *\r\n * @internal\r\n */\r\nexport default class EventAggregator implements IEventAggregator {\r\n\r\n  private _events: Map<string, Map<string, IEventCallback<{}>>> = new Map<string, Map<string, IEventCallback<{}>>>();\r\n  private _sources: Map<string, Map<string, IEventCallback<{}>>> = new Map<string, Map<string, IEventCallback<{}>>>();\r\n\r\n  /**\r\n   * Subscribe for an event from all sources\r\n   *\r\n   * @param Name of the event\r\n   * @param Id of the subscriber to the event\r\n   * @param Callback for when the event is raised\r\n   */\r\n  public subscribeByEventName<T>(eventName: string, subscriberId: string, callback: IEventCallback<T>): void {\r\n    Validate.isNotNullOrUndefined(eventName, 'eventName');\r\n    this._validateEvent(eventName);\r\n\r\n    this._setSubscription(eventName, subscriberId, callback, this._events);\r\n  }\r\n\r\n  /**\r\n   * Subscribe for all events from a specific source.\r\n   *\r\n   * @param Source of the event\r\n   * @param Id of the subscriber to the event\r\n   * @param Callback for when the event is raised\r\n   */\r\n  public subscribeBySourceId<T>(sourceId: string, subscriberId: string, callback: IEventCallback<T>): void {\r\n    Validate.isNotNullOrUndefined(sourceId, 'sourceId');\r\n\r\n    this._setSubscription(sourceId, subscriberId, callback, this._sources);\r\n  }\r\n\r\n  /**\r\n   * Raise an event\r\n   *\r\n   * @param Event name\r\n   * @param Event object\r\n   */\r\n  public raiseEvent<T>(eventName: string, eventObject: IEvent<T>): void {\r\n    Validate.isNotNullOrUndefined(eventName, 'eventName');\r\n    Validate.isNotNullOrUndefined(eventObject, 'eventObject');\r\n    Validate.isNotNullOrUndefined(eventObject.sourceId, 'eventObject.sourceId');\r\n\r\n    const targets: {} = {};\r\n    this._validateEvent(eventName);\r\n\r\n    // First process all eventName subscriptions and then sourceId subscriptions\r\n    this._processEvent(eventName, eventObject, targets, this._events.get(eventName));\r\n    this._processEvent(eventName, eventObject, targets, this._sources.get(eventObject.sourceId));\r\n  }\r\n\r\n  private _validateEvent(eventName: string): void {\r\n    const e: string[] = eventName.split(ReservedEventNames.delimitor);\r\n\r\n    if (e.length !== 2) {\r\n      throw new Error('Event ' + eventName + ' not in eventName:action format');\r\n    }\r\n  }\r\n\r\n  private _processEvent<T>(\r\n    eventName: string,\r\n    eventObject: IEvent<T>,\r\n    targets: Object,\r\n    map: Map<string, IEventCallback<{}>>): void {\r\n\r\n    if (map) {\r\n      map.forEach((callback: IEventCallback<{}>, targetId: string) => {\r\n        if (!targets[targetId]) {\r\n          targets[targetId] = true;\r\n          callback(eventName, eventObject);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  private _setSubscription(\r\n    id: string,\r\n    subscriberId: string,\r\n    callback: IEventCallback<{}>,\r\n    eventBucket: Map<string, Map<string, IEventCallback<{}>>>): void {\r\n\r\n    Validate.isNotNullOrUndefined(subscriberId, 'subscriberId');\r\n    Validate.isNotNullOrUndefined(callback, 'callback');\r\n\r\n    if (!eventBucket.get(id)) {\r\n      eventBucket.set(id, new Map<string, IEventCallback<{}>>());\r\n    }\r\n\r\n    const map: Map<string, IEventCallback<{}>> = eventBucket.get(id);\r\n    map.set(subscriberId, callback);\r\n  }\r\n}\r\n"],"sourceRoot":"/src"}