/**
 * @copyright Microsoft Corporation. All rights reserved.
 *
 * @file Eventing related interfaces
 */
/**
 * Event object
 *
 * @alpha
 */
export interface IEvent<T> {
    sourceId: string;
    targetId: string;
    data?: T;
}
/**
 * Event callback
 *
 * @alpha
 */
export interface IEventCallback<T> {
    (eventName: string, eventObject: IEvent<T>): void;
}
/**
 * Publis APIs for the EventAggregator. Event names must follow the following format
 * "eventName:action" e.g. "configure:start" and "configure:end"
 *
 * @alpha
 */
export interface IEventAggregator {
    /**
     * Subscribe for an event from all sources
     *
     * @param Name of the event
     * @param Id of the subscriber to the event
     * @param Callback for when the event is raised
     */
    subscribeByEventName<T>(eventName: string, subscriberId: string, callback: IEventCallback<T>): void;
    /**
     * Subscribe for all events from a specific source.
     *
     * @param Source of the event
     * @param Id of the subscriber to the event
     * @param Callback for when the event is raised
     */
    subscribeBySourceId<T>(sourceId: string, subscriberId: string, callback: IEventCallback<T>): void;
    /**
     * Raise an event
     *
     * @param Event name
     * @param Event object
     */
    raiseEvent<T>(eventName: string, eventObject: IEvent<T>): void;
}
