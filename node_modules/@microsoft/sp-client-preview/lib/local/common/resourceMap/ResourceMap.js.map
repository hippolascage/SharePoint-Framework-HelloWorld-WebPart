{"version":3,"sources":["local/common/resourceMap/ResourceMap.ts"],"names":[],"mappings":"AAAA;;;GAGG;;AAWH;;GAEG;AACH;IAGE,0BAA0B;IAE1B;;OAEG;IACH;QACE,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;IACrB,CAAC;IAED;;;;;;OAMG;IACI,6BAAO,GAAd,UAAkB,GAAiB;QACjC,IAAM,MAAM,GAAe,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QACjD,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACX,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC;QACzB,CAAC;QAED,MAAM,IAAI,KAAK,CAAC,eAAa,GAAG,CAAC,EAAE,WAAM,GAAG,CAAC,IAAI,mDAAgD,CAAC,CAAC;IACrG,CAAC;IAED;;;;;;;OAOG;IACI,4BAAM,GAAb,UAAiB,GAAiB,EAAE,QAAW,EAAE,IAAkB;QACjE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG;YACtB,QAAQ,EAAE,QAAQ;YAClB,YAAY,EAAE,IAAI;SACnB,CAAC;QAEF,MAAM,CAAC,QAAQ,CAAC;IAClB,CAAC;IAEM,6BAAO,GAAd;QACE,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;IACrB,CAAC;IACH,kBAAC;AAAD,CAhDA,AAgDC,IAAA;AAhDY,mBAAW,cAgDvB,CAAA;AAGD;kBAAe,IAAI,WAAW,EAAE,CAAC;AACjC,+BAA+B","file":"local/common/resourceMap/ResourceMap.js","sourcesContent":["/**\r\n * @file ResourceMap.ts\r\n * @Copyright (c) Microsoft Corporation.  All rights reserved.\r\n */\r\n\r\nimport IResourceKey from './IResourceKey';\r\nimport IDisposable from '../IDisposable';\r\nimport ResourceType from './ResourceType';\r\n\r\ninterface IHandle<T> {\r\n  instance: T;\r\n  resourceType: ResourceType;\r\n}\r\n\r\n/**\r\n * Represents a ResourceMap used to map resources\r\n */\r\nexport class ResourceMap implements IDisposable {\r\n  /* tslint:disable:no-any */\r\n  private _handles: { [keyId: string]: IHandle<any> };\r\n  /* tslint:enable:no-any */\r\n\r\n  /**\r\n   * Initializes a new instance of a ResourceMap\r\n   */\r\n  constructor() {\r\n    this._handles = {};\r\n  }\r\n\r\n  /**\r\n   * Obtains the instance of a resource with the given key if exposed\r\n   * else throws and error\r\n   * @param key represents the key used to identify the resource\r\n   *\r\n   * @returns the resource instance\r\n   */\r\n  public consume<T>(key: IResourceKey): T {\r\n    const handle: IHandle<T> = this._handles[key.id];\r\n    if (handle) {\r\n      return handle.instance;\r\n    }\r\n\r\n    throw new Error(`Resource '${key.id}' (${key.name}) is being consumed, but has not been exposed.`);\r\n  }\r\n\r\n  /**\r\n   * Exposes a resource with a key to be consumed by others\r\n   * @param key represents the  key associated with this resource\r\n   * @param instance represents the resource instance\r\n   * @param type represents the resource type\r\n   *\r\n   * @returns the resource instance\r\n   */\r\n  public expose<T>(key: IResourceKey, instance: T, type: ResourceType): T {\r\n    this._handles[key.id] = {\r\n      instance: instance,\r\n      resourceType: type\r\n    };\r\n\r\n    return instance;\r\n  }\r\n\r\n  public dispose(): void {\r\n    this._handles = {};\r\n  }\r\n}\r\n\r\n/* tslint:disable:export-name */\r\nexport default new ResourceMap();\r\n/* tslint:enable:export-name */\r\n"],"sourceRoot":"/src"}