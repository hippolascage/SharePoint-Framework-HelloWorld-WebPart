/**
 * @file ResourceMap.ts
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 */
"use strict";
/**
 * Represents a ResourceMap used to map resources
 */
var ResourceMap = (function () {
    /* tslint:enable:no-any */
    /**
     * Initializes a new instance of a ResourceMap
     */
    function ResourceMap() {
        this._handles = {};
    }
    /**
     * Obtains the instance of a resource with the given key if exposed
     * else throws and error
     * @param key represents the key used to identify the resource
     *
     * @returns the resource instance
     */
    ResourceMap.prototype.consume = function (key) {
        var handle = this._handles[key.id];
        if (handle) {
            return handle.instance;
        }
        throw new Error("Resource '" + key.id + "' (" + key.name + ") is being consumed, but has not been exposed.");
    };
    /**
     * Exposes a resource with a key to be consumed by others
     * @param key represents the  key associated with this resource
     * @param instance represents the resource instance
     * @param type represents the resource type
     *
     * @returns the resource instance
     */
    ResourceMap.prototype.expose = function (key, instance, type) {
        this._handles[key.id] = {
            instance: instance,
            resourceType: type
        };
        return instance;
    };
    ResourceMap.prototype.dispose = function () {
        this._handles = {};
    };
    return ResourceMap;
}());
exports.ResourceMap = ResourceMap;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = new ResourceMap();
/* tslint:enable:export-name */

//# sourceMappingURL=ResourceMap.js.map
