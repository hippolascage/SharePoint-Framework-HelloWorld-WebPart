{"version":3,"sources":["local/common/webParts/IWebPartHost.ts"],"names":[],"mappings":"AAAA;;;;GAIG","file":"local/common/webParts/IWebPartHost.js","sourcesContent":["/**\r\n * @Copyright (c) Microsoft Corporation.  All rights reserved.\r\n *\r\n * @file Interface that a client side web part host needs to implement.\r\n */\r\n\r\nimport { IServiceScopeProvider, ServiceScope } from '@microsoft/sp-client-base';\r\n\r\nimport { IWebPartConfigurationEventCallback } from '../../common/webParts/PropertyPaneDefinitions';\r\n\r\n/**\r\n * A web part host is a component, control or a page that hosts client side web parts.\r\n * The web part infrastructure provides many features inbuilt e.g. an HttpClient to make\r\n * server requests and the SPPageContext. The porpose of this interface is not to replicate\r\n * those feature. This interface outlines the services and features where there needs to be\r\n * a direct interaction between the host and the web part infrastructure. This interface also\r\n * outlines some services where the web part host may want to override the default\r\n * implementations provided by the infrastructure. Let us discuss some examples:\r\n *\r\n *  - APIs like setDirty, webPartConfigurationEventCallback help the web part infrastucture\r\n *    communicate the fact that some web part is in a dirty state  or web part communication\r\n *    events to the host.\r\n *\r\n * - In future we expect that this interface will be used to provide services where the host\r\n *   might want to override the default implemenations. e.g.\r\n *   - the web part status rendering service. The default implementation of this service\r\n *     provides an office fabric spinny. But a certain host could easily want to show a\r\n *     different spinny.\r\n *\r\n *   - The event aggregation service. Currently the web part manager hosts a single event\r\n *     event aggregator. But there are possibilities when a page can have multiple hosts\r\n *     and each host may want to scope its event aggregation service.\r\n */\r\ninterface IWebPartHost extends IServiceScopeProvider {\r\n\r\n  /**\r\n   * ServiceScope provides a formalized way for components to register and consume dependencies\r\n   * (\"services\"), and to enable different implementations to be registered in different scopes.\r\n   * This improves modularity by decoupling components from their dependencies in an extensible way.\r\n   * serviceScope: ServiceScope;\r\n   */\r\n  serviceScope: ServiceScope;\r\n\r\n  /*\r\n   * API for the webpart to mark the containing host as dirty.\r\n   */\r\n  /* tslint:disable:no-any */\r\n  setDirty?: (instanceId: string, data?: any) => void;\r\n  /* tslint:enable:no-any */\r\n\r\n  /**\r\n   * Web part configuration event callback.\r\n   */\r\n  webPartConfigurationEventCallback?: IWebPartConfigurationEventCallback;\r\n}\r\n\r\nexport default IWebPartHost;\r\n"],"sourceRoot":"/src"}