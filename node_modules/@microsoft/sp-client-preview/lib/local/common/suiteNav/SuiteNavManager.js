/**
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * @file Data source for the suite nav.
 */
"use strict";
var sp_client_base_1 = require('@microsoft/sp-client-base');
var sp_module_loader_1 = require('@microsoft/sp-module-loader');
var odsp_utilities_bundle_1 = require('@ms/odsp-utilities-bundle');
var ISuiteNavDataSource_1 = require('./dataAccess/ISuiteNavDataSource');
var SPOSuiteNavDataSource_1 = require('./dataAccess/SPOSuiteNavDataSource');
var OnPremSuiteNavDataSource_1 = require('./dataAccess/OnPremSuiteNavDataSource');
var O365ShellWrapper_1 = require('./O365ShellWrapper');
var SPPageChrome_1 = require('../spPageChrome/SPPageChrome');
var SuiteNavManager = (function () {
    function SuiteNavManager(suiteNavManagerConfiguration, suiteNavDiv, serviceScope) {
        var _this = this;
        this._suiteNavManagerConfiguration = suiteNavManagerConfiguration;
        this._suiteNavDataSource = undefined;
        this._o365Shell = undefined;
        this._suiteNavManagerConfiguration.o365ShellRenderSettings.top = suiteNavDiv.id;
        this._suiteNavDiv = suiteNavDiv;
        this._serviceScope = serviceScope;
        serviceScope.whenFinished(function () {
            _this._httpClient = serviceScope.consume(sp_client_base_1.httpClientServiceKey);
        });
        if (!suiteNavManagerConfiguration.isSuiteNavDisabled()) {
            SPPageChrome_1.default.getInstance(this._serviceScope).changeSuiteNavHeight(SuiteNavManager._defaultSuiteNavHeight);
        }
    }
    SuiteNavManager._updateCache = function (model, service) {
        SuiteNavManager._cache.setValue(SuiteNavManager.DATA_KEY, model);
        SuiteNavManager._cache.setValue(SuiteNavManager.DATE_KEY, new Date());
        SuiteNavManager._cache.setValue(SuiteNavManager.VERSION_KEY, SuiteNavManager.CACHE_VERSION);
        SuiteNavManager._cache.setValue(SuiteNavManager.SESSION_KEY, true, odsp_utilities_bundle_1.DataStoreCachingType.session);
        SuiteNavManager._cache.setValue(SuiteNavManager.SERVICE_KEY, service);
    };
    SuiteNavManager._clearCache = function () {
        SuiteNavManager._cache.remove(SuiteNavManager.DATA_KEY);
        SuiteNavManager._cache.remove(SuiteNavManager.DATE_KEY);
        SuiteNavManager._cache.remove(SuiteNavManager.VERSION_KEY);
        SuiteNavManager._cache.remove(SuiteNavManager.SERVICE_KEY);
    };
    /**
     * Sets the SuiteNav to be visible or not.
     * @param setVisible Set the visibility to be on or off.
     */
    SuiteNavManager.prototype.setComponentVisibility = function (setVisible) {
        var _this = this;
        this._suiteNavDiv.hidden = !setVisible;
        if (this._suiteNavModel) {
            this._suiteNavModel.then(function (model) {
                SPPageChrome_1.default.getInstance(_this._serviceScope).changeSuiteNavHeight(setVisible ?
                    model.NavBarData.Dimensions.Top :
                    '0px');
            });
        }
    };
    /**
     * Loads the SuiteNav into the page by obtaining the data, building the model, getting the shell wrapper
     * and rendering it onto the page.
     */
    SuiteNavManager.prototype.loadSuiteNav = function () {
        var _this = this;
        if (!this._suiteNavManagerConfiguration.isSuiteNavDisabled()) {
            this._suiteNavModel = this._getSuiteNavModel();
            this._suiteNavModel
                .then(function (suiteNavModel) { return _this._modifySuiteNavModel(suiteNavModel); })
                .then(function (suiteNavModel) { return _this._getSuiteNavShell(suiteNavModel); })
                .then(function (o365ShellWrapper) { return _this._renderSuiteNav(o365ShellWrapper); });
        }
    };
    /**
     * Gets the suite nav data. Tries to grab SPO and OnPrem version in parallel and if SPO fails then
     * the onPrem version is loaded.
     * @param webServerRelativeUrl represents the SharePoint web server relative URL
     * @param cultureName represents the name of the culture (e.g. 'en-us')
     * @returns a promise that resolves to a string containing the response from the Suite Nav service.
     */
    SuiteNavManager.prototype._getSuiteNavModel = function () {
        if (this._isCacheValid() && !this._isCacheOutdated()) {
            return this._loadSuiteNavFromCache();
        }
        else {
            SuiteNavManager._clearCache();
            return this._loadSuiteNavFromServer();
        }
    };
    SuiteNavManager.prototype._loadSuiteNavFromCache = function () {
        var _this = this;
        return new Promise(function (complete) {
            SuiteNavManager._cache.getValue(SuiteNavManager.SERVICE_KEY) ===
                ISuiteNavDataSource_1.SuiteNavSource.SPO ?
                _this._suiteNavDataSource = _this._createSPODataSource() :
                _this._suiteNavDataSource = _this._createOnPremDataSource();
            complete(SuiteNavManager._cache.getValue(SuiteNavManager.DATA_KEY));
        });
    };
    SuiteNavManager.prototype._loadSuiteNavFromServer = function () {
        var _this = this;
        this._suiteNavDataSource = this._createSPODataSource();
        var onPremDataSource = this._createOnPremDataSource();
        var onPremSuiteNavResponse = onPremDataSource.loadData();
        onPremSuiteNavResponse.catch(function () {
            _this._createSuiteNavErrorLogEntry('loadData', 'Failed to retrieve Hybrid SuiteNavData');
        });
        return this._suiteNavDataSource.loadData().then(function (response) {
            return response;
        }).catch(function () {
            _this._createSuiteNavErrorLogEntry('loadData', 'Failed to retrieve SPO SuiteNavData');
            _this._suiteNavDataSource = onPremDataSource;
            return onPremSuiteNavResponse;
        });
    };
    /**
    * Alters the server response with the suite nav data.
    */
    SuiteNavManager.prototype._modifySuiteNavModel = function (suiteNavResponse) {
        suiteNavResponse.NavBarData =
            this._suiteNavManagerConfiguration.modifySuiteNavData(suiteNavResponse.NavBarData);
        return suiteNavResponse;
    };
    /**
     * Gets the O365Shell object, once it's loaded. This will also load the shell CSS
     */
    SuiteNavManager.prototype._getSuiteNavShell = function (suiteNavModel) {
        if (!suiteNavModel) {
            this._createSuiteNavErrorLogEntry('getO365Shell', 'SuiteNavModel is undefined');
        }
        // update the cache
        suiteNavModel.CacheToken = this._suiteNavManagerConfiguration.cacheToken;
        suiteNavModel.UserIdentifier = this._suiteNavManagerConfiguration.systemUserKey;
        SuiteNavManager._updateCache(suiteNavModel, this._suiteNavDataSource.suiteNavService);
        SPPageChrome_1.default.getInstance(this._serviceScope).changeSuiteNavHeight(suiteNavModel.NavBarData.Dimensions.Top);
        var element = document.createElement('link');
        element.rel = 'stylesheet';
        element.type = 'text/css';
        element.href = suiteNavModel.CssUrl;
        document.head.appendChild(element);
        var promise = new Promise(function (complete) {
            var loadShell = function () {
                var o365Shell = new O365ShellWrapper_1.default();
                o365Shell.SetData(suiteNavModel.NavBarData);
                complete(o365Shell);
            };
            if (sp_module_loader_1.default && sp_module_loader_1.default.loadScript) {
                sp_module_loader_1.default.loadScript(suiteNavModel.JsUrl, '_o365su').then(loadShell);
            }
            else if (System && System.config && System.import) {
                System.config({
                    map: {
                        suiteNavJs: suiteNavModel.JsUrl
                    },
                    meta: {
                        suiteNavJs: {
                            format: 'global',
                            exports: '_o365su'
                        }
                    }
                });
                System.import('suiteNavJs').then(loadShell);
            }
            else {
                throw new Error('No loader could be found, unable to load the shell.');
            }
        });
        return promise;
    };
    /**
     * Renders the Suite Nav.
     * @param o365Shell represents the Suite Nav shell wrapper.
     * @param suiteNavData repsents the Suite Nav data that will be used for rendering.
     */
    SuiteNavManager.prototype._renderSuiteNav = function (o365Shell) {
        var _this = this;
        this._o365Shell = o365Shell;
        this._o365Shell.RenderAsync(this._suiteNavManagerConfiguration.o365ShellRenderSettings, function () {
            _this._onRender(o365Shell);
        }, function () {
            _this._onPostRender();
        });
        this._o365Shell.OnHasMember('LoadShellPlus', function () {
            _this._loadShellPlus(_this._o365Shell);
        });
    };
    SuiteNavManager.prototype._onRender = function (o365Shell) {
        if (this._suiteNavManagerConfiguration.hamburgerCallback) {
            if (o365Shell.Navigation.OnHamburgerButtonClick) {
                o365Shell.Navigation.OnHamburgerButtonClick(this._suiteNavManagerConfiguration.hamburgerCallback);
            }
        }
    };
    SuiteNavManager.prototype._onPostRender = function () {
        if (this._suiteNavManagerConfiguration.suiteNavPostRenderCallback) {
            this._suiteNavManagerConfiguration.suiteNavPostRenderCallback();
        }
    };
    /**
      * LoadShellPlus will start downloading additional files required for notifications
      * and such. Once ShellPlus is ready, postRenderActions will be called.
      */
    SuiteNavManager.prototype._loadShellPlus = function (o365Shell) {
        var _this = this;
        return new Promise(function () {
            o365Shell.LoadShellPlus();
        }).catch(function (errorMessage) {
            _this._createSuiteNavErrorLogEntry('loadShellPlus', errorMessage);
        });
    };
    SuiteNavManager.prototype._isCacheValid = function () {
        // Cached data is valid (still usable for rendering) if:
        // - the CSS URL and JS URL are present (if we're trying to load the real suite nav)
        // - the data is for the same user
        // - the cache version is the same
        // - the site client tag is the same (if it's different, the theme has changed)
        var model = SuiteNavManager._cache.getValue(SuiteNavManager.DATA_KEY);
        var oldVersion = SuiteNavManager._cache.getValue(SuiteNavManager.VERSION_KEY);
        return (model && model.NavBarData &&
            ((model.JsUrl && model.CssUrl)) &&
            oldVersion === SuiteNavManager.CACHE_VERSION &&
            model.UserIdentifier &&
            model.UserIdentifier === this._suiteNavManagerConfiguration.systemUserKey &&
            model.CacheToken === this._suiteNavManagerConfiguration.cacheToken);
    };
    SuiteNavManager.prototype._isCacheOutdated = function () {
        // "Outdated" means:
        // - it's more than 24 hours old
        // - it was not cached in the current browsing session (only applies if sessionStorage available)
        var cacheDate = Date.parse(SuiteNavManager._cache.getValue(SuiteNavManager.DATE_KEY));
        var currentDate = new Date();
        var cachedThisSession = SuiteNavManager._cache.getValue(SuiteNavManager.SESSION_KEY, odsp_utilities_bundle_1.DataStoreCachingType.session);
        return (isNaN(cacheDate) ||
            currentDate.getTime() - cacheDate > 24 * 60 * 60 * 1000 ||
            (odsp_utilities_bundle_1.DataStore.hasStorageType(odsp_utilities_bundle_1.DataStoreCachingType.session) && !cachedThisSession));
    };
    SuiteNavManager.prototype._createSPODataSource = function () {
        return new SPOSuiteNavDataSource_1.default(this._httpClient, this._suiteNavManagerConfiguration.currentUICultureName, this._suiteNavManagerConfiguration.webServerRelativeUrl);
    };
    SuiteNavManager.prototype._createOnPremDataSource = function () {
        return new OnPremSuiteNavDataSource_1.default(this._httpClient, this._suiteNavManagerConfiguration.currentUICultureName, this._suiteNavManagerConfiguration.webServerRelativeUrl);
    };
    /**
    * Create a log entry for logging
    * @param moduleName represents the module that the logger was called in
    * @param errorMessage represents the error string that occured
    */
    SuiteNavManager.prototype._createSuiteNavErrorLogEntry = function (moduleName, errorMessage) {
        sp_client_base_1._TraceLogger.logVerbose(SuiteNavManager._logSource, 'SuiteNavManager ' + moduleName + ' ' + errorMessage);
    };
    SuiteNavManager._defaultSuiteNavHeight = '50px';
    SuiteNavManager.CACHE_PREFIX = 'SPPPLATSuiteNav';
    SuiteNavManager.SERVICE_KEY = 'SuiteNavService';
    SuiteNavManager.DATA_KEY = 'Data';
    SuiteNavManager.DATE_KEY = 'CacheDate';
    SuiteNavManager.VERSION_KEY = 'CacheVersion';
    SuiteNavManager.SESSION_KEY = 'CachedThisSession';
    // This constant can be used to invalidate the cache if we make incompatible changes
    SuiteNavManager.CACHE_VERSION = 1;
    SuiteNavManager._cache = new odsp_utilities_bundle_1.DataStore(SuiteNavManager.CACHE_PREFIX, odsp_utilities_bundle_1.DataStoreCachingType.local);
    SuiteNavManager._logSource = sp_client_base_1._LogSource.create('SuiteNavManager');
    return SuiteNavManager;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SuiteNavManager;

//# sourceMappingURL=SuiteNavManager.js.map
