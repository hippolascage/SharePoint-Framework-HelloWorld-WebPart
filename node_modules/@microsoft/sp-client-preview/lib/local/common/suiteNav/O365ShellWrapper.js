/**
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * @file Wrapper around the O365Shell global, preventing other files from needing to access the global
 */
"use strict";
var FlexPaneWrapper_1 = require('./FlexPaneWrapper');
var NavigationWrapper_1 = require('./NavigationWrapper');
var O365ShellWrapper = (function () {
    function O365ShellWrapper() {
        this._postRenderSignal = new Promise(function () {
            return;
        });
        this.FlexPane = new FlexPaneWrapper_1.default();
        this.Navigation = new NavigationWrapper_1.default();
    }
    /**
     * Sets the data to be consumed by the O365Shell
     */
    O365ShellWrapper.prototype.SetData = function (shellData) {
        O365Shell.SetData(shellData);
    };
    /**
     * Instructs the 0365 shell to render
     */
    O365ShellWrapper.prototype.Render = function (renderSettings, postRendercallback) {
        O365Shell.Render(renderSettings, postRendercallback);
    };
    /**
     * Instructs the 0365 shell to render async
     */
    O365ShellWrapper.prototype.RenderAsync = function (renderSettings, renderCallback, postRenderCallback) {
        O365Shell.RenderAsync(renderSettings, renderCallback, postRenderCallback);
    };
    /**
     * Load shell plus (extra features like notifications). Only functions properly on SPO.
     */
    O365ShellWrapper.prototype.LoadShellPlus = function () {
        O365Shell.LoadShellPlus();
    };
    /**
     * Not provided by O365Shell. Tells whether the O365Shell global exists.
     */
    O365ShellWrapper.prototype.DoesShellExist = function () {
        return typeof O365Shell !== 'undefined';
    };
    /**
     * This is not provided by O365Shell. It invokes a given callback when a member/function
     * name is defined. This is useful when a component is trying to access a O365Shell
     * member but is not in charge of loading it.
     *
     * @params member name to be checked for avaliability
     * @parmas callback function to be called if the member is avaliable
     */
    O365ShellWrapper.prototype.OnHasMember = function (memberName, callback) {
        var _this = this;
        if (this._hasMember(memberName)) {
            callback();
        }
        else {
            /** Wait for the next render completition and call this method recursively to check if the member
             * is now available.
             */
            this._postRenderSignal.then(function () { return _this.OnHasMember(memberName, callback); });
        }
    };
    /**
    * This is not provided by O365Shell. It just checks if a given member/function name
    * is defined on the global shell object, as an alternative to if (O365Shell.Whatever) { ... }.
    */
    O365ShellWrapper.prototype._hasMember = function (memberName) {
        return this.DoesShellExist() && Boolean(O365Shell[memberName]);
    };
    return O365ShellWrapper;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = O365ShellWrapper;

//# sourceMappingURL=O365ShellWrapper.js.map
