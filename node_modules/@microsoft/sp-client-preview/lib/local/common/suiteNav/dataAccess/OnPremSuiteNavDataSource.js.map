{"version":3,"sources":["local/common/suiteNav/dataAccess/OnPremSuiteNavDataSource.ts"],"names":[],"mappings":";AACA,gCAA4B,oBAAoB,CAAC,CAAA;AACjD,oCAAoD,uBAAuB,CAAC,CAAA;AAC5E,+BAIO,2BAA2B,CAAC,CAAA;AAQnC;IAQE;;;;OAIG;IACH,kCAAY,UAAsB,EAAE,oBAA4B,EAAE,oBAA4B;QAVvF,oBAAe,GAAmB,oCAAc,CAAC,MAAM,CAAC;QAW7D,IAAI,CAAC,qBAAqB,GAAG,oBAAoB,CAAC;QAClD,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,IAAI,CAAC,WAAW,GAAG,oBAAoB,KAAK,GAAG,GAAG,EAAE,GAAG,oBAAoB,CAAC;IAC9E,CAAC;IAED,mDAAmD;IAC5C,2CAAQ,GAAf;QAAA,iBAyBC;QAxBC,IAAM,GAAG,GACP,IAAI,CAAC,WAAW;cACd,4EAA4E;cAC5E,IAAI,CAAC,qBAAqB,CAAC;QAE/B,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC;aAC7B,IAAI,CAAC,UAAC,QAAkB;YACvB,EAAE,CAAC,CAAC,QAAQ,CAAC,MAAM,KAAK,GAAG,CAAC,CAAC,CAAC;gBAC5B,KAAI,CAAC,gCAAgC,EAAE,CAAC;YAC1C,CAAC;YAED,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,UAAC,UAAqC;gBAChE,EAAE,CAAC,CAAC,UAAU,CAAC,KAAK,KAAK,EAAE,CAAC,CAAC,CAAC;oBAC5B,KAAI,CAAC,gCAAgC,EAAE,CAAC;gBAC1C,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,IAAM,gBAAgB,GAAmC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;oBACtF,wEAAwE;oBACxE,EAAE,CAAC,CAAC,CAAC,gBAAgB,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC;wBAC5C,gBAAgB,CAAC,UAAU,CAAC,UAAU,GAAG,EAAE,GAAG,EAAE,yBAAe,CAAC,sBAAsB,EAAC,CAAC;oBAC1F,CAAC;oBACD,MAAM,CAAC,gBAAgB,CAAC;gBAC1B,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,mEAAgC,GAAxC;QACE,6BAAY,CAAC,UAAU,CAAC,wBAAwB,CAAC,UAAU,EAAE,wCAAwC,CAAC,CAAC;QACvG,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;IAC5D,CAAC;IAjDD,sCAAsC;IACvB,mCAAU,GAAe,2BAAU,CAAC,MAAM,CAAC,0BAA0B,CAAC,CAAC;IAiDxF,+BAAC;AAAD,CAnDA,AAmDC,IAAA;AAnDD;0CAmDC,CAAA","file":"local/common/suiteNav/dataAccess/OnPremSuiteNavDataSource.js","sourcesContent":["import ISuiteNavModel from '../models/ISuiteNavModel';\r\nimport SuiteNavManager from '../SuiteNavManager';\r\nimport { ISuiteNavDataSource, SuiteNavSource } from './ISuiteNavDataSource';\r\nimport {\r\n  HttpClient,\r\n  _LogSource,\r\n  _TraceLogger\r\n} from '@microsoft/sp-client-base';\r\n\r\n// Interface for the object returned by Response.json()\r\ninterface IResponseJSONStringObject {\r\n  'odata.metadata': string;\r\n  value: string;\r\n}\r\n\r\nexport default class OnPremSuiteNavDataSource implements ISuiteNavDataSource {\r\n  // @TODO Bug 169685 change to readonly\r\n  private static _logSource: _LogSource = _LogSource.create('OnPremSuiteNavDataSource');\r\n  public suiteNavService: SuiteNavSource = SuiteNavSource.OnPrem;\r\n  private _currentUICultureName: string;\r\n  private _httpClient: HttpClient;\r\n  private _siteRelUrl: string;\r\n\r\n  /**\r\n   * Initializes a new instance of the SuiteNavManagerConfiguration\r\n   * @TODO Task 161973 Add PageContext and set the\r\n   * webPermissionMask/suiteNavData.UserDisplayName/webServerRelativeUrl/currentUICultureName\r\n   */\r\n  constructor(httpClient: HttpClient, currentUICultureName: string, webServerRelativeUrl: string) {\r\n    this._currentUICultureName = currentUICultureName;\r\n    this._httpClient = httpClient;\r\n    this._siteRelUrl = webServerRelativeUrl === '/' ? '' : webServerRelativeUrl;\r\n  }\r\n\r\n  // Downloads the OnPrem version of the SuiteNavData\r\n  public loadData(): Promise<ISuiteNavModel> {\r\n    const url: string =\r\n      this._siteRelUrl\r\n      + '/_api/Microsoft.SharePoint.Portal.SuiteNavData.GetSuiteNavData?v=2&Locale='\r\n      + this._currentUICultureName;\r\n\r\n    return this._httpClient.get(url)\r\n      .then((response: Response) => {\r\n        if (response.status !== 200) {\r\n          this._logAndThrowSuiteNavLoadingError();\r\n        }\r\n\r\n        return response.json().then((jsonString: IResponseJSONStringObject) => {\r\n          if (jsonString.value === '') {\r\n            this._logAndThrowSuiteNavLoadingError();\r\n          } else {\r\n            const suiteNavResponse: ISuiteNavModel = <ISuiteNavModel>JSON.parse(jsonString.value);\r\n            // If the height of the suiteNav is not provided, assume that it is 50px\r\n            if (!suiteNavResponse.NavBarData.Dimensions) {\r\n              suiteNavResponse.NavBarData.Dimensions = { Top: SuiteNavManager._defaultSuiteNavHeight};\r\n            }\r\n            return suiteNavResponse;\r\n          }\r\n        });\r\n      });\r\n  }\r\n\r\n  private _logAndThrowSuiteNavLoadingError(): void {\r\n    _TraceLogger.logVerbose(OnPremSuiteNavDataSource._logSource, 'Failed to retrieve Hybrid SuiteNavData');\r\n    throw new Error('Failed to retrieve Hybrid SuiteNavData');\r\n  }\r\n}\r\n"],"sourceRoot":"/src"}