{"version":3,"sources":["local/common/suiteNav/O365ShellWrapper.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;AAIH,gCAA4B,mBAAmB,CAAC,CAAA;AAChD,kCAA8B,qBAAqB,CAAC,CAAA;AAIpD;IAQE;QACE,IAAI,CAAC,iBAAiB,GAAG,IAAI,OAAO,CAAO;YACzC,MAAM,CAAC;QACT,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,QAAQ,GAAG,IAAI,yBAAe,EAAE,CAAC;QACtC,IAAI,CAAC,UAAU,GAAG,IAAI,2BAAiB,EAAE,CAAC;IAC5C,CAAC;IAED;;OAEG;IACI,kCAAO,GAAd,UAAe,SAAwB;QACrC,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IAC/B,CAAC;IAED;;OAEG;IACI,iCAAM,GAAb,UAAc,cAAwC,EAAE,kBAA8B;QACpF,SAAS,CAAC,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;IACvD,CAAC;IAED;;OAEG;IACI,sCAAW,GAAlB,UACE,cAAwC,EACxC,cAA0B,EAC1B,kBAA8B;QAC9B,SAAS,CAAC,WAAW,CAAC,cAAc,EAAE,cAAc,EAAE,kBAAkB,CAAC,CAAC;IAC5E,CAAC;IAED;;OAEG;IACI,wCAAa,GAApB;QACE,SAAS,CAAC,aAAa,EAAE,CAAC;IAC5B,CAAC;IAED;;OAEG;IACI,yCAAc,GAArB;QACE,MAAM,CAAC,OAAO,SAAS,KAAK,WAAW,CAAC;IAC1C,CAAC;IAED;;;;;;;OAOG;IACI,sCAAW,GAAlB,UAAmB,UAAkB,EAAE,QAAoB;QAA3D,iBASC;QARC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YAChC,QAAQ,EAAE,CAAC;QACb,CAAC;QAAC,IAAI,CAAC,CAAC;YACN;;eAEG;YACH,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,cAAM,OAAA,KAAI,CAAC,WAAW,CAAC,UAAU,EAAE,QAAQ,CAAC,EAAtC,CAAsC,CAAC,CAAC;QAC5E,CAAC;IACH,CAAC;IAED;;;MAGE;IACM,qCAAU,GAAlB,UAAmB,UAAkB;QACnC,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,OAAO,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC;IACjE,CAAC;IACH,uBAAC;AAAD,CAhFA,AAgFC,IAAA;AAhFD;kCAgFC,CAAA","file":"local/common/suiteNav/O365ShellWrapper.js","sourcesContent":["/**\r\n * @Copyright (c) Microsoft Corporation.  All rights reserved.\r\n *\r\n * @file Wrapper around the O365Shell global, preventing other files from needing to access the global\r\n */\r\n\r\nimport { IO365Shell, IO365ShellRenderSettings } from './IO365Shell';\r\nimport ISuiteNavData from './models/ISuiteNavData';\r\nimport FlexPaneWrapper from './FlexPaneWrapper';\r\nimport NavigationWrapper from './NavigationWrapper';\r\n\r\ndeclare var O365Shell: O365ShellWrapper;\r\n\r\nexport default class O365ShellWrapper implements IO365Shell {\r\n  /* tslint:disable:variable-name */\r\n  public FlexPane: FlexPaneWrapper;\r\n  public Navigation: NavigationWrapper;\r\n  /* tslint:enable:variable-name */\r\n\r\n  private _postRenderSignal: Promise<void>;\r\n\r\n  constructor() {\r\n    this._postRenderSignal = new Promise<void>(() => {\r\n      return;\r\n    });\r\n    this.FlexPane = new FlexPaneWrapper();\r\n    this.Navigation = new NavigationWrapper();\r\n  }\r\n\r\n  /**\r\n   * Sets the data to be consumed by the O365Shell\r\n   */\r\n  public SetData(shellData: ISuiteNavData): void {\r\n    O365Shell.SetData(shellData);\r\n  }\r\n\r\n  /**\r\n   * Instructs the 0365 shell to render\r\n   */\r\n  public Render(renderSettings: IO365ShellRenderSettings, postRendercallback: () => void): void {\r\n    O365Shell.Render(renderSettings, postRendercallback);\r\n  }\r\n\r\n  /**\r\n   * Instructs the 0365 shell to render async\r\n   */\r\n  public RenderAsync(\r\n    renderSettings: IO365ShellRenderSettings,\r\n    renderCallback: () => void,\r\n    postRenderCallback: () => void): void {\r\n    O365Shell.RenderAsync(renderSettings, renderCallback, postRenderCallback);\r\n  }\r\n\r\n  /**\r\n   * Load shell plus (extra features like notifications). Only functions properly on SPO.\r\n   */\r\n  public LoadShellPlus(): void {\r\n    O365Shell.LoadShellPlus();\r\n  }\r\n\r\n  /**\r\n   * Not provided by O365Shell. Tells whether the O365Shell global exists.\r\n   */\r\n  public DoesShellExist(): boolean {\r\n    return typeof O365Shell !== 'undefined';\r\n  }\r\n\r\n  /**\r\n   * This is not provided by O365Shell. It invokes a given callback when a member/function\r\n   * name is defined. This is useful when a component is trying to access a O365Shell\r\n   * member but is not in charge of loading it.\r\n   *\r\n   * @params member name to be checked for avaliability\r\n   * @parmas callback function to be called if the member is avaliable\r\n   */\r\n  public OnHasMember(memberName: string, callback: () => void): void {\r\n    if (this._hasMember(memberName)) {\r\n      callback();\r\n    } else {\r\n      /** Wait for the next render completition and call this method recursively to check if the member\r\n       * is now available.\r\n       */\r\n      this._postRenderSignal.then(() => this.OnHasMember(memberName, callback));\r\n    }\r\n  }\r\n\r\n  /**\r\n  * This is not provided by O365Shell. It just checks if a given member/function name\r\n  * is defined on the global shell object, as an alternative to if (O365Shell.Whatever) { ... }.\r\n  */\r\n  private _hasMember(memberName: string): boolean {\r\n    return this.DoesShellExist() && Boolean(O365Shell[memberName]);\r\n  }\r\n}\r\n"],"sourceRoot":"/src"}