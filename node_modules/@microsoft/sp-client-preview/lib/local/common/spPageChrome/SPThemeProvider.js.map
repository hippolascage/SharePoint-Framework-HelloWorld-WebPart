{"version":3,"sources":["local/common/spPageChrome/SPThemeProvider.ts"],"names":[],"mappings":"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","file":"local/common/spPageChrome/SPThemeProvider.js","sourcesContent":["// TODO (Bug 223178) Move Theming engine from odsp-utilities to sp-client\\platform\\sp-client-shared\r\nimport { Promise as ODSPPromise } from '@ms/odsp-utilities-bundle';\r\nimport { FabricTheming, RgbaColor } from '@ms/odsp-utilities-bundle';\r\nimport { ThemeProvider, WebTheme, Uri } from '@ms/odsp-utilities-bundle';\r\nimport { IThemeData, IThemeDataRaw } from '@ms/odsp-utilities-bundle';\r\n\r\nimport {\r\n  HttpClient,\r\n  ServiceScope,\r\n  httpClientServiceKey,\r\n  _QosMonitor\r\n} from '@microsoft/sp-client-base';\r\n\r\nimport PageContext, { appPageContextServiceKey } from '../../framework/pageContext/AppPageContext';\r\nimport SPWebTemplateIds from './SPWebTemplateIds';\r\n\r\nimport { loadTheme } from 'load-themed-styles';\r\n\r\n// This is a map of tokenName 'theme:themePrimary' to color value '#0078d7'\r\ninterface IColorPalette {\r\n  [key: string]: string;\r\n}\r\n\r\n/**\r\n * The class controls applying a theme to the current Page.\r\n * The theme is a web level setting, if a theme is applied this class with call loadtheme\r\n * which will update the styles that are registered with load-themed-styles.\r\n *\r\n * The loadData method is called by the ThemeProvider class when it needs to get the IThemeData.\r\n * Once it has theme data it will cache it in local storage using the themedCssFolderUrl as the cache key.\r\n */\r\nexport default class SPThemeProvider {\r\n\r\n  private _pageContext: PageContext;\r\n  private _httpClient: HttpClient;\r\n  private _themeOverride: string;\r\n  private _themeProvider: ThemeProvider;\r\n\r\n  public constructor(serviceScope: ServiceScope) {\r\n\r\n    serviceScope.whenFinished(() => {\r\n      this._pageContext = serviceScope.consume(appPageContextServiceKey);\r\n      this._httpClient = serviceScope.consume(httpClientServiceKey);\r\n      this._themeProvider = new ThemeProvider(this.loadData.bind(this));\r\n\r\n      // Check for a theme override from the URL (as in the theme preview page).\r\n      try {\r\n        const contextUri: Uri = new Uri(window.location.href);\r\n        this._themeOverride = contextUri.getQueryParameter('ThemeOverride');\r\n      } catch (ignoredUrlException) {\r\n        // Just in case location.href throws for some reason.\r\n      }\r\n    });\r\n  }\r\n\r\n  public loadThemedStyles(): void {\r\n    const cacheToken: string = this.getCacheToken();\r\n    this._themeProvider.loadThemeTokenMap(cacheToken)\r\n      .then((palette: IColorPalette) => {\r\n        loadTheme(palette);\r\n      });\r\n  }\r\n\r\n  public loadData(): ODSPPromise<IThemeData> {\r\n    const tagName: string = 'SPThemeProvider.loadData';\r\n    const qosMonitor: _QosMonitor = new _QosMonitor(tagName);\r\n\r\n    if (this._pageContext.core.webTemplate) {\r\n      if (this._pageContext.core.webTemplate === SPWebTemplateIds.teamSite ||\r\n          this._pageContext.core.webTemplate === SPWebTemplateIds.groupSite) {\r\n        // check if the site has a theme applied\r\n        if (this._pageContext.core.themedCssFolderUrl) {\r\n          // Fetch Theme Data from SharePoint\r\n          const getThemeDataUrl: string = WebTheme.makeWebThemeRestUrl(this._pageContext.core.siteServerRelativeUrl,\r\n                                                                       this._pageContext.core.currentUICultureName,\r\n                                                                       this._themeOverride);\r\n          return new ODSPPromise((resolve, reject) => {\r\n            this._httpClient.get(getThemeDataUrl)\r\n            .then((response: Response) => {\r\n              if (response.status === 200) {\r\n                return response.json()\r\n                  /* tslint:disable:no-any */\r\n                  .then((json: any) => {\r\n                  /* tslint:enable:no-any */\r\n                    const themeDataRaw: IThemeDataRaw = JSON.parse(json.value) as IThemeDataRaw;\r\n                    if (themeDataRaw) {\r\n                      const themeData: IThemeData = WebTheme.processRawThemeData(themeDataRaw);\r\n                      themeData.cacheToken = this._pageContext.core.themedCssFolderUrl;\r\n                      qosMonitor.writeSuccess();\r\n                      resolve(themeData);\r\n                    } else {\r\n                      // ThemeProvider will handle undefined themeData as an error\r\n                      qosMonitor.writeUnexpectedFailure();\r\n                      resolve(undefined);\r\n                    }\r\n                });\r\n              } else {\r\n                // ThemeProvider will handle undefined themeData as an error\r\n                qosMonitor.writeUnexpectedFailure(tagName, new Error(response.statusText));\r\n                resolve(undefined);\r\n              }\r\n            });\r\n          });\r\n        } else if (this._pageContext.core.groupColor) {\r\n          // Generate a Fabric theme from the site color\r\n          const htmlThemeColor: string = this._pageContext.core.groupColor;\r\n          const rgbaThemeColor: RgbaColor = RgbaColor.fromHtmlColor(htmlThemeColor);\r\n          if (rgbaThemeColor) {\r\n              const fabTheme: IThemeData = {\r\n                  backgroundImageUri: undefined,\r\n                  cacheToken: this.getCacheToken(),\r\n                  isDefault: false,\r\n                  isInverted: false,\r\n                  palette: FabricTheming.generateFabricColors(rgbaThemeColor),\r\n                  version: '1'\r\n              };\r\n              return ODSPPromise.wrap(fabTheme);\r\n          } else {\r\n              // Return no theme to indicate default theme values should be used.\r\n              return ODSPPromise.wrap();\r\n          }\r\n        } else {\r\n          // Use Default SharePoint Color Palette\r\n          qosMonitor.writeSuccess();\r\n          return ODSPPromise.wrap(this.createDefaultTheme());\r\n        }\r\n      } else {\r\n        // Unknown Web Template, Use Default\r\n        qosMonitor.writeExpectedFailure(`Unsuppted WebTemplate: ${this._pageContext.core.webTemplate}`);\r\n        return ODSPPromise.wrap(this.createDefaultTheme());\r\n      }\r\n    } else {\r\n      qosMonitor.writeUnexpectedFailure(`pageContext.core.webTemplate is undefined`);\r\n      return ODSPPromise.wrap(this.createDefaultTheme());\r\n    }\r\n  }\r\n\r\n  private createDefaultTheme(): IThemeData {\r\n    const themeData: IThemeData = {\r\n      backgroundImageUri: undefined,\r\n      cacheToken: undefined,\r\n      isDefault: undefined,\r\n      isInverted: false,\r\n      palette: undefined,\r\n      version: '1.0'\r\n    };\r\n\r\n    return themeData;\r\n  }\r\n\r\n  private getCacheToken(): string {\r\n    const webTemplate: string = String(this._pageContext.core.webTemplate);\r\n    const groupColor: string =\r\n      webTemplate === SPWebTemplateIds.teamSite ||\r\n      webTemplate === SPWebTemplateIds.groupSite ? this._pageContext.core.groupColor : undefined;\r\n    const groupColorToken: string = groupColor && (groupColor + ';web#' + webTemplate);\r\n    return this._themeOverride || this._pageContext.core.themedCssFolderUrl || groupColorToken;\r\n  }\r\n}\r\n"],"sourceRoot":"/src"}