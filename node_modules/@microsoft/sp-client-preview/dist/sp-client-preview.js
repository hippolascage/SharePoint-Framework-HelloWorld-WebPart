define("4d5eb168-6729-49a8-aec7-0e397f486b6e", ["@microsoft/sp-lodash-subset","@microsoft/sp-client-base","4d5eb168-6729-49a8-aec7-0e397f486b6e_strings","react","react-dom","office-ui-fabric-react"], function(__WEBPACK_EXTERNAL_MODULE_5__, __WEBPACK_EXTERNAL_MODULE_69__, __WEBPACK_EXTERNAL_MODULE_72__, __WEBPACK_EXTERNAL_MODULE_82__, __WEBPACK_EXTERNAL_MODULE_83__, __WEBPACK_EXTERNAL_MODULE_112__) { return /******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	var parentJsonpFunction = window["webpackJsonp4d5eb168_6729_49a8_aec7_0e397f486b6e"];
/******/ 	window["webpackJsonp4d5eb168_6729_49a8_aec7_0e397f486b6e"] = function webpackJsonpCallback(chunkIds, moreModules) {
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, callbacks = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(installedChunks[chunkId])
/******/ 				callbacks.push.apply(callbacks, installedChunks[chunkId]);
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			modules[moduleId] = moreModules[moduleId];
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules);
/******/ 		while(callbacks.length)
/******/ 			callbacks.shift().call(null, __webpack_require__);
/******/
/******/ 	};
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// "0" means "already loaded"
/******/ 	// Array means "loading", array contains callbacks
/******/ 	var installedChunks = {
/******/ 		0:0
/******/ 	};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__webpack_require__.e = function requireEnsure(chunkId, callback) {
/******/ 		// "0" is the signal for "already loaded"
/******/ 		if(installedChunks[chunkId] === 0)
/******/ 			return callback.call(null, __webpack_require__);
/******/
/******/ 		// an array means "currently loading".
/******/ 		if(installedChunks[chunkId] !== undefined) {
/******/ 			installedChunks[chunkId].push(callback);
/******/ 		} else {
/******/ 			// start chunk loading
/******/ 			installedChunks[chunkId] = [callback];
/******/ 			var head = document.getElementsByTagName('head')[0];
/******/ 			var script = document.createElement('script');
/******/ 			script.type = 'text/javascript';
/******/ 			script.charset = 'utf-8';
/******/ 			script.async = true;
/******/
/******/ 			script.src = __webpack_require__.p + "" + chunkId + "." + ({"1":"sp-client-telemetry","2":"sp-client-preview-quill","3":"sp-client-preview-propertypane"}[chunkId]||chunkId) + "_" + {"1":"e984992cc077a9bc559c","2":"dbac8ef61c258f395be0","3":"53482bcda2fd60095a7c"}[chunkId] + ".js";
/******/ 			head.appendChild(script);
/******/ 		}
/******/ 	};
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(1));
	


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	__webpack_require__(2);
	var PropertyPaneDefinitions_1 = __webpack_require__(3);
	exports.WebPartConfigurationEvent = PropertyPaneDefinitions_1.WebPartConfigurationEvent;
	var BaseClientSideWebPart_1 = __webpack_require__(4);
	exports.BaseClientSideWebPart = BaseClientSideWebPart_1.default;
	var ReactWebPart_1 = __webpack_require__(81);
	exports.ReactWebPart = ReactWebPart_1.default;
	var WebPartMocks_1 = __webpack_require__(84);
	exports.MockWebPartContext = WebPartMocks_1.MockWebPartContext;
	var ReservedEventNames_1 = __webpack_require__(86);
	exports.ReservedEventNames = ReservedEventNames_1.default;
	var ClientSideApplication_1 = __webpack_require__(87);
	exports.ClientSideApplication = ClientSideApplication_1.default;
	var AppPageContext_1 = __webpack_require__(90);
	exports.PageContext = AppPageContext_1.default;
	exports.pageContextServiceKey = AppPageContext_1.appPageContextServiceKey;
	var SPSite_1 = __webpack_require__(96);
	exports.SPSite = SPSite_1.default;
	var SPWeb_1 = __webpack_require__(94);
	exports.SPWeb = SPWeb_1.default;
	var SPList_1 = __webpack_require__(97);
	exports.SPList = SPList_1.default;
	var SPListItem_1 = __webpack_require__(98);
	exports.SPListItem = SPListItem_1.default;
	var SPNavigationNode_1 = __webpack_require__(102);
	exports.SPNavigationNode = SPNavigationNode_1.default;
	var SPNavigationNodeCollection_1 = __webpack_require__(100);
	exports.SPNavigationNodeCollection = SPNavigationNodeCollection_1.default;
	var SPUser_1 = __webpack_require__(99);
	exports.SPUser = SPUser_1.default;
	var Canvas_1 = __webpack_require__(103);
	exports.Canvas = Canvas_1.default;
	var CanvasControlType_1 = __webpack_require__(135);
	exports.CanvasControlType = CanvasControlType_1.default;
	var _spShell_1 = __webpack_require__(235);
	exports._spShell = _spShell_1.default;
	var IPropertyPaneField_1 = __webpack_require__(216);
	exports.IPropertyPaneFieldType = IPropertyPaneField_1.IPropertyPaneFieldType;
	var PropertyPaneCustomField_1 = __webpack_require__(251);
	exports.PropertyPaneCustomField = PropertyPaneCustomField_1.PropertyPaneCustomField;
	var IPropertyPaneButton_1 = __webpack_require__(252);
	exports.PropertyPaneButtonType = IPropertyPaneButton_1.PropertyPaneButtonType;
	var PropertyPaneButton_1 = __webpack_require__(253);
	exports.PropertyPaneButton = PropertyPaneButton_1.PropertyPaneButton;
	var PropertyPaneCheckbox_1 = __webpack_require__(254);
	exports.PropertyPaneCheckbox = PropertyPaneCheckbox_1.PropertyPaneCheckbox;
	var PropertyPaneChoiceGroup_1 = __webpack_require__(255);
	exports.PropertyPaneChoiceGroup = PropertyPaneChoiceGroup_1.PropertyPaneChoiceGroup;
	var PropertyPaneDropDown_1 = __webpack_require__(256);
	exports.PropertyPaneDropdown = PropertyPaneDropDown_1.PropertyPaneDropdown;
	var PropertyPaneHorizontalRule_1 = __webpack_require__(257);
	exports.PropertyPaneHorizontalRule = PropertyPaneHorizontalRule_1.PropertyPaneHorizontalRule;
	var PropertyPaneLabel_1 = __webpack_require__(258);
	exports.PropertyPaneLabel = PropertyPaneLabel_1.PropertyPaneLabel;
	var PropertyPaneLink_1 = __webpack_require__(259);
	exports.PropertyPaneLink = PropertyPaneLink_1.PropertyPaneLink;
	var PropertyPaneSlider_1 = __webpack_require__(260);
	exports.PropertyPaneSlider = PropertyPaneSlider_1.PropertyPaneSlider;
	var PropertyPaneTextField_1 = __webpack_require__(261);
	exports.PropertyPaneTextField = PropertyPaneTextField_1.PropertyPaneTextField;
	var PropertyPaneToggle_1 = __webpack_require__(262);
	exports.PropertyPaneToggle = PropertyPaneToggle_1.PropertyPaneToggle;
	var ClassicPageBootstrapper_1 = __webpack_require__(263);
	exports.ClassicPageBootstrapper = ClassicPageBootstrapper_1.default;
	var GuidHelpers_1 = __webpack_require__(93);
	exports.GuidHelpers = GuidHelpers_1.default;
	var UrlUtilities_1 = __webpack_require__(265);
	exports.getPathNameFromAbsoluteUrl = UrlUtilities_1.getPathNameFromAbsoluteUrl;
	exports.combineURLPaths = UrlUtilities_1.combineURLPaths;
	var EventAggregator_1 = __webpack_require__(85);
	exports.EventAggregator = EventAggregator_1.default;
	


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	var scripts = document.getElementsByTagName('script');
	var regex = new RegExp('sp-client-preview_?[a-zA-Z0-9]*.js', 'i');
	var found = false;
	
	if (scripts && scripts.length) {
	  for (var i = 0; i < scripts.length; i++) {
	    if (!scripts[i]) continue;
	    var path = scripts[i].getAttribute('src');
	    if (path && path.match(regex)) {
	      __webpack_require__.p = path.substring(0, path.lastIndexOf('/') + 1);
	      found = true;
	      break;
	    }
	  }
	}
	
	if (!found) {
	  for (var global in window.__setWebpackPublicPathLoaderSrcRegistry__) {
	    if (global && global.match(regex)) {
	      __webpack_require__.p = global.substring(0, global.lastIndexOf('/') + 1);
	      break;
	    }
	  }
	}

/***/ },
/* 3 */
/***/ function(module, exports) {

	/**
	 * @Copyright (c) Microsoft Corporation.  All rights reserved.
	 *
	 * @file PropertyPane definitions.
	 */
	"use strict";
	/**
	 * WebPart PropertyPane configuration events
	 */
	(function (WebPartConfigurationEvent) {
	    WebPartConfigurationEvent[WebPartConfigurationEvent["ConfigurationComplete"] = 1] = "ConfigurationComplete";
	    WebPartConfigurationEvent[WebPartConfigurationEvent["OpenComplete"] = 2] = "OpenComplete";
	    WebPartConfigurationEvent[WebPartConfigurationEvent["CloseComplete"] = 3] = "CloseComplete";
	    WebPartConfigurationEvent[WebPartConfigurationEvent["ApplyClicked"] = 4] = "ApplyClicked";
	    WebPartConfigurationEvent[WebPartConfigurationEvent["LostFocus"] = 5] = "LostFocus";
	})(exports.WebPartConfigurationEvent || (exports.WebPartConfigurationEvent = {}));
	var WebPartConfigurationEvent = exports.WebPartConfigurationEvent;
	/**
	 * Describes the PropertyPane state.
	 */
	(function (PropertyPaneState) {
	    // PropertyPane's open state.
	    PropertyPaneState[PropertyPaneState["Open"] = 1] = "Open";
	    // PropertyPane's close state.
	    PropertyPaneState[PropertyPaneState["Close"] = 2] = "Close";
	    // PropertyPane's Toggle state.
	    PropertyPaneState[PropertyPaneState["Toggle"] = 3] = "Toggle";
	    // PropertyPane's default state.
	    // if it's Open it remains open with the newly selected web part's context.
	    // If it's closed it stays closed.
	    PropertyPaneState[PropertyPaneState["Default"] = 4] = "Default";
	})(exports.PropertyPaneState || (exports.PropertyPaneState = {}));
	var PropertyPaneState = exports.PropertyPaneState;
	


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @Copyright (c) Microsoft Corporation.  All rights reserved.
	 *
	 * @file Base class for client side web parts.
	 */
	/* tslint:disable:member-ordering */
	'use strict';
	var lodash = __webpack_require__(5);
	var odsp_utilities_bundle_1 = __webpack_require__(6);
	var sp_client_base_1 = __webpack_require__(69);
	var PropertyPaneDefinitions_1 = __webpack_require__(3);
	var Object_1 = __webpack_require__(70);
	var Strings_resx_1 = __webpack_require__(71);
	var cswp_base_module_scss_1 = __webpack_require__(73);
	__webpack_require__(78);
	/**
	 * This abstract class implements the the base functionality for a client side web part. Every client side web part
	 * needs to inherit from this class. Along with the base functionality, this class provides some APIs that can be
	 * used by the web part. These APIs fall in two catagories.
	 *
	 * The first category of APIs provide data and functionality. Example, the web part context (i.e. this.context). This
	 * API should be used to access contextual data relevant to this web part instance.
	 *
	 * The second category of APIs provide a base implementation for the web part lifecycle and can be overridden for an
	 * updated implementation. The render() API is the only API that is mandatory to be implemented/overridden by a web
	 * part. All other life cycle APIs have a base implementation and can be overridden based on the needs of the web part.
	 * Please refer to the documentation of the individual APIs to make the right decision.
	 */
	var BaseClientSideWebPart = (function () {
	    /**
	     * Constructor for the BaseClientSideWebPart class.
	     * If a sub class overrides the constructor, it needs to call super(context) as the first line of its constructor.
	     *
	     * @param context - web part context.
	     *
	     * e.g.
	     *   constructor(conext: IWebPartContext) {
	     *     super(context);
	     *     .
	     *     . class specific constructor code ..
	     *   }
	     */
	    function BaseClientSideWebPart(ctx) {
	        this._initialized = false;
	        this._logSource = sp_client_base_1._LogSource.create('BaseClientSideWebPart');
	        // Disallow instantiation of the base class by itself
	        /* tslint:disable:no-string-literal */
	        if (this.constructor['name'] === 'BaseClientSideWebPart') {
	            /* tslint:enable:no-string-literal */
	            throw new Error(Strings_resx_1.default.BaseConstructError);
	        }
	        /* tslint:disable:use-named-parameter */
	        var context = arguments[0];
	        /* tslint:enable:use-named-parameter */
	        this._processInputParams(context);
	        sp_client_base_1._TraceLogger.logVerbose(this._logSource, odsp_utilities_bundle_1.StringHelper.format(Strings_resx_1.default.ConstructLog, this.context.instanceId));
	        this._initialized = true;
	        this._renderedOnce = false;
	        /* tslint:disable:no-string-literal */
	        this['__type'] = 'BaseClientSideWebPart';
	        /* tslint:enable:no-string-literal */
	        // Bind the callbacks
	        this.render = this.render.bind(this);
	        this.dispose = this.dispose.bind(this);
	        this.renderError = this.renderError.bind(this);
	        this.clearError = this.clearError.bind(this);
	        this.onPropertyConfigurationComplete = this.onPropertyConfigurationComplete.bind(this);
	        this.onPropertyPaneRendered = this.onPropertyPaneRendered.bind(this);
	    }
	    Object.defineProperty(BaseClientSideWebPart.prototype, "context", {
	        // Readonly protected properties. To change these to readonly once TypeScript supports that feature.
	        /**
	         * This property is a pointer to the web part context.
	         * @see IWebPartContex for more details.
	         *
	         * @readonly
	         */
	        get: function () { return this._context; },
	        /**
	         * Error on attempt to set readonly properties. The following properties will go away when TypeScript supports
	         * readonly.
	         * @internal
	         */
	        set: function (o) { this._throwReadOnlyError(); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BaseClientSideWebPart.prototype, "domElement", {
	        /**
	         * This property is a pointer to the root DOM element of the web part. This is a DIV element and contains the whole
	         * DOM subtree of the web part.
	         *
	         * @readonly
	         */
	        get: function () { return this._context.domElement; },
	        set: function (o) { this._throwReadOnlyError(); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BaseClientSideWebPart.prototype, "displayMode", {
	        /**
	         * This property is the current display mode of the web part.
	         *
	         * @readonly
	         */
	        get: function () { return this._displayMode; },
	        set: function (o) { this._throwReadOnlyError(); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BaseClientSideWebPart.prototype, "properties", {
	        /**
	         * This property is the pointer to the custom property bag of the web part.
	         *
	         * @readonly
	         */
	        get: function () { return this._properties; },
	        set: function (o) { this._throwReadOnlyError(); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BaseClientSideWebPart.prototype, "renderedOnce", {
	        /**
	         * This property indicates whether the web part has been rendered once or not. After the first time rendering,
	         * the value of this property is always true. Till a full re-render of the web part happens.
	         *
	         * @readonly
	         */
	        get: function () { return this._renderedOnce; },
	        set: function (o) { this._throwReadOnlyError(); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BaseClientSideWebPart.prototype, "renderedFromDefaultProperties", {
	        /**
	         * This property indicates whether the web part was rendered from the default properties, as opposed to using
	         * serialized state from the last time that the web part was saved.
	         *
	         * @readonly
	         */
	        get: function () { return this._renderedFromDefaultProperties; },
	        set: function (o) { this._throwReadOnlyError(); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BaseClientSideWebPart.prototype, "propertyPaneSettings", {
	        /**
	         * This property is the pointer to the web part configuration settings. If the web part wants to use the PropertyPane
	         * for configuration, this API needs to be overridden and the web part needs to return the set of properties it wants
	         * to display in the PropertyPane.
	         *
	         * @see IPropertyPane and other PropertyPane integration wiki documentation for more details.
	         *
	         * @readonly
	         */
	        get: function () { return undefined; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BaseClientSideWebPart.prototype, "disableReactivePropertyChanges", {
	        /**
	         * This property is used to change the web part's PropertyPane interaction from Reactive to NonReactive. The default
	         * behaviour is Reactive. Where,
	         * Reactive implies that changes made in the PropertyPane are transmitted to the web part instantly and the user can
	         * see instant updates. This helps the page creator get instant feedback and decide if they should keep the new
	         * configuration changes or not.
	         * NonReactive implies that the configuraiton changes are transmitted to the web part only after 'Apply' PropertyPane
	         * button is clicked.
	         *
	         * @readonly
	         */
	        get: function () { return false; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BaseClientSideWebPart.prototype, "previewImageUrl", {
	        /**
	         * This property points to the preview image for the web part. The base implementation returns undefined. Web parts
	         * that want to provide a valid preview image url need to override this API. The preview image url can be used to
	         * create a preview of the web part or of the page on which the web part is present.
	         *
	         * @readonly
	         */
	        get: function () { return undefined; },
	        set: function (o) { this._throwReadOnlyError(); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BaseClientSideWebPart.prototype, "accessibleTitle", {
	        /**
	         * This property points to the accessible title of web part made available to screen readers. The base implementation
	         * returns that default title in the manifest. Web parts that want to provide more descriptive title containing
	         * contextual information need to override this API.
	         *
	         * @readonly
	         */
	        get: function () { return this._getDefaultAccessibleTitle(); },
	        set: function (o) { this._throwReadOnlyError(); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BaseClientSideWebPart.prototype, "manifest", {
	        set: function (o) { this._throwReadOnlyError(); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BaseClientSideWebPart.prototype, "instanceId", {
	        set: function (o) { this._throwReadOnlyError(); },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * This API is called once during the lifetime of the web part during the intial render and just before the onInit
	     * API call. The purpose of this API is to help a web part developer deserialize the web part data and manage the
	     * versioning of their data as the web part code evolves. The web part data may have been persisted with an older
	     * or newer version of the web part code. This API gives the web part developer an opportunity to re-structure their
	     * data to the appropriate data schema. The persisted data contains the version number information. That information
	     * can be used to make decisions on how to re-structure the data.
	     *
	     * @param data - web part persisted data.
	     * @return - web part property bag.
	     *
	     */
	    BaseClientSideWebPart.prototype.deserialize = function (data) {
	        return undefined;
	    };
	    /**
	     * This API should be overridden to perform long running operations e.g. data fetching from a remote service before
	     * the initial rendering of the web part. The loading indicator is displayed during the lifetime of this method.
	     * This API is called only once during the lifecycle of a web part.
	     */
	    BaseClientSideWebPart.prototype.onInit = function () {
	        return this._genericAsyncHandler();
	    };
	    /**
	     * This API is called to render the web part. There is no base implementation of this API and the web part is
	     * required to override this API.
	     */
	    BaseClientSideWebPart.prototype.render = function () {
	        throw new Error(Strings_resx_1.default.MustOverrideRenderError);
	    };
	    /**
	     * This API is called when the display mode of a web part is changed. The default implementation of this API calls
	     * the web part render method to re-render the web part with the new display mode. If a web part developer does not
	     * want a full re-render to happen on display mode change, they can override this API and perform specific updates
	     * to the web part DOM to switch its display mode.
	     *
	     * @param oldDisplayMode - The old display mode.
	     *
	     */
	    BaseClientSideWebPart.prototype.onDisplayModeChanged = function (oldDisplayMode) {
	        // This API should not be called when there was no change in display mode.
	        sp_client_base_1.Validate.isTrue(oldDisplayMode !== this.displayMode, Strings_resx_1.default.OnDisplayModeChangedInvalidInvocation);
	        this._renderWithAccessibileTitle();
	    };
	    /**
	     * This API is called before a web part is serialized. The default implementation is a no-op. A web part developer
	     * is expected to override this API when the web part's state is not fully reflected in the property bag i.e.
	     * this.properties. In the overridden method, the web part developer is expected to update the state of the web
	     * part property bag. This way the web part serialization process will use the upto date state of the web part.
	     *
	     * @return - reference to searchable properties and properties that need link fixup. Please read
	     * the documentation of IHtmlProperties interface for more details.
	     */
	    BaseClientSideWebPart.prototype.onBeforeSerialize = function () {
	        return undefined;
	    };
	    /**
	     * This API is used to receive custom event notifications from the host page or another web part. ReservedEventNames
	     * defines some reserved events. Each web part may process web part specific events.
	     *
	     * @param eventName - Event name, such as "configure:start".
	     * @param eventObject - object containing event source, destination and property information.
	     *
	     * @internal
	     */
	    BaseClientSideWebPart.prototype.onEvent = function (eventName, eventObject) {
	        /* EMPTY BLOCK */
	    };
	    /**
	     * This API is called at the end of the web part lifecycle. It should be overridden to dispose any
	     * resources that the web part is holding onto.
	     */
	    BaseClientSideWebPart.prototype.dispose = function () {
	        /* EMPTY BLOCK */
	    };
	    /**
	     * This API should be used to invoke the PropertyPane to help configure the web part.
	     *
	     * @param boolean - If specified and true - refresh a PropertyPane that's already been open, but not open
	     * if it is not already open.
	     */
	    BaseClientSideWebPart.prototype.configureStart = function (refreshOnly) {
	        var state = refreshOnly ? PropertyPaneDefinitions_1.PropertyPaneState.Default : PropertyPaneDefinitions_1.PropertyPaneState.Open;
	        this._context.configureStart(this.context.instanceId, state);
	    };
	    /**
	     * This API is invoked on property changes in the PropertyPane when the PropertyPane is being used in Reactive mode.
	     * The base implementation of this API updates the web part property bag and re-render the web part. This API also
	     * invokes the web part host's setDirty API.
	     *
	     * @param propertyPath - JSON path of the property in the property bag.
	     * @param newValue - New value of the property.
	     */
	    /* tslint:disable:no-any */
	    BaseClientSideWebPart.prototype.onPropertyChange = function (propertyPath, newValue) {
	        /* tslint:enable:no-any */
	        this._updateProperty(propertyPath, newValue);
	        if (this.context.host.setDirty) {
	            this.context.host.setDirty(this.context.instanceId);
	        }
	        if (!this.disableReactivePropertyChanges) {
	            this._renderWithAccessibileTitle();
	        }
	    };
	    /**
	     * This API is called when the current web part configuration process is completed. ConfigurationComplete event
	     * is fired when user switches between web parts while the PropertyPane is open, and this event handler is called
	     * for the previously selected web part.
	     *
	     */
	    BaseClientSideWebPart.prototype.onPropertyConfigurationComplete = function () {
	        /* EMPTY BLOCK */
	    };
	    /**
	     * This API is involed when the PropertyPane is rendered.
	     */
	    BaseClientSideWebPart.prototype.onPropertyPaneRendered = function () {
	        /* EMPTY BLOCK */
	    };
	    /**
	     * this API is invoked when the the changes are applied on the PropertyPane when the PropertyPane is used in
	     * Non-Reactive mode. This API is not invoked when the PropertyPane is used in Reactive mode.
	     */
	    BaseClientSideWebPart.prototype.onPropertyPaneSave = function () {
	        if (this.disableReactivePropertyChanges) {
	            this._renderWithAccessibileTitle();
	        }
	        this._propertiesBackup = undefined;
	    };
	    /**
	     * This API should be used to render an error message in the web part display area. Also logs the error message
	     * using the trace logger.
	     *
	     * @param error - An error object containing the error message to render.
	     */
	    BaseClientSideWebPart.prototype.renderError = function (error) {
	        this.context.statusRenderer.clearLoadingIndicator(this.domElement);
	        this.context.statusRenderer.renderError(this.domElement, error);
	        sp_client_base_1._TraceLogger.logError(this._logSource, error);
	    };
	    /**
	     * This API should be used to clear the error message from the web part display area.
	     */
	    BaseClientSideWebPart.prototype.clearError = function () {
	        this.context.statusRenderer.clearError(this.domElement);
	    };
	    /**
	     * Internal base implemenation of the web part data deserialization.
	     *
	     * @param data - web part data
	     */
	    BaseClientSideWebPart.prototype._internalDeserialize = function (data) {
	        if (data && data.properties) {
	            // Give the web part an opportunity to deserialize the properties. If the web part
	            // returns a valid property bag, use it as is else perform default deserialization.
	            var p = this.deserialize(data);
	            if (p) {
	                this._properties = p;
	            }
	            else {
	                this._properties = data.properties;
	                this._renderedFromDefaultProperties = false;
	                // @todo: (SPPPLAT VSO#227730) removing a regression caused by manifest V2 change. The manifest
	                // is a part of the properties blob. Which then gets serialized into the page blob.
	                /* tslint:disable:no-string-literal */
	                delete data.properties['manifest'];
	            }
	        }
	        else {
	            this._renderedFromDefaultProperties = true;
	        }
	    };
	    /**
	     * Internal API for the first time render of the web part. The purpose of this API is to enforce intialization steps
	     * before the actual render is called. This API is called only once during the web part loading lifecycle.
	     *
	     * @return {Promise<void>} The promise indicates the render loop is finished (success or fail).
	     */
	    /* tslint:disable:no-unused-variable */
	    BaseClientSideWebPart.prototype._internalFirstTimeRender = function (mode, qosMonitor, data) {
	        var _this = this;
	        if (mode === void 0) { mode = sp_client_base_1.DisplayMode.Read; }
	        /* tslint:enable:no-unused-variable */
	        if (!this._initialized) {
	            qosMonitor.writeUnexpectedFailure('BaseConstructorNotCalled');
	            throw new Error(Strings_resx_1.default.BaseConstructorNotCalledError);
	        }
	        // Set the display mode of the web part
	        this._displayMode = mode;
	        // Deserialize the web part data
	        this._internalDeserialize(data);
	        // By this point in the lifecycle the web part should have a non-null property bag.
	        if (!this._properties) {
	            qosMonitor.writeUnexpectedFailure('PropertyBagNull');
	            throw new Error(Strings_resx_1.default.PropertyBagNullError);
	        }
	        // Perform web part initialization and then render the web part.
	        var promise = this.onInit();
	        if (!promise) {
	            throw new Error(Strings_resx_1.default.OnInitReturnedNullPromise);
	        }
	        return promise.then(function () {
	            sp_client_base_1._PerformanceLogger.markComponent(_this.context.webPartTag, 'init');
	            _this.context.statusRenderer.clearLoadingIndicator(_this.domElement);
	            _this._renderWithAccessibileTitle();
	            _this._renderedOnce = true;
	        });
	    };
	    /**
	     * Internal API to switch the web part's display mode. This API updates the display mode and then re-renders the web
	     * part in the new mode.
	     */
	    /* tslint:disable:no-unused-variable */
	    BaseClientSideWebPart.prototype._internalSetDisplayMode = function (newDisplayMode) {
	        /* tslint:enable:no-unused-variable */
	        if (this._displayMode !== newDisplayMode) {
	            var oldDisplayMode = this._displayMode;
	            this._displayMode = newDisplayMode;
	            this.onDisplayModeChanged(oldDisplayMode);
	        }
	    };
	    /**
	     * Internal API to get property pane settings.
	     *
	     * @return Property pane data
	     */
	    /* tslint:disable:no-unused-variable */
	    BaseClientSideWebPart.prototype._internalGetPropertyPaneSettings = function () {
	        /* tslint:enable:no-unused-variable */
	        // Keep a copy of the properties to be used for discard
	        if (!this._propertiesBackup) {
	            this._propertiesBackup = lodash.cloneDeep(this.properties);
	        }
	        return {
	            webPartId: this.context.instanceId,
	            title: this.context.manifest.title.default,
	            isReactive: !this.disableReactivePropertyChanges,
	            settings: this.propertyPaneSettings,
	            properties: lodash.cloneDeep(this.properties),
	            // The following handlers are being overridden in the PropertyPane controller and hence
	            // we do not need to bind them here. We still do not want to make them optional because
	            // that could lead to unwanted bugs.
	            onPropertyChange: undefined,
	            onClose: undefined,
	            onSave: undefined,
	            onConfigurationComplete: this.onPropertyConfigurationComplete,
	            onRendered: this.onPropertyPaneRendered,
	            onLostFocus: undefined
	        };
	    };
	    /**
	     * Internal API to set the dirty bit on the web part host if the web part properties have changed.
	     */
	    /* tslint:disable:no-unused-variable */
	    BaseClientSideWebPart.prototype._internalSetDirtyBit = function () {
	        /* tslint:enable:no-unused-variable */
	        var serializedState = this._internalSerialize();
	        var newState = JSON.stringify(serializedState);
	        // Don't set dirty bit the first time because the Canvas
	        // would have done it when the webpart got added.
	        if (!this._previousState) {
	            this._previousState = newState;
	        }
	        else if (this._previousState !== newState && this.context.host.setDirty) {
	            this.context.host.setDirty(this.context.instanceId, serializedState);
	            this._previousState = newState;
	        }
	    };
	    /**
	     * Internal API to serialize the web part properties.
	     */
	    BaseClientSideWebPart.prototype._internalSerialize = function () {
	        var htmlProps = this.onBeforeSerialize();
	        var htmlPropsString = this._getHtmlProps(htmlProps);
	        return {
	            id: this.context.manifest.id,
	            instanceId: this.context.instanceId,
	            version: this.context.manifest.version,
	            title: this.context.manifest.title.default,
	            properties: this.properties,
	            htmlProperties: htmlPropsString
	        };
	    };
	    /**
	     * Internal API to dispose resources that the web part might be holding on to.
	     */
	    /* tslint:disable:no-unused-variable */
	    BaseClientSideWebPart.prototype._internalDispose = function () {
	        /* tslint:enable:no-unused-variable */
	        this.dispose();
	        sp_client_base_1._TraceLogger.logVerbose(this._logSource, odsp_utilities_bundle_1.StringHelper.format(Strings_resx_1.default.DisposeLog, this.context.instanceId));
	    };
	    /**
	     * Update the web part property if it is in the property bag.
	     *
	     * @param propertyPath - property path as expected by lodash update (https://lodash.com/docs#update).
	     *   (e.g. 'o.a.b', 'o[0].a.b[1].c'). These paths are similar to those in the JSONPath spec described by
	     *   Stefan Goessner at (http://goessner.net/articles/JsonPath/). Currently we plan to use lodash.get, has
	     *   and update APIs which support paths. Some day we may migrate to using actual JSONPath.js. But that
	     *   should not be an issue because the path formatting conventions are same in lodash and JSONPath.
	     */
	    /* tslint:disable:no-any */
	    BaseClientSideWebPart.prototype._updateProperty = function (propertyPath, newValue) {
	        /* tslint:enable:no-any */
	        // should we check if this is a valid property path. For now maybe not.
	        lodash.update(this.properties, propertyPath, function () { return newValue; });
	    };
	    BaseClientSideWebPart.prototype._processInputParams = function (context) {
	        sp_client_base_1.Validate.isNotNullOrUndefined(context, 'webpart context');
	        sp_client_base_1.Validate.isNotNullOrUndefined(context.domElement, 'webpart element');
	        sp_client_base_1.Validate.isNotNullOrUndefined(context.instanceId, 'webpart instanceId');
	        sp_client_base_1.Validate.isNotNullOrUndefined(context.manifest, 'webpart manifest');
	        sp_client_base_1.Validate.isNotNullOrUndefined(context.webPartTag, 'webpart tag');
	        sp_client_base_1.Validate.isNotNullOrUndefined(context.httpClient, 'webpart httpClient');
	        sp_client_base_1.Validate.isNotNullOrUndefined(context.basicHttpClient, 'webpart basicHttpClient');
	        sp_client_base_1.Validate.isNotNullOrUndefined(context.pageContext, 'webpart context pageContext');
	        sp_client_base_1.Validate.isNotNullOrUndefined(context.eventAggregator, 'webpart context eventAggregator');
	        sp_client_base_1.Validate.isNotNullOrUndefined(context.statusRenderer, 'webpart context statusRenderer');
	        sp_client_base_1.Validate.isNotNullOrUndefined(context.configureStart, 'webpart context configureStart');
	        sp_client_base_1.Validate.isNotNullOrUndefined(context.host, 'webpart host');
	        sp_client_base_1.Validate.isNotNullOrUndefined(context.serviceScope, 'webpart service scope');
	        Object_1.deepFreeze(context.manifest);
	        this._context = context;
	        this._properties = this._getMergedProperties();
	        this._logEntry = 'BaseClientSideWebPart';
	    };
	    /**
	     * Merge the provided properties with manifest properties and return the merged property bag.
	     */
	    BaseClientSideWebPart.prototype._getMergedProperties = function (p) {
	        return lodash.merge(lodash.clone(this._context.manifest.properties), p);
	    };
	    /**
	     * A generic NOP async handler.
	     */
	    BaseClientSideWebPart.prototype._genericAsyncHandler = function () {
	        return new Promise(function (resolve, reject) {
	            resolve(undefined);
	        });
	    };
	    /**
	     * Generate an HTML string for searchable, link and imageLink properties from the web part data.
	     * The serialized page data needs to be stored in a way (pseudo HTML) that the server can index searchable
	     * properties and fix links when links change. The SharePoint server is a semantic HTML parser and processes
	     * HTML and not JSON blobs.
	     *
	     * This function returns multiple HTML tags, one for each searchable and link property. The format of the
	     * tags are as follows:
	     *
	     * Searchable properties: "<div data-sp-prop-name='prop1'>value1</div>"
	     * Link properties: "<link data-sp-prop-name='prop2' href='http://www.contoso.com/page1.aspx'>"
	     * Image properties: "<img data-sp-prop-name='prop2' href='http://www.contoso.com/image.png'>"
	     *
	     * @param htmlProps - reference to html properties key/value dictionaries.
	     * @return - pseudo HTML string equivalent of the HTML properties.
	     */
	    BaseClientSideWebPart.prototype._getHtmlProps = function (htmlProps) {
	        var htmlPropsString;
	        if (htmlProps) {
	            htmlPropsString = this._getHtmlPropsString(htmlProps);
	        }
	        else {
	            htmlPropsString = this._getHtmlPropsStringFromManifest();
	        }
	        return htmlPropsString;
	    };
	    BaseClientSideWebPart.prototype._getHtmlPropsString = function (htmlProps) {
	        var _this = this;
	        var htmlPropsString = '';
	        if (htmlProps.searchableProperties) {
	            Object.keys(htmlProps.searchableProperties).every(function (propName) {
	                htmlPropsString +=
	                    _this._getHtmlPropString(propName, 'search', htmlProps.searchableProperties[propName]);
	                return true;
	            });
	        }
	        if (htmlProps.linkProperties) {
	            Object.keys(htmlProps.linkProperties).every(function (propName) {
	                htmlPropsString +=
	                    _this._getHtmlPropString(propName, 'link', htmlProps.linkProperties[propName]);
	                return true;
	            });
	        }
	        if (htmlProps.imageLinkProperties) {
	            Object.keys(htmlProps.imageLinkProperties).every(function (propName) {
	                htmlPropsString +=
	                    _this._getHtmlPropString(propName, 'imageLink', htmlProps.imageLinkProperties[propName]);
	                return true;
	            });
	        }
	        return htmlPropsString;
	    };
	    /**
	     * Generate the HTML string from the property names provided in the manifest.
	     */
	    BaseClientSideWebPart.prototype._getHtmlPropsStringFromManifest = function () {
	        var _this = this;
	        var htmlPropsString = '';
	        if (this.context.manifest.searchablePropertyNames) {
	            this.context.manifest.searchablePropertyNames.forEach(function (propName) {
	                htmlPropsString +=
	                    _this._getHtmlPropString(propName, 'search', lodash.get(_this._properties, propName));
	            });
	        }
	        if (this.context.manifest.linkPropertyNames) {
	            this.context.manifest.linkPropertyNames.forEach(function (propName) {
	                htmlPropsString +=
	                    _this._getHtmlPropString(propName, 'link', lodash.get(_this._properties, propName));
	            });
	        }
	        if (this.context.manifest.imageLinkPropertyNames) {
	            this.context.manifest.imageLinkPropertyNames.forEach(function (propName) {
	                htmlPropsString +=
	                    _this._getHtmlPropString(propName, 'imageLink', lodash.get(_this._properties, propName));
	            });
	        }
	        return htmlPropsString;
	    };
	    /**
	     * Get the HTML props string.
	     */
	    BaseClientSideWebPart.prototype._getHtmlPropString = function (propName, propType, propValue) {
	        var htmlPropString = '';
	        if (propName) {
	            if (typeof propValue === 'string' && propValue) {
	                switch (propType) {
	                    /* tslint:disable:max-line-length */
	                    case 'search':
	                        htmlPropString += "<div data-sp-prop-name='" + lodash.escape(propName) + "'>" + lodash.escape(propValue) + "</div>";
	                        break;
	                    case 'link':
	                        htmlPropString += "<link data-sp-prop-name='" + lodash.escape(propName) + "' href='" + lodash.escape(propValue) + "'/>";
	                        break;
	                    case 'imageLink':
	                        htmlPropString += "<img data-sp-prop-name='" + lodash.escape(propName) + "' src='" + lodash.escape(propValue) + "'/>";
	                        break;
	                }
	            }
	        }
	        return htmlPropString;
	    };
	    /**
	     * Throw an error indicating that this property is readonly and cannot be set.
	     */
	    BaseClientSideWebPart.prototype._throwReadOnlyError = function () {
	        throw new Error(Strings_resx_1.default.ReadOnlyPropertyError);
	    };
	    /**
	     * Wraps render to ensure any type of rendering has access to the latest context
	     * to provide the most accurate accessible info to screen readers.
	     */
	    BaseClientSideWebPart.prototype._renderWithAccessibileTitle = function () {
	        this.render();
	        // Render the accessible description after and associate by ID to avoid re-rendering the whole zone
	        // when webpart updates contextual info.
	        var accessibleContext = this.accessibleTitle || this._getDefaultAccessibleTitle();
	        if (accessibleContext) {
	            // Keep ID in sync with CanvasZone.render
	            var contextualLabelId = "cswpAccessibleLabelContextual_" + this.context.instanceId;
	            var accessibleDiv = this.domElement.querySelector("#" + contextualLabelId);
	            var isNewLabelElement = !accessibleDiv;
	            if (isNewLabelElement) {
	                accessibleDiv = document.createElement('div');
	                accessibleDiv.id = contextualLabelId;
	                accessibleDiv.className = cswp_base_module_scss_1.default.screenReaderOnly;
	            }
	            accessibleDiv.textContent = accessibleContext;
	            if (isNewLabelElement) {
	                this.domElement.appendChild(accessibleDiv);
	            }
	        }
	    };
	    /**
	     * Gets default accessible title in the format "{Web part name} web part", such as "Image web part".
	     * Note: pulled into own method because TypeScript doesn't allow derived classes to call super protected properties.
	     */
	    BaseClientSideWebPart.prototype._getDefaultAccessibleTitle = function () {
	        return odsp_utilities_bundle_1.StringHelper.format(Strings_resx_1.default.GenericAccessibleLabelTemplate, this.context.manifest.title.default);
	    };
	    return BaseClientSideWebPart;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = BaseClientSideWebPart;
	


/***/ },
/* 5 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_5__;

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	__webpack_require__(2);
	/* tslint:disable:max-line-length */
	// Case 1: export multiple functions from the file.
	var StringHelper = __webpack_require__(7);
	exports.StringHelper = StringHelper;
	var DateTime = __webpack_require__(8);
	exports.DateTime = DateTime;
	// Case 2: export a named class from the file.
	var EventBase_1 = __webpack_require__(11);
	exports.ClonedEventType = EventBase_1.ClonedEventType;
	var Engagement_event_1 = __webpack_require__(17);
	exports.Engagement = Engagement_event_1.Engagement;
	var Nav_event_1 = __webpack_require__(19);
	exports.Nav = Nav_event_1.Nav;
	var PLTHttpRequest_event_1 = __webpack_require__(20);
	exports.PLTHttpRequest = PLTHttpRequest_event_1.PLTHttpRequest;
	var Qos_event_1 = __webpack_require__(22);
	exports.Qos = Qos_event_1.Qos;
	var Qos_event_2 = __webpack_require__(22);
	exports.ResultTypeEnum = Qos_event_2.ResultTypeEnum;
	// Case 3: export a class as default from the file.
	var Beacon_1 = __webpack_require__(31);
	exports.Beacon = Beacon_1.default;
	var APICallPerformanceData_1 = __webpack_require__(45);
	exports.APICallPerformanceData = APICallPerformanceData_1.default;
	var BeaconCache_1 = __webpack_require__(36);
	exports.BeaconCache = BeaconCache_1.default;
	var ControlPerformanceData_1 = __webpack_require__(46);
	exports.ControlPerformanceData = ControlPerformanceData_1.default;
	var CorrelationVector_1 = __webpack_require__(15);
	exports.CorrelationVector = CorrelationVector_1.default;
	var ErrorHelper_1 = __webpack_require__(25);
	exports.ErrorHelper = ErrorHelper_1.default;
	var EventGroup_1 = __webpack_require__(47);
	exports.EventGroup = EventGroup_1.default;
	var PageTransitionType_1 = __webpack_require__(48);
	exports.PageTransitionType = PageTransitionType_1.default;
	var Promise_1 = __webpack_require__(49);
	exports.Promise = Promise_1.default;
	var RUMOneLogger_1 = __webpack_require__(50);
	exports.RumOneLogger = RUMOneLogger_1.default;
	var RUMOneSLAPI_1 = __webpack_require__(51);
	exports.RumOneSLAPI = RUMOneSLAPI_1.default;
	var UriEncoding_1 = __webpack_require__(14);
	exports.UriEncoding = UriEncoding_1.default;
	var HtmlEncoding_1 = __webpack_require__(53);
	exports.HtmlEncoding = HtmlEncoding_1.default;
	var SiteHeaderLogoAcronym_1 = __webpack_require__(54);
	exports.SiteHeaderLogoAcronym = SiteHeaderLogoAcronym_1.default;
	var GroupDataSource_1 = __webpack_require__(55);
	exports.GroupDataSource = GroupDataSource_1.default;
	var PlatformDetection_1 = __webpack_require__(57);
	exports.PlatformDetection = PlatformDetection_1.default;
	var BaseDataStore_1 = __webpack_require__(37);
	exports.DataStore = BaseDataStore_1.default;
	var DataStoreCachingType_1 = __webpack_require__(38);
	exports.DataStoreCachingType = DataStoreCachingType_1.default;
	var Locale_1 = __webpack_require__(10);
	exports.Locale = Locale_1.default;
	var Uri_1 = __webpack_require__(58);
	exports.Uri = Uri_1.default;
	var AriaLogger_1 = __webpack_require__(59);
	exports.AriaLogger = AriaLogger_1.default;
	var Async_1 = __webpack_require__(30);
	exports.Async = Async_1.default;
	var FabricTheming_1 = __webpack_require__(62);
	exports.FabricTheming = FabricTheming_1.default;
	var RgbaColor_1 = __webpack_require__(64);
	exports.RgbaColor = RgbaColor_1.default;
	var WebTheme_1 = __webpack_require__(66);
	exports.WebTheme = WebTheme_1.default;
	var ThemeProvider_1 = __webpack_require__(67);
	exports.ThemeProvider = ThemeProvider_1.default;
	


/***/ },
/* 7 */
/***/ function(module, exports) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	// Regex that finds { and } so they can be removed on a lookup for string format
	var FORMAT_ARGS_REGEX = /[\{\}]/g;
	// Regex that finds {#} so it can be replaced by the arguments in string format
	var FORMAT_REGEX = /\{\d+\}/g;
	/**
	 * String Format is like C# string format.
	 * Usage Example: "hello {0}!".format("mike") will return "hello mike!"
	 * Calling format on a string with less arguments than specified in the format is invalid
	 * Example "I love {0} every {1}".format("CXP") will result in a Debug Exception.
	 */
	function format(s) {
	    'use strict';
	    var values = [];
	    for (var _i = 1; _i < arguments.length; _i++) {
	        values[_i - 1] = arguments[_i];
	    }
	    var args = values;
	    // Callback match function
	    function replace_func(match) {
	        // looks up in the args
	        var replacement = args[match.replace(FORMAT_ARGS_REGEX, "")];
	        // catches undefined in nondebug and null in debug and nondebug
	        if (replacement === null) {
	            replacement = '';
	        }
	        return replacement;
	    }
	    return (s.replace(FORMAT_REGEX, replace_func));
	}
	exports.format = format;
	/**
	 * Returns true if s ends with suffix.
	 */
	function doesStringEndWith(s, suffix) {
	    'use strict';
	    return s.substr(s.length - suffix.length) === suffix;
	}
	exports.doesStringEndWith = doesStringEndWith;
	/**
	 * Returns true if s starts with prefix.
	 */
	function doesStringStartWith(s, prefix) {
	    'use strict';
	    return s.substr(0, prefix.length) === prefix;
	}
	exports.doesStringStartWith = doesStringStartWith;
	/**
	 * Return a string of the given length, using 0s to pad in from the right.
	 */
	function rightPad(data, length) {
	    'use strict';
	    var result = data.toString();
	    while (result.length < length) {
	        result = result + "0";
	    }
	    return result;
	}
	exports.rightPad = rightPad;
	/**
	 * Look for any of the chars in searchValues in str.
	 * Returns the index of the char found or -1 if nothing is found.
	 */
	function findOneOf(str, searchValues) {
	    'use strict';
	    for (var idx = 0; idx < str.length; idx++) {
	        var ch = str[idx];
	        if (searchValues.indexOf(ch) !== -1) {
	            return idx;
	        }
	    }
	    return -1; //none of the searchValues exist in string
	}
	exports.findOneOf = findOneOf;
	/**
	 * Determines if two strings are equal when both converted to lowercase.
	 */
	function equalsCaseInsensitive(a, b) {
	    'use strict';
	    if (a && b) {
	        return a.toLowerCase() === b.toLowerCase();
	    }
	    return a === b;
	}
	exports.equalsCaseInsensitive = equalsCaseInsensitive;
	/**
	 * Capitalizes the first letter of str.
	 */
	function capitalize(str) {
	    'use strict';
	    if (str) {
	        return str[0].toUpperCase() + str.substr(1);
	    }
	    return str;
	}
	exports.capitalize = capitalize;
	/**
	 * De-capitalizes the first letter of str.
	 */
	function decapitalize(str) {
	    'use strict';
	    if (str) {
	        return str[0].toLowerCase() + str.substr(1);
	    }
	    return str;
	}
	exports.decapitalize = decapitalize;
	/**
	 * Selects a string based on plurality.
	 *
	 * @param count - The value to base selection on
	 * @param single - The string to select when it's a singular value
	 * @param multiple - The string to select when it's a plural value
	 *
	 * @deprecated This method does NOT give accurate results for many languages!!
	 *             Use getLocalizedCountValue instead.
	 */
	function pluralSelect(count, single, plural) {
	    'use strict';
	    return count === 1 ? single : plural;
	}
	exports.pluralSelect = pluralSelect;
	/**
	 * Given a specially formatted localized text, a set of intervals, and a count,
	 * return the localized text which corresponds to the first interval the
	 * count falls into.
	 *
	 * Please see https://microsoft.sharepoint.com/teams/OISGPortal/LocKits/_layouts/15/start.aspx#/Lockit%20Instructions/SharePoint%20Core%20Localization.aspx
	 * for more details.
	 *
	 * @param {string} locText - || deliminated blocks of localized texts, representing
	 *  the various singular and plural forms of the string  being localized
	 * @param {string} intervals - || deliminated blocks of numeric intervals, defining the ranges
	 *  of that interval. Has special support for , * and -.
	 * @param {number} count - The count used to determine which interval to return.
	 *
	 * @return
	 * The localized block which corresponds to the first interval the count falls into.
	 *
	 * @example
	 * StringHelper.getLocalizedCountValue('items||item||items', '0||1||2-', 0)
	 *   returns items
	 * StringHelper.getLocalizedCountValue('items||item||items', '0||1||2-', 1)
	 *   returns item
	 * StringHelper.getLocalizedCountValue('items||item||items', '0||1||2-', 2)
	 *   returns items
	 */
	function getLocalizedCountValue(locText, intervals, count) {
	    'use strict';
	    count = Number(count); // defensively make sure count is a number
	    // !!!IMPORTANT!!! changes in this function need to be in sync with
	    // the methods with the same name located at:
	    // otools/inc/sts/stsom/utilities/SPLocUtility.cs
	    // sts/Client/Script/Init/LocUtility.cs
	    if (locText === undefined || intervals === undefined || count === undefined) {
	        return null;
	    }
	    var ret = '';
	    var locIndex = -1;
	    var intervalsArray = intervals.split('||');
	    for (var i = 0, length_1 = intervalsArray.length; i < length_1; i++) {
	        var interval = intervalsArray[i];
	        if (!interval) {
	            continue;
	        }
	        var subIntervalsArray = interval.split(',');
	        for (var _i = 0, subIntervalsArray_1 = subIntervalsArray; _i < subIntervalsArray_1.length; _i++) {
	            var subInterval = subIntervalsArray_1[_i];
	            if (!subInterval) {
	                continue;
	            }
	            // there are three possiblities, wildcard, interval, or number
	            if (isNaN(Number(subInterval))) {
	                if (subInterval.indexOf('-') !== -1) {
	                    // if it's an interval the format is Number-Number
	                    var range = subInterval.split('-');
	                    if (range.length !== 2) {
	                        continue;
	                    }
	                    var min = void 0, max = void 0;
	                    if (range[0] === '') {
	                        min = 0;
	                    }
	                    else {
	                        if (isNaN(Number(range[0]))) {
	                            continue;
	                        }
	                        else {
	                            min = parseInt(range[0], 10);
	                        }
	                    }
	                    if (count >= min) {
	                        if (range[1] === '') {
	                            locIndex = i;
	                            break;
	                        }
	                        else {
	                            if (isNaN(Number(range[1]))) {
	                                continue;
	                            }
	                            else {
	                                max = parseInt(range[1], 10);
	                            }
	                        }
	                        if (count <= max) {
	                            locIndex = i;
	                            break;
	                        }
	                    }
	                }
	                else if (subInterval.indexOf('*') !== -1) {
	                    // Wildcard
	                    var regexExpr = subInterval.trim().replace(/\*/g, '[0-9]*');
	                    var regex = new RegExp("^" + regexExpr + "$");
	                    if (regex.test(count.toString())) {
	                        locIndex = i;
	                        break;
	                    }
	                }
	            }
	            else {
	                var exactNumber = parseInt(subInterval, 10);
	                if (count === exactNumber) {
	                    locIndex = i;
	                    break;
	                }
	            }
	        }
	        if (locIndex !== -1) {
	            break;
	        }
	    }
	    if (locIndex !== -1) {
	        var locValues = locText.split('||');
	        if (locValues[locIndex]) {
	            ret = locValues[locIndex];
	        }
	    }
	    return ret;
	}
	exports.getLocalizedCountValue = getLocalizedCountValue;
	/**
	 * Format the locText with the localized count value.
	 */
	function formatWithLocalizedCountValue(locText, intervals, count) {
	    'use strict';
	    var template = getLocalizedCountValue(locText, intervals, count);
	    var result = format(template, count.toString());
	    return result;
	}
	exports.formatWithLocalizedCountValue = formatWithLocalizedCountValue;


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var DatetimeResx = __webpack_require__(9);
	var Locale_1 = __webpack_require__(10);
	var StringHelper_1 = __webpack_require__(7);
	// this is the difference between the .net ticks and the javascript Date ticks
	var TICKS_CONVERSION_CONSTANT = 62135596800000;
	// number of milliseconds for the given timespan
	// copied from SPRelativeDateTime, including 32 days to a month
	var ONE_SECOND = 1000;
	var ONE_MINUTE = 60 * ONE_SECOND;
	var TWO_MINUTES = 2 * ONE_MINUTE;
	var ONE_HOUR = 60 * ONE_MINUTE;
	var TWO_HOURS = 2 * ONE_HOUR;
	var ONE_DAY = 24 * ONE_HOUR;
	var TWO_DAYS = 2 * ONE_DAY;
	var ONE_WEEK = 7 * ONE_DAY;
	var ONE_MONTH = 32 * ONE_DAY;
	var validLocale;
	var supportsTimeZoneDateOptions;
	/**
	 * Convert a date-time string to a JavaScript Date object, for IE8 compat.
	 *  Modern browsers and IE9+ can just take the string directly to the Date constructor.
	 *  Format is: 1999-12-31T12:34:56.0000000Z
	 *  Trailing Z indicates UTC timezone, otherwise it uses the browser's time zone.
	 */
	function iso8601DateTimeToJsDate(dateTime) {
	    'use strict';
	    // note that Date.parse() doesn't work for this format in IE8 either
	    var isUTC = false;
	    if (dateTime.toUpperCase().indexOf('Z') === dateTime.length - 1) {
	        isUTC = true;
	    }
	    var timeValues = dateTime.split(/[^0-9]/);
	    if (timeValues.length < 6) {
	        return; // error
	    }
	    // note that Date 0-indexes months
	    if (!isUTC) {
	        return new Date(Number(timeValues[0]), Number(timeValues[1]) - 1, Number(timeValues[2]), Number(timeValues[3]), Number(timeValues[4]), Number(timeValues[5]));
	    }
	    else {
	        return new Date(Date.UTC(Number(timeValues[0]), Number(timeValues[1]) - 1, Number(timeValues[2]), Number(timeValues[3]), Number(timeValues[4]), Number(timeValues[5])));
	    }
	}
	exports.iso8601DateTimeToJsDate = iso8601DateTimeToJsDate;
	/**
	 * Get a string like "X minutes ago" that reflects the time elapsed since the input time.
	 * Only works for past times, future times just return a browser-determined localized time string.
	 */
	function getRelativeDateTimeStringPast(pastTime, startWithLowerCase) {
	    'use strict';
	    if (startWithLowerCase === void 0) { startWithLowerCase = false; }
	    var timespan = Date.now() - pastTime.getTime(); // time elapsed in ms
	    if (timespan < -5 * ONE_MINUTE) {
	        return pastTime.toLocaleDateString(Locale_1.default.language);
	    }
	    else if (timespan < ONE_MINUTE) {
	        // "Less than a minute ago"
	        return startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_LessThanAMinute_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_LessThanAMinute;
	    }
	    else if (timespan < TWO_MINUTES) {
	        // "About a minute ago"
	        return startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_AboutAMinute_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_AboutAMinute;
	    }
	    else if (timespan < ONE_HOUR) {
	        // "{0} minutes ago"
	        var minutes = Math.floor(timespan / ONE_MINUTE);
	        return StringHelper_1.getLocalizedCountValue(DatetimeResx.strings.RelativeDateTime_XMinutes, DatetimeResx.strings.RelativeDateTime_XMinutesIntervals, minutes).replace("{0}", String(minutes));
	    }
	    else if (timespan < TWO_HOURS) {
	        // "About an hour ago"
	        return startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_AboutAnHour_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_AboutAnHour;
	    }
	    else if (timespan < ONE_DAY) {
	        // "{0} hours ago"
	        var hours = Math.floor(timespan / ONE_HOUR);
	        return StringHelper_1.getLocalizedCountValue(DatetimeResx.strings.RelativeDateTime_XHours, DatetimeResx.strings.RelativeDateTime_XHoursIntervals, hours).replace("{0}", String(hours));
	    }
	    else if (timespan < TWO_DAYS) {
	        // "Yesterday at {0}"
	        return startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_YesterdayAndTime_StartWithLowerCase.replace("{0}", pastTime.toLocaleTimeString(Locale_1.default.language)) :
	            DatetimeResx.strings.RelativeDateTime_YesterdayAndTime.replace("{0}", pastTime.toLocaleTimeString(Locale_1.default.language));
	    }
	    else if (timespan < ONE_MONTH) {
	        // "{0} days ago" (in the past month-ish)
	        var days = Math.floor(timespan / ONE_DAY);
	        return StringHelper_1.getLocalizedCountValue(DatetimeResx.strings.RelativeDateTime_XDays, DatetimeResx.strings.RelativeDateTime_XDaysIntervals, days).replace("{0}", String(days));
	    }
	    // Any other time, just return the regular full original time
	    return pastTime.toLocaleDateString(Locale_1.default.language); // browser-determined localized date (no time)
	}
	exports.getRelativeDateTimeStringPast = getRelativeDateTimeStringPast;
	/**
	 * This is a modified implementation of DateTime.GetRelativeDateTimeStringPast(...).
	 * The differences here are as follows:
	 *      (1) The time string for yesterday does not include the seconds
	 *      (2) Instead of showing 'X days ago' for dates older than a month, default to showing the full date
	 *      (3) The full date will also include the time (also without seconds)
	 */
	function getRelativeDateTimeStringPastWithHourMinute(pastTime) {
	    'use strict';
	    var timespan = Date.now() - pastTime.getTime(); // time elapsed in ms
	    var date = pastTime.toLocaleDateString(Locale_1.default.language); // browser-determined localized date
	    var time = pastTime.toLocaleTimeString(Locale_1.default.language, { hour: 'numeric', minute: '2-digit' }); //time without seconds
	    if (timespan < ONE_DAY) {
	        return getRelativeDateTimeStringPast(pastTime);
	    }
	    else if (timespan < TWO_DAYS) {
	        // "Yesterday at {0}" without seconds
	        return StringHelper_1.format(DatetimeResx.strings.RelativeDateTime_YesterdayAndTime, time);
	    }
	    // Any other time, just return the regular full original date with time, without seconds
	    return StringHelper_1.format(DatetimeResx.strings.DateTime_DateAndTime, date, time);
	}
	exports.getRelativeDateTimeStringPastWithHourMinute = getRelativeDateTimeStringPastWithHourMinute;
	/**
	 * True if the date is on or between the first and last day of the current week. This uses the Date function getDay()
	 * which returns the day of the week for the specified date according to local time, where 0 represents Sunday.
	 */
	function isThisWeek(pastTime) {
	    'use strict';
	    var today = new Date();
	    var start = new Date(today.getTime() - today.getDay() * ONE_DAY);
	    var end = new Date(start.getTime() + ONE_WEEK - ONE_DAY);
	    var isThisWeek = (start.getTime() <= pastTime.getTime() && pastTime.getTime() <= end.getTime());
	    return isThisWeek;
	}
	exports.isThisWeek = isThisWeek;
	/**
	 * True if the date is on or between the first and last day of the previous week. This uses the Date function getDay()
	 * which returns the day of the week for the specified date according to local time, where 0 represents Sunday.
	 */
	function isLastWeek(pastTime) {
	    'use strict';
	    var today = new Date();
	    var start = new Date(today.getTime() - today.getDay() * ONE_DAY - ONE_WEEK);
	    var end = new Date(start.getTime() + ONE_WEEK - ONE_DAY);
	    var isLastWeek = (start.getTime() <= pastTime.getTime() && pastTime.getTime() <= end.getTime());
	    return isLastWeek;
	}
	exports.isLastWeek = isLastWeek;
	// for use with lists' server-processed date value
	/**
	 * @param relativeDateTimeJSString: list server-processed date value string
	 * @startWithLowerCase: use this option when the return string is not at beginning of the sentence.
	 */
	function getRelativeDateTimeStringForLists(relativeDateTimeJSString, startWithLowerCase) {
	    'use strict';
	    if (startWithLowerCase === void 0) { startWithLowerCase = false; }
	    var ret = null;
	    var retTemplate = null;
	    var codes = relativeDateTimeJSString.split('|');
	    // Passthrough case
	    if (codes[0] === "0") {
	        return relativeDateTimeJSString.substring(2);
	    }
	    var bFuture = codes[1] === "1";
	    var timeBucket = codes[2];
	    var timeValue = codes.length >= 4 ? codes[3] : null;
	    var timeValue2 = codes.length >= 5 ? codes[4] : null;
	    switch (timeBucket) {
	        // a few seconds
	        case "1":
	            ret = bFuture ? (startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_AFewSecondsFuture_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_AFewSecondsFuture) :
	                (startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_AFewSeconds_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_AFewSeconds);
	            break;
	        // about a minute
	        case "2":
	            ret = bFuture ? (startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_AboutAMinuteFuture_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_AboutAMinuteFuture) :
	                (startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_AboutAMinute_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_AboutAMinute);
	            break;
	        // x minutes
	        case "3":
	            retTemplate = StringHelper_1.getLocalizedCountValue(bFuture ? (startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_XMinutesFuture_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_XMinutesFuture)
	                : DatetimeResx.strings.RelativeDateTime_XMinutes, bFuture ? DatetimeResx.strings.RelativeDateTime_XMinutesFutureIntervals : DatetimeResx.strings.RelativeDateTime_XMinutesIntervals, Number(timeValue));
	            break;
	        // about an hour
	        case "4":
	            ret = bFuture ? (startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_AboutAnHourFuture_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_AboutAnHourFuture)
	                : (startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_AboutAnHour_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_AboutAnHour);
	            break;
	        // yesterday / tomorrow
	        case "5":
	            if (timeValue == null) {
	                ret = bFuture ? (startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_Tomorrow_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_Tomorrow)
	                    : (startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_Yesterday_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_Yesterday);
	            }
	            else {
	                retTemplate = bFuture ? (startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_TomorrowAndTime_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_TomorrowAndTime)
	                    : (startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_YesterdayAndTime_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_YesterdayAndTime);
	            }
	            break;
	        // x hours
	        case "6":
	            retTemplate = StringHelper_1.getLocalizedCountValue(bFuture ? (startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_XHoursFuture_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_XHoursFuture)
	                : DatetimeResx.strings.RelativeDateTime_XHours, bFuture ? DatetimeResx.strings.RelativeDateTime_XHoursFutureIntervals : DatetimeResx.strings.RelativeDateTime_XHoursIntervals, Number(timeValue));
	            break;
	        // day and time
	        case "7":
	            if (timeValue2 === null) {
	                ret = timeValue;
	            }
	            else {
	                retTemplate = DatetimeResx.strings.RelativeDateTime_DayAndTime;
	            }
	            break;
	        // <Days> days
	        case "8":
	            retTemplate = StringHelper_1.getLocalizedCountValue(bFuture ? DatetimeResx.strings.RelativeDateTime_XDaysFuture : DatetimeResx.strings.RelativeDateTime_XDays, bFuture ? DatetimeResx.strings.RelativeDateTime_XDaysFutureIntervals : DatetimeResx.strings.RelativeDateTime_XDaysIntervals, Number(timeValue));
	            break;
	        // today
	        case "9":
	            ret = startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_Today_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_Today;
	            break;
	    }
	    if (retTemplate !== null) {
	        ret = retTemplate.replace("{0}", timeValue);
	        if (timeValue2 !== null) {
	            ret = ret.replace("{1}", timeValue2);
	        }
	    }
	    return ret;
	}
	exports.getRelativeDateTimeStringForLists = getRelativeDateTimeStringForLists;
	/**
	 * Converts a given date string into its UTC/ISO standard format
	 */
	function convertDateToISOString(expiration) {
	    'use strict';
	    var expirationDate = new Date(expiration);
	    // For more info on the time zone offset and its signage, see:
	    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset
	    var isOffsetNegative = (expirationDate.getTimezoneOffset() < 0) ? true : false;
	    var year = expirationDate.getFullYear().toString();
	    var month = _padStringWithZeroes((expirationDate.getMonth() + 1).toString(), 2); //zero based month
	    var day = _padStringWithZeroes(expirationDate.getDate().toString(), 2);
	    var hours = _padStringWithZeroes(expirationDate.getHours().toString(), 2);
	    var minutes = _padStringWithZeroes(expirationDate.getMinutes().toString(), 2);
	    var seconds = _padStringWithZeroes(expirationDate.getSeconds().toString(), 2);
	    var offsetHours = _padStringWithZeroes((isOffsetNegative ? Math.ceil(expirationDate.getTimezoneOffset() / 60).toString().replace("-", "") : Math.floor(expirationDate.getTimezoneOffset() / 60).toString()), 2);
	    var offsetMinutes = _padStringWithZeroes((expirationDate.getTimezoneOffset() % 60).toString().replace("-", ""), 2);
	    var expirationString = year + month + day + 'T' + hours + minutes + seconds + (isOffsetNegative ? '+' : '-') + offsetHours + offsetMinutes;
	    return expirationString;
	}
	exports.convertDateToISOString = convertDateToISOString;
	/**
	 * get the last day of the month based on the input date
	 */
	function getLastDayOfMonth(date) {
	    'use strict';
	    var lastDay = new Date(Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), 1, 0, 0, 0, 0));
	    // To get the last day of the month we will increment the month
	    lastDay.setUTCMonth(lastDay.getUTCMonth() + 1);
	    // Then subtract a day
	    lastDay.setUTCDate(lastDay.getUTCDate() - 1);
	    // Then set the time to be the last second of the day
	    lastDay.setUTCHours(23, 59, 59, 999);
	    return lastDay;
	}
	exports.getLastDayOfMonth = getLastDayOfMonth;
	/**
	 * Given the .Net ticks of a date, convert it to a Date
	 */
	function getDateFromDotNetTicks(dotNetTicks) {
	    'use strict';
	    if (!dotNetTicks) {
	        return null;
	    }
	    var ticksInMilliseconds = (dotNetTicks / 10000) - TICKS_CONVERSION_CONSTANT;
	    return new Date(ticksInMilliseconds);
	}
	exports.getDateFromDotNetTicks = getDateFromDotNetTicks;
	/**
	 * Returns a short version of a date to display (e.g. 11:45 PM if today, or 11/2/2015 if not today)
	 */
	function getShortDisplayDate(date, useUTCTimezone) {
	    'use strict';
	    if (!date) {
	        return '';
	    }
	    var dateOptions = useUTCTimezone && _supportsTimeZoneDateOptions() ? { timeZone: 'UTC' } : {};
	    var timeOptions = useUTCTimezone && _supportsTimeZoneDateOptions() ? { hour: '2-digit', minute: '2-digit', timeZone: 'UTC' } : { hour: '2-digit', minute: '2-digit' };
	    var locale = _getLocale();
	    var isToday = date.toLocaleDateString() === new Date().toLocaleDateString();
	    return isToday ? date.toLocaleTimeString(locale, timeOptions) : date.toLocaleDateString(locale, dateOptions);
	}
	exports.getShortDisplayDate = getShortDisplayDate;
	/**
	 * Returns a full version of a date to display (e.g. 11/2/2015 11:45 PM)
	 * useUTCTimezone defaults to false
	 * useHour12 defaults to true. Determine if display date should use 12hr or 24hr format.
	 */
	function getFullDisplayDate(date, useUTCTimezone, useHour12) {
	    'use strict';
	    if (typeof useHour12 === void 0) {
	        useHour12 = true;
	    }
	    var dateOptions = useUTCTimezone && _supportsTimeZoneDateOptions() ? { timeZone: 'UTC' } : {};
	    var timeOptions = useUTCTimezone && _supportsTimeZoneDateOptions() ? { hour: '2-digit', minute: '2-digit', timeZone: 'UTC', hour12: useHour12 } : { hour: '2-digit', minute: '2-digit', hour12: useHour12 };
	    var locale = _getLocale();
	    return StringHelper_1.format(DatetimeResx.strings.DateAndTime, date.toLocaleDateString(locale, dateOptions), date.toLocaleTimeString(locale, timeOptions));
	}
	exports.getFullDisplayDate = getFullDisplayDate;
	function _getLocale() {
	    'use strict';
	    if (!validLocale) {
	        try {
	            new Date().toLocaleDateString(Locale_1.default.language);
	            validLocale = Locale_1.default.language;
	        }
	        catch (e) {
	            try {
	                new Date().toLocaleDateString(navigator.language);
	                validLocale = navigator.language;
	            }
	            catch (e) {
	                validLocale = 'en';
	            }
	        }
	    }
	    return validLocale;
	}
	function _supportsTimeZoneDateOptions() {
	    'use strict';
	    if (supportsTimeZoneDateOptions === undefined) {
	        try {
	            var locale = _getLocale();
	            (new Date()).toLocaleDateString(locale, { timeZone: 'UTC' });
	            supportsTimeZoneDateOptions = true;
	        }
	        catch (E) {
	            // We know of some versions of IE 11 that fail when date options with a timezone is specified.
	            supportsTimeZoneDateOptions = false;
	        }
	    }
	    return supportsTimeZoneDateOptions;
	}
	/**
	 * Pads a date string with the request number of '0' characters
	 */
	function _padStringWithZeroes(toPad, numDigits) {
	    'use strict';
	    var paddedString = toPad;
	    while (paddedString.length < numDigits) {
	        paddedString = '0' + paddedString;
	    }
	    return paddedString;
	}


/***/ },
/* 9 */
/***/ function(module, exports) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	exports.strings = { "RelativeDateTime_AFewSeconds": "A few seconds ago", "RelativeDateTime_AFewSeconds_StartWithLowerCase": "a few seconds ago", "RelativeDateTime_Format_DateTimeFormattingString_Override": "", "RelativeDateTime_Format_DateTimeFormattingString": "{0}, {1}", "RelativeDateTime_AFewSecondsFuture": "In a few seconds", "RelativeDateTime_AFewSecondsFuture_StartWithLowerCase": "in a few seconds", "RelativeDateTime_AboutAMinuteFuture": "In about a minute", "RelativeDateTime_AboutAMinuteFuture_StartWithLowerCase": "in about a minute", "RelativeDateTime_LessThanAMinute": "Less than a minute ago", "RelativeDateTime_LessThanAMinute_StartWithLowerCase": "less than a minute ago", "RelativeDateTime_AboutAMinute": "About a minute ago", "RelativeDateTime_AboutAMinute_StartWithLowerCase": "about a minute ago", "RelativeDateTime_XMinutesFuture": "In {0} minute||In {0} minutes", "RelativeDateTime_XMinutesFuture_StartWithLowerCase": "in {0} minute||in {0} minutes", "RelativeDateTime_XMinutesFutureIntervals": "1||2-", "RelativeDateTime_XMinutesIntervals": "1||2-", "RelativeDateTime_AboutAnHourFuture": "In about an hour", "RelativeDateTime_AboutAnHourFuture_StartWithLowerCase": "in about an hour", "RelativeDateTime_AboutAnHour": "About an hour ago", "RelativeDateTime_AboutAnHour_StartWithLowerCase": "about an hour ago", "RelativeDateTime_Tomorrow": "Tomorrow", "RelativeDateTime_Tomorrow_StartWithLowerCase": "tomorrow", "RelativeDateTime_Yesterday": "Yesterday", "RelativeDateTime_Yesterday_StartWithLowerCase": "yesterday", "RelativeDateTime_YesterdayAndTime": "Yesterday at {0}", "RelativeDateTime_YesterdayAndTime_StartWithLowerCase": "yesterday at {0}", "DateTime_DateAndTime": "{0} at {1}", "RelativeDateTime_TomorrowAndTime": "Tomorrow at {0}", "RelativeDateTime_TomorrowAndTime_StartWithLowerCase": "tomorrow at {0}", "RelativeDateTime_XHoursFuture": "In {0} hour||In {0} hours", "RelativeDateTime_XHoursFuture_StartWithLowerCase": "in {0} hour||in {0} hours", "RelativeDateTime_XHours": "{0} hour ago||{0} hours ago", "RelativeDateTime_XHoursFutureIntervals": "1||2-", "RelativeDateTime_XHoursIntervals": "1||2-", "RelativeDateTime_DayAndTime": "{0} at {1}", "RelativeDateTime_XDaysFuture": "{0} day from now||{0} days from now", "RelativeDateTime_XDays": "{0} day ago||{0} days ago", "RelativeDateTime_XDaysFutureIntervals": "1||2-", "RelativeDateTime_XDaysIntervals": "1||2-", "RelativeDateTime_Today": "Today", "RelativeDateTime_Today_StartWithLowerCase": "today", "RelativeDateTime_XMinutes": "{0} minute ago||{0} minutes ago", "DateAndTime": "{0} {1}" };


/***/ },
/* 10 */
/***/ function(module, exports) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var Locale = (function () {
	    function Locale() {
	    }
	    Locale.invalidate = function () {
	        Locale.isRightToLeft = (document.documentElement.getAttribute('dir') === 'rtl');
	        Locale.safeLeft = Locale.isRightToLeft ? 'right' : 'left';
	        Locale.safeRight = Locale.isRightToLeft ? 'left' : 'right';
	        /** Robert Chen has the detailed explanation here : The most magic thing here is that OneDrive page and teamsite page has exactly the same line of code with regard to html tag Lang attribute.
	         * <SharePoint:SPHtmlTag lang="<%$Resources:wss,language_value%>" dir="<%$Resources:wss,multipages_direction_dir_value%>" ID="SPHtmlTag" runat="server">
	         * And in teamsite doclib, this lang gets executed to the current user locale. And that is actually already a magic------What happens here is the in order to get the doclib page in ContentDB, we had a standard MondoSproc call which gets the page and the SPWeb. In constructing the web, SP *  * code has smart logic to set Thread.CurrentThread.CurrentUICulture to match the MUI language! And with that magic, ="<%$Resources:wss,language_value%> actually gets sets properly to the user language, not the pre-defined web language.
	         * For OneDrive.aspx which lives inside _layouts folder, the order of code execution changes. We must have executed this line of ASPX code first ="<%$Resources:wss,language_value%> before SPWeb was opened and did the magic to set Thread.CurrentThread.CurrentUICulture.
	         * So the Thread.CurrentThread.CurrentUICulture affecting ="<%$Resources:wss,language_value%> with SPWeb magic end up not working in Onedrive.aspx! And there’s really nothing that we can do about it unless we rewrite the page!
	         * So the conclusion is that the lang attribute is by design (of implementation) different from the regular team site pages which live inside content db.
	         */
	        var language = window["_spPageContextInfo"] && window["_spPageContextInfo"].currentCultureName;
	        // fallback of xml:lang for IE9
	        Locale.language = language ||
	            document.documentElement.getAttribute('lang') ||
	            document.documentElement.getAttribute('xml:lang') ||
	            'en-us';
	    };
	    return Locale;
	}());
	Locale.invalidate();
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = Locale;


/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:CoverageThreshold(96)
	"use strict";
	var Manager_1 = __webpack_require__(12);
	var CorrelationVector_1 = __webpack_require__(15);
	var _id = 0;
	(function (ClonedEventType) {
	    ClonedEventType[ClonedEventType["Single"] = 0] = "Single";
	    ClonedEventType[ClonedEventType["Start"] = 1] = "Start";
	    ClonedEventType[ClonedEventType["End"] = 2] = "End";
	})(exports.ClonedEventType || (exports.ClonedEventType = {}));
	var ClonedEventType = exports.ClonedEventType;
	(function (ValidationErrorType) {
	    ValidationErrorType[ValidationErrorType["NoParent"] = 1] = "NoParent";
	})(exports.ValidationErrorType || (exports.ValidationErrorType = {}));
	var ValidationErrorType = exports.ValidationErrorType;
	var EventBase = (function () {
	    function EventBase(eventName, shortEventName, parent) {
	        this.eventName = eventName;
	        this.shortEventName = shortEventName;
	        this.validationErrors = 0;
	        this.id = _id++;
	        this.enabled = this.isEnabled();
	        this.critical = this.isCritical();
	        // Set the parent id if needed
	        if (parent) {
	            this.parentId = parent.id;
	        }
	        else if (this.requiresParent()) {
	            this.addValidationError(ValidationErrorType.NoParent);
	        }
	        // Set the start time
	        this.startTime = Manager_1.Manager.getTime();
	        if (parent) {
	            this.vector = new CorrelationVector_1.default(parent.vector);
	        }
	        else {
	            this.vector = new CorrelationVector_1.default(CorrelationVector_1.default.RootVector);
	        }
	    }
	    /**
	     * This will return true if the event is of this type
	     * @param event {IEvent} The event to compare
	     */
	    EventBase.isTypeOf = function (event) {
	        return event.eventName.indexOf(this.shortName + this.eventNameDelimeter) >= 0;
	    };
	    /** This is called on all string data to clean it */
	    EventBase.prototype.cleanString = function (str) {
	        return Manager_1.Manager.cleanString(str);
	    };
	    EventBase.prototype.isEnabled = function () {
	        // All events are enabled by default
	        return true;
	    };
	    EventBase.prototype.requiresParent = function () {
	        // All events require parents by default
	        return true;
	    };
	    EventBase.prototype.isCritical = function () {
	        // All events are not critical by default
	        return false;
	    };
	    EventBase.prototype._logEvent = function (eventType) {
	        Manager_1.Manager.logEvent(this, eventType);
	    };
	    EventBase.prototype.addValidationError = function (type) {
	        this.validationErrors = this.validationErrors | type;
	        Manager_1.Manager.logValidationError(this, type);
	    };
	    EventBase.eventNameDelimeter = ',';
	    EventBase.fullName = 'EventBase,';
	    EventBase.shortName = 'EventBase';
	    return EventBase;
	}());
	exports.EventBase = EventBase;


/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:CoverageThreshold(75)
	"use strict";
	var ObjectUtil_1 = __webpack_require__(13);
	var handlers = [];
	var buffer = [];
	var maxBufferSize = 100;
	function getStartDate() {
	    'use strict';
	    if (window.performance && window.performance.timing && window.performance.timing.navigationStart) {
	        return new Date(window.performance.timing.navigationStart);
	    }
	    else {
	        return new Date();
	    }
	}
	var startDate = getStartDate();
	var Manager = (function () {
	    function Manager() {
	    }
	    Manager.getTime = function () {
	        return (new Date()).getTime();
	    };
	    /** This is the overrideable clean string function */
	    Manager.cleanString = function (str) {
	        return str;
	    };
	    Manager.addLogHandler = function (handler) {
	        handlers.push(handler);
	        // Return the buffer so the handler can get missed events
	        return buffer;
	    };
	    Manager.removeLogHandler = function (handler) {
	        for (var x = 0; x < handlers.length; x++) {
	            if (handlers[x] === handler) {
	                // Remove the handler
	                handlers.splice(x, 1);
	                break;
	            }
	        }
	    };
	    Manager.logEvent = function (event, eventType) {
	        // Clone the object (do it natively because the browser can mark it as a type)
	        var clonedEvent = Object.freeze({
	            data: ObjectUtil_1.default.deepCopy(event.data),
	            id: event.id,
	            enabled: event.enabled,
	            critical: event.critical,
	            endTime: event.endTime,
	            eventName: event.eventName,
	            shortEventName: event.shortEventName,
	            parentId: event.parentId,
	            startTime: event.startTime,
	            eventType: eventType,
	            metadata: event.metadata,
	            vector: event.vector,
	            validationErrors: event.validationErrors
	        });
	        // Add to the buffer
	        buffer.push(clonedEvent);
	        if (buffer.length > maxBufferSize) {
	            buffer = buffer.slice(1);
	            // Make sure we have a handler before the buffer is overrun
	            if (handlers.length === 0) {
	                this.handleBaseLoggingError(new Error("Logging buffer overflow hit before any logging handler was registered"));
	            }
	        }
	        // Let handlers know the log event has completed
	        for (var x = 0; x < handlers.length; x++) {
	            try {
	                handlers[x](clonedEvent);
	            }
	            catch (e) {
	                this.handleBaseLoggingError(e);
	            }
	        }
	    };
	    Manager.logValidationError = function (event, type) {
	        // Do nothing so that we can intialize around circular reference issue
	    };
	    Manager.getStack = function () {
	        var error;
	        try {
	            var w = window;
	            w["______ExpectedError______"]();
	        }
	        catch (e) {
	            error = e;
	        }
	        return error.stack;
	    };
	    Manager.handleBaseLoggingError = function (error) {
	        // TODO: Log somewhere
	    };
	    Manager.startDate = startDate;
	    Manager.startTime = startDate.getTime();
	    return Manager;
	}());
	exports.Manager = Manager;
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = Manager;


/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var UriEncoding_1 = __webpack_require__(14);
	var ObjectUtil;
	(function (ObjectUtil) {
	    "use strict";
	    ObjectUtil.DEFAULT_DELIMITER = '&';
	    ObjectUtil.KEYVALUE_DELIMITER = '=';
	    // Returns a copy of the specified object by deeply cloning all of its properties.
	    function deepCopy(object) {
	        var refsCopied = [];
	        var copyRecurse = function (obj) {
	            var result = null;
	            if (obj) {
	                if (Array.isArray(obj)) {
	                    result = [];
	                }
	                else {
	                    // create clone of the object with same prototype chain
	                    result = Object.create(Object.getPrototypeOf(obj));
	                }
	                // iterate over all the properties in the object
	                Object.keys(obj).forEach(function (key) {
	                    // recursively copy the object's properties if the property is an object
	                    var value = obj[key];
	                    if (typeof value === "object") {
	                        if (refsCopied.indexOf(value) !== -1) {
	                            throw new Error("Cannot perform DeepCopy() because a circular reference was encountered, object: " + String(obj) + ", property: " + String(key));
	                        }
	                        refsCopied.push(value);
	                        result[key] = copyRecurse(value);
	                        refsCopied.pop();
	                    }
	                    else {
	                        result[key] = value;
	                    }
	                });
	            }
	            return result;
	        };
	        return copyRecurse(object);
	    }
	    ObjectUtil.deepCopy = deepCopy;
	    // Deeply compares the objects by recursively comparing all their properties, objects with circular references are not supported, prototype members and functions are ignored
	    function deepCompare(objA, objB, equivalent) {
	        // keep track of references that have been compared to find circular references while walking down either object
	        var refsComparedA = [];
	        var refsComparedB = [];
	        var compare = Boolean(equivalent) ? equivalent : function (a, b) { return (a === b); };
	        var equals = function (a, b) {
	            // try a simple equality test first
	            if (a === b) {
	                return true;
	            }
	            if ((a === null) || (b === null)) {
	                return false;
	            }
	            // if both are objects, then further comparison is required
	            if ((typeof (a) === "object") && (typeof (b) === "object")) {
	                // perform deep comparison over object's properties
	                var aKeys = Object.keys(a).sort();
	                var bKeys_1 = Object.keys(b).sort();
	                // does one object have a different number of properties?
	                if (aKeys.length !== bKeys_1.length) {
	                    return false;
	                }
	                var keysMatch = aKeys.every(function (key, index) {
	                    // key names should match
	                    if (key !== bKeys_1[index]) {
	                        return false;
	                    }
	                    else if (typeof (a[key]) === 'function' || typeof (b[key]) === 'function') {
	                        //skip comparison of function properties
	                        return true;
	                    }
	                    else if (!compare(a[key], b[key])) {
	                        // if this is an Object then recursive testing is needed on its properties
	                        if (typeof a[key] === "object") {
	                            // if this property was encountered before then we're going in circles, give up
	                            if (refsComparedA.indexOf(a[key]) !== -1) {
	                                throw new Error("Cannot perform DeepCompare() because a circular reference was encountered, object: " + String(a) + ", property: " + key);
	                            }
	                            refsComparedA.push(a[key]);
	                            if (refsComparedB.indexOf(b[key]) !== -1) {
	                                throw new Error("Cannot perform DeepCompare() because a circular reference was encountered, object: " + String(b) + ", property: " + key);
	                            }
	                            refsComparedB.push(b[key]);
	                            // recursive compare object's properties
	                            if (!equals(a[key], b[key])) {
	                                return false;
	                            }
	                            refsComparedA.pop();
	                            refsComparedB.pop();
	                            return true;
	                        }
	                        else {
	                            // properties don't match
	                            return false;
	                        }
	                    }
	                    else {
	                        return true;
	                    }
	                });
	                if (!keysMatch) {
	                    return false;
	                }
	            }
	            else {
	                // parameters aren't equal, and at least one is not an Object
	                return false;
	            }
	            // everything is equal
	            return true;
	        };
	        return equals(objA, objB);
	    }
	    ObjectUtil.deepCompare = deepCompare;
	    /**
	     * This is a function you can call to safely serialize anything to JSON.
	     * The built-in JSON.stringify() throws an exception for circular references and can't handle
	     * many built-ins such as HTMLElements and the global window object.
	     */
	    function safeSerialize(obj) {
	        var str;
	        try {
	            var seenObjects_1 = [];
	            str = JSON.stringify(obj, function (key, value) {
	                if (value === window) {
	                    return "[window]";
	                }
	                else if (value instanceof HTMLElement) {
	                    return "[HTMLElement]";
	                }
	                else if (typeof value === "function") {
	                    return "[function]";
	                }
	                else if (typeof value === "object") {
	                    if (value === null) {
	                        return value;
	                    }
	                    else if (seenObjects_1.indexOf(value) === -1) {
	                        seenObjects_1.push(value);
	                        return value;
	                    }
	                    else {
	                        return "[circular]";
	                    }
	                }
	                else {
	                    return value;
	                }
	            });
	        }
	        catch (err) {
	            // Note: we make this be a JSON string, so that consumers
	            // can always call JSON.parse.
	            str = JSON.stringify("[object]");
	        }
	        return str;
	    }
	    ObjectUtil.safeSerialize = safeSerialize;
	    /**
	     * Serializes the object Name Values Pairs (Depth of 1).
	     * Used for Query Strings and Cookie Values
	     * @param {any} obj Object with name value pairs
	     * @param {string} delimeter  Delimiter seperates the pairs
	     * @param {boolean} skipEncoding True to skip encoding
	     */
	    function serialize(obj, delimiter, skipEncoding) {
	        delimiter = delimiter || ObjectUtil.DEFAULT_DELIMITER;
	        var values = Object.keys(obj).map(function (name) {
	            // Get the value and convert it to a string
	            var value = obj[name];
	            value = value ? value.toString() : "";
	            if (!skipEncoding) {
	                value = UriEncoding_1.default.encodeURIComponent(value);
	            }
	            // Add the encoded value to the array
	            return name + ObjectUtil.KEYVALUE_DELIMITER + value;
	        });
	        return values.join(delimiter);
	    }
	    ObjectUtil.serialize = serialize;
	    /**
	     * Copy the values of all enumerable own properties from one or more source objects to a target object.
	     */
	    function extend(target, source) {
	        if (source) {
	            for (var prop in source) {
	                if (source.hasOwnProperty(prop)) {
	                    target[prop] = source[prop];
	                }
	            }
	        }
	        return target;
	    }
	    ObjectUtil.extend = extend;
	})(ObjectUtil || (ObjectUtil = {}));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = ObjectUtil;


/***/ },
/* 14 */
/***/ function(module, exports) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var UriEncoding = (function () {
	    function UriEncoding() {
	    }
	    /////////////////////////////
	    // This file is more clean of all unneeded pollutants. It only contains the minimum amount of code required for someone to use the URI class.
	    // You should think twice before adding anything else into this file because you will be causing unneeded bloat from someone else.
	    /////////////////////////////
	    /**
	     * This function performs an aggressive unicode URL-encoding.
	     * Convert non alphanum character into UTF-8 code string in format %XX%XX%XX.
	     *
	     * Escape unsafe characters
	     *   CTL | SP | <"> | "#" | "%" | "<" | ">" | "'" | "&"
	     * in the URL path (before "?", "#")
	     * No encoding on query string.
	     *
	     * @param {string} str - String to encode
	     * @param {boolean} bAsUrl - Encode in the same way as the code in unmanaged (Url::UrlEncode) code and
	     *                           SP OM (SPHttpUtility.UrlKeyValueEncode and SPHttpUtility.UrlPathEncode).
	     * @param {boolean} bForFilterQuery
	     * @param {boolean} bForCallback - Only escape the characters after 0x7F to workaround bug O12: 452191
	     */
	    UriEncoding.encodeURIComponent = function (str, bAsUrl, bForFilterQuery, bForCallback) {
	        var strOut = "";
	        var strByte;
	        var ix = 0;
	        var strEscaped = " \"%<>\'&";
	        if (!str) {
	            return "";
	        }
	        var len = str.length;
	        for (ix = 0; ix < len; ix++) {
	            var charCode = str.charCodeAt(ix);
	            var curChar = str.charAt(ix);
	            if (bAsUrl && (curChar === '#' || curChar === '?')) {
	                strOut += str.substr(ix);
	                break;
	            }
	            if (bForFilterQuery && curChar === '&') {
	                strOut += curChar;
	                continue;
	            }
	            if (charCode <= 0x7f) {
	                if (bForCallback) {
	                    strOut += curChar;
	                }
	                else {
	                    if ((charCode >= 97 && charCode <= 122) ||
	                        (charCode >= 65 && charCode <= 90) ||
	                        (charCode >= 48 && charCode <= 57) ||
	                        (bAsUrl && (charCode >= 32 && charCode <= 95) && strEscaped.indexOf(curChar) < 0)) {
	                        strOut += curChar;
	                    }
	                    else if (charCode <= 0x0f) {
	                        strOut += "%0" + charCode.toString(16).toUpperCase();
	                    }
	                    else if (charCode <= 0x7f) {
	                        strOut += "%" + charCode.toString(16).toUpperCase();
	                    }
	                }
	            }
	            else if (charCode <= 0x07ff) {
	                strByte = 0xc0 | (charCode >> 6);
	                strOut += "%" + strByte.toString(16).toUpperCase();
	                strByte = 0x80 | (charCode & 0x003f);
	                strOut += "%" + strByte.toString(16).toUpperCase();
	            }
	            else if ((charCode & 0xFC00) !== 0xD800) {
	                strByte = 0xe0 | (charCode >> 12);
	                strOut += "%" + strByte.toString(16).toUpperCase();
	                strByte = 0x80 | ((charCode & 0x0fc0) >> 6); // middle 6 bits
	                strOut += "%" + strByte.toString(16).toUpperCase();
	                strByte = 0x80 | (charCode & 0x003f); // lower 6 bits
	                strOut += "%" + strByte.toString(16).toUpperCase();
	            }
	            else if (ix < str.length - 1) {
	                charCode = (charCode & 0x03FF) << 10; // lower 10 bits of first char
	                ix++;
	                var nextCharCode = str.charCodeAt(ix);
	                charCode |= nextCharCode & 0x03FF; // lower 10 bits of second char
	                charCode += 0x10000;
	                strByte = 0xf0 | (charCode >> 18);
	                strOut += "%" + strByte.toString(16).toUpperCase();
	                strByte = 0x80 | ((charCode & 0x3f000) >> 12); // upper 6 bits
	                strOut += "%" + strByte.toString(16).toUpperCase();
	                strByte = 0x80 | ((charCode & 0x0fc0) >> 6); // middle 6 bits
	                strOut += "%" + strByte.toString(16).toUpperCase();
	                strByte = 0x80 | (charCode & 0x003f); // lower 6 bits
	                strOut += "%" + strByte.toString(16).toUpperCase();
	            }
	        }
	        return strOut;
	    };
	    /**
	     * Callbacks do not work if a #bookmark is in the URL. If there is a bookmark then we need to remove it. We also need to
	     * deal with the scenario where there is not a bookmark but there is an unencoded # as a part of a name/value after the '?'.
	     * This is how things should work here:
	     * .../foo.aspx -> .../foo.aspx (unchanged)
	     * .../foo.aspx#bookmark -> .../foo.aspx (bookmark is removed)
	     * .../foo.aspx#bookmark?name=value -> .../foo.aspx?name=value (bookmark is removed)
	     * .../foo.aspx#bookmark?name1=value#extra1&name2=value2 -> .../foo.aspx?name1=value#extra1&name2=value2 (only the bookmark # is removed)
	     * .../foo.aspx?name1=value#extra1&name2=value2 -> .../foo.aspx?name1=value#extra1&name2=value2 (unchanged)
	     */
	    UriEncoding.escapeUrlForCallback = function (str) {
	        var iPound = str.indexOf("#");
	        var iQues = str.indexOf("?");
	        if ((iPound > 0) && ((iQues === -1) || (iPound < iQues))) {
	            var strNew = str.substr(0, iPound);
	            if (iQues > 0) {
	                strNew += str.substr(iQues); // Need to include the '?' along with the "name=value" pairs.
	            }
	            str = strNew;
	        }
	        return UriEncoding.encodeURIComponent(str, true, false, true);
	    };
	    /**
	     * SharePoint REST processor expect single quote ' to be escaped to '' in tokens (this applies to %27 too).
	     * See example for usage.
	     * @example
	     * "getFolderByServerRelativeUrl('"+encodeRestUriStringToken("don't know.txt")+"')" should became "getFolderByServerRelativeUrl('don''t know.txt')""
	     */
	    UriEncoding.encodeRestUriStringToken = function (stringToken) {
	        if (stringToken) {
	            stringToken = stringToken.replace(/'/g, "''");
	            stringToken = stringToken.replace(/%27/g, "%27%27");
	            stringToken = UriEncoding.encodeURIComponent(stringToken);
	        }
	        return stringToken;
	    };
	    return UriEncoding;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = UriEncoding;


/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Guid_1 = __webpack_require__(16);
	var CorrelationVector = (function () {
	    function CorrelationVector(parent, current) {
	        if (parent) {
	            this.root = parent.root;
	            this.parent = parent.current;
	        }
	        else {
	            this.root = this.parent = Guid_1.default.Empty;
	        }
	        if (current) {
	            this.current = current;
	        }
	        else {
	            this.current = Guid_1.default.generate();
	        }
	    }
	    CorrelationVector.prototype.toString = function () {
	        return this.root + "#" + this.parent + "#" + this.current;
	    };
	    CorrelationVector.RootVector = window['rootVector'] || new CorrelationVector();
	    return CorrelationVector;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = CorrelationVector;


/***/ },
/* 16 */
/***/ function(module, exports) {

	"use strict";
	function generateUuidPart(length) {
	    "use strict";
	    var str = '';
	    while (str.length < length) {
	        var num = Math.random() * 16;
	        num = num | 0; // clear decimal
	        str += num.toString(16);
	    }
	    return str;
	}
	var Guid = (function () {
	    function Guid() {
	    }
	    /**
	     * Return a v4 UUID as specified by RFC 4122 http://tools.ietf.org/html/rfc4122
	     */
	    Guid.generate = function () {
	        var parts = [];
	        parts.push(generateUuidPart(8));
	        parts.push(generateUuidPart(4));
	        // first digit must be 4 since we are using pseudorandom numbers
	        var timeHighAndVersion = '4' + generateUuidPart(3);
	        parts.push(timeHighAndVersion);
	        // first digit must have first two bits set to 10
	        var clockSeqHiAndReserved = generateUuidPart(4);
	        var intVal = parseInt(clockSeqHiAndReserved[0], 10);
	        intVal = intVal & 3; // clear out first two bits
	        intVal = intVal | 8; // set first bit to 1
	        clockSeqHiAndReserved = intVal.toString(16) + clockSeqHiAndReserved.substr(1);
	        parts.push(clockSeqHiAndReserved);
	        parts.push(generateUuidPart(12));
	        return parts.join('-');
	    };
	    /**
	     * Normalizes a GUID to lowercase. Returns '' if guid is not given.
	     * @param includeBrackets - if true, add or keep brackets; if false, strip brackets
	     */
	    Guid.normalizeLower = function (guid, includeBrackets) {
	        return guid ? Guid._normalizeBrackets(guid.toLowerCase(), includeBrackets) : '';
	    };
	    /**
	     * Normalizes a GUID to uppercase. Returns '' if guid is not given.
	     * @param includeBrackets - if true, add or keep brackets; if false, strip brackets
	     */
	    Guid.normalizeUpper = function (guid, includeBrackets) {
	        return guid ? Guid._normalizeBrackets(guid.toUpperCase(), includeBrackets) : '';
	    };
	    Guid._normalizeBrackets = function (guid, includeBrackets) {
	        var match = guid.match(/^\{(.*)\}$/);
	        if (match) {
	            return includeBrackets ? match[0] : match[1];
	        }
	        return includeBrackets ? '{' + guid + '}' : guid;
	    };
	    Guid.Empty = "00000000-0000-0000-0000-000000000000";
	    return Guid;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = Guid;


/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var SingleEventBase_1 = __webpack_require__(18);
	var Engagement = (function (_super) {
	    __extends(Engagement, _super);
	    /**
	     * The Engagement event constructor
	     * @param parent {IEvent} The optional parent for this event
	     */
	    function Engagement(parent) {
	        _super.call(this, 'Engagement,', 'Engagement', parent);
	    }
	    /**
	     * This is true if the Engagement event is enabled
	     */
	    Engagement.enabled = function () {
	        return true;
	    };
	    /**
	     * This will create a single Engagement event
	     * @param data {IEngagementSingleSchema}
	     * -required name - This is the name of the engagement event
	     * -optional extraData - This is the random extra data for the engagement event
	     * @param parent {IEvent} The optional parent for this event
	     */
	    Engagement.logData = function (data, parent) {
	        return SingleEventBase_1.SingleEventBase._logData(Engagement, data, parent);
	    };
	    Engagement.prototype.setSingleData = function (data) {
	        this.data.name = this.cleanString(data.name);
	        if (typeof data.extraData !== "undefined") {
	            this.data.extraData = data.extraData;
	        }
	    };
	    /**
	     * The name of the Engagement event
	     */
	    Engagement.fullName = 'Engagement,';
	    /**
	     * The short name of the Engagement event
	     */
	    Engagement.shortName = 'Engagement';
	    /**
	     * This is true if the Engagement event is enabled
	     */
	    Engagement.metadata = {
	        name: {
	            type: "String",
	            definedInName: "Engagement",
	            definedInFullName: "Engagement,",
	            isKey: true,
	            isMetric: false
	        },
	        extraData: {
	            type: "Object",
	            definedInName: "Engagement",
	            definedInFullName: "Engagement,",
	            isMetric: false
	        }
	    };
	    return Engagement;
	}(SingleEventBase_1.SingleEventBase));
	exports.Engagement = Engagement;
	Engagement.prototype.metadata = Engagement.metadata;
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = Engagement;


/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:CoverageThreshold(80)
	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var EventBase_1 = __webpack_require__(11);
	var callingFromInside = false;
	var SingleEventBase = (function (_super) {
	    __extends(SingleEventBase, _super);
	    function SingleEventBase(eventName, shortEventName, parent) {
	        if (!callingFromInside) {
	            throw "Use logData method for single events";
	        }
	        _super.call(this, eventName, shortEventName, parent);
	        // Make sure data has a value
	        if (!this.data) {
	            this.data = {};
	        }
	    }
	    SingleEventBase._logData = function (eventConstructor, data, parent) {
	        callingFromInside = true;
	        try {
	            var event = new eventConstructor(parent);
	            event.setSingleData(data);
	            event._logEvent(EventBase_1.ClonedEventType.Single);
	        }
	        finally {
	            callingFromInside = false;
	        }
	        return event;
	    };
	    SingleEventBase.prototype.setSingleData = function (data) {
	        // The single event to copy data that will be overridden
	    };
	    SingleEventBase.fullName = 'SingleEventBase,';
	    SingleEventBase.shortName = 'SingleEventBase';
	    return SingleEventBase;
	}(EventBase_1.EventBase));
	exports.SingleEventBase = SingleEventBase;


/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var SingleEventBase_1 = __webpack_require__(18);
	var Nav = (function (_super) {
	    __extends(Nav, _super);
	    /**
	     * The Nav event constructor
	     * @param parent {IEvent} The optional parent for this event
	     */
	    function Nav(parent) {
	        _super.call(this, 'Nav,', 'Nav', parent);
	    }
	    /**
	     * This is true if the Nav event is enabled
	     */
	    Nav.enabled = function () {
	        return true;
	    };
	    /**
	     * This will create a single Nav event
	     * @param data {INavSingleSchema}
	     * -required viewParams - The view params associated with the navigation
	     * -optional url - The url associated with the navigation. This is not sanitized (i.e. could contain authkeys)
	     * @param parent {IEvent} The optional parent for this event
	     */
	    Nav.logData = function (data, parent) {
	        return SingleEventBase_1.SingleEventBase._logData(Nav, data, parent);
	    };
	    Nav.prototype.setSingleData = function (data) {
	        this.data.viewParams = data.viewParams;
	        if (typeof data.url !== "undefined") {
	            this.data.url = this.cleanString(data.url);
	        }
	    };
	    /**
	     * The name of the Nav event
	     */
	    Nav.fullName = 'Nav,';
	    /**
	     * The short name of the Nav event
	     */
	    Nav.shortName = 'Nav';
	    /**
	     * This is true if the Nav event is enabled
	     */
	    Nav.metadata = {
	        viewParams: {
	            type: "Object",
	            definedInName: "Nav",
	            definedInFullName: "Nav,",
	            isMetric: false
	        },
	        url: {
	            type: "String",
	            definedInName: "Nav",
	            definedInFullName: "Nav,",
	            isMetric: false
	        }
	    };
	    return Nav;
	}(SingleEventBase_1.SingleEventBase));
	exports.Nav = Nav;
	Nav.prototype.metadata = Nav.metadata;
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = Nav;


/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var SingleEventBase_1 = __webpack_require__(18);
	var Features_1 = __webpack_require__(21);
	var PLTHttpRequest = (function (_super) {
	    __extends(PLTHttpRequest, _super);
	    /**
	     * The PLTHttpRequest event constructor
	     * @param parent {IEvent} The optional parent for this event
	     */
	    function PLTHttpRequest(parent) {
	        _super.call(this, 'PLTHttpRequest,', 'PLTHttpRequest', parent);
	    }
	    /**
	     * This is true if the PLTHttpRequest event is enabled
	     */
	    PLTHttpRequest.enabled = function () {
	        return Features_1.default.isFeatureEnabled(PLTHttpRequest.samplingFeature);
	    };
	    /**
	     * This will create a single PLTHttpRequest event
	     * @param data {IPLTHttpRequestSingleSchema}
	     * -required startTime - The start time of the request
	     * -required url - The url for the request
	     * -required duration - Time it takes for the request to complete
	     * @param parent {IEvent} The optional parent for this event
	     */
	    PLTHttpRequest.logData = function (data, parent) {
	        return SingleEventBase_1.SingleEventBase._logData(PLTHttpRequest, data, parent);
	    };
	    /**
	     * This is true when PLTHttpRequest event is enabled
	     */
	    PLTHttpRequest.prototype.isEnabled = function () {
	        return Features_1.default.isFeatureEnabled(PLTHttpRequest.samplingFeature);
	    };
	    PLTHttpRequest.prototype.setSingleData = function (data) {
	        this.data.startTime = data.startTime;
	        this.data.url = this.cleanString(data.url);
	        this.data.duration = data.duration;
	    };
	    /**
	     * The name of the PLTHttpRequest event
	     */
	    PLTHttpRequest.fullName = 'PLTHttpRequest,';
	    /**
	     * The short name of the PLTHttpRequest event
	     */
	    PLTHttpRequest.shortName = 'PLTHttpRequest';
	    /**
	     * This is true if the PLTHttpRequest event is enabled
	     */
	    PLTHttpRequest.metadata = {
	        startTime: {
	            type: "Number",
	            definedInName: "PLTHttpRequest",
	            definedInFullName: "PLTHttpRequest,",
	            isMetric: true
	        },
	        url: {
	            type: "String",
	            definedInName: "PLTHttpRequest",
	            definedInFullName: "PLTHttpRequest,",
	            isMetric: false
	        },
	        duration: {
	            type: "Number",
	            definedInName: "PLTHttpRequest",
	            definedInFullName: "PLTHttpRequest,",
	            isMetric: true
	        }
	    };
	    /**
	     * The sampling feature for the PLTHttpRequest event
	     */
	    PLTHttpRequest.samplingFeature = { ODB: true, ODC: 'PLTHttpRequestSampling', Fallback: false };
	    return PLTHttpRequest;
	}(SingleEventBase_1.SingleEventBase));
	exports.PLTHttpRequest = PLTHttpRequest;
	PLTHttpRequest.prototype.metadata = PLTHttpRequest.metadata;
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = PLTHttpRequest;


/***/ },
/* 21 */
/***/ function(module, exports) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	/**
	 * This file contains the known list of features (a.k.a. flights or ramps).
	 * The signature of one entry is:
	 *  static FeatureName: IFlight = { ODB: 100, ODC: "foo", Fallback: true };
	 * ODB            Is the numerical value of the flight from the ExpFeature enumeration.
	 *                Use -1 if the flight does not have a correspondent in ODB.
	 * ODC            Is the string identifier in ODC.
	 *                Use null if the flight does not have a correspondent ramp in ODC.
	 * Fallback       The state of the flight, true = on false = off.
	 *                The fallback is used only when the ODB or ODC flight is not applicable.
	 *                For example: The Flight is an ODB flight with no ODC counterpart and the app runs in ODC mode.
	 *                The fallback also allows declaring app only switches that are not known to the backend.
	 */
	var Features = (function () {
	    function Features() {
	    }
	    //You should not add features here but in your own file
	    /**
	     * This function will return true when the feature is enabled and
	     * will check the proper config for ODB and ODC to determine this
	     */
	    Features.isFeatureEnabled = function (feature) {
	        var result = feature.Fallback;
	        var _spPageContextInfo = window['_spPageContextInfo'];
	        var _odcFlightInfo = window['Flight'];
	        var _odcConfig = window['FilesConfig'];
	        var Flighting = window['Flighting']; // Old SharePoint pages use this.
	        if (Boolean(_spPageContextInfo)) {
	            if (!Boolean(_spPageContextInfo.ExpFeatures) &&
	                Boolean(Flighting) && Boolean(Flighting.ExpFeatures)) {
	                _spPageContextInfo.ExpFeatures = Flighting.ExpFeatures;
	            }
	            if (typeof feature.ODB === 'boolean') {
	                result = feature.ODB;
	            }
	            else if (Boolean(_spPageContextInfo.ExpFeatures) && feature.ODB > 0) {
	                var elem = Math.floor(feature.ODB / 32);
	                var mask = 1 << (feature.ODB % 32);
	                result = (elem < _spPageContextInfo.ExpFeatures.length) &&
	                    (_spPageContextInfo.ExpFeatures[elem] & mask) !== 0;
	            }
	        }
	        if (feature.ODC !== null && !!_odcConfig) {
	            if (typeof feature.ODC === 'boolean') {
	                result = feature.ODC;
	            }
	            else if (_odcFlightInfo && _odcFlightInfo.Ramps && _odcFlightInfo.Ramps[feature.ODC]) {
	                result = true;
	            }
	            else if (_odcConfig && _odcConfig[feature.ODC]) {
	                result = true;
	            }
	        }
	        return result;
	    };
	    /* This feature is always on */
	    Features.On = { ODB: -1, ODC: null, Fallback: true };
	    /* This feature is always off */
	    Features.Off = { ODB: -1, ODC: null, Fallback: false };
	    return Features;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = Features;


/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var PairedEventBase_1 = __webpack_require__(23);
	var ResultTypeEnum_1 = __webpack_require__(24);
	var ResultTypeEnum_2 = __webpack_require__(24);
	exports.ResultTypeEnum = ResultTypeEnum_2.ResultTypeEnum;
	var Qos = (function (_super) {
	    __extends(Qos, _super);
	    /**
	     * The Qos event constructor
	     * @param data {IQosStartSchema}
	     * -required name - This is the name of the qos event
	     * -optional resultCode - This is result code for the qos event
	     * -optional resultType - This is the result type enum
	     * -optional error - This is the error message to be logged with failed result
	     * -optional extraData - This is the random extra data for the qos event
	     * -optional extraMetrics - Extra data for the qos event that should be logged as aggregatable metrics
	     * @param parent {IEvent} The optional parent for this event
	     */
	    function Qos(data, parent) {
	        _super.call(this, 'Qos,', 'Qos', data, parent);
	    }
	    /**
	     * This is true if the Qos event is enabled
	     */
	    Qos.enabled = function () {
	        return true;
	    };
	    Qos.instrumentPromise = function (startSchema, createPromise, getCompleteSchema, getErrorSchema, timeoutMs, timeoutSchema, parent) {
	        return PairedEventBase_1.PairedEventBase._instrumentPromise(Qos, startSchema, createPromise, getCompleteSchema, getErrorSchema, timeoutMs, timeoutSchema, parent);
	    };
	    Qos.prototype.setStartData = function (data) {
	        this.data.name = this.cleanString(data.name);
	        if (typeof data.resultCode !== "undefined") {
	            this.data.resultCode = this.cleanString(data.resultCode);
	        }
	        if (typeof data.resultType !== "undefined") {
	            this.data.resultType = data.resultType;
	        }
	        if (typeof data.error !== "undefined") {
	            this.data.error = this.cleanString(data.error);
	        }
	        if (typeof data.extraData !== "undefined") {
	            this.data.extraData = data.extraData;
	        }
	        if (typeof data.extraMetrics !== "undefined") {
	            this.data.extraMetrics = data.extraMetrics;
	        }
	    };
	    Qos.prototype.setEndData = function (data) {
	        if (typeof data.resultCode !== "undefined") {
	            this.data.resultCode = this.cleanString(data.resultCode);
	        }
	        this.data.resultType = data.resultType;
	        if (typeof data.error !== "undefined") {
	            this.data.error = this.cleanString(data.error);
	        }
	        if (typeof data.extraData !== "undefined") {
	            this.data.extraData = data.extraData;
	        }
	        if (typeof data.extraMetrics !== "undefined") {
	            this.data.extraMetrics = data.extraMetrics;
	        }
	    };
	    /**
	     * This will end the Qos event
	     * @param data {IQosEndSchema}
	     * -optional resultCode - This is result code for the qos event
	     * -required resultType - This is the result type enum
	     * -optional error - This is the error message to be logged with failed result
	     * -optional extraData - This is the random extra data for the qos event
	     * -optional extraMetrics - Extra data for the qos event that should be logged as aggregatable metrics
	     */
	    Qos.prototype.end = function (data) {
	        return this._end(data);
	    };
	    /**
	     * This writes verbose logs to memory to be uploaded if event ends with failure
	     */
	    Qos.prototype.verbose = function (message) {
	        return this._verbose(message);
	    };
	    /**
	     * Sets a time limit for the scenario. A timeout result will be logged if no end happens in desired timeframe
	     */
	    Qos.prototype.setTimeout = function (ms, data) {
	        return this._setTimeout(ms, data);
	    };
	    /**
	     * The name of the Qos event
	     */
	    Qos.fullName = 'Qos,';
	    /**
	     * The short name of the Qos event
	     */
	    Qos.shortName = 'Qos';
	    /**
	     * This is true if the Qos event is enabled
	     */
	    Qos.metadata = {
	        name: {
	            type: "String",
	            definedInName: "Qos",
	            definedInFullName: "Qos,",
	            isKey: true,
	            isMetric: false
	        },
	        resultCode: {
	            type: "String",
	            definedInName: "Qos",
	            definedInFullName: "Qos,",
	            isMetric: false
	        },
	        resultType: {
	            type: "ResultTypeEnum",
	            definedInName: "Qos",
	            definedInFullName: "Qos,",
	            baseType: "Enum",
	            typeRef: ResultTypeEnum_1.ResultTypeEnum,
	            isMetric: false
	        },
	        error: {
	            type: "String",
	            definedInName: "Qos",
	            definedInFullName: "Qos,",
	            isMetric: false
	        },
	        extraData: {
	            type: "Object",
	            definedInName: "Qos",
	            definedInFullName: "Qos,",
	            isMetric: false
	        },
	        extraMetrics: {
	            type: "Object",
	            definedInName: "Qos",
	            definedInFullName: "Qos,",
	            isMetric: false
	        }
	    };
	    return Qos;
	}(PairedEventBase_1.PairedEventBase));
	exports.Qos = Qos;
	Qos.prototype.metadata = Qos.metadata;
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = Qos;


/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:CoverageThreshold(75)
	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var EventBase_1 = __webpack_require__(11);
	var Manager_1 = __webpack_require__(12);
	var ResultTypeEnum_1 = __webpack_require__(24);
	var ErrorHelper_1 = __webpack_require__(25);
	var Async_1 = __webpack_require__(30);
	var ObjectUtil_1 = __webpack_require__(13);
	var PairedEventBase = (function (_super) {
	    __extends(PairedEventBase, _super);
	    function PairedEventBase(eventName, shortEventName, data, parent) {
	        _super.call(this, eventName, shortEventName, parent);
	        // Make sure data has a value
	        if (!this.data) {
	            this.data = {};
	        }
	        // Set the data if we have it
	        if (data) {
	            this.setStartData(data);
	        }
	        // Send the start event
	        this._logEvent(EventBase_1.ClonedEventType.Start);
	    }
	    PairedEventBase._instrumentPromise = function (eventConstructor, startSchema, createPromise, getCompleteSchema, getErrorSchema, timeoutMs, timeoutSchema, parent) {
	        var _this = this;
	        var _promise;
	        var _event = new eventConstructor(startSchema, parent);
	        if (timeoutMs) {
	            _event._setTimeout(timeoutMs, timeoutSchema);
	        }
	        var _onComplete = function (result) {
	            var schema;
	            if (getCompleteSchema) {
	                try {
	                    schema = getCompleteSchema(result);
	                }
	                catch (e) {
	                    schema = _event._generateQosResult(ResultTypeEnum_1.ResultTypeEnum.Failure, _this.schemaExceptionErrorCode, e.toString());
	                }
	            }
	            else {
	                schema = _event._generateQosResult(ResultTypeEnum_1.ResultTypeEnum.Success);
	            }
	            _event._end(schema);
	        };
	        var _onError = function (errorArgs) {
	            var schema;
	            if (getErrorSchema) {
	                try {
	                    schema = getErrorSchema(errorArgs);
	                }
	                catch (e) {
	                    schema = _event._generateQosResult(ResultTypeEnum_1.ResultTypeEnum.Failure, _this.schemaExceptionErrorCode, e.toString());
	                }
	            }
	            else {
	                if (errorArgs) {
	                    var failureResultType = (errorArgs instanceof Error && errorArgs.name === "Canceled") ?
	                        ResultTypeEnum_1.ResultTypeEnum.ExpectedFailure : ResultTypeEnum_1.ResultTypeEnum.Failure;
	                    schema = _event._generateQosResult(failureResultType, null, ObjectUtil_1.default.safeSerialize(errorArgs));
	                }
	                else {
	                    schema = _event._generateQosResult(ResultTypeEnum_1.ResultTypeEnum.Failure);
	                }
	            }
	            _event._end(schema);
	        };
	        try {
	            _promise = createPromise();
	        }
	        catch (e) {
	            _event._end(_event._generateQosResult(ResultTypeEnum_1.ResultTypeEnum.Failure, this.promiseCreationFailureErrorCode, e.toString()));
	            throw e;
	        }
	        _promise.then(_onComplete, _onError);
	        return _promise;
	    };
	    PairedEventBase.prototype.setStartData = function (data) {
	        // The start event to copy data that will be overridden
	    };
	    PairedEventBase.prototype.setEndData = function (data) {
	        // The end event to copy data that will be overridden
	    };
	    PairedEventBase.prototype._setTimeout = function (ms, data) {
	        if (!this.async) {
	            this.async = new Async_1.default(this);
	        }
	        this._clearTimeout();
	        if (!data) {
	            data = this._generateQosResult(ResultTypeEnum_1.ResultTypeEnum.Failure, PairedEventBase.timeoutErrorCode);
	        }
	        this.async.setTimeout(this._end.bind(this, data), ms);
	    };
	    PairedEventBase.prototype._verbose = function (message) {
	        if (this.endTime) {
	            // event already ended, no need to log anymore
	            return;
	        }
	        if (this._isQosEvent) {
	            var qosSchema = this.data;
	            ErrorHelper_1.default.verbose(message, qosSchema.name);
	        }
	    };
	    PairedEventBase.prototype._end = function (data) {
	        // Make sure end can only be called once
	        if (!this.endTime) {
	            if (data) {
	                this.setEndData(data);
	            }
	            // Set the end time
	            this.endTime = Manager_1.Manager.getTime();
	            // Log the event end
	            this._logEvent(EventBase_1.ClonedEventType.End);
	            // If this is a QOS event log and contains an error message trigger the upload of logs by calling
	            // the ErrorHelper
	            if (this._isQosEvent) {
	                var qosSchema = this.data;
	                if (qosSchema.error) {
	                    ErrorHelper_1.default.log(qosSchema.error, qosSchema.name, qosSchema.resultCode, qosSchema.resultType);
	                }
	            }
	            this._clearTimeout();
	        }
	    };
	    PairedEventBase.prototype._clearTimeout = function () {
	        if (this.async && this.timeoutId) {
	            this.async.clearTimeout(this.timeoutId);
	            this.timeoutId = null;
	        }
	    };
	    Object.defineProperty(PairedEventBase.prototype, "_isQosEvent", {
	        get: function () {
	            return this.eventName.indexOf('Qos,') >= 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    PairedEventBase.prototype._generateQosResult = function (resultType, resultCode, error) {
	        var schema = {
	            resultType: resultType
	        };
	        if (resultCode) {
	            schema.resultCode = resultCode;
	        }
	        if (error) {
	            schema.error = error;
	        }
	        return schema;
	    };
	    PairedEventBase.fullName = 'PairedEventBase,';
	    PairedEventBase.shortName = 'PairedEventBase';
	    PairedEventBase.schemaExceptionErrorCode = 'GetSchemaException';
	    PairedEventBase.promiseCreationFailureErrorCode = 'PromiseCreationFailed';
	    PairedEventBase.timeoutErrorCode = 'Timeout';
	    return PairedEventBase;
	}(EventBase_1.EventBase));
	exports.PairedEventBase = PairedEventBase;


/***/ },
/* 24 */
/***/ function(module, exports) {

	"use strict";
	(function (ResultTypeEnum) {
	    ResultTypeEnum[ResultTypeEnum["Success"] = 0] = "Success";
	    ResultTypeEnum[ResultTypeEnum["Failure"] = 1] = "Failure";
	    ResultTypeEnum[ResultTypeEnum["ExpectedFailure"] = 2] = "ExpectedFailure";
	})(exports.ResultTypeEnum || (exports.ResultTypeEnum = {}));
	var ResultTypeEnum = exports.ResultTypeEnum;


/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var CaughtError_event_1 = __webpack_require__(26);
	var QosError_event_1 = __webpack_require__(27);
	var Verbose_event_1 = __webpack_require__(28);
	var CircularBuffer_1 = __webpack_require__(29);
	var ObjectUtil_1 = __webpack_require__(13);
	var MAX_VERBOSE_LOGS = 50;
	var ErrorHelper = (function () {
	    function ErrorHelper() {
	    }
	    ErrorHelper.verbose = function (message, eventName) {
	        ErrorHelper._verboseLogs.push({
	            name: eventName,
	            message: message
	        });
	    };
	    ErrorHelper.log = function (error, eventName, resultCode, resultType) {
	        var message = "";
	        if (error) {
	            if (error.message) {
	                message = error.message;
	            }
	            else if (error.description) {
	                message = error.description;
	            }
	            else if (typeof (error) === 'object') {
	                message = ObjectUtil_1.default.safeSerialize(error);
	            }
	            else if (error.toString) {
	                message = error.toString();
	            }
	        }
	        var stack = error && error.stack ? error.stack : "";
	        var schema;
	        while (Boolean(schema = ErrorHelper._verboseLogs.popOldest())) {
	            Verbose_event_1.Verbose.logData(schema);
	        }
	        if (error && !error._handled) {
	            if (eventName) {
	                QosError_event_1.QosError.logData({
	                    name: eventName,
	                    resultCode: resultCode,
	                    resultType: resultType,
	                    message: message,
	                    stack: stack
	                });
	            }
	            else {
	                CaughtError_event_1.CaughtError.logData({
	                    message: message,
	                    stack: stack
	                });
	            }
	        }
	    };
	    ErrorHelper._verboseLogs = new CircularBuffer_1.default(MAX_VERBOSE_LOGS);
	    return ErrorHelper;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = ErrorHelper;


/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var SingleEventBase_1 = __webpack_require__(18);
	var CaughtError = (function (_super) {
	    __extends(CaughtError, _super);
	    /**
	     * The CaughtError event constructor
	     * @param parent {IEvent} The optional parent for this event
	     */
	    function CaughtError(parent) {
	        _super.call(this, 'CaughtError,', 'CaughtError', parent);
	    }
	    /**
	     * This is true if the CaughtError event is enabled
	     */
	    CaughtError.enabled = function () {
	        return true;
	    };
	    /**
	     * This will create a single CaughtError event
	     * @param data {ICaughtErrorSingleSchema}
	     * -required message - This is the error message returned during the window.onerror handler
	     * -required stack - This is the stack trace of the error returned during the window.onerror handler
	     * @param parent {IEvent} The optional parent for this event
	     */
	    CaughtError.logData = function (data, parent) {
	        return SingleEventBase_1.SingleEventBase._logData(CaughtError, data, parent);
	    };
	    /**
	     * This is false when CaughtError event does not require a parent event
	     */
	    CaughtError.prototype.requiresParent = function () {
	        return false;
	    };
	    /**
	     * This is true when CaughtError event is a critical event
	     */
	    CaughtError.prototype.isCritical = function () {
	        return true;
	    };
	    CaughtError.prototype.setSingleData = function (data) {
	        this.data.message = this.cleanString(data.message);
	        this.data.stack = this.cleanString(data.stack);
	    };
	    /**
	     * The name of the CaughtError event
	     */
	    CaughtError.fullName = 'CaughtError,';
	    /**
	     * The short name of the CaughtError event
	     */
	    CaughtError.shortName = 'CaughtError';
	    /**
	     * This is true if the CaughtError event is enabled
	     */
	    CaughtError.metadata = {
	        message: {
	            type: "String",
	            definedInName: "CaughtError",
	            definedInFullName: "CaughtError,",
	            isMetric: false
	        },
	        stack: {
	            type: "String",
	            definedInName: "CaughtError",
	            definedInFullName: "CaughtError,",
	            isMetric: false
	        },
	        unMinStack: {
	            type: "Object",
	            definedInName: "CaughtError",
	            definedInFullName: "CaughtError,",
	            isMetric: false
	        }
	    };
	    return CaughtError;
	}(SingleEventBase_1.SingleEventBase));
	exports.CaughtError = CaughtError;
	CaughtError.prototype.metadata = CaughtError.metadata;
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = CaughtError;


/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var SingleEventBase_1 = __webpack_require__(18);
	var ResultTypeEnum_1 = __webpack_require__(24);
	var ResultTypeEnum_2 = __webpack_require__(24);
	exports.ResultTypeEnum = ResultTypeEnum_2.ResultTypeEnum;
	var QosError = (function (_super) {
	    __extends(QosError, _super);
	    /**
	     * The QosError event constructor
	     * @param parent {IEvent} The optional parent for this event
	     */
	    function QosError(parent) {
	        _super.call(this, 'QosError,CaughtError,', 'QosError', parent);
	    }
	    /**
	     * This is true if the QosError event is enabled
	     */
	    QosError.enabled = function () {
	        return true;
	    };
	    /**
	     * This will create a single QosError event
	     * @param data {IQosErrorSingleSchema}
	     * -required name - Qos event name
	     * -optional resultCode - Qos event result code
	     * -optional resultType - This is the result type enum
	     * -required message - This is the error message returned during the window.onerror handler
	     * -required stack - This is the stack trace of the error returned during the window.onerror handler
	     * @param parent {IEvent} The optional parent for this event
	     */
	    QosError.logData = function (data, parent) {
	        return SingleEventBase_1.SingleEventBase._logData(QosError, data, parent);
	    };
	    /**
	     * This is true when QosError event is a critical event
	     */
	    QosError.prototype.isCritical = function () {
	        return true;
	    };
	    QosError.prototype.setSingleData = function (data) {
	        this.data.name = this.cleanString(data.name);
	        if (typeof data.resultCode !== "undefined") {
	            this.data.resultCode = this.cleanString(data.resultCode);
	        }
	        if (typeof data.resultType !== "undefined") {
	            this.data.resultType = data.resultType;
	        }
	        this.data.message = this.cleanString(data.message);
	        this.data.stack = this.cleanString(data.stack);
	    };
	    /**
	     * The name of the QosError event
	     */
	    QosError.fullName = 'QosError,CaughtError,';
	    /**
	     * The short name of the QosError event
	     */
	    QosError.shortName = 'QosError';
	    /**
	     * This is true if the QosError event is enabled
	     */
	    QosError.metadata = {
	        name: {
	            type: "String",
	            definedInName: "QosError",
	            definedInFullName: "QosError,",
	            isKey: true,
	            isMetric: false
	        },
	        resultCode: {
	            type: "String",
	            definedInName: "QosError",
	            definedInFullName: "QosError,",
	            isMetric: false
	        },
	        resultType: {
	            type: "ResultTypeEnum",
	            definedInName: "QosError",
	            definedInFullName: "QosError,",
	            baseType: "Enum",
	            typeRef: ResultTypeEnum_1.ResultTypeEnum,
	            isMetric: false
	        },
	        message: {
	            type: "String",
	            definedInName: "CaughtError",
	            definedInFullName: "CaughtError,",
	            isMetric: false
	        },
	        stack: {
	            type: "String",
	            definedInName: "CaughtError",
	            definedInFullName: "CaughtError,",
	            isMetric: false
	        },
	        unMinStack: {
	            type: "Object",
	            definedInName: "CaughtError",
	            definedInFullName: "CaughtError,",
	            isMetric: false
	        }
	    };
	    return QosError;
	}(SingleEventBase_1.SingleEventBase));
	exports.QosError = QosError;
	QosError.prototype.metadata = QosError.metadata;
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = QosError;


/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var SingleEventBase_1 = __webpack_require__(18);
	var Verbose = (function (_super) {
	    __extends(Verbose, _super);
	    /**
	     * The Verbose event constructor
	     * @param parent {IEvent} The optional parent for this event
	     */
	    function Verbose(parent) {
	        _super.call(this, 'Verbose,', 'Verbose', parent);
	    }
	    /**
	     * This is true if the Verbose event is enabled
	     */
	    Verbose.enabled = function () {
	        return true;
	    };
	    /**
	     * This will create a single Verbose event
	     * @param data {IVerboseSingleSchema}
	     * -optional name - This is the name of the qos event this verbose log correlates with
	     * -required message - This is the verbose message
	     * @param parent {IEvent} The optional parent for this event
	     */
	    Verbose.logData = function (data, parent) {
	        return SingleEventBase_1.SingleEventBase._logData(Verbose, data, parent);
	    };
	    /**
	     * This is false when Verbose event does not require a parent event
	     */
	    Verbose.prototype.requiresParent = function () {
	        return false;
	    };
	    Verbose.prototype.setSingleData = function (data) {
	        if (typeof data.name !== "undefined") {
	            this.data.name = this.cleanString(data.name);
	        }
	        this.data.message = this.cleanString(data.message);
	    };
	    /**
	     * The name of the Verbose event
	     */
	    Verbose.fullName = 'Verbose,';
	    /**
	     * The short name of the Verbose event
	     */
	    Verbose.shortName = 'Verbose';
	    /**
	     * This is true if the Verbose event is enabled
	     */
	    Verbose.metadata = {
	        name: {
	            type: "String",
	            definedInName: "Verbose",
	            definedInFullName: "Verbose,",
	            isKey: true,
	            isMetric: false
	        },
	        message: {
	            type: "String",
	            definedInName: "Verbose",
	            definedInFullName: "Verbose,",
	            isMetric: false
	        }
	    };
	    return Verbose;
	}(SingleEventBase_1.SingleEventBase));
	exports.Verbose = Verbose;
	Verbose.prototype.metadata = Verbose.metadata;
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = Verbose;


/***/ },
/* 29 */
/***/ function(module, exports) {

	// OneDrive:CoverageThreshold(100)
	"use strict";
	var CircularBuffer = (function () {
	    function CircularBuffer(size) {
	        this._length = 0;
	        this._head = -1;
	        if (size <= 0) {
	            throw new Error("Size must be positive");
	        }
	        this._size = size;
	        this._buffer = new Array(size);
	    }
	    CircularBuffer.prototype.push = function (item) {
	        if (this._length < this._size) {
	            this._length++;
	        }
	        this._head++;
	        if (this._head === this._size) {
	            this._head = 0;
	        }
	        this._buffer[this._head] = item;
	    };
	    CircularBuffer.prototype.popOldest = function () {
	        if (this._length === 0) {
	            return null;
	        }
	        var tail = (this._head - this._length + 1 + this._size) % this._size;
	        this._length--;
	        return this._buffer[tail];
	    };
	    return CircularBuffer;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = CircularBuffer;


/***/ },
/* 30 */
/***/ function(module, exports) {

	/**
	 * Bugs often appear in async code when stuff gets disposed, but async operations don't get canceled.
	 * This Async helper class solves these issues by tying async code to the lifetime of a disposable object.
	 *
	 * Usage: Anything class extending from BaseModel can access this helper via this.async. Otherwise create a
	 * new instance of the class and remember to call dispose() during your code's dispose handler.
	 */
	"use strict";
	function noop() {
	    'use strict';
	    // Do nothing.
	}
	var Async = (function () {
	    function Async(parent, onError) {
	        this._isDisposed = false;
	        this._parent = parent || null;
	        this._onErrorHandler = onError;
	        this._timeoutIds = null;
	        this._immediateIds = null;
	        this._animationFrameIds = null;
	        this._intervalIds = null;
	    }
	    /**
	     * Dispose function, clears all async operations.
	     */
	    Async.prototype.dispose = function () {
	        if (this._isDisposed) {
	            return;
	        }
	        this._isDisposed = true;
	        this._parent = null;
	        // Clear timeouts.
	        if (this._timeoutIds) {
	            for (var _i = 0, _a = Object.keys(this._timeoutIds); _i < _a.length; _i++) {
	                var id = _a[_i];
	                this.clearTimeout(Number(id));
	            }
	            this._timeoutIds = null;
	        }
	        // Clear immediates.
	        if (this._immediateIds) {
	            for (var _b = 0, _c = Object.keys(this._immediateIds); _b < _c.length; _b++) {
	                var id = _c[_b];
	                this.clearImmediate(Number(id));
	            }
	            this._immediateIds = null;
	        }
	        // Clear intervals.
	        if (this._intervalIds) {
	            for (var _d = 0, _e = Object.keys(this._intervalIds); _d < _e.length; _d++) {
	                var id = _e[_d];
	                this.clearInterval(Number(id));
	            }
	            this._intervalIds = null;
	        }
	        // Clear animation frames.
	        if (this._animationFrameIds) {
	            for (var _f = 0, _g = Object.keys(this._animationFrameIds); _f < _g.length; _f++) {
	                var id = _g[_f];
	                this.cancelAnimationFrame(Number(id));
	            }
	            this._animationFrameIds = null;
	        }
	    };
	    /**
	     * SetTimeout override, which will auto cancel the timeout during dispose.
	     * @param callback Callback to execute.
	     * @param duration Duration in milliseconds.
	     * @return The setTimeout id.
	     */
	    Async.prototype.setTimeout = function (callback, duration) {
	        var _this = this;
	        var timeoutId = 0;
	        if (!this._isDisposed) {
	            if (!this._timeoutIds) {
	                this._timeoutIds = {};
	            }
	            /* tslint:disable:ban-native-functions */
	            timeoutId = setTimeout(function () {
	                // Time to execute the timeout, enqueue it as a foreground task to be executed.
	                try {
	                    // Now delete the record and call the callback.
	                    delete _this._timeoutIds[timeoutId];
	                    callback.apply(_this._parent);
	                }
	                catch (e) {
	                    if (_this._onErrorHandler) {
	                        _this._onErrorHandler(e);
	                    }
	                }
	            }, duration);
	            /* tslint:enable:ban-native-functions */
	            this._timeoutIds[timeoutId] = true;
	        }
	        return timeoutId;
	    };
	    /**
	     * Clears the timeout.
	     * @param id Id to cancel.
	     */
	    Async.prototype.clearTimeout = function (id) {
	        if (this._timeoutIds && this._timeoutIds[id]) {
	            /* tslint:disable:ban-native-functions */
	            clearTimeout(id);
	            delete this._timeoutIds[id];
	        }
	    };
	    /**
	     * SetImmediate override, which will auto cancel the immediate during dispose.
	     * @param callback Callback to execute.
	     * @return The setTimeout id.
	     */
	    Async.prototype.setImmediate = function (callback) {
	        var _this = this;
	        var immediateId = 0;
	        if (!this._isDisposed) {
	            if (!this._immediateIds) {
	                this._immediateIds = {};
	            }
	            /* tslint:disable:ban-native-functions */
	            var setImmediateCallback = function () {
	                // Time to execute the timeout, enqueue it as a foreground task to be executed.
	                try {
	                    // Now delete the record and call the callback.
	                    delete _this._immediateIds[immediateId];
	                    callback.apply(_this._parent);
	                }
	                catch (e) {
	                    _this._logError(e);
	                }
	            };
	            immediateId = window.setImmediate ? window.setImmediate(setImmediateCallback) : window.setTimeout(setImmediateCallback, 0);
	            /* tslint:enable:ban-native-functions */
	            this._immediateIds[immediateId] = true;
	        }
	        return immediateId;
	    };
	    /**
	     * Clears the immediate.
	     * @param id Id to cancel.
	     */
	    Async.prototype.clearImmediate = function (id) {
	        if (this._immediateIds && this._immediateIds[id]) {
	            /* tslint:disable:ban-native-functions */
	            window.clearImmediate ? window.clearImmediate(id) : window.clearTimeout(id);
	            delete this._immediateIds[id];
	        }
	    };
	    /**
	     * SetInterval override, which will auto cancel the timeout during dispose.
	     * @param callback Callback to execute.
	     * @param duration Duration in milliseconds.
	     * @return The setTimeout id.
	     */
	    Async.prototype.setInterval = function (callback, duration) {
	        var _this = this;
	        var intervalId = 0;
	        if (!this._isDisposed) {
	            if (!this._intervalIds) {
	                this._intervalIds = {};
	            }
	            /* tslint:disable:ban-native-functions */
	            intervalId = setInterval(function () {
	                // Time to execute the interval callback, enqueue it as a foreground task to be executed.
	                try {
	                    callback.apply(_this._parent);
	                }
	                catch (e) {
	                    _this._logError(e);
	                }
	            }, duration);
	            /* tslint:enable:ban-native-functions */
	            this._intervalIds[intervalId] = true;
	        }
	        return intervalId;
	    };
	    /**
	     * Clears the interval.
	     * @param id Id to cancel.
	     */
	    Async.prototype.clearInterval = function (id) {
	        if (this._intervalIds && this._intervalIds[id]) {
	            /* tslint:disable:ban-native-functions */
	            clearInterval(id);
	            delete this._intervalIds[id];
	        }
	    };
	    /**
	     * Creates a function that, when executed, will only call the func function at most once per
	     * every wait milliseconds. Provide an options object to indicate that func should be invoked
	     * on the leading and/or trailing edge of the wait timeout. Subsequent calls to the throttled
	     * function will return the result of the last func call.
	     *
	     * Note: If leading and trailing options are true func will be called on the trailing edge of
	     * the timeout only if the the throttled function is invoked more than once during the wait timeout.
	     *
	     * @param func The function to throttle.
	     * @param wait The number of milliseconds to throttle executions to. Defaults to 0.
	     * @param options The options object.
	     * @param options.leading Specify execution on the leading edge of the timeout.
	     * @param options.trailing Specify execution on the trailing edge of the timeout.
	     * @return The new throttled function.
	     */
	    Async.prototype.throttle = function (func, wait, options) {
	        var _this = this;
	        if (this._isDisposed) {
	            return noop;
	        }
	        var waitMS = wait || 0;
	        var leading = true;
	        var trailing = true;
	        var lastExecuteTime = 0;
	        var lastResult;
	        var lastArgs;
	        var timeoutId = null;
	        if (options && typeof (options.leading) === 'boolean') {
	            leading = options.leading;
	        }
	        if (options && typeof (options.trailing) === 'boolean') {
	            trailing = options.trailing;
	        }
	        var callback = function (userCall) {
	            var now = (new Date()).getTime();
	            var delta = now - lastExecuteTime;
	            var waitLength = leading ? waitMS - delta : waitMS;
	            if (delta >= waitMS && (!userCall || leading)) {
	                lastExecuteTime = now;
	                if (timeoutId) {
	                    _this.clearTimeout(timeoutId);
	                    timeoutId = null;
	                }
	                lastResult = func.apply(_this._parent, lastArgs);
	            }
	            else if (timeoutId === null && trailing) {
	                timeoutId = _this.setTimeout(callback, waitLength);
	            }
	            return lastResult;
	        };
	        var resultFunction = function () {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i - 0] = arguments[_i];
	            }
	            lastArgs = args;
	            return callback(true);
	        };
	        return resultFunction;
	    };
	    /**
	     * Creates a function that will delay the execution of func until after wait milliseconds have
	     * elapsed since the last time it was invoked. Provide an options object to indicate that func
	     * should be invoked on the leading and/or trailing edge of the wait timeout. Subsequent calls
	     * to the debounced function will return the result of the last func call.
	     *
	     * Note: If leading and trailing options are true func will be called on the trailing edge of
	     * the timeout only if the the debounced function is invoked more than once during the wait
	     * timeout.
	     *
	     * @param func The function to debounce.
	     * @param wait The number of milliseconds to delay.
	     * @param options The options object.
	     * @param options.leading Specify execution on the leading edge of the timeout.
	     * @param options.maxWait The maximum time func is allowed to be delayed before it's called.
	     * @param options.trailing Specify execution on the trailing edge of the timeout.
	     * @return The new debounced function.
	     */
	    Async.prototype.debounce = function (func, wait, options) {
	        var _this = this;
	        if (this._isDisposed) {
	            return noop;
	        }
	        var waitMS = wait || 0;
	        var leading = false;
	        var trailing = true;
	        var maxWait = null;
	        var lastCallTime = 0;
	        var lastExecuteTime = (new Date()).getTime();
	        var lastResult;
	        var lastArgs;
	        var timeoutId = null;
	        if (options && typeof (options.leading) === 'boolean') {
	            leading = options.leading;
	        }
	        if (options && typeof (options.trailing) === 'boolean') {
	            trailing = options.trailing;
	        }
	        if (options && typeof (options.maxWait) === 'number' && !isNaN(options.maxWait)) {
	            maxWait = options.maxWait;
	        }
	        var callback = function (userCall) {
	            var now = (new Date()).getTime();
	            var executeImmediately = false;
	            if (userCall) {
	                if (leading && now - lastCallTime >= waitMS) {
	                    executeImmediately = true;
	                }
	                lastCallTime = now;
	            }
	            var delta = now - lastCallTime;
	            var waitLength = waitMS - delta;
	            var maxWaitDelta = now - lastExecuteTime;
	            var maxWaitExpired = false;
	            if (maxWait !== null) {
	                // maxWait only matters when there is a pending callback
	                if (maxWaitDelta >= maxWait && timeoutId) {
	                    maxWaitExpired = true;
	                }
	                else {
	                    waitLength = Math.min(waitLength, maxWait - maxWaitDelta);
	                }
	            }
	            if (delta >= waitMS || maxWaitExpired || executeImmediately) {
	                if (timeoutId) {
	                    _this.clearTimeout(timeoutId);
	                    timeoutId = null;
	                }
	                lastExecuteTime = now;
	                lastResult = func.apply(_this._parent, lastArgs);
	            }
	            else if ((timeoutId === null || !userCall) && trailing) {
	                timeoutId = _this.setTimeout(callback, waitLength);
	            }
	            return lastResult;
	        };
	        var resultFunction = function () {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i - 0] = arguments[_i];
	            }
	            lastArgs = args;
	            return callback(true);
	        };
	        return resultFunction;
	    };
	    Async.prototype.requestAnimationFrame = function (callback) {
	        var _this = this;
	        var animationFrameId = 0;
	        if (!this._isDisposed) {
	            if (!this._animationFrameIds) {
	                this._animationFrameIds = {};
	            }
	            /* tslint:disable:ban-native-functions */
	            var animationFrameCallback = function () {
	                try {
	                    // Now delete the record and call the callback.
	                    delete _this._animationFrameIds[animationFrameId];
	                    callback.apply(_this._parent);
	                }
	                catch (e) {
	                    _this._logError(e);
	                }
	            };
	            animationFrameId = window.requestAnimationFrame ? window.requestAnimationFrame(animationFrameCallback) : window.setTimeout(animationFrameCallback, 0);
	            /* tslint:enable:ban-native-functions */
	            this._animationFrameIds[animationFrameId] = true;
	        }
	        return animationFrameId;
	    };
	    Async.prototype.cancelAnimationFrame = function (id) {
	        if (this._animationFrameIds && this._animationFrameIds[id]) {
	            /* tslint:disable:ban-native-functions */
	            window.cancelAnimationFrame ? window.cancelAnimationFrame(id) : window.clearTimeout(id);
	            /* tslint:enable:ban-native-functions */
	            delete this._animationFrameIds[id];
	        }
	    };
	    Async.prototype._logError = function (e) {
	        if (this._onErrorHandler) {
	            this._onErrorHandler(e);
	        }
	    };
	    return Async;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = Async;


/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ErrorHelper_1 = __webpack_require__(25);
	var BeaconBase_1 = __webpack_require__(32);
	var BeaconCache_1 = __webpack_require__(36);
	var BaseDataStore_1 = __webpack_require__(37);
	var DataStoreCachingType_1 = __webpack_require__(38);
	var LogProcessor_1 = __webpack_require__(39);
	var Beacon;
	(function (Beacon) {
	    "use strict";
	    var LOGGING_REQUEST_TIMEOUT = 10000; // 10 seconds
	    var FLUSH_TIMEOUT = 5000; // 5 seconds
	    var BEACON_BATCH_SIZE = 100;
	    var BEACON_MAX_CRITICAL_FLUSH_INTERVAL_SIZE = 5000; // 5 seconds
	    // SLAPI
	    var SLAPI_STREAM_ID = 1234;
	    var SLAPI_JSON_VERSION = "V1";
	    var SLAPI_IDX_VERSION = 0;
	    var SLAPI_IDX_EVENTNAME = 1;
	    var SLAPI_IDX_PROPERTY_START = 2;
	    // BSQM Constants
	    var SLAPI_MAX_DATA_SIZE = 64 * 1024;
	    var SLAPI_MAX_ROWS_IN_STREAM = 1000;
	    var SLAPI_SIZE_DWORD = 4;
	    var SLAPI_SIZE_DATAPOINT_ENTRY = 3 * 4;
	    var SLAPI_SIZE_STREAM_ENTRY = 3 * 4;
	    var SLAPI_MS_BTN_EPOCHS = 11644473600000; // Milliseconds between 1/1/1070 and 1/1/1601
	    var SLAPI_MAX_INT32 = 0xFFFFFFFF;
	    var SLAPI_MAX_SQM_DATAID = 0x7FFFFFFF;
	    var SLAPI_DATAKEY_SESSION_NORMAL = 0;
	    var SLAPI_DATAKEY_SESSION_CONTINUATION = 1;
	    var SLAPI_FLAG_BSQM_ENABLED = 0x00000010;
	    // const SLAPI_FLAG_QOS_ENABLED = 0x00000020;
	    // SQM Datapoints
	    var SLAPI_DATAID_BSQM_MAXSTREAMROWSSTREAMID = 8048;
	    var SLAPI_DATAID_BSQM_MAXSTREAMROWS = 7993;
	    var SLAPI_DATAID_SESSION_TYPE = 60;
	    var WSAStreamRow = (function () {
	        function WSAStreamRow(values) {
	            this.Tic = 0;
	            this.Vals = null;
	            var _this = this;
	            _this.Tic = _getTicks32();
	            var numValues = values.length;
	            _this.Vals = new Array(numValues);
	            for (var i = 0; i < numValues; i++) {
	                _this.Vals[i] = values[i];
	            }
	        }
	        return WSAStreamRow;
	    }());
	    var WSADatapoint = (function () {
	        function WSADatapoint(id, value) {
	            var _this = this;
	            _this.Id = id;
	            _this.Val = value;
	            _this.Tic = _getTicks32();
	        }
	        return WSADatapoint;
	    }());
	    var WSAStream = (function () {
	        function WSAStream(id, width) {
	            var _this = this;
	            _this.Id = id;
	            _this.Width = width;
	            _this.Rows = new Array(0);
	        }
	        return WSAStream;
	    }());
	    var WSAData = (function () {
	        function WSAData() {
	            this.StartTime = null;
	            this.EndTime = null;
	            this.Flags = 0;
	            this.wsaDatapoints = null;
	            this.wsaStreams = null;
	            var _this = this;
	            _this.StartTime = _getTicks64();
	            _this.EndTime = null;
	            _this.CorrelationId = null;
	            _this.Flags = SLAPI_FLAG_BSQM_ENABLED;
	            _this.wsaDatapoints = new Array(0);
	            _this.wsaStreams = new Array(0);
	        }
	        return WSAData;
	    }());
	    var _startTicks = 0;
	    var _wsaData = null;
	    var _numDatapoints = 0;
	    var _numStreams = 0;
	    var _numStreamBytes = 0;
	    var _dictStreams = null;
	    var _dictDatapoints = null;
	    var _streamRowCount = 0;
	    var _isDataAvailableForUpload = false;
	    var _isContinuation = false;
	    var _isInitialized = false;
	    var _emptyCorrelationId = '00000000-0000-0000-0000-000000000000';
	    var _eventNamePrefix = "";
	    var _store = null;
	    var _storeSize = null;
	    var _instance = null;
	    var _handlers = null;
	    if (true) {
	        try {
	            console.log("Beacon: To disable logging to the console set \"window.disableBeaconLogToConsole = true\" in the debug window");
	        }
	        catch (error) {
	        }
	    }
	    var OdbBeacon = (function (_super) {
	        __extends(OdbBeacon, _super);
	        function OdbBeacon(eventNamePrefix, handlers, cacheEnabled) {
	            _super.call(this, '/_layouts/15/WsaUpload.ashx', BEACON_BATCH_SIZE, [FLUSH_TIMEOUT], true, /* useSlidingWindow */ BEACON_MAX_CRITICAL_FLUSH_INTERVAL_SIZE, BeaconBase_1.default.DEFAULT_TOTAL_RETRIES, BeaconBase_1.default.DEFAULT_RESET_TOTAL_RETRIES_AFTER, cacheEnabled /* ignorePreviousEvents */);
	            _eventNamePrefix = eventNamePrefix;
	            _handlers = handlers;
	            _store = new BaseDataStore_1.default(LogProcessor_1.default.STORE_KEY,  true ? DataStoreCachingType_1.default.sharedMemory : DataStoreCachingType_1.default.session);
	            _storeSize = _store.getValue(LogProcessor_1.default.STORE_SIZE_KEY);
	            if (!_storeSize) {
	                _storeSize = 0;
	            }
	        }
	        OdbBeacon.prototype.beacon = function () {
	            if (false) {
	                var json = _getUploadData();
	                if (json != null && json.length > 0) {
	                    var headers = {};
	                    headers["Content-Type"] = "application/json";
	                    this.sendBeacon(json, headers, LOGGING_REQUEST_TIMEOUT);
	                }
	            }
	            else if (!window["disableBeaconLogToConsole"]) {
	                try {
	                    console.log("Beacon: Uploaded to COSMOS (To disable logging to the console set \"window.disableBeaconLogToConsole = true\" in the debug window)");
	                }
	                catch (error) {
	                }
	            }
	            // Set session storage size to zero instead of clearing
	            _storeSize = 0;
	            _store.setValue(LogProcessor_1.default.STORE_SIZE_KEY, _storeSize);
	        };
	        OdbBeacon.prototype._createBeaconRequest = function (events) {
	            // grab the CorrelationId
	            var spPageContextInfo = window['_spPageContextInfo'];
	            //TODO: decide if we want to generate unique correlationid
	            // or keep setting it to server correlationid
	            if (spPageContextInfo !== undefined && spPageContextInfo !== null) {
	                _SetCorrelationId(spPageContextInfo.CorrelationId);
	            }
	            else {
	                _SetCorrelationId(_emptyCorrelationId);
	            }
	            // Converts to SP logging format
	            for (var x = 0; x < events.length; x++) {
	                var event = events[x];
	                LogProcessor_1.default.processAndLogEvent({
	                    event: event,
	                    logFunc: function (streamName, dictProperties) {
	                        _WriteLog(streamName, dictProperties);
	                    },
	                    eventNamePrefix: _eventNamePrefix,
	                    handlers: _handlers
	                });
	            }
	            this.beacon();
	        };
	        OdbBeacon.prototype._onNewEvent = function (event) {
	            // BeaconCache puts every new event to the session storage so that Sharepoint can upload it for us
	            // if user navigates away before Beacon event. So we do nothing here.
	        };
	        return OdbBeacon;
	    }(BeaconBase_1.default));
	    function addToLoggingManager(eventNamePrefix, handlers) {
	        if (!_instance) {
	            var cacheEnabled = false;
	            if (BeaconCache_1.default.instance) {
	                eventNamePrefix = BeaconCache_1.default.eventNamePrefix;
	                handlers = BeaconCache_1.default.handlers;
	                cacheEnabled = true;
	            }
	            if (!eventNamePrefix || !handlers) {
	                throw new Error("You have to pass in eventNamePrefix and IBeaconHandlers object if no BeaconCache present.");
	            }
	            _instance = new OdbBeacon(eventNamePrefix, handlers, cacheEnabled);
	            // read any events Sharepoint (or BeaconCache) put into session storage but haven't uploaded
	            for (var i = 0; i < _storeSize; i++) {
	                var item = _store.getValue(i.toString());
	                if (!item || !item['name'] || !item['props']) {
	                    continue;
	                }
	                _WriteLog(item['name'], item['props']);
	            }
	        }
	        else {
	            throw new Error("The beacon has already been added to the logging manager with event name prefix " + _eventNamePrefix + ".");
	        }
	    }
	    Beacon.addToLoggingManager = addToLoggingManager;
	    function _initialize() {
	        if (_isInitialized) {
	            return;
	        }
	        _wsaData = new WSAData();
	        _dictStreams = new Array(0);
	        _dictDatapoints = new Array(0);
	        _createStream(SLAPI_STREAM_ID, 1);
	        _isInitialized = true;
	    }
	    function _createStream(streamId, width) {
	        if (!Boolean(_dictStreams[streamId])) {
	            var wsaStream = new WSAStream(streamId, width);
	            var idxStream = _numStreams;
	            _wsaData.wsaStreams[idxStream] = wsaStream;
	            _numStreams++;
	            _numStreamBytes += SLAPI_SIZE_STREAM_ENTRY;
	            _dictStreams[streamId] = idxStream;
	        }
	    }
	    function _addToStream(streamId, dictValues) {
	        try {
	            var wsaStreamRow = new WSAStreamRow(dictValues);
	            if (_isMaxSizeReachedCheck()) {
	                return;
	            }
	            _isDataAvailableForUpload = true;
	            _setDatapoint(SLAPI_DATAID_BSQM_MAXSTREAMROWSSTREAMID, streamId);
	            var wsaStream = _wsaData.wsaStreams[_dictStreams[streamId]];
	            if (Boolean(wsaStream)) {
	                if (_streamRowCount < SLAPI_MAX_ROWS_IN_STREAM) {
	                    wsaStream.Rows[_streamRowCount++] = wsaStreamRow;
	                    _numStreamBytes += _getTotalBytesForRow(wsaStreamRow);
	                    _setDatapoint(SLAPI_DATAID_BSQM_MAXSTREAMROWS, _streamRowCount); // update row count datapoint
	                }
	                else {
	                    throw ("Beacon: MAX_ROWS_IN_STREAM exceeded for stream ID " + String(streamId));
	                }
	            }
	        }
	        catch (e) {
	            ErrorHelper_1.default.log(e);
	        }
	    }
	    function _getTotalBytesForRow(row) {
	        var numTotalBytes = SLAPI_SIZE_DWORD;
	        for (var i = 0; i < row.Vals.length; i++) {
	            var value = String(row.Vals[i]);
	            numTotalBytes += value.length * 2; // A JavaScript char is 16 bit 2 byte
	        }
	        numTotalBytes += (row.Vals.length - 1) * 6; // plus the commas and quotes when serialized
	        return numTotalBytes;
	    }
	    function _setDatapoint(datapointId, datapointValue) {
	        if (datapointId < 1 || datapointId > SLAPI_MAX_SQM_DATAID) {
	            return;
	        }
	        if (datapointValue < 0 || datapointValue > SLAPI_MAX_INT32) {
	            return;
	        }
	        var savedDatapoint = null;
	        var idxDP = _dictDatapoints[datapointId];
	        if (Boolean(idxDP)) {
	            savedDatapoint = _wsaData.wsaDatapoints[idxDP];
	        }
	        if (savedDatapoint == null) {
	            var datapoint = new WSADatapoint(datapointId, datapointValue);
	            var idxDatapoint = _numDatapoints;
	            _wsaData.wsaDatapoints[idxDatapoint] = datapoint;
	            _dictDatapoints[datapointId] = idxDatapoint;
	            _numDatapoints++;
	        }
	        else {
	            savedDatapoint.Val = datapointValue;
	        }
	    }
	    function _uploadData() {
	        if (_wsaData == null) {
	            return "";
	        }
	        try {
	            if (_isDataAvailableForUpload) {
	                // Add final datapoints
	                if (Boolean(_isContinuation)) {
	                    _setDatapoint(SLAPI_DATAID_SESSION_TYPE, SLAPI_DATAKEY_SESSION_CONTINUATION);
	                }
	                else {
	                    _setDatapoint(SLAPI_DATAID_SESSION_TYPE, SLAPI_DATAKEY_SESSION_NORMAL);
	                    _isContinuation = true;
	                }
	                _wsaData.EndTime = _getTicks64();
	                var jsonString = null;
	                try {
	                    jsonString = JSON.stringify(_wsaData);
	                }
	                catch (e) {
	                    ErrorHelper_1.default.log(e);
	                }
	                // Initialize the session data for continuation session
	                _initContinuationSession();
	                return jsonString;
	            }
	        }
	        catch (e) {
	            ErrorHelper_1.default.log(e);
	            return "";
	        }
	    }
	    function _initContinuationSession() {
	        _dictStreams = new Array(0);
	        _dictDatapoints = new Array(0);
	        _numDatapoints = 0;
	        _numStreams = 0;
	        _streamRowCount = 0;
	        _numStreamBytes = 0;
	        _numDatapoints = 0;
	        var sessID = _wsaData.CorrelationId;
	        _wsaData = new WSAData();
	        _wsaData.CorrelationId = sessID;
	        _createStream(SLAPI_STREAM_ID, 1);
	        _isDataAvailableForUpload = false;
	    }
	    function _isMaxSizeReachedCheck() {
	        var size = _numDatapoints * SLAPI_SIZE_DATAPOINT_ENTRY + _numStreamBytes;
	        if (size >= SLAPI_MAX_DATA_SIZE) {
	            _instance.beacon();
	            size = _numDatapoints * SLAPI_SIZE_DATAPOINT_ENTRY + _numStreamBytes;
	            return size >= SLAPI_MAX_DATA_SIZE;
	        }
	        return false;
	    }
	    function _SetCorrelationId(correlationId) {
	        _initialize();
	        if (Boolean(_wsaData)) {
	            if (correlationId !== null && correlationId !== undefined) {
	                _wsaData.CorrelationId = correlationId;
	            }
	            else {
	                _wsaData.CorrelationId = _emptyCorrelationId;
	            }
	        }
	    }
	    function _WriteLog(eventName, dictProperties) {
	        _initialize();
	        if ((!Boolean(eventName)) || (!Boolean(dictProperties))) {
	            return;
	        }
	        if (false) {
	            var values = new Array(SLAPI_IDX_PROPERTY_START + 1);
	            values[SLAPI_IDX_VERSION] = SLAPI_JSON_VERSION;
	            values[SLAPI_IDX_EVENTNAME] = eventName;
	            var index = SLAPI_IDX_PROPERTY_START;
	            for (var key in dictProperties) {
	                var propVal = dictProperties[key];
	                if (propVal !== undefined && propVal !== null) {
	                    if (propVal instanceof Date) {
	                        propVal = propVal.getTime();
	                    }
	                    values[index++] = key;
	                    values[index++] = propVal;
	                }
	            }
	            _addToStream(SLAPI_STREAM_ID, values);
	        }
	        else if (!window["disableBeaconLogToConsole"]) {
	            try {
	                console.log("Beacon: Logged to " + eventName + " with properties: " + JSON.stringify(dictProperties));
	            }
	            catch (error) {
	            }
	        }
	    }
	    function _getUploadData() {
	        _initialize();
	        return _uploadData();
	    }
	    function _getTicks32() {
	        var timeNow = new Date();
	        var ticks64 = timeNow.getTime();
	        if (_startTicks === 0) {
	            _startTicks = ticks64;
	        }
	        return ((1 + ticks64 - _startTicks) & 0x7FFFFFFF);
	    }
	    function _getTicks64() {
	        var timeNow = new Date();
	        var ticks64 = timeNow.getTime();
	        ticks64 = ticks64 + SLAPI_MS_BTN_EPOCHS; // Epoch change from 1/1/1070 to 1/1/1601
	        ticks64 = ticks64 * 10000; // 1ms to 100ns resolution
	        return ticks64;
	    }
	})(Beacon || (Beacon = {}));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = Beacon;


/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var Manager_1 = __webpack_require__(12);
	var EventBatchCache_1 = __webpack_require__(33);
	var XHR_1 = __webpack_require__(35);
	var Beacon_event_1 = __webpack_require__(34);
	var BeaconBase = (function () {
	    function BeaconBase(endPointUrl, batchSize, flushTimeouts, useSlidingWindow, maxCriticalFlushInterval, totalRetries, resetTotalRetriesAfter, ignorePreviousEvents) {
	        var _this = this;
	        this._lastSendBeacon = 0;
	        this._endPointUrl = endPointUrl;
	        this._maxCriticalFlushInterval = maxCriticalFlushInterval;
	        this._totalRetries = totalRetries === undefined ? BeaconBase.DEFAULT_TOTAL_RETRIES : totalRetries;
	        this._totalRetriesStartValue = this._totalRetries;
	        this._resetTotalRetriesAfter = resetTotalRetriesAfter === undefined ? BeaconBase.DEFAULT_RESET_TOTAL_RETRIES_AFTER : resetTotalRetriesAfter;
	        this._ignorePreviousEvents = ignorePreviousEvents === undefined ? false : ignorePreviousEvents;
	        this._eventBatchCache = new EventBatchCache_1.default(batchSize, flushTimeouts, function (event) {
	            if (_this._onNewEvent) {
	                _this._onNewEvent(event);
	            }
	        }, function (events) {
	            // Create the beacon request
	            _this._createBeaconRequest(events);
	        }, useSlidingWindow);
	        this.init();
	    }
	    BeaconBase.prototype.sendBeacon = function (json, headers, requestTimeoutInMS) {
	        this._sendBeacon(json, headers, requestTimeoutInMS, 0);
	    };
	    BeaconBase.prototype._sendBeacon = function (json, headers, requestTimeoutInMS, retryCount) {
	        var _this = this;
	        if (retryCount === 0) {
	            this._lastSendBeacon = Manager_1.Manager.getTime();
	        }
	        var xhr = new XHR_1.default({
	            url: this._endPointUrl,
	            json: json,
	            headers: headers,
	            requestTimeoutInMS: requestTimeoutInMS
	        });
	        var beaconEvent = new Beacon_event_1.Beacon({
	            retryCount: retryCount,
	            totalRetries: this._totalRetries
	        });
	        xhr.start(function (xhr, status) {
	            beaconEvent.end({ status: status + '', success: true });
	            if (++_this._successfulLogRequests >= _this._resetTotalRetriesAfter) {
	                _this._successfulLogRequests = _this._resetTotalRetriesAfter;
	                _this._totalRetries = _this._totalRetriesStartValue;
	            }
	        }, function (xhr, status, timeout) {
	            _this._successfulLogRequests = 0;
	            beaconEvent.end({ status: status + '', success: false });
	            // Retry if we timed out since we failed
	            if (status === XHR_1.default.TIMEOUT_STATUS && _this._totalRetries > 0) {
	                _this._totalRetries--;
	                _this._sendBeacon(json, headers, requestTimeoutInMS, retryCount + 1);
	            }
	        });
	    };
	    BeaconBase.prototype.init = function () {
	        var _this = this;
	        var bufferedEvents = Manager_1.Manager.addLogHandler(function (event) {
	            _this.addEvent(event);
	        });
	        if (!this._ignorePreviousEvents) {
	            for (var x = 0; x < bufferedEvents.length; x++) {
	                this.addEvent(bufferedEvents[x]);
	            }
	        }
	    };
	    BeaconBase.prototype.addEvent = function (event) {
	        if (event.enabled) {
	            this._eventBatchCache.addEvent(event);
	            if (event.critical &&
	                (!this._lastSendBeacon ||
	                    Manager_1.Manager.getTime() - this._lastSendBeacon > this._maxCriticalFlushInterval)) {
	                this._eventBatchCache.flush();
	            }
	        }
	    };
	    BeaconBase.DEFAULT_TOTAL_RETRIES = 3;
	    BeaconBase.DEFAULT_RESET_TOTAL_RETRIES_AFTER = 3;
	    return BeaconBase;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = BeaconBase;


/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var Async_1 = __webpack_require__(30);
	var Beacon_event_1 = __webpack_require__(34);
	var ErrorHelper_1 = __webpack_require__(25);
	var EventBatchCache = (function () {
	    function EventBatchCache(maxSize, maxFlushTimes, newEventHandler, flushHandler, useSlidingWindow) {
	        this._events = [];
	        this._flushCount = 0;
	        this._async = new Async_1.default(this);
	        this._maxSize = maxSize;
	        this._newEventHandler = newEventHandler;
	        this._flushHandler = flushHandler;
	        this._maxFlushTimes = maxFlushTimes;
	        this._useSlidingWindow = useSlidingWindow;
	    }
	    EventBatchCache.prototype.addEvent = function (event) {
	        this._events.push(event);
	        if (this._newEventHandler) {
	            try {
	                this._newEventHandler(event);
	            }
	            catch (e) {
	                ErrorHelper_1.default.log(e);
	            }
	        }
	        // Dont create a timer for events that are of type beacon
	        if (Beacon_event_1.Beacon.isTypeOf(event)) {
	            return;
	        }
	        if (this._events.length >= this._maxSize) {
	            this.flush();
	        }
	        else {
	            this._setFlushTimeout(false);
	        }
	    };
	    EventBatchCache.prototype.flush = function () {
	        this._setFlushTimeout(true);
	    };
	    EventBatchCache.prototype._handleFlush = function () {
	        this._clearFlushTimeout();
	        if (this._events.length) {
	            this._flushHandler(this._events);
	            // Reset the events array
	            this._events = [];
	        }
	    };
	    EventBatchCache.prototype._clearFlushTimeout = function () {
	        if (this._flushTimeoutId) {
	            this._async.clearTimeout(this._flushTimeoutId);
	            this._flushTimeoutId = null;
	        }
	        if (this._immediateflushTimeoutId) {
	            this._async.clearTimeout(this._immediateflushTimeoutId);
	            this._immediateflushTimeoutId = null;
	        }
	    };
	    EventBatchCache.prototype._setFlushTimeout = function (immediate) {
	        var _this = this;
	        // if another immediate flush is already queued, disregard
	        if (!!this._immediateflushTimeoutId) {
	            return;
	        }
	        if (this._useSlidingWindow) {
	            this._clearFlushTimeout();
	            if (immediate) {
	                this._immediateflushTimeoutId = this._async.setTimeout(function () {
	                    _this._handleFlush();
	                }, 0);
	            }
	            else {
	                this._flushTimeoutId = this._async.setTimeout(function () {
	                    _this._handleFlush();
	                }, this._getFlushTime());
	            }
	        }
	        else {
	            if (immediate) {
	                if (!this._immediateflushTimeoutId) {
	                    this._immediateflushTimeoutId = this._async.setTimeout(function () {
	                        _this._handleFlush();
	                    }, 0);
	                }
	            }
	            else if (!this._flushTimeoutId) {
	                this._flushTimeoutId = this._async.setTimeout(function () {
	                    _this._handleFlush();
	                }, this._getFlushTime());
	            }
	        }
	    };
	    EventBatchCache.prototype._getFlushTime = function () {
	        if (this._flushCount < this._maxFlushTimes.length) {
	            var flushCount = this._flushCount;
	            this._flushCount++;
	            return this._maxFlushTimes[flushCount];
	        }
	        else {
	            return this._maxFlushTimes[this._maxFlushTimes.length - 1];
	        }
	    };
	    return EventBatchCache;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = EventBatchCache;


/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var PairedEventBase_1 = __webpack_require__(23);
	var Beacon = (function (_super) {
	    __extends(Beacon, _super);
	    /**
	     * The Beacon event constructor
	     * @param data {IBeaconStartSchema}
	     * -optional name - This is the status code returned
	     * -optional status - This is the status code returned
	     * -optional success - This is if the request was successful or not
	     * -required retryCount - This is the retry count for this request
	     * -required totalRetries - This is the number of total retries left
	     * -optional eventCount - This is the number of total events sent
	     * @param parent {IEvent} The optional parent for this event
	     */
	    function Beacon(data, parent) {
	        _super.call(this, 'Beacon,', 'Beacon', data, parent);
	    }
	    /**
	     * This is true if the Beacon event is enabled
	     */
	    Beacon.enabled = function () {
	        return true;
	    };
	    /**
	     * This is false when Beacon event does not require a parent event
	     */
	    Beacon.prototype.requiresParent = function () {
	        return false;
	    };
	    Beacon.prototype.setStartData = function (data) {
	        if (typeof data.name !== "undefined") {
	            this.data.name = this.cleanString(data.name);
	        }
	        if (typeof data.status !== "undefined") {
	            this.data.status = this.cleanString(data.status);
	        }
	        if (typeof data.success !== "undefined") {
	            this.data.success = data.success;
	        }
	        this.data.retryCount = data.retryCount;
	        this.data.totalRetries = data.totalRetries;
	        if (typeof data.eventCount !== "undefined") {
	            this.data.eventCount = data.eventCount;
	        }
	    };
	    Beacon.prototype.setEndData = function (data) {
	        if (typeof data.name !== "undefined") {
	            this.data.name = this.cleanString(data.name);
	        }
	        if (typeof data.status !== "undefined") {
	            this.data.status = this.cleanString(data.status);
	        }
	        this.data.success = data.success;
	        if (typeof data.eventCount !== "undefined") {
	            this.data.eventCount = data.eventCount;
	        }
	    };
	    /**
	     * This will end the Beacon event
	     * @param data {IBeaconEndSchema}
	     * -optional name - This is the status code returned
	     * -optional status - This is the status code returned
	     * -required success - This is if the request was successful or not
	     * -optional eventCount - This is the number of total events sent
	     */
	    Beacon.prototype.end = function (data) {
	        return this._end(data);
	    };
	    /**
	     * This writes verbose logs to memory to be uploaded if event ends with failure
	     */
	    Beacon.prototype.verbose = function (message) {
	        return this._verbose(message);
	    };
	    /**
	     * Sets a time limit for the scenario. A timeout result will be logged if no end happens in desired timeframe
	     */
	    Beacon.prototype.setTimeout = function (ms, data) {
	        return this._setTimeout(ms, data);
	    };
	    /**
	     * The name of the Beacon event
	     */
	    Beacon.fullName = 'Beacon,';
	    /**
	     * The short name of the Beacon event
	     */
	    Beacon.shortName = 'Beacon';
	    /**
	     * This is true if the Beacon event is enabled
	     */
	    Beacon.metadata = {
	        name: {
	            type: "String",
	            definedInName: "Beacon",
	            definedInFullName: "Beacon,",
	            isMetric: false
	        },
	        status: {
	            type: "String",
	            definedInName: "Beacon",
	            definedInFullName: "Beacon,",
	            isMetric: false
	        },
	        success: {
	            type: "Boolean",
	            definedInName: "Beacon",
	            definedInFullName: "Beacon,",
	            isMetric: false
	        },
	        retryCount: {
	            type: "Number",
	            definedInName: "Beacon",
	            definedInFullName: "Beacon,",
	            isMetric: true
	        },
	        totalRetries: {
	            type: "Number",
	            definedInName: "Beacon",
	            definedInFullName: "Beacon,",
	            isMetric: true
	        },
	        eventCount: {
	            type: "Number",
	            definedInName: "Beacon",
	            definedInFullName: "Beacon,",
	            isMetric: true
	        }
	    };
	    return Beacon;
	}(PairedEventBase_1.PairedEventBase));
	exports.Beacon = Beacon;
	Beacon.prototype.metadata = Beacon.metadata;
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = Beacon;


/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Async_1 = __webpack_require__(30);
	var ErrorHelper_1 = __webpack_require__(25);
	var XHR = (function () {
	    function XHR(options) {
	        this._async = new Async_1.default(this);
	        this._url = options.url;
	        this._requestTimeoutInMS = options.requestTimeoutInMS || XHR.DEFAULT_TIMEOUT_MS;
	        this._json = options.json;
	        this._headers = options.headers || {};
	        this._method = options.method;
	        this._withCredentials = options.withCredentials || false;
	        this._needsCors = options.needsCors;
	    }
	    XHR.prototype.abort = function (isCancelled) {
	        var aborted = this._abortRequest();
	        if (aborted && !isCancelled) {
	            this._callFailureCallback(this._request, XHR.ABORT_STATUS, false);
	        }
	    };
	    XHR.prototype.start = function (successCallback, failureCallback) {
	        var _this = this;
	        try {
	            this._successCallback = successCallback;
	            this._failureCallback = failureCallback;
	            this._request = this._getRequest();
	            this._async.setTimeout(function () {
	                // Check if we havent logged this event already
	                if (!_this._completed) {
	                    _this._timeoutCallback();
	                }
	            }, this._requestTimeoutInMS);
	            // Report Qos on the actual qos calls
	            this._request.onreadystatechange = function () {
	                // Check if we havent logged this event in a timeout
	                if (!_this._completed) {
	                    var DONE = 4; // Default done readystate
	                    try {
	                        DONE = _this._request.DONE || 4;
	                    }
	                    catch (e) {
	                    }
	                    if (_this._request.readyState === DONE) {
	                        _this._requestEndCallback();
	                    }
	                }
	            };
	            if (!this._method) {
	                this._method = this._json ? 'POST' : 'GET';
	            }
	            this._request.open(this._method, this._url, true);
	            if ("withCredentials" in this._request) {
	                this._request.withCredentials = this._withCredentials;
	            }
	            // Headers have to be set after open is called
	            for (var x in this._headers) {
	                this._request.setRequestHeader(x, this._headers[x]);
	            }
	            this._request.send(this._json);
	        }
	        catch (e) {
	            if (e && e.message && document) {
	                // Attach domain to any error for additional debugging
	                e.message += ' - ' + document.domain;
	            }
	            ErrorHelper_1.default.log(e);
	            // abort the request and set the exception status code
	            this._abortRequest();
	            this._callFailureCallback(this._request, XHR.EXCEPTION_STATUS, false);
	        }
	    };
	    XHR.prototype._getRequest = function () {
	        var _this = this;
	        if (!this._needsCors || !window['XDomainRequest']) {
	            return new XMLHttpRequest();
	        }
	        // This is only needed for IE 9 to support CORS requests
	        // Note: we can not set headers on XDomainRequest
	        var request = new XDomainRequest();
	        request.status = 200;
	        request.setRequestHeader = function () { };
	        request.onprogress = function () { };
	        request.ontimeout = function () { };
	        request.onload = function () {
	            _this._requestEndCallback();
	        };
	        return request;
	    };
	    XHR.prototype._abortRequest = function () {
	        var actuallyAborted = false;
	        if (!this._completed) {
	            this._completed = true;
	            // Clear the timeout for the request
	            this._async.dispose();
	            // Cancel the request
	            try {
	                if (this._request) {
	                    this._request.abort();
	                }
	            }
	            catch (e) {
	            }
	            actuallyAborted = true;
	        }
	        return actuallyAborted;
	    };
	    XHR.prototype._timeoutCallback = function () {
	        if (!this._completed) {
	            this._abortRequest();
	            this._callFailureCallback(this._request, XHR.TIMEOUT_STATUS, true);
	        }
	    };
	    XHR.prototype._callSuccessCallback = function (xhr, statusCode) {
	        try {
	            if (this._successCallback) {
	                this._successCallback(xhr, statusCode);
	            }
	        }
	        catch (e) {
	            ErrorHelper_1.default.log(e);
	        }
	    };
	    XHR.prototype._callFailureCallback = function (xhr, statusCode, timeout) {
	        try {
	            if (this._failureCallback) {
	                this._failureCallback(xhr, statusCode, timeout);
	            }
	        }
	        catch (e) {
	            ErrorHelper_1.default.log(e);
	        }
	    };
	    XHR.prototype._requestEndCallback = function () {
	        if (!this._completed) {
	            this._completed = true;
	            var status = XHR.EXCEPTION_STATUS;
	            try {
	                // Clear the timeout for the request
	                this._async.dispose();
	                try {
	                    status = this._request.status;
	                }
	                catch (e) {
	                }
	            }
	            catch (e) {
	                status = XHR.EXCEPTION_STATUS;
	                ErrorHelper_1.default.log(e);
	            }
	            if (status < 400 && status > 0) {
	                this._callSuccessCallback(this._request, status);
	            }
	            else {
	                this._callFailureCallback(this._request, status, false);
	            }
	        }
	    };
	    XHR.EXCEPTION_STATUS = -1;
	    XHR.TIMEOUT_STATUS = -2;
	    XHR.ABORT_STATUS = -3;
	    XHR.DEFAULT_TIMEOUT_MS = 30000;
	    return XHR;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = XHR;


/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var BaseDataStore_1 = __webpack_require__(37);
	var DataStoreCachingType_1 = __webpack_require__(38);
	var Manager_1 = __webpack_require__(12);
	var LogProcessor_1 = __webpack_require__(39);
	var BeaconCache;
	(function (BeaconCache) {
	    "use strict";
	    var _store = new BaseDataStore_1.default(LogProcessor_1.default.STORE_KEY,  true ? DataStoreCachingType_1.default.sharedMemory : DataStoreCachingType_1.default.session);
	    BeaconCache.eventNamePrefix = "";
	    BeaconCache.instance = null;
	    BeaconCache.handlers = null;
	    if (true) {
	        try {
	            console.log("Beacon: To disable logging to the console set \"window.disableBeaconLogToConsole = true\" in the debug window");
	        }
	        catch (error) {
	        }
	    }
	    var OdbBeaconCache = (function () {
	        function OdbBeaconCache(eventNamePrefix, handlers) {
	            var _this = this;
	            BeaconCache.eventNamePrefix = eventNamePrefix;
	            BeaconCache.handlers = handlers;
	            var bufferedEvents = Manager_1.Manager.addLogHandler(function (event) {
	                _this.addEvent(event);
	            });
	            // Add bufferred events to local store
	            for (var x = 0; x < bufferedEvents.length; x++) {
	                this.addEvent(bufferedEvents[x]);
	            }
	        }
	        OdbBeaconCache.prototype.addEvent = function (event) {
	            if (event.enabled) {
	                // put every new event to the session storage so that Sharepoint can upload it for us
	                // if user navigates away before Beacon event
	                LogProcessor_1.default.processAndLogEvent({
	                    event: event,
	                    logFunc: function (streamName, dictProperties) {
	                        var storeSize = _store.getValue(LogProcessor_1.default.STORE_SIZE_KEY);
	                        if (!storeSize) {
	                            storeSize = 0;
	                        }
	                        _store.setValue(storeSize.toString(), { name: streamName, props: dictProperties });
	                        _store.setValue(LogProcessor_1.default.STORE_SIZE_KEY, ++storeSize);
	                    },
	                    eventNamePrefix: BeaconCache.eventNamePrefix,
	                    handlers: BeaconCache.handlers
	                });
	            }
	        };
	        return OdbBeaconCache;
	    }());
	    function addToLoggingManager(eventNamePrefix, handlers) {
	        if (!BeaconCache.instance) {
	            BeaconCache.instance = new OdbBeaconCache(eventNamePrefix, handlers);
	        }
	        else {
	            throw new Error("The beaconCache has already been added to the logging manager with event name prefix " + eventNamePrefix + ".");
	        }
	    }
	    BeaconCache.addToLoggingManager = addToLoggingManager;
	})(BeaconCache || (BeaconCache = {}));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = BeaconCache;


/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var DataStoreCachingType_1 = __webpack_require__(38);
	// DataStore class is used for transparent caching of data in memory and/or browser storage
	// - Parameter defaultCachingType defines whether you want to use browser storage for all operations
	// and which type of storage - session or local
	// - Parameter dataStoreKey is used to prefix every key in browser storage. Actual key for browser storage
	// will be dataStoreKey + key used in setValue method.
	// - If DataStore is instantiated with some type of browser caching enabled - it will test if browser storage
	// is available and use it. If it's not it will fall back to in-memory cache.
	// - If DataStore is instantiated from two different places with same dataStoreKey and some type of
	// browser storage caching, the memory storage will be shared as well as browser storage.
	var DataStore = (function () {
	    function DataStore(dataStoreKey, defaultCachingType) {
	        if (defaultCachingType === void 0) { defaultCachingType = DataStoreCachingType_1.default.none; }
	        DataStore.init();
	        this.dataStoreKey = dataStoreKey;
	        this.defaultCachingType = defaultCachingType;
	        if (defaultCachingType === DataStoreCachingType_1.default.none) {
	            this.dataStore = {};
	        }
	        else {
	            var store = DataStore._dataStore[this.dataStoreKey];
	            if (store === undefined) {
	                DataStore._dataStore[this.dataStoreKey] = {};
	            }
	            this.dataStore = DataStore._dataStore[this.dataStoreKey];
	        }
	    }
	    DataStore.hasStorageType = function (storageType) {
	        DataStore.init();
	        switch (storageType) {
	            case DataStoreCachingType_1.default.none: return true;
	            case DataStoreCachingType_1.default.sharedMemory: return true;
	            case DataStoreCachingType_1.default.session: return !!DataStore._sessionStorage;
	            case DataStoreCachingType_1.default.local: return !!DataStore._localStorage;
	        }
	        return false;
	    };
	    DataStore.init = function () {
	        if (DataStore._initialized) {
	            return;
	        }
	        // Need a try/catch since window.localStorage can throw.
	        try {
	            if ('localStorage' in window && window.localStorage && DataStore.testStorage(window.localStorage)) {
	                DataStore._localStorage = window.localStorage;
	            }
	        }
	        catch (exUsingLocalStorage) {
	        }
	        try {
	            if ('sessionStorage' in window && window.sessionStorage && DataStore.testStorage(window.sessionStorage)) {
	                DataStore._sessionStorage = window.sessionStorage;
	            }
	        }
	        catch (exUsingSessionStorage) {
	        }
	        // Fallback logic
	        if (DataStore._localStorage == null) {
	            DataStore._localStorage = DataStore._sessionStorage;
	        }
	        DataStore._initialized = true;
	    };
	    /** Need to check whether the value in localStorage is of the correct type.
	     * In Private Browsing in Safari, for example, localStorage is accessible,
	     * but all of the non-built-in properties return undefined, and setting
	     * such a property causes an exception.
	     */
	    DataStore.testStorage = function (storage) {
	        var _testKey = "BrowserStorageTest";
	        var _testValue = "1";
	        var result = false;
	        try {
	            storage.setItem(_testKey, _testValue);
	            if (storage.getItem(_testKey) === _testValue) {
	                result = true;
	            }
	            storage.removeItem(_testKey);
	        }
	        catch (e) { }
	        return result;
	    };
	    DataStore.prototype.setValue = function (key, value, cachingTypeOverride) {
	        key = this.normalizeKey(key);
	        this.dataStore[key] = value;
	        var storage = this.getStorage(cachingTypeOverride);
	        if (storage) {
	            try {
	                var objectsFound = [];
	                var s = JSON.stringify(value, function (key, value) {
	                    if (typeof value === 'object' && value !== null) {
	                        if (objectsFound.indexOf(value) !== -1) {
	                            // discard the key if circular dependency was found
	                            return;
	                        }
	                        if (key[0] === '_') {
	                            // discard private objects
	                            return;
	                        }
	                        // Otherwise store value in the cache
	                        objectsFound.push(value);
	                    }
	                    return value;
	                });
	                // empty cache
	                objectsFound = null;
	                storage.setItem(this.dataStoreKey + key, s);
	            }
	            catch (e) {
	            }
	        }
	    };
	    DataStore.prototype.getValue = function (key, cachingTypeOverride) {
	        key = this.normalizeKey(key);
	        var value = this.dataStore[key];
	        var storage = this.getStorage(cachingTypeOverride);
	        if (value === undefined && storage) {
	            var s = storage.getItem(this.dataStoreKey + key);
	            if (s) {
	                try {
	                    value = JSON.parse(s);
	                    this.dataStore[key] = value;
	                }
	                catch (e) {
	                    value = undefined;
	                }
	            }
	        }
	        return value;
	    };
	    DataStore.prototype.remove = function (key, cachingTypeOverride) {
	        key = this.normalizeKey(key);
	        var storage = this.getStorage(cachingTypeOverride);
	        if (storage) {
	            storage.removeItem(this.dataStoreKey + key);
	        }
	        delete this.dataStore[key];
	    };
	    DataStore.prototype.getStorage = function (cachingTypeOverride) {
	        var cachingType = cachingTypeOverride ? cachingTypeOverride : this.defaultCachingType;
	        switch (cachingType) {
	            case DataStoreCachingType_1.default.none:
	                return null;
	            case DataStoreCachingType_1.default.sharedMemory:
	                return null;
	            case DataStoreCachingType_1.default.session:
	                return DataStore._sessionStorage;
	            case DataStoreCachingType_1.default.local:
	                return DataStore._localStorage;
	        }
	        return null;
	    };
	    DataStore.prototype.normalizeKey = function (key) {
	        return key && key.toLowerCase() || '';
	    };
	    DataStore._sessionStorage = null;
	    DataStore._localStorage = null;
	    DataStore._dataStore = {};
	    DataStore._initialized = false;
	    return DataStore;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = DataStore;


/***/ },
/* 38 */
/***/ function(module, exports) {

	"use strict";
	var DataStoreCachingType;
	(function (DataStoreCachingType) {
	    DataStoreCachingType[DataStoreCachingType["none"] = 0] = "none";
	    DataStoreCachingType[DataStoreCachingType["session"] = 1] = "session";
	    DataStoreCachingType[DataStoreCachingType["local"] = 2] = "local";
	    DataStoreCachingType[DataStoreCachingType["sharedMemory"] = 3] = "sharedMemory";
	})(DataStoreCachingType || (DataStoreCachingType = {}));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = DataStoreCachingType;


/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var Qos_event_1 = __webpack_require__(22);
	var PLT_event_1 = __webpack_require__(40);
	var Beacon_event_1 = __webpack_require__(34);
	var UnhandledError_event_1 = __webpack_require__(41);
	var RequireJSError_event_1 = __webpack_require__(42);
	var CaughtError_event_1 = __webpack_require__(26);
	var QosError_event_1 = __webpack_require__(27);
	var Verbose_event_1 = __webpack_require__(28);
	var Engagement_event_1 = __webpack_require__(17);
	var EventBase_1 = __webpack_require__(11);
	var RUMOneDataUpload_event_1 = __webpack_require__(43);
	var DebugPriorityLevel_1 = __webpack_require__(44);
	var LogProcessor;
	(function (LogProcessor) {
	    "use strict";
	    LogProcessor.STORE_KEY = "SPCacheLogger";
	    LogProcessor.STORE_SIZE_KEY = "Size";
	    var SOURCE_V2_Engagement = "ClientV2Engagement";
	    var DEBUG_LOG_STREAM = "ReliabilityLog";
	    var USER_ENGAGEMENT_STREAM = "UserEngagement";
	    var SOURCE_V2_Reliability = "ClientV2Reliability";
	    // regex for SLAPI event names
	    var SLAPI_EVENT_NAME_ALLOW = /[^a-z0-9\.\_\-\+]+/ig;
	    var _spModuleLink = window['_spModuleLink'];
	    var _appVersion = _spModuleLink ? _spModuleLink.buildNumber : "";
	    function processAndLogEvent(params) {
	        // Ignored events
	        if (params.handlers.ignoredEventsHandler && params.handlers.ignoredEventsHandler(params.event)) {
	            return;
	        }
	        // Get the data to log
	        var logDataArray = Engagement_event_1.Engagement.isTypeOf(params.event) ? _processEngagementEvent(params.event) :
	            Qos_event_1.Qos.isTypeOf(params.event) ? _processQosEvent(params.event, params.handlers.qosEventNameHandler || null, params.handlers.qosEventExtraDataHandler || null) :
	                PLT_event_1.PLT.isTypeOf(params.event) ? _processPLTEvent(params.event) :
	                    UnhandledError_event_1.UnhandledError.isTypeOf(params.event) ? _processUnhandledErrorEvent(params.event) :
	                        RequireJSError_event_1.RequireJSError.isTypeOf(params.event) ? _processRequireJSErrorEvent(params.event) :
	                            CaughtError_event_1.CaughtError.isTypeOf(params.event) ? _processCaughtErrorEvent(params.event) :
	                                Verbose_event_1.Verbose.isTypeOf(params.event) ? _processVerboseEvent(params.event) :
	                                    Beacon_event_1.Beacon.isTypeOf(params.event) ? _processBeaconEvent(params.event) :
	                                        RUMOneDataUpload_event_1.RUMOneDataUpload.isTypeOf(params.event) ? _processRUMOneDataUploadEvent(params.event) :
	                                            null;
	        // If the log data array is not defined the event was unhandled, log
	        // the event name so is easy to discover and fix
	        if (!logDataArray) {
	            logDataArray = [{
	                    userEngagementData: {
	                        EngagementName: "UnknownEvent",
	                        Duration: 0,
	                        LogType: 0,
	                        Properties: JSON.stringify({ name: params.event.eventName }),
	                        ClientTime: params.event.eventType === EventBase_1.ClonedEventType.End ? params.event.endTime : params.event.startTime,
	                        Source: SOURCE_V2_Engagement
	                    }
	                }];
	        }
	        // Log all the data in the array adding the event prefix to the tag/name
	        for (var index = 0, length = logDataArray.length; index < length; index++) {
	            var logData = logDataArray[index];
	            if (logData.debugData) {
	                logData.debugData.Tag = _addEventPrefix(logData.debugData.Tag, params.eventNamePrefix).replace(SLAPI_EVENT_NAME_ALLOW, "");
	                params.logFunc(DEBUG_LOG_STREAM, logData.debugData);
	            }
	            if (logData.userEngagementData) {
	                // SPList: special case for Engagement events
	                // set prefix to the name of the list type
	                // to be able to track usage/engagement by list type
	                var prefix = params.eventNamePrefix;
	                if (Engagement_event_1.Engagement.isTypeOf(params.event) && prefix === 'SPList') {
	                    // prefix will be set to a list type based on list base template
	                    // if list type not found, [refix will be set back to generic SPList
	                    prefix = _getScenarioNameFromListType();
	                }
	                logData.userEngagementData.EngagementName = _addEventPrefix(logData.userEngagementData.EngagementName, prefix).replace(SLAPI_EVENT_NAME_ALLOW, "");
	                // SPList: special case for Qos events; add listBaseTemplate ID to the property bag
	                if (Qos_event_1.Qos.isTypeOf(params.event) && params.eventNamePrefix === 'SPList') {
	                    params.event.data.extraData["ListBaseTemplate"] = _getListBaseTemplate();
	                }
	                params.logFunc(USER_ENGAGEMENT_STREAM, logData.userEngagementData);
	            }
	            if (logData.rumOneData) {
	                params.logFunc(logData.rumOneData.streamName, logData.rumOneData.dictionary);
	            }
	        }
	    }
	    LogProcessor.processAndLogEvent = processAndLogEvent;
	    // get the list base template id
	    function _getListBaseTemplate() {
	        var listTemplate = -1;
	        var spPageContextInfo = window['_spPageContextInfo'];
	        if (spPageContextInfo !== undefined && spPageContextInfo !== null) {
	            listTemplate = spPageContextInfo.listBaseTemplate;
	        }
	        return listTemplate;
	    }
	    // get the name of the listType; it's SPList for the unrecognized
	    // list templates; TODO: add all templates
	    function _getScenarioNameFromListType() {
	        var scenarioName = "";
	        var listTemplate = _getListBaseTemplate();
	        switch (listTemplate) {
	            case 100:
	                scenarioName = "ListNext";
	                break;
	            case 101:
	                scenarioName = "DocsNext";
	                break;
	            case 102:
	                scenarioName = "SurveyNext";
	                break;
	            case 103:
	                scenarioName = "LinksNext";
	                break;
	            case 104:
	                scenarioName = "AnnouncementsNext";
	                break;
	            case 107:
	                scenarioName = "TasksNext";
	                break;
	            case 109:
	                scenarioName = "PicLibNext";
	                break;
	            default:
	                scenarioName = "SPList";
	                break;
	        }
	        return scenarioName;
	    }
	    // string examples: "{\"w3cResponseEnd\":2", "\"appStart\":750"
	    function _cleanString(dataPLT) {
	        var cleanString = dataPLT;
	        cleanString = cleanString.replace("{", "");
	        cleanString = cleanString.replace(/\"/gi, "");
	        cleanString = cleanString.replace("}", "");
	        return cleanString;
	    }
	    function _addEventPrefix(eventName, prefix) {
	        if (!prefix) {
	            return eventName;
	        }
	        return prefix + '.' + eventName;
	    }
	    function _getResultTypeSuffix(resultType) {
	        if (resultType === Qos_event_1.ResultTypeEnum.Success) {
	            return ".Success";
	        }
	        else if (resultType === Qos_event_1.ResultTypeEnum.Failure) {
	            return ".Failure";
	        }
	        else if (resultType === Qos_event_1.ResultTypeEnum.ExpectedFailure) {
	            return ".ExpectedFailure";
	        }
	        return "";
	    }
	    function _processRUMOneDataUploadEvent(event) {
	        if (!event.data) {
	            return [{
	                    userEngagementData: {
	                        EngagementName: "RUMOne.no_EventData",
	                        Duration: 0,
	                        LogType: 0,
	                        ClientTime: event.startTime,
	                        Source: SOURCE_V2_Engagement
	                    }
	                }];
	        }
	        var rumOneDataUpdateEventData = event.data;
	        return [{
	                rumOneData: {
	                    streamName: rumOneDataUpdateEventData.streamName,
	                    dictionary: rumOneDataUpdateEventData.dictionary
	                }
	            }];
	    }
	    function _processEngagementEvent(event) {
	        var logData = {};
	        // if the event has not data we will get this in COSMOS
	        // if it's a start we have only the name and append ".Start" to it
	        // else we look for resultCode and append it to data.name with result type
	        // if resultCode is not present than we append only the result type to the name
	        // i.e. serverDataGetValue.Start OR serverDataGetValue.ResponseText.GetAuth.ExpectedFailure
	        var name = "no_EngagementName";
	        var properties = "";
	        if (event.data) {
	            var engagementData = event.data;
	            if (engagementData.name) {
	                name = engagementData.name;
	            }
	            properties = engagementData.extraData ? JSON.stringify(engagementData.extraData) : "";
	        }
	        logData.userEngagementData = {
	            EngagementName: name,
	            Properties: properties,
	            Duration: 0,
	            LogType: 0,
	            ClientTime: event.startTime,
	            Source: SOURCE_V2_Engagement
	        };
	        return [logData];
	    }
	    function _processQosEvent(event, qoSEventNameHandler, qosEventExtraDataHandler) {
	        var logData = {};
	        // if the event has not data we will get this in COSMOS
	        // if it's a start we have only the name and append ".Start" to it
	        // else we look for resultCode and append it to data.name with result type
	        // if resultCode is not present than we append only the result type to the name
	        // i.e. serverDataGetValue.ResponseText.Success OR serverDataGetValue.ResponseText.GetAuth.ExpectedFailure
	        var name = "no_QosName";
	        var qosData = event.data ? event.data : null;
	        if (qosData) {
	            if (qosData.name) {
	                name = qosData.name;
	            }
	            if (qoSEventNameHandler != null) {
	                name = qoSEventNameHandler(event, name);
	            }
	            qosData.extraData = qosData.extraData || {};
	            if (qosEventExtraDataHandler != null) {
	                qosEventExtraDataHandler(event, qosData);
	            }
	            qosData.extraData["appver"] = _appVersion;
	        }
	        // Duration is calculated only when we have an END event
	        var durationTime;
	        if (event.eventType === EventBase_1.ClonedEventType.End && event.startTime && event.endTime) {
	            durationTime = event.endTime - event.startTime;
	        }
	        else {
	            durationTime = 0;
	        }
	        logData.userEngagementData = {
	            EngagementName: name,
	            Properties: qosData && qosData.extraData ? JSON.stringify(qosData.extraData) : "",
	            Duration: durationTime,
	            LogType: 0,
	            ClientTime: event.eventType === EventBase_1.ClonedEventType.End ? event.endTime : event.startTime,
	            Source: SOURCE_V2_Reliability
	        };
	        return [logData];
	    }
	    function _processBeaconEvent(event) {
	        var logData = {};
	        var durationTime;
	        if (event.eventType === EventBase_1.ClonedEventType.End && event.startTime && event.endTime) {
	            durationTime = event.endTime - event.startTime;
	        }
	        else {
	            durationTime = 0;
	        }
	        logData.userEngagementData = {
	            EngagementName: "Beacon",
	            Properties: event.data ? JSON.stringify(event.data) : "no_EventData",
	            Duration: durationTime,
	            LogType: 0,
	            ClientTime: event.eventType === EventBase_1.ClonedEventType.End ? event.endTime : event.startTime,
	            Source: SOURCE_V2_Reliability
	        };
	        return [logData];
	    }
	    function _processPLTEvent(event) {
	        if (!event.data) {
	            return [{
	                    userEngagementData: {
	                        EngagementName: "PLT.no_EventData",
	                        Duration: 0,
	                        LogType: 0,
	                        ClientTime: event.startTime,
	                        Source: SOURCE_V2_Engagement
	                    }
	                }];
	        }
	        var logDataList = [];
	        //get the data for this event
	        var pltData = event.data;
	        // this will be the prefix for the tags; i.e. PLT.SetView-Files.w3cResponseEnd
	        var name = "PLT." + pltData.name.replace(" ", "");
	        // break down the PLT data and log each one as a separate record in the stream
	        //{"name":"SetView-Files","w3cResponseEnd":424,"appStart":254,"preRender":20,"dataFetch":310,"postRender":327,"render":347,"plt":1335}
	        var dataPLT = JSON.stringify(pltData).split(',');
	        var duration = 0;
	        // iterate through data and extract each type
	        // create tags like this: PLT.<pagename>.w3cResponseEnd; PLT.<pagename>.appStart
	        for (var i = 0; i < dataPLT.length; i++) {
	            var cleanedPLTString = _cleanString(dataPLT[i]);
	            // split the string and get the name and duration
	            // special case for duration when appCacheHit is a boolean
	            var subDataPLTs = cleanedPLTString.split(':');
	            // skip the 'name' key-value pair
	            if (_cleanString(subDataPLTs[1]) !== pltData.name) {
	                if (subDataPLTs[1] === 'true') {
	                    duration = 1;
	                }
	                else if (subDataPLTs[1] === 'false' || subDataPLTs[1] === 'null') {
	                    duration = 0;
	                }
	                else {
	                    duration = parseInt(subDataPLTs[1], 10);
	                }
	                logDataList.push({ userEngagementData: {
	                        EngagementName: name + "." + subDataPLTs[0],
	                        Properties: (subDataPLTs[0] === 'appCacheHit') ? JSON.stringify(event.data) : "",
	                        Duration: duration,
	                        LogType: 0,
	                        ClientTime: event.startTime,
	                        Source: SOURCE_V2_Engagement
	                    } });
	            }
	        }
	        return logDataList;
	    }
	    function _processUnhandledErrorEvent(event) {
	        return [{
	                userEngagementData: {
	                    EngagementName: "UnhandledError",
	                    Duration: 0,
	                    LogType: 0,
	                    ClientTime: event.startTime,
	                    Source: SOURCE_V2_Engagement
	                },
	                debugData: {
	                    Tag: "UnhandledError",
	                    Level: DebugPriorityLevel_1.default.Normal,
	                    Message: event.data ? JSON.stringify(event.data) : "no_EventData",
	                    Misc: "",
	                    ClientTime: event.startTime
	                }
	            }];
	    }
	    function _processRequireJSErrorEvent(event) {
	        var logData = {};
	        var name = "RequireJSError";
	        var errorData;
	        var errorMessage;
	        if (event.data) {
	            // clone all properties so that we can omit 'message' in JSON
	            errorData = {};
	            for (var key in event.data) {
	                if (key !== "message") {
	                    errorData[key] = event.data[key];
	                }
	                else {
	                    errorMessage = event.data[key];
	                }
	            }
	        }
	        logData.userEngagementData = {
	            EngagementName: name,
	            Duration: 0,
	            LogType: 0,
	            ClientTime: event.startTime,
	            Source: SOURCE_V2_Engagement
	        };
	        logData.debugData = {
	            Tag: name,
	            Level: DebugPriorityLevel_1.default.Normal,
	            Message: errorMessage ? errorMessage : "no_ErrorMessage",
	            Misc: errorData ? JSON.stringify(errorData) : "no_ErrorData",
	            ClientTime: event.startTime
	        };
	        return [logData];
	    }
	    function _processCaughtErrorEvent(event) {
	        var logData = {};
	        var name = "CaughtError";
	        if (QosError_event_1.QosError.isTypeOf(event)) {
	            if (event.data) {
	                var qosErrorData = event.data;
	                name = qosErrorData.name;
	                if (qosErrorData.resultCode) {
	                    name += "." + qosErrorData.resultCode;
	                }
	                name += _getResultTypeSuffix(qosErrorData.resultType);
	            }
	            else {
	                name = "QosErrorEvent.no_EventData";
	            }
	        }
	        else {
	            // log it once in the UserEngagement stream to count the hits
	            logData.userEngagementData = {
	                EngagementName: name,
	                Duration: 0,
	                LogType: 0,
	                ClientTime: event.startTime,
	                Source: SOURCE_V2_Engagement
	            };
	        }
	        // log it again in ReliabilityLog stream with data for debugging
	        var caughtErrorData = event.data ? event.data : null;
	        logData.debugData = {
	            Tag: name,
	            Level: DebugPriorityLevel_1.default.Normal,
	            Message: caughtErrorData && caughtErrorData.message ? caughtErrorData.message : "",
	            Misc: caughtErrorData && caughtErrorData.stack ? JSON.stringify(caughtErrorData.stack) : "",
	            ClientTime: event.startTime
	        };
	        return [logData];
	    }
	    function _processVerboseEvent(event) {
	        var logData = {};
	        var name = "Verbose";
	        if (event.data) {
	            var verboseData = event.data;
	            if (verboseData.name) {
	                name = verboseData.name + ".Verbose";
	            }
	        }
	        else {
	            name += ".no_EventData";
	        }
	        // log it in ReliabilityLog stream with data for debugging
	        logData.debugData = {
	            Tag: name,
	            Level: DebugPriorityLevel_1.default.Low,
	            Message: verboseData.message,
	            Misc: "",
	            ClientTime: event.startTime
	        };
	        return [logData];
	    }
	})(LogProcessor || (LogProcessor = {}));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = LogProcessor;


/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var SingleEventBase_1 = __webpack_require__(18);
	var Features_1 = __webpack_require__(21);
	var PLT = (function (_super) {
	    __extends(PLT, _super);
	    /**
	     * The PLT event constructor
	     * @param parent {IEvent} The optional parent for this event
	     */
	    function PLT(parent) {
	        _super.call(this, 'PLT,', 'PLT', parent);
	    }
	    /**
	     * This is true if the PLT event is enabled
	     */
	    PLT.enabled = function () {
	        return Features_1.default.isFeatureEnabled(PLT.samplingFeature);
	    };
	    /**
	     * This will create a single PLT event
	     * @param data {IPLTSingleSchema}
	     * -required name - The name of the PLT event
	     * -required w3cResponseEnd - Time to get the aspx from the server
	     * -required prefetchStart - Time it takes for our app to *start* prefetching
	     * -required deferredListDataRender - Time it takes for defered list data render from server
	     * -required appStart - Time it takes for our app to *start* running
	     * -required preRender - Time it takes for our app to make the relevant data fetch for this view
	     * -required dataFetch - Time it takes for our app to get data back from the server
	     * -required dataFetchServerTime - time the datafetch request spent on the server
	     * -required postRender - Time it takes from appDataFetchEnd to PLT
	     * -required render - Post render plus pre render
	     * -required plt - Time from fetchStart to plt
	     * -required pltWithUnload - Time from navigationStart to plt
	     * -required httpRequests - The count of http request till plt
	     * -required appCacheHit - Whether this page load is served from appCache
	     * @param parent {IEvent} The optional parent for this event
	     */
	    PLT.logData = function (data, parent) {
	        return SingleEventBase_1.SingleEventBase._logData(PLT, data, parent);
	    };
	    /**
	     * This is true when PLT event is enabled
	     */
	    PLT.prototype.isEnabled = function () {
	        return Features_1.default.isFeatureEnabled(PLT.samplingFeature);
	    };
	    PLT.prototype.setSingleData = function (data) {
	        this.data.name = this.cleanString(data.name);
	        this.data.w3cResponseEnd = data.w3cResponseEnd;
	        this.data.prefetchStart = data.prefetchStart;
	        this.data.deferredListDataRender = data.deferredListDataRender;
	        this.data.appStart = data.appStart;
	        this.data.preRender = data.preRender;
	        this.data.dataFetch = data.dataFetch;
	        this.data.dataFetchServerTime = data.dataFetchServerTime;
	        this.data.postRender = data.postRender;
	        this.data.render = data.render;
	        this.data.plt = data.plt;
	        this.data.pltWithUnload = data.pltWithUnload;
	        this.data.httpRequests = data.httpRequests;
	        this.data.appCacheHit = data.appCacheHit;
	    };
	    /**
	     * The name of the PLT event
	     */
	    PLT.fullName = 'PLT,';
	    /**
	     * The short name of the PLT event
	     */
	    PLT.shortName = 'PLT';
	    /**
	     * This is true if the PLT event is enabled
	     */
	    PLT.metadata = {
	        name: {
	            type: "String",
	            definedInName: "PLT",
	            definedInFullName: "PLT,",
	            isKey: true,
	            isMetric: false
	        },
	        w3cResponseEnd: {
	            type: "Number",
	            definedInName: "PLT",
	            definedInFullName: "PLT,",
	            isMetric: true
	        },
	        prefetchStart: {
	            type: "Number",
	            definedInName: "PLT",
	            definedInFullName: "PLT,",
	            isMetric: true
	        },
	        deferredListDataRender: {
	            type: "Number",
	            definedInName: "PLT",
	            definedInFullName: "PLT,",
	            isMetric: true
	        },
	        appStart: {
	            type: "Number",
	            definedInName: "PLT",
	            definedInFullName: "PLT,",
	            isMetric: true
	        },
	        preRender: {
	            type: "Number",
	            definedInName: "PLT",
	            definedInFullName: "PLT,",
	            isMetric: true
	        },
	        dataFetch: {
	            type: "Number",
	            definedInName: "PLT",
	            definedInFullName: "PLT,",
	            isMetric: true
	        },
	        dataFetchServerTime: {
	            type: "Number",
	            definedInName: "PLT",
	            definedInFullName: "PLT,",
	            isMetric: true
	        },
	        postRender: {
	            type: "Number",
	            definedInName: "PLT",
	            definedInFullName: "PLT,",
	            isMetric: true
	        },
	        render: {
	            type: "Number",
	            definedInName: "PLT",
	            definedInFullName: "PLT,",
	            isMetric: true
	        },
	        plt: {
	            type: "Number",
	            definedInName: "PLT",
	            definedInFullName: "PLT,",
	            isMetric: true
	        },
	        pltWithUnload: {
	            type: "Number",
	            definedInName: "PLT",
	            definedInFullName: "PLT,",
	            isMetric: true
	        },
	        httpRequests: {
	            type: "Number",
	            definedInName: "PLT",
	            definedInFullName: "PLT,",
	            isMetric: true
	        },
	        appCacheHit: {
	            type: "Boolean",
	            definedInName: "PLT",
	            definedInFullName: "PLT,",
	            isMetric: false
	        }
	    };
	    /**
	     * The sampling feature for the PLT event
	     */
	    PLT.samplingFeature = { ODB: true, ODC: 'PLTLoggingSampling', Fallback: false };
	    return PLT;
	}(SingleEventBase_1.SingleEventBase));
	exports.PLT = PLT;
	PLT.prototype.metadata = PLT.metadata;
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = PLT;


/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var SingleEventBase_1 = __webpack_require__(18);
	var UnhandledError = (function (_super) {
	    __extends(UnhandledError, _super);
	    /**
	     * The UnhandledError event constructor
	     * @param parent {IEvent} The optional parent for this event
	     */
	    function UnhandledError(parent) {
	        _super.call(this, 'UnhandledError,', 'UnhandledError', parent);
	    }
	    /**
	     * This is true if the UnhandledError event is enabled
	     */
	    UnhandledError.enabled = function () {
	        return true;
	    };
	    /**
	     * This will create a single UnhandledError event
	     * @param data {IUnhandledErrorSingleSchema}
	     * -required message - This is the error message returned during the window.onerror handler
	     * -required stack - This is the stack trace of the error returned during the window.onerror handler, this is not available in all browsers and may only show up in certain ones (IEs)
	     * -required builtStack - This is the manually built stack trace of the unhandled exception
	     * -required line - This is the js line the unhandled exception happened on
	     * -required col - This is the js column the unhandled exception happened on
	     * -required url - This url of the js file that errored
	     * @param parent {IEvent} The optional parent for this event
	     */
	    UnhandledError.logData = function (data, parent) {
	        return SingleEventBase_1.SingleEventBase._logData(UnhandledError, data, parent);
	    };
	    /**
	     * This is false when UnhandledError event does not require a parent event
	     */
	    UnhandledError.prototype.requiresParent = function () {
	        return false;
	    };
	    /**
	     * This is true when UnhandledError event is a critical event
	     */
	    UnhandledError.prototype.isCritical = function () {
	        return true;
	    };
	    UnhandledError.prototype.setSingleData = function (data) {
	        this.data.message = this.cleanString(data.message);
	        this.data.stack = this.cleanString(data.stack);
	        this.data.builtStack = this.cleanString(data.builtStack);
	        this.data.line = data.line;
	        this.data.col = data.col;
	        this.data.url = this.cleanString(data.url);
	    };
	    /**
	     * The name of the UnhandledError event
	     */
	    UnhandledError.fullName = 'UnhandledError,';
	    /**
	     * The short name of the UnhandledError event
	     */
	    UnhandledError.shortName = 'UnhandledError';
	    /**
	     * This is true if the UnhandledError event is enabled
	     */
	    UnhandledError.metadata = {
	        message: {
	            type: "String",
	            definedInName: "UnhandledError",
	            definedInFullName: "UnhandledError,",
	            isMetric: false
	        },
	        stack: {
	            type: "String",
	            definedInName: "UnhandledError",
	            definedInFullName: "UnhandledError,",
	            isMetric: false
	        },
	        builtStack: {
	            type: "String",
	            definedInName: "UnhandledError",
	            definedInFullName: "UnhandledError,",
	            isMetric: false
	        },
	        line: {
	            type: "Number",
	            definedInName: "UnhandledError",
	            definedInFullName: "UnhandledError,",
	            isMetric: true
	        },
	        col: {
	            type: "Number",
	            definedInName: "UnhandledError",
	            definedInFullName: "UnhandledError,",
	            isMetric: true
	        },
	        url: {
	            type: "String",
	            definedInName: "UnhandledError",
	            definedInFullName: "UnhandledError,",
	            isMetric: false
	        },
	        unMinStack: {
	            type: "Object",
	            definedInName: "UnhandledError",
	            definedInFullName: "UnhandledError,",
	            isMetric: false
	        }
	    };
	    return UnhandledError;
	}(SingleEventBase_1.SingleEventBase));
	exports.UnhandledError = UnhandledError;
	UnhandledError.prototype.metadata = UnhandledError.metadata;
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = UnhandledError;


/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var SingleEventBase_1 = __webpack_require__(18);
	var RequireJSError = (function (_super) {
	    __extends(RequireJSError, _super);
	    /**
	     * The RequireJSError event constructor
	     * @param parent {IEvent} The optional parent for this event
	     */
	    function RequireJSError(parent) {
	        _super.call(this, 'RequireJSError,', 'RequireJSError', parent);
	    }
	    /**
	     * This is true if the RequireJSError event is enabled
	     */
	    RequireJSError.enabled = function () {
	        return true;
	    };
	    /**
	     * This will create a single RequireJSError event
	     * @param data {IRequireJSErrorSingleSchema}
	     * -required message - This is the error message returned during the window.onerror handler
	     * -required requireModules - This is the array of required modules
	     * -required requireType - This is the require error type
	     * -required stack - This is the stack trace of the error returned during the window.onerror handler
	     * @param parent {IEvent} The optional parent for this event
	     */
	    RequireJSError.logData = function (data, parent) {
	        return SingleEventBase_1.SingleEventBase._logData(RequireJSError, data, parent);
	    };
	    /**
	     * This is false when RequireJSError event does not require a parent event
	     */
	    RequireJSError.prototype.requiresParent = function () {
	        return false;
	    };
	    /**
	     * This is true when RequireJSError event is a critical event
	     */
	    RequireJSError.prototype.isCritical = function () {
	        return true;
	    };
	    RequireJSError.prototype.setSingleData = function (data) {
	        this.data.message = this.cleanString(data.message);
	        this.data.requireModules = data.requireModules;
	        this.data.requireType = this.cleanString(data.requireType);
	        this.data.stack = this.cleanString(data.stack);
	    };
	    /**
	     * The name of the RequireJSError event
	     */
	    RequireJSError.fullName = 'RequireJSError,';
	    /**
	     * The short name of the RequireJSError event
	     */
	    RequireJSError.shortName = 'RequireJSError';
	    /**
	     * This is true if the RequireJSError event is enabled
	     */
	    RequireJSError.metadata = {
	        message: {
	            type: "String",
	            definedInName: "RequireJSError",
	            definedInFullName: "RequireJSError,",
	            isMetric: false
	        },
	        requireModules: {
	            type: "Array",
	            definedInName: "RequireJSError",
	            definedInFullName: "RequireJSError,",
	            isMetric: false
	        },
	        requireType: {
	            type: "String",
	            definedInName: "RequireJSError",
	            definedInFullName: "RequireJSError,",
	            isMetric: false
	        },
	        stack: {
	            type: "String",
	            definedInName: "RequireJSError",
	            definedInFullName: "RequireJSError,",
	            isMetric: false
	        },
	        unMinStack: {
	            type: "Object",
	            definedInName: "RequireJSError",
	            definedInFullName: "RequireJSError,",
	            isMetric: false
	        }
	    };
	    return RequireJSError;
	}(SingleEventBase_1.SingleEventBase));
	exports.RequireJSError = RequireJSError;
	RequireJSError.prototype.metadata = RequireJSError.metadata;
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = RequireJSError;


/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var SingleEventBase_1 = __webpack_require__(18);
	var RUMOneDataUpload = (function (_super) {
	    __extends(RUMOneDataUpload, _super);
	    /**
	     * The RUMOneDataUpload event constructor
	     * @param parent {IEvent} The optional parent for this event
	     */
	    function RUMOneDataUpload(parent) {
	        _super.call(this, 'RUMOneDataUpload,', 'RUMOneDataUpload', parent);
	    }
	    /**
	     * This is true if the RUMOneDataUpload event is enabled
	     */
	    RUMOneDataUpload.enabled = function () {
	        return true;
	    };
	    /**
	     * This will create a single RUMOneDataUpload event
	     * @param data {IRUMOneDataUploadSingleSchema}
	     * -required streamName - SLAPI stream name the data will be logged to, must be either RUMOne or RUMOneErrors
	     * -required dictionary - Data of the RUMOne or RUMOneErrors
	     * @param parent {IEvent} The optional parent for this event
	     */
	    RUMOneDataUpload.logData = function (data, parent) {
	        return SingleEventBase_1.SingleEventBase._logData(RUMOneDataUpload, data, parent);
	    };
	    RUMOneDataUpload.prototype.setSingleData = function (data) {
	        this.data.streamName = this.cleanString(data.streamName);
	        this.data.dictionary = data.dictionary;
	    };
	    /**
	     * The name of the RUMOneDataUpload event
	     */
	    RUMOneDataUpload.fullName = 'RUMOneDataUpload,';
	    /**
	     * The short name of the RUMOneDataUpload event
	     */
	    RUMOneDataUpload.shortName = 'RUMOneDataUpload';
	    /**
	     * This is true if the RUMOneDataUpload event is enabled
	     */
	    RUMOneDataUpload.metadata = {
	        streamName: {
	            type: "String",
	            definedInName: "RUMOneDataUpload",
	            definedInFullName: "RUMOneDataUpload,",
	            isMetric: false
	        },
	        dictionary: {
	            type: "Object",
	            definedInName: "RUMOneDataUpload",
	            definedInFullName: "RUMOneDataUpload,",
	            isMetric: false
	        }
	    };
	    return RUMOneDataUpload;
	}(SingleEventBase_1.SingleEventBase));
	exports.RUMOneDataUpload = RUMOneDataUpload;
	RUMOneDataUpload.prototype.metadata = RUMOneDataUpload.metadata;
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = RUMOneDataUpload;


/***/ },
/* 44 */
/***/ function(module, exports) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var DebugPriorityLevel;
	(function (DebugPriorityLevel) {
	    DebugPriorityLevel[DebugPriorityLevel["Low"] = 0] = "Low";
	    DebugPriorityLevel[DebugPriorityLevel["Normal"] = 1] = "Normal";
	})(DebugPriorityLevel || (DebugPriorityLevel = {}));
	;
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = DebugPriorityLevel;


/***/ },
/* 45 */
/***/ function(module, exports) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var APICallPerformanceData = (function () {
	    function APICallPerformanceData(url, duration, correlationid, status, startTime, endTime, name) {
	        this.url = url;
	        this.duration = duration;
	        this.correlationId = correlationid;
	        this.status = status;
	        this.startTime = startTime;
	        this.endTime = endTime;
	        this.name = name;
	    }
	    return APICallPerformanceData;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = APICallPerformanceData;


/***/ },
/* 46 */
/***/ function(module, exports) {

	"use strict";
	var ControlPerformanceData = (function () {
	    function ControlPerformanceData(controlId, startTime, endTime, renderTimeCalculator, renderTimeRequiredDataChecker) {
	        this.controlId = controlId;
	        this.startTime = startTime;
	        this.endTime = endTime;
	        this.renderTimeCalculator = renderTimeCalculator;
	        this.renderTimeRequiredDataChecker = renderTimeRequiredDataChecker;
	    }
	    return ControlPerformanceData;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = ControlPerformanceData;


/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var ErrorHelper_1 = __webpack_require__(25);
	/** An instance of EventGroup allows anything with a handle to it to trigger events on it.
	 *  If the target is an HTMLElement, the event will be attached to the element and can be
	 *  triggered as usual (like clicking for onclick).
	 *  The event can be triggered by calling EventGroup.raise() here. If the target is an
	 *  HTMLElement, the event gets raised and is handled by the browser. Otherwise, it gets
	 *  handled here in EventGroup, and the handler is called in the context of the parent
	 *  (which is passed in in the constructor).
	 */
	var EventGroup = (function () {
	    /** parent: the context in which events attached to non-HTMLElements are called */
	    function EventGroup(parent) {
	        this._id = EventGroup._uniqueId++;
	        this._parent = parent;
	        this._eventRecords = [];
	    }
	    /** For IE8, bubbleEvent is ignored here and must be dealt with by the handler.
	     *  Events raised here by default have bubbling set to false and cancelable set to true.
	     *  This applies also to built-in events being raised manually here on HTMLElements,
	     *  which may lead to unexpected behavior if it differs from the defaults.
	     */
	    EventGroup.raise = function (target, eventName, eventArgs, bubbleEvent) {
	        var retVal;
	        if (EventGroup._isElement(target)) {
	            if (document.createEvent) {
	                var ev = document.createEvent('HTMLEvents');
	                ev.initEvent(eventName, bubbleEvent, true);
	                ev['args'] = eventArgs;
	                retVal = target.dispatchEvent(ev);
	            }
	            else if (document['createEventObject']) {
	                var evObj = document['createEventObject'](eventArgs);
	                // cannot set cancelBubble on evObj, fireEvent will overwrite it
	                target.fireEvent("on" + eventName, evObj);
	            }
	        }
	        else {
	            while (target && retVal !== false) {
	                var events = target.__events__;
	                var eventRecords = events ? events[eventName] : null;
	                for (var id in eventRecords) {
	                    var eventRecordList = eventRecords[id];
	                    for (var listIndex = 0; retVal !== false && listIndex < eventRecordList.length; listIndex++) {
	                        var record = eventRecordList[listIndex];
	                        if (record.objectCallback) {
	                            retVal = record.objectCallback.call(record.parent, eventArgs);
	                        }
	                    }
	                }
	                // If the target has a parent, bubble the event up.
	                target = bubbleEvent ? target.parent : null;
	            }
	        }
	        return retVal;
	    };
	    EventGroup.isObserved = function (target, eventName) {
	        var events = target && target.__events__;
	        return !!events && !!events[eventName];
	    };
	    /** Check to see if the target has declared support of the given event. */
	    EventGroup.isDeclared = function (target, eventName) {
	        var declaredEvents = target && target.__declaredEvents;
	        return !!declaredEvents && !!declaredEvents[eventName];
	    };
	    EventGroup.stopPropagation = function (event) {
	        if (event.stopPropagation) {
	            event.stopPropagation();
	        }
	        else {
	            event.cancelBubble = true;
	        }
	    };
	    EventGroup._isElement = function (target) {
	        return !!target && (target instanceof HTMLElement || target.addEventListener);
	    };
	    EventGroup.prototype.dispose = function () {
	        if (!this._isDisposed) {
	            this._isDisposed = true;
	            this.off();
	            this._parent = null;
	        }
	    };
	    /** On the target, attach a set of events, where the events object is a name to function mapping. */
	    EventGroup.prototype.onAll = function (target, events, useCapture) {
	        for (var eventName in events) {
	            this.on(target, eventName, events[eventName], useCapture);
	        }
	    };
	    /** On the target, attach an event whose handler will be called in the context of the parent
	     * of this instance of EventGroup.
	     */
	    EventGroup.prototype.on = function (target, eventName, callback, useCapture) {
	        var _this = this;
	        if (eventName.indexOf(',') > -1) {
	            var events = eventName.split(/[ ,]+/);
	            for (var i = 0; i < events.length; i++) {
	                this.on(target, events[i], callback, useCapture);
	            }
	        }
	        else {
	            var parent = this._parent;
	            var eventRecord = {
	                target: target,
	                eventName: eventName,
	                parent: parent,
	                callback: callback,
	                objectCallback: null,
	                elementCallback: null,
	                useCapture: useCapture
	            };
	            // Initialize and wire up the record on the target, so that it can call the callback if the event fires.
	            var events_1 = (target.__events__ = target.__events__ || {});
	            events_1[eventName] = events_1[eventName] || {
	                count: 0
	            };
	            events_1[eventName][this._id] = events_1[eventName][this._id] || [];
	            events_1[eventName][this._id].push(eventRecord);
	            events_1[eventName].count++;
	            if (EventGroup._isElement(target)) {
	                var processElementEvent = function () {
	                    var args = [];
	                    for (var _i = 0; _i < arguments.length; _i++) {
	                        args[_i - 0] = arguments[_i];
	                    }
	                    if (_this._isDisposed) {
	                        return;
	                    }
	                    try {
	                        var result = callback.apply(parent, args);
	                        if (result === false && args[0] && args[0].preventDefault) {
	                            var e = args[0];
	                            e.preventDefault();
	                            e.cancelBubble = true;
	                        }
	                    }
	                    catch (e) {
	                        ErrorHelper_1.default.log(e);
	                    }
	                    return result;
	                };
	                eventRecord.elementCallback = processElementEvent;
	                if (target.addEventListener) {
	                    /* tslint:disable:ban-native-functions */
	                    target.addEventListener(eventName, processElementEvent, useCapture);
	                }
	                else if (target.attachEvent) {
	                    target.attachEvent("on" + eventName, processElementEvent);
	                }
	            }
	            else {
	                var processObjectEvent = function () {
	                    var args = [];
	                    for (var _i = 0; _i < arguments.length; _i++) {
	                        args[_i - 0] = arguments[_i];
	                    }
	                    if (_this._isDisposed) {
	                        return;
	                    }
	                    return callback.apply(parent, args);
	                };
	                eventRecord.objectCallback = processObjectEvent;
	            }
	            // Remember the record locally, so that it can be removed.
	            this._eventRecords.push(eventRecord);
	        }
	    };
	    EventGroup.prototype.off = function (target, eventName, callback, useCapture) {
	        for (var i = 0; i < this._eventRecords.length; i++) {
	            var eventRecord = this._eventRecords[i];
	            if ((!target || target === eventRecord.target) &&
	                (!eventName || eventName === eventRecord.eventName) &&
	                (!callback || callback === eventRecord.callback) &&
	                ((typeof useCapture !== 'boolean') || useCapture === eventRecord.useCapture)) {
	                var events = eventRecord.target.__events__;
	                var targetArrayLookup = events[eventRecord.eventName];
	                var targetArray = targetArrayLookup ? targetArrayLookup[this._id] : null;
	                // We may have already target's entries, so check for null.
	                if (targetArray) {
	                    if (targetArray.length === 1 || !callback) {
	                        targetArrayLookup.count -= targetArray.length;
	                        delete events[eventRecord.eventName][this._id];
	                    }
	                    else {
	                        targetArrayLookup.count--;
	                        targetArray.splice(targetArray.indexOf(eventRecord), 1);
	                    }
	                    if (!targetArrayLookup.count) {
	                        delete events[eventRecord.eventName];
	                    }
	                }
	                if (eventRecord.elementCallback) {
	                    if (eventRecord.target.removeEventListener) {
	                        eventRecord.target.removeEventListener(eventRecord.eventName, eventRecord.elementCallback, eventRecord.useCapture);
	                    }
	                    else if (eventRecord.target.detachEvent) {
	                        eventRecord.target.detachEvent("on" + eventRecord.eventName, eventRecord.elementCallback);
	                    }
	                }
	                this._eventRecords.splice(i--, 1);
	            }
	        }
	    };
	    /** Trigger the given event in the context of this instance of EventGroup. */
	    EventGroup.prototype.raise = function (eventName, eventArgs, bubbleEvent) {
	        return EventGroup.raise(this._parent, eventName, eventArgs, bubbleEvent);
	    };
	    /** Declare an event as being supported by this instance of EventGroup. */
	    EventGroup.prototype.declare = function (event) {
	        var declaredEvents = this._parent.__declaredEvents = this._parent.__declaredEvents || {};
	        if (typeof event === 'string') {
	            declaredEvents[event] = true;
	        }
	        else {
	            for (var i = 0; i < event.length; i++) {
	                declaredEvents[event[i]] = true;
	            }
	        }
	    };
	    EventGroup._uniqueId = 0;
	    return EventGroup;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = EventGroup;


/***/ },
/* 48 */
/***/ function(module, exports) {

	"use strict";
	// OneDrive:IgnoreCodeCoverage
	var PageTransitionType;
	(function (PageTransitionType) {
	    PageTransitionType[PageTransitionType["none"] = 0] = "none";
	    PageTransitionType[PageTransitionType["fullPageLoad"] = 4] = "fullPageLoad";
	})(PageTransitionType || (PageTransitionType = {}));
	;
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = PageTransitionType;


/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * This file was originally ported from WinJS.
	 */
	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Async_1 = __webpack_require__(30);
	var EventGroup_1 = __webpack_require__(47);
	var async = new Async_1.default();
	function doneHandler(value) {
	    "use strict";
	    async.setImmediate(function () {
	        throw value;
	    });
	}
	var errorET = "error";
	var canceledName = "Canceled";
	var events;
	//
	// Global error counter, for each error which enters the system we increment this once and then
	// the error number travels with the error as it traverses the tree of potential handlers.
	//
	// When someone has registered to be told about error [using EventGroup.on(Promise, 'error')] promises
	// which are in error will get tagged with a ._errorId field. This tagged field is the
	// contract by which nested promises with errors will be identified as chaining for the
	// purposes of the callonerror semantics. If a nested promise in error is encountered without
	// a ._errorId it will be assumed to be foreign and treated as an interop boundary and
	// a new error id will be minted.
	//
	var error_number = 1;
	;
	var state_created, // -> working
	state_working, // -> error | error_notify | success | success_notify | canceled | waiting
	state_waiting, // -> error | error_notify | success | success_notify | waiting_canceled
	state_waiting_canceled, // -> error | error_notify | success | success_notify | canceling
	state_canceled, // -> error | error_notify | success | success_notify | canceling
	state_canceling, // -> error_notify
	state_success_notify, // -> success
	state_success, // -> .
	state_error_notify, // -> error
	state_error; // -> .
	// Noop function, used in the various states to indicate that they don't support a given
	// message. Named with the somewhat cute name '_' because it reads really well in the states.
	function _() {
	    "use strict";
	}
	// Initial state
	//
	state_created = {
	    name: "created",
	    enter: function (promise) {
	        promise._setState(state_working);
	    },
	    cancel: _,
	    done: _,
	    then: _,
	    _completed: _,
	    _error: _,
	    _notify: _,
	    _setCompleteValue: _,
	    _setErrorValue: _
	};
	// Ready state, waiting for a message (completed/error), able to be canceled
	//
	state_working = {
	    name: "working",
	    enter: _,
	    cancel: function (promise) {
	        promise._setState(state_canceled);
	    },
	    done: done,
	    then: then,
	    _completed: completed,
	    _error: error,
	    _notify: _,
	    _setCompleteValue: setCompleteValue,
	    _setErrorValue: setErrorValue
	};
	// Waiting state, if a promise is completed with a value which is itself a promise
	// (has a then() method) it signs up to be informed when that child promise is
	// fulfilled at which point it will be fulfilled with that value.
	//
	state_waiting = {
	    name: "waiting",
	    enter: function (promise) {
	        var waitedUpon = promise._value;
	        // We can special case our own intermediate promises which are not in a
	        //  terminal state by just pushing this promise as a listener without
	        //  having to create new indirection functions
	        if (waitedUpon instanceof ThenPromise &&
	            waitedUpon._state !== state_error &&
	            waitedUpon._state !== state_success) {
	            pushListener(waitedUpon, { promise: promise });
	        }
	        else {
	            var error_1 = function (value) {
	                if (waitedUpon._errorId) {
	                    promise._chainedError(value, waitedUpon);
	                }
	                else {
	                    // Because this is an interop boundary we want to indicate that this
	                    //  error has been handled by the promise infrastructure before we
	                    //  begin a new handling chain.
	                    //
	                    callonerror(promise, value, detailsForHandledError, waitedUpon, error_1);
	                    promise._error(value);
	                }
	            };
	            error_1.handlesOnError = true;
	            waitedUpon.then(promise._completed.bind(promise), error_1);
	        }
	    },
	    cancel: function (promise) {
	        promise._setState(state_waiting_canceled);
	    },
	    done: done,
	    then: then,
	    _completed: completed,
	    _error: error,
	    _notify: _,
	    _setCompleteValue: setCompleteValue,
	    _setErrorValue: setErrorValue
	};
	// Waiting canceled state, when a promise has been in a waiting state and receives a
	// request to cancel its pending work it will forward that request to the child promise
	// and then waits to be informed of the result. This promise moves itself into the
	// canceling state but understands that the child promise may instead push it to a
	// different state.
	//
	state_waiting_canceled = {
	    name: "waiting_canceled",
	    enter: function (promise) {
	        // Initiate a transition to canceling. Triggering a cancel on the promise
	        // that we are waiting upon may result in a different state transition
	        // before the state machine pump runs again.
	        promise._setState(state_canceling);
	        var waitedUpon = promise._value;
	        if (waitedUpon.cancel) {
	            waitedUpon.cancel();
	        }
	    },
	    cancel: _,
	    done: done,
	    then: then,
	    _completed: completed,
	    _error: error,
	    _notify: _,
	    _setCompleteValue: setCompleteValue,
	    _setErrorValue: setErrorValue
	};
	// Canceled state, moves to the canceling state and then tells the promise to do
	// whatever it might need to do on cancelation.
	//
	state_canceled = {
	    name: "canceled",
	    enter: function (promise) {
	        // Initiate a transition to canceling. The _cancelAction may change the state
	        // before the state machine pump runs again.
	        promise._setState(state_canceling);
	        promise._cancelAction();
	    },
	    cancel: _,
	    done: done,
	    then: then,
	    _completed: completed,
	    _error: error,
	    _notify: _,
	    _setCompleteValue: setCompleteValue,
	    _setErrorValue: setErrorValue
	};
	// Canceling state, commits to the promise moving to an error state with an error
	// object whose 'name' and 'message' properties contain the string "Canceled"
	//
	state_canceling = {
	    name: "canceling",
	    enter: function (promise) {
	        var error = new Error(canceledName);
	        error.name = error.message;
	        error["_handled"] = true;
	        promise._value = error;
	        promise._setState(state_error_notify);
	    },
	    cancel: _,
	    done: _,
	    then: _,
	    _completed: _,
	    _error: _,
	    _notify: _,
	    _setCompleteValue: _,
	    _setErrorValue: _
	};
	// Success notify state, moves a promise to the success state and notifies all children
	//
	state_success_notify = {
	    name: "complete_notify",
	    enter: function (promise) {
	        promise.done = CompletePromise.prototype.done;
	        promise.then = CompletePromise.prototype.then;
	        if (promise._listeners) {
	            var queue = [promise];
	            var p = void 0;
	            while (queue.length) {
	                p = queue.shift();
	                p._state._notify(p, queue);
	            }
	        }
	        promise._setState(state_success);
	    },
	    cancel: _,
	    done: null,
	    then: null,
	    _completed: _,
	    _error: _,
	    _notify: notifySuccess,
	    _setCompleteValue: _,
	    _setErrorValue: _
	};
	// Success state, moves a promise to the success state and does NOT notify any children.
	// Some upstream promise is owning the notification pass.
	//
	state_success = {
	    name: "success",
	    enter: function (promise) {
	        promise.done = CompletePromise.prototype.done;
	        promise.then = CompletePromise.prototype.then;
	        promise._cleanupAction();
	    },
	    cancel: _,
	    done: null,
	    then: null,
	    _completed: _,
	    _error: _,
	    _notify: notifySuccess,
	    _setCompleteValue: _,
	    _setErrorValue: _
	};
	// Error notify state, moves a promise to the error state and notifies all children
	//
	state_error_notify = {
	    name: "error_notify",
	    enter: function (promise) {
	        promise.done = ErrorPromise.prototype.done;
	        promise.then = ErrorPromise.prototype.then;
	        if (promise._listeners) {
	            var queue = [promise];
	            var p = void 0;
	            while (queue.length) {
	                p = queue.shift();
	                p._state._notify(p, queue);
	            }
	        }
	        promise._setState(state_error);
	    },
	    cancel: _,
	    done: null,
	    then: null,
	    _completed: _,
	    _error: _,
	    _notify: notifyError,
	    _setCompleteValue: _,
	    _setErrorValue: _
	};
	// Error state, moves a promise to the error state and does NOT notify any children.
	// Some upstream promise is owning the notification pass.
	//
	state_error = {
	    name: "error",
	    enter: function (promise) {
	        promise.done = ErrorPromise.prototype.done;
	        promise.then = ErrorPromise.prototype.then;
	        promise._cleanupAction();
	    },
	    cancel: _,
	    done: null,
	    then: null,
	    _completed: _,
	    _error: _,
	    _notify: notifyError,
	    _setCompleteValue: _,
	    _setErrorValue: _
	};
	//
	// The statemachine implementation follows a very particular pattern, the states are specified
	// as static stateless bags of functions which are then indirected through the state machine
	// instance (a Promise). As such all of the functions on each state have the promise instance
	// passed to them explicitly as a parameter and the Promise instance members do a little
	// dance where they indirect through the state and insert themselves in the argument list.
	//
	// We could instead call directly through the promise states however then every caller
	// would have to remember to do things like pumping the state machine to catch state transitions.
	//
	//
	// Implementations of shared state machine code.
	//
	function completed(promise, value) {
	    "use strict";
	    var targetState;
	    if (value && typeof value === "object" && typeof value.then === "function") {
	        targetState = state_waiting;
	    }
	    else {
	        targetState = state_success_notify;
	    }
	    promise._value = value;
	    promise._setState(targetState);
	}
	function createErrorDetails(exception, error, promise, id, parent, handler) {
	    "use strict";
	    return {
	        exception: exception,
	        error: error,
	        promise: promise,
	        handler: handler,
	        id: id,
	        parent: parent
	    };
	}
	function detailsForHandledError(promise, errorValue, context, handler) {
	    "use strict";
	    var exception = context._isException;
	    var errorId = context._errorId;
	    return createErrorDetails(exception ? errorValue : null, exception ? null : errorValue, promise, errorId, context, handler);
	}
	function detailsForChainedError(promise, errorValue, context) {
	    "use strict";
	    var exception = context._isException;
	    var errorId = context._errorId;
	    setErrorInfo(promise, errorId, exception);
	    return createErrorDetails(exception ? errorValue : null, exception ? null : errorValue, promise, errorId, context);
	}
	function detailsForError(promise, errorValue) {
	    "use strict";
	    var errorId = ++error_number;
	    setErrorInfo(promise, errorId);
	    return createErrorDetails(null, errorValue, promise, errorId);
	}
	function detailsForException(promise, exceptionValue) {
	    "use strict";
	    var errorId = ++error_number;
	    setErrorInfo(promise, errorId, true);
	    return createErrorDetails(exceptionValue, null, promise, errorId);
	}
	function done(promise, onComplete, onError) {
	    "use strict";
	    pushListener(promise, { c: onComplete, e: onError });
	}
	function error(promise, value, onerrorDetails, context) {
	    "use strict";
	    promise._value = value;
	    callonerror(promise, value, onerrorDetails, context);
	    promise._setState(state_error_notify);
	}
	function notifySuccess(promise, queue) {
	    "use strict";
	    var value = promise._value;
	    var listeners = promise._listeners;
	    if (!listeners) {
	        return;
	    }
	    promise._listeners = null;
	    var i, len;
	    for (i = 0, len = Array.isArray(listeners) ? listeners.length : 1; i < len; i++) {
	        var listener = len === 1 ? listeners : listeners[i];
	        var onComplete = listener.c;
	        var target = listener.promise;
	        if (target) {
	            try {
	                target._setCompleteValue(onComplete ? onComplete(value) : value);
	            }
	            catch (ex) {
	                target._setExceptionValue(ex);
	            }
	            if (target._state !== state_waiting && target._listeners) {
	                queue.push(target);
	            }
	        }
	        else {
	            CompletePromise.prototype.done.call(promise, onComplete);
	        }
	    }
	}
	function notifyError(promise, queue) {
	    "use strict";
	    var value = promise._value;
	    var listeners = promise._listeners;
	    if (!listeners) {
	        return;
	    }
	    promise._listeners = null;
	    var i, len;
	    for (i = 0, len = Array.isArray(listeners) ? listeners.length : 1; i < len; i++) {
	        var listener = len === 1 ? listeners : listeners[i];
	        var onError = listener.e;
	        var target = listener.promise;
	        if (target) {
	            var asyncCallbackStarted = false;
	            try {
	                if (onError) {
	                    asyncCallbackStarted = true;
	                    if (!onError.handlesOnError) {
	                        callonerror(target, value, detailsForHandledError, promise, onError);
	                    }
	                    target._setCompleteValue(onError(value));
	                }
	                else {
	                    target._setChainedErrorValue(value, promise);
	                }
	            }
	            catch (ex) {
	                target._setExceptionValue(ex);
	            }
	            if (target._state !== state_waiting && target._listeners) {
	                queue.push(target);
	            }
	        }
	        else {
	            ErrorPromise.prototype.done.call(promise, null, onError);
	        }
	    }
	}
	function callonerror(promise, value, onerrorDetailsGenerator, context, handler) {
	    "use strict";
	    if (value instanceof Error && value.message === canceledName) {
	        return;
	    }
	    events.raise(errorET, onerrorDetailsGenerator(promise, value, context, handler));
	}
	function pushListener(promise, listener) {
	    "use strict";
	    var listeners = promise._listeners;
	    if (listeners) {
	        // We may have either a single listener (which will never be wrapped in an array)
	        // or 2+ listeners (which will be wrapped). Since we are now adding one more listener
	        // we may have to wrap the single listener before adding the second.
	        listeners = Array.isArray(listeners) ? listeners : [listeners];
	        listeners.push(listener);
	    }
	    else {
	        listeners = listener;
	    }
	    promise._listeners = listeners;
	}
	// The difference beween setCompleteValue()/setErrorValue() and complete()/error() is that setXXXValue() moves
	// a promise directly to the success/error state without starting another notification pass (because one
	// is already ongoing).
	function setErrorInfo(promise, errorId, isException) {
	    "use strict";
	    promise._isException = isException || false;
	    promise._errorId = errorId;
	}
	function setErrorValue(promise, value, onerrorDetails, context) {
	    "use strict";
	    promise._value = value;
	    callonerror(promise, value, onerrorDetails, context);
	    promise._setState(state_error);
	}
	function setCompleteValue(promise, value) {
	    "use strict";
	    var targetState;
	    if (value && typeof value === "object" && typeof value.then === "function") {
	        targetState = state_waiting;
	    }
	    else {
	        targetState = state_success;
	    }
	    promise._value = value;
	    promise._setState(targetState);
	}
	function then(promise, onComplete, onError) {
	    "use strict";
	    var result = new ThenPromise(promise);
	    pushListener(promise, { promise: result, c: onComplete, e: onError });
	    return result;
	}
	//
	// Slim promise implementations for already completed promises, these are created
	// under the hood on synchronous completion paths as well as by Promise.wrap
	// and Promise.wrapError.
	//
	var ErrorPromise = (function () {
	    function ErrorPromise(value, errorFunc) {
	        if (errorFunc === void 0) { errorFunc = detailsForError; }
	        this._value = value;
	        callonerror(this, value, errorFunc);
	    }
	    ErrorPromise.prototype.cancel = function () {
	        /* No-op */
	    };
	    ErrorPromise.prototype.done = function (unused, onError) {
	        var value = this._value;
	        if (onError) {
	            try {
	                if (!onError.handlesOnError) {
	                    callonerror(null, value, detailsForHandledError, this, onError);
	                }
	                var result = onError(value);
	                if (result && typeof result === "object" && typeof result.done === "function") {
	                    // If a promise is returned we need to wait on it.
	                    result.done();
	                }
	                return;
	            }
	            catch (ex) {
	                value = ex;
	            }
	        }
	        if (value instanceof Error && value.message === canceledName) {
	            // suppress cancel
	            return;
	        }
	        // force the exception to be thrown asyncronously to avoid any try/catch blocks
	        //
	        doneHandler(value);
	    };
	    ErrorPromise.prototype.then = function (unused, onError) {
	        // If the promise is already in a error state and no error handler is provided
	        // we optimize by simply returning the promise instead of creating a new one.
	        //
	        if (!onError) {
	            return this;
	        }
	        var result;
	        var value = this._value;
	        try {
	            if (!onError.handlesOnError) {
	                callonerror(null, value, detailsForHandledError, this, onError);
	            }
	            result = new CompletePromise(onError(value));
	        }
	        catch (ex) {
	            // If the value throw from the error handler is the same as the value
	            // provided to the error handler then there is no need for a new promise.
	            //
	            if (ex === value) {
	                result = this;
	            }
	            else {
	                result = new ExceptionPromise(ex);
	            }
	        }
	        return result;
	    };
	    return ErrorPromise;
	}());
	var ExceptionPromise = (function (_super) {
	    __extends(ExceptionPromise, _super);
	    function ExceptionPromise(value) {
	        _super.call(this, value, detailsForException);
	    }
	    return ExceptionPromise;
	}(ErrorPromise));
	var CompletePromise = (function () {
	    function CompletePromise(value) {
	        if (value && typeof value === "object" && typeof value.then === "function") {
	            var result = new ThenPromise(null);
	            result._setCompleteValue(value);
	            return result;
	        }
	        this._value = value;
	    }
	    CompletePromise.prototype.cancel = function () {
	        /* No-op */
	    };
	    CompletePromise.prototype.done = function (onComplete) {
	        if (!onComplete) {
	            return;
	        }
	        try {
	            var result = onComplete(this._value);
	            if (result && typeof result === "object" && typeof result.done === "function") {
	                result.done();
	            }
	        }
	        catch (ex) {
	            // force the exception to be thrown asynchronously to avoid any try/catch blocks
	            doneHandler(ex);
	        }
	    };
	    CompletePromise.prototype.then = function (onComplete) {
	        var resultPromise;
	        try {
	            // If the value returned from the completion handler is the same as the value
	            // provided to the completion handler then there is no need for a new promise.
	            //
	            var newValue = onComplete ? onComplete(this._value) : this._value;
	            resultPromise = newValue === this._value ? this : new CompletePromise(newValue);
	        }
	        catch (ex) {
	            resultPromise = new ExceptionPromise(ex);
	        }
	        return resultPromise;
	    };
	    return CompletePromise;
	}());
	function timeout(timeoutMS) {
	    "use strict";
	    var id;
	    return new Promise(function (c) {
	        if (timeoutMS) {
	            id = async.setTimeout(c, timeoutMS);
	        }
	        else {
	            async.setImmediate(c);
	        }
	    }, function () {
	        if (id) {
	            async.clearTimeout(id);
	        }
	    });
	}
	function timeoutWithPromise(timeout, promise) {
	    "use strict";
	    var cancelPromise = function () { promise.cancel(); };
	    var cancelTimeout = function () { timeout.cancel(); };
	    timeout.then(cancelPromise);
	    promise.then(cancelTimeout, cancelTimeout);
	    return promise;
	}
	var staticCanceledPromise;
	var Promise = (function () {
	    function Promise(init, oncancel) {
	        this._init(init, oncancel);
	    }
	    /**
	     * Returns a promise that is fulfilled when one of the input promises
	     * has been fulfilled.
	     */
	    Promise.any = function (values) {
	        return new Promise(function (complete, error) {
	            var keys = Object.keys(values);
	            if (keys.length === 0) {
	                complete();
	            }
	            var canceled = 0;
	            keys.forEach(function (key) {
	                Promise.as(values[key]).then(function () { complete({ key: key, value: values[key] }); }, function (e) {
	                    if (e instanceof Error && e.name === canceledName) {
	                        if ((++canceled) === keys.length) {
	                            complete(Promise.cancel);
	                        }
	                        return;
	                    }
	                    error({ key: key, value: values[key] });
	                });
	            });
	        }, function () {
	            var keys = Object.keys(values);
	            keys.forEach(function (key) {
	                var promise = Promise.as(values[key]);
	                if (typeof promise.cancel === "function") {
	                    promise.cancel();
	                }
	            });
	        });
	    };
	    Promise.as = function (value) {
	        var returnValue;
	        if (value && typeof value === "object" && typeof value.then === "function") {
	            returnValue = value;
	        }
	        else {
	            returnValue = new CompletePromise(value);
	        }
	        return returnValue;
	    };
	    Object.defineProperty(Promise, "cancel", {
	        get: function () {
	            return (staticCanceledPromise = staticCanceledPromise || new ErrorPromise(canceledName));
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Determines whether a value fulfills the promise contract.
	     */
	    Promise.is = function (value) {
	        return value && typeof value === "object" && typeof value.then === "function";
	    };
	    /**
	     * Determines whether an error value represents a promise cancellation.
	     */
	    Promise.isCanceled = function (e) {
	        return (e instanceof Error && e.name === canceledName);
	    };
	    Promise.all = function (values) {
	        return new Promise(function (complete, error) {
	            var keys = Object.keys(values);
	            var errors = Array.isArray(values) ? [] : {};
	            var results = Array.isArray(values) ? [] : {};
	            var undefineds = 0;
	            var pending = keys.length;
	            var argDone = function (key) {
	                if ((--pending) === 0) {
	                    var errorCount = Object.keys(errors).length;
	                    if (errorCount === 0) {
	                        complete(results);
	                    }
	                    else {
	                        var canceledCount_1 = 0;
	                        keys.forEach(function (key) {
	                            var e = errors[key];
	                            if (e instanceof Error && e.name === canceledName) {
	                                canceledCount_1++;
	                            }
	                        });
	                        if (canceledCount_1 === errorCount) {
	                            complete(Promise.cancel);
	                        }
	                        else {
	                            error(errors);
	                        }
	                    }
	                }
	            };
	            keys.forEach(function (key) {
	                var value = values[key];
	                if (value === undefined) {
	                    undefineds++;
	                }
	                else {
	                    Promise.then(value, function (value) { results[key] = value; argDone(key); }, function (value) { errors[key] = value; argDone(key); });
	                }
	            });
	            pending -= undefineds;
	            if (pending === 0) {
	                complete(results);
	                return;
	            }
	        }, function () {
	            Object.keys(values).forEach(function (key) {
	                var promise = Promise.as(values[key]);
	                if (typeof promise.cancel === "function") {
	                    promise.cancel();
	                }
	            });
	        });
	    };
	    Promise.then = function (value, onComplete, onError) {
	        return Promise.as(value).then(onComplete, onError);
	    };
	    Promise.thenEach = function (values, onComplete, onError) {
	        var result = Array.isArray(values) ? [] : {};
	        Object.keys(values).forEach(function (key) {
	            result[key] = Promise.as(values[key]).then(onComplete, onError);
	        });
	        return Promise.all(result);
	    };
	    Promise.serial = function (tasks) {
	        return tasks.reduce(function (previous, task) {
	            return previous.then(task);
	        }, Promise.wrap());
	    };
	    Promise.timeout = function (time, promise) {
	        var to = timeout(time);
	        return promise ? timeoutWithPromise(to, promise) : to;
	    };
	    Promise.wrap = function (value) {
	        var cp = new CompletePromise(value);
	        return cp;
	    };
	    /**
	     * Wraps a non-promise error value in a promise. You can use this function if you need
	     * to pass an error to a function that requires a promise.
	     */
	    Promise.wrapError = function (error) {
	        var ep = new ErrorPromise(error);
	        return ep;
	    };
	    /**
	     * Attempts to cancel the fulfillment of a promised value. If the promise hasn't
	     * already been fulfilled and cancellation is supported, the promise enters
	     * the error state with a value of Error("Canceled").
	     */
	    Promise.prototype.cancel = function () {
	        this._state.cancel(this);
	        this._run();
	    };
	    /**
	     * Allows you to specify the work to be done on the fulfillment of the promised value,
	     * the error handling to be performed if the promise fails to fulfill
	     * a value.
	     *
	     * After the handlers have finished executing, this function throws any error that would have been returned
	     * from then() as a promise in the error state.
	     *
	     * @param onComplete The function to be called if the promise is fulfilled successfully with a value. The fulfilled value is passed as the single argument. If the value is null, the fulfilled value is returned. The value returned from the function becomes the fulfilled value of the promise returned by then. If an exception is thrown while executing the function, the promise returned by then moves into the error state.
	     * @param onError The function to be called if the promise is fulfilled with an error. The error is passed as the single argument. If it is null, the error is forwarded. The value returned from the function is the fulfilled value of the promise returned by then.
	     */
	    Promise.prototype.done = function (onComplete, onError) {
	        this._state.done(this, onComplete, onError);
	    };
	    Promise.prototype.then = function (onComplete, onError) {
	        return this._state.then(this, onComplete, onError);
	    };
	    Promise.prototype._init = function (init, oncancel) {
	        this._oncancel = oncancel;
	        this._setState(state_created);
	        this._run();
	        try {
	            var complete = this._completed.bind(this);
	            var error_2 = this._error.bind(this);
	            init(complete, error_2);
	        }
	        catch (ex) {
	            this._setExceptionValue(ex);
	        }
	    };
	    Promise.prototype._cancelAction = function () {
	        if (this._oncancel) {
	            try {
	                this._oncancel();
	            }
	            catch (ex) { }
	        }
	    };
	    Promise.prototype._cleanupAction = function () {
	        this._oncancel = null;
	    };
	    Promise.prototype._chainedError = function (value, context) {
	        var result = this._state._error(this, value, detailsForChainedError, context);
	        this._run();
	        return result;
	    };
	    Promise.prototype._completed = function (value) {
	        var result = this._state._completed(this, value);
	        this._run();
	        return result;
	    };
	    Promise.prototype._error = function (value) {
	        var result = this._state._error(this, value, detailsForError);
	        this._run();
	        return result;
	    };
	    Promise.prototype._setState = function (state) {
	        this._nextState = state;
	    };
	    Promise.prototype._setCompleteValue = function (value) {
	        this._state._setCompleteValue(this, value);
	        this._run();
	    };
	    Promise.prototype._setChainedErrorValue = function (value, context) {
	        var result = this._state._setErrorValue(this, value, detailsForChainedError, context);
	        this._run();
	        return result;
	    };
	    Promise.prototype._setExceptionValue = function (value) {
	        var result = this._state._setErrorValue(this, value, detailsForException);
	        this._run();
	        return result;
	    };
	    Promise.prototype._run = function () {
	        while (this._nextState) {
	            this._state = this._nextState;
	            this._nextState = null;
	            this._state.enter(this);
	        }
	    };
	    return Promise;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = Promise;
	events = new EventGroup_1.default(Promise);
	events.declare(errorET);
	//
	// Internal implementation detail promise, ThenPromise is created when a promise needs
	// to be returned from a then() method.
	//
	var ThenPromise = (function (_super) {
	    __extends(ThenPromise, _super);
	    function ThenPromise(creator) {
	        _super.call(this);
	        this._creator = creator;
	        this._initThen();
	    }
	    ThenPromise.prototype._init = function () {
	        // Override to do nothing.
	    };
	    ThenPromise.prototype._cancelAction = function () {
	        if (this._creator) {
	            this._creator.cancel();
	        }
	    };
	    ThenPromise.prototype._cleanupAction = function () {
	        this._creator = null;
	    };
	    ThenPromise.prototype._initThen = function () {
	        this._setState(state_created);
	        this._run();
	    };
	    return ThenPromise;
	}(Promise));
	var SignalPromise = (function (_super) {
	    __extends(SignalPromise, _super);
	    function SignalPromise(cancel) {
	        _super.call(this);
	        this._oncancel = cancel;
	        this._initSignal();
	    }
	    SignalPromise.prototype._init = function () {
	        // Override to do nothing.
	    };
	    SignalPromise.prototype._cancelAction = function () {
	        if (this._oncancel) {
	            this._oncancel();
	        }
	    };
	    SignalPromise.prototype._cleanupAction = function () {
	        this._oncancel = null;
	    };
	    SignalPromise.prototype._initSignal = function () {
	        this._setState(state_created);
	        this._run();
	    };
	    return SignalPromise;
	}(Promise));
	exports.SignalPromise = SignalPromise;


/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Async_1 = __webpack_require__(30);
	var PageTransitionType_1 = __webpack_require__(48);
	var RUMOneSLAPI_1 = __webpack_require__(51);
	var RUMOneErrorsSLAPI_1 = __webpack_require__(52);
	var RUMOneDataUpload_event_1 = __webpack_require__(43);
	var PerformanceDataState;
	(function (PerformanceDataState) {
	    PerformanceDataState[PerformanceDataState["Incomplete"] = 1] = "Incomplete";
	    PerformanceDataState[PerformanceDataState["ReadyToUpload"] = 2] = "ReadyToUpload";
	    PerformanceDataState[PerformanceDataState["Uploaded"] = 3] = "Uploaded";
	    PerformanceDataState[PerformanceDataState["TimeOut"] = 4] = "TimeOut";
	})(PerformanceDataState || (PerformanceDataState = {}));
	var MARKER_PREFIX = "EUPL.";
	/**
	 * It is a new client side perf instrumentation, it logs more metrics, like scenario, api data, server request id, duration, etc in 1 single schema.
	 * It has server side usage DB and cosmos supports.
	 */
	var RUMOneLogger = (function () {
	    function RUMOneLogger(logFunc) {
	        this.async = new Async_1.default(this);
	        this.dataStartTime = Number((new Date()).getTime());
	        this.performanceData = null;
	        this.dataState = PerformanceDataState.Incomplete;
	        this.controls = [];
	        this.apis = [];
	        this.perfDataTimer = null;
	        this.expectedControls = [];
	        this.euplBreakDown = {};
	        this.serverMetrics = {};
	        this.isW3cTimingCollected = false;
	        this.isW3cResourceTimingCollected = false;
	        this.tempData = {};
	        this.markerIndex = 0;
	        this.performanceData = null;
	        this.loggingFunc = logFunc;
	        this.getPerformanceData();
	        this.setPerfDataTimer();
	    }
	    RUMOneLogger.isNullOrUndefined = function (item) {
	        return item === null || item === undefined;
	    };
	    /**
	     * RUMOneLogger.getRUMOneLogger: Use this method to get a singleton reference of RUMOneLogger
	     * with default parameters.
	     */
	    RUMOneLogger.getRUMOneLogger = function (logFunc) {
	        var loggingFunc = logFunc || (function (streamName, dictProperties) {
	            RUMOneDataUpload_event_1.RUMOneDataUpload.logData({ streamName: streamName, dictionary: dictProperties });
	        });
	        if (!RUMOneLogger.rumOneLogger) {
	            try {
	                RUMOneLogger.rumOneLogger = new RUMOneLogger(loggingFunc);
	            }
	            catch (e) {
	                // If RUMOneLogger fails, don't block UX
	                RUMOneLogger.rumOneLogger = null;
	            }
	        }
	        return RUMOneLogger.rumOneLogger;
	    };
	    RUMOneLogger.prototype.getPerformanceData = function () {
	        if (!this.performanceData) {
	            this.performanceData = new RUMOneSLAPI_1.default();
	            this.logMessageInConsole("RUMOne object initiated!");
	        }
	        return this.performanceData;
	    };
	    RUMOneLogger.prototype.resetLogger = function () {
	        this.dataStartTime = (new Date()).getTime();
	        this.dataState = PerformanceDataState.Incomplete;
	        this.isW3cTimingCollected = false;
	        this.isW3cResourceTimingCollected = false;
	        this.expectedControls = [];
	        this.controls = [];
	        this.apis = [];
	        this.tempData = {};
	        this.performanceData = null;
	        this.getPerformanceData();
	        this.clearPerfDataTimer();
	        this.setPerfDataTimer();
	        this.euplBreakDown = {};
	        this.serverMetrics = {};
	        this.logMessageInConsole("Reset performance Logger Done");
	        this.clearResourceTimings();
	        this.clearMarks();
	    };
	    RUMOneLogger.prototype.logPerformanceData = function (key, value) {
	        if (!key || !this.performanceData || !this.verifyPropertyMatchingSchema(key)) {
	            return;
	        }
	        this.getPerformanceData();
	        this.performanceData[key] = value;
	    };
	    RUMOneLogger.prototype.getPerformanceDataPropertyValue = function (key) {
	        if (!this.performanceData || !key || !this.verifyPropertyMatchingSchema(key)) {
	            return null;
	        }
	        return this.performanceData[key];
	    };
	    RUMOneLogger.prototype.verifyPropertyMatchingSchema = function (propertyName) {
	        var properties = this.getRUMOnePropertyNames(this.performanceData);
	        return properties.join().indexOf(propertyName) !== -1;
	    };
	    RUMOneLogger.prototype.addExpectedControl = function (control) {
	        if (this.expectedControls.indexOf(control) === -1) {
	            this.expectedControls.push(control);
	        }
	    };
	    RUMOneLogger.prototype.expectingControl = function (control) {
	        return this.expectedControls.indexOf(control) >= 0;
	    };
	    RUMOneLogger.prototype.writeServerCorrelationId = function (correlationId) {
	        if (!this.isCollected('ServerCorrelationId')) {
	            this.logPerformanceData('ServerCorrelationId', correlationId);
	        }
	    };
	    RUMOneLogger.prototype.writeServerUrl = function (url) {
	        if (!this.isCollected('ServerUrl')) {
	            var serverUrl = url || window.location.href;
	            this.logPerformanceData('ServerUrl', serverUrl);
	        }
	    };
	    RUMOneLogger.prototype.writeServerSideLatency = function (duration, iisLatency) {
	        if (!this.isCollected('ServerRequestDuration')) {
	            this.logPerformanceData('ServerRequestDuration', duration);
	            this.logPerformanceData('IISLatency', iisLatency);
	        }
	    };
	    RUMOneLogger.prototype.writeControlPerformanceData = function (controlData) {
	        if (controlData) {
	            var foundControl = this.controls.filter(function (control) {
	                return control.controlId === controlData.controlId;
	            });
	            if (foundControl.length === 0) {
	                this.controls.push(controlData);
	            }
	        }
	    };
	    RUMOneLogger.prototype.writeAPICallPerformanceData = function (apiData) {
	        if (apiData) {
	            this.apis.push(apiData);
	        }
	    };
	    RUMOneLogger.prototype.readAPICallPerformanceData = function () {
	        return this.apis;
	    };
	    RUMOneLogger.prototype.writeAppCache = function (appCache) {
	        if (!this.isCollected('AppCache')) {
	            this.logPerformanceData('AppCache', appCache);
	        }
	    };
	    RUMOneLogger.prototype.writePageTransitionType = function (pageTransitionType, overwrite) {
	        if ((!this.isCollected('PageTransitionType') || overwrite) && !RUMOneLogger.isNullOrUndefined(pageTransitionType) && (pageTransitionType === PageTransitionType_1.default.fullPageLoad || pageTransitionType === PageTransitionType_1.default.none)) {
	            this.logPerformanceData('PageTransitionType', pageTransitionType);
	        }
	    };
	    RUMOneLogger.prototype.writeScenarioId = function (scenarioId, overwrite) {
	        if (!this.isCollected('ScenarioId') || overwrite) {
	            this.logPerformanceData('ScenarioId', scenarioId);
	        }
	    };
	    RUMOneLogger.prototype.collectW3CPerfTimings = function () {
	        if (!this.isW3cTimingCollected) {
	            var w3cTimeStampNames = ['navigationStart', 'unloadEventStart', 'unloadEventEnd', 'fetchStart', 'redirectStart', 'redirectEnd', 'domainLookupStart', 'domainLookupEnd', 'connectStart', 'secureConnectionStart', 'connectEnd', 'requestStart', 'responseStart', 'responseEnd', 'domLoading', 'domComplete', 'loadEventStart', 'loadEventEnd'];
	            var perfTimingObject = this.getWindowPerfTimingObject();
	            if (perfTimingObject) {
	                for (var index = 0; index < w3cTimeStampNames.length; index++) {
	                    var w3cObject = perfTimingObject[w3cTimeStampNames[index]];
	                    if (w3cObject) {
	                        this.logPerformanceData(this.getW3cTimingName(w3cTimeStampNames[index]), Number(w3cObject));
	                    }
	                }
	                this.isW3cTimingCollected = true;
	            }
	        }
	    };
	    RUMOneLogger.prototype.collectW3cResourceTimings = function () {
	        if (!this.isW3cResourceTimingCollected && window.performance && window.performance.getEntriesByType) {
	            var allRequests = performance.getEntriesByType("resource");
	            var iFrames = document.getElementsByTagName("iframe");
	            for (var index = 0; index < iFrames.length; index++) {
	                var iFramePerformance = null;
	                try {
	                    iFramePerformance = iFrames[index].contentWindow.performance;
	                }
	                catch (e) {
	                }
	                if (iFramePerformance && iFramePerformance.getEntriesByType) {
	                    allRequests.concat(iFramePerformance.getEntriesByType("resource"));
	                }
	            }
	            var fromSources = {};
	            fromSources["SharePoint"] = function (element) { return /\.sharepoint\.com|\.spoppe\.com/i.test(element.name); }; //matching sharepoint.com or spoppe.com
	            fromSources["CDN"] = function (element) { return /(cdn(ppe)?|static(ppe)?)\.sharepointonline\.com|\.akamaihd\.net/i.test(element.name); }; //matching cdn(ppe)sharepointonline.com or adamaihd.net
	            fromSources["ThirdParty"] = function (element) { return !fromSources["SharePoint"](element) && !fromSources["CDN"](element); }; // all requests other than sharepoint requests or cdn requests
	            var types = {};
	            types["ASPX"] = function (element) { return /\.aspx/i.test(element.name); };
	            types["JS"] = function (element) { return /script/i.test(element.initiatorType); };
	            types["CSS"] = function (element) { return /link|css/i.test(element.initiatorType); };
	            types["IMG"] = function (element) { return /img/i.test(element.initiatorType); };
	            var sources = Object.keys(fromSources);
	            for (var index = 0; index < sources.length; index++) {
	                var source = sources[index];
	                var requests = this.categorizeResourceRequests(allRequests, {
	                    from: fromSources[source],
	                    requestType: null //match any type to get total request count for this source
	                });
	                this.logPerformanceData(source + "RequestCountTotal", requests.length); //SharePoint|CDN|ThirdParty resource request count
	                var typeKeys = Object.keys(types);
	                for (var typeIndex = 0; typeIndex < typeKeys.length; typeIndex++) {
	                    var type = typeKeys[typeIndex];
	                    this.logPerformanceData(source + "RequestCount" + type, this.categorizeResourceRequests(requests, {
	                        from: null,
	                        requestType: types[type]
	                    }).length); //SharePoint|CDN|ThirdParty ASPX resource request count
	                }
	                if (requests.length > 0) {
	                    this.logPerformanceData(source + "RequestDownloadTime", Math.round(requests.reduce(function (sum, currentVal) {
	                        return sum + currentVal.duration;
	                    }, 0) / requests.length)); //SharePoint|CDN|ThirdParty resource request average duration
	                    // log the file names of all resource requests in a JSON string. The output after processing will looks like:
	                    // [{name: "require-db6c47e2.js", startTime: 500, duration: 100},{name: "RenderListDataAsStream", startTime: 200, duration: 10}]
	                    // The raw resource name before this processing is "https://msft.spoppe.com/teams/SPGroups/_api/web/GetList(@listUrl)/RenderListDataAsStream?Paged=TRUE&p_FileLeafRef=test%2eurl&p_ID=213&PageFirstRow=121&View=6eab4254-2f2f-4086-91c0-549ae900cc93&@listUrl=%27%2Fteams%2FSPGroups%2FVNextDocLib%27"
	                    var files = JSON.stringify(requests.map(function (timing) {
	                        return {
	                            name: timing.name.split("/").map(function (urlToken) {
	                                return urlToken.split("?")[0];
	                            }).filter(function (urlToken) {
	                                return urlToken && urlToken.length > 0;
	                            }).slice(-1)[0].replace(/\(.*?\)/g, '()'),
	                            startTime: Math.round(timing.startTime),
	                            duration: Math.round(timing.duration)
	                        };
	                    }));
	                    this.logPerformanceData(source + "RequestNames", files);
	                }
	            }
	            this.isW3cResourceTimingCollected = true;
	        }
	    };
	    RUMOneLogger.prototype.saveTempData = function (key, value) {
	        this.tempData[key] = value;
	    };
	    RUMOneLogger.prototype.readTempData = function (key) {
	        return this.tempData[key];
	    };
	    RUMOneLogger.prototype.writeRenderTime = function (renderTime, overwrite) {
	        if (!this.isCollected('RenderTime') || overwrite) {
	            this.logPerformanceData('RenderTime', renderTime);
	        }
	    };
	    RUMOneLogger.prototype.writePreRenderTime = function (preRender) {
	        if (!this.isCollected('PreRender')) {
	            this.logPerformanceData('PreRender', preRender);
	        }
	    };
	    RUMOneLogger.prototype.writePostRenderTime = function (postRender) {
	        if (!this.isCollected('PostRender')) {
	            this.logPerformanceData('PostRender', postRender);
	        }
	    };
	    RUMOneLogger.prototype.writeDataFetchTime = function (dataFetch, overwrite) {
	        if (!this.isCollected('DataFetch') || overwrite) {
	            this.logPerformanceData('DataFetch', dataFetch);
	        }
	    };
	    RUMOneLogger.prototype.isRunning = function () {
	        return !(this.dataState === PerformanceDataState.Uploaded || this.dataState === PerformanceDataState.TimeOut);
	    };
	    RUMOneLogger.prototype.writeEUPLBreakdown = function (euplBreakdown, overwrite) {
	        if (euplBreakdown) {
	            try {
	                var breakdown = JSON.parse(euplBreakdown);
	                for (var key in breakdown) {
	                    if (!breakdown.hasOwnProperty(key)) {
	                        continue;
	                    }
	                    this.addEUPLBreakdown(key, breakdown[key], overwrite);
	                }
	            }
	            catch (e) {
	                // in case the euplBreakdown is invalid JSON
	                this.logMessageInConsole("Failed to write EUPL breakdown data:" + e.toString());
	            }
	        }
	    };
	    RUMOneLogger.prototype.addEUPLBreakdown = function (name, value, overwrite) {
	        if (name && !RUMOneLogger.isNullOrUndefined(value)) {
	            if (RUMOneLogger.isNullOrUndefined(this.euplBreakDown[name]) || overwrite) {
	                this.euplBreakDown[name] = value;
	            }
	        }
	    };
	    RUMOneLogger.prototype.addServerMetrics = function (metric, overwrite) {
	        if (metric) {
	            for (var key in metric) {
	                if (key && !RUMOneLogger.isNullOrUndefined(metric[key]) &&
	                    (RUMOneLogger.isNullOrUndefined(this.serverMetrics[key]) || overwrite)) {
	                    this.serverMetrics[key] = metric[key];
	                }
	            }
	        }
	    };
	    RUMOneLogger.prototype.readControlPerformanceData = function () {
	        return this.controls;
	    };
	    RUMOneLogger.prototype.mark = function (name) {
	        if (window.performance && window.performance.mark) {
	            window.performance.mark(MARKER_PREFIX + name);
	        }
	    };
	    RUMOneLogger.prototype.clearResourceTimings = function () {
	        var perfObject = window.self["performance"];
	        if (perfObject && perfObject.clearResourceTimings) {
	            perfObject.clearResourceTimings();
	        }
	    };
	    RUMOneLogger.prototype.collectMarks = function () {
	        var _this = this;
	        if (window.performance && window.performance.getEntriesByType) {
	            var marks_1 = {};
	            window.performance.getEntriesByType("mark").filter(function (mark) {
	                return mark.name.lastIndexOf(MARKER_PREFIX, 0) === 0;
	            }).forEach(function (mark) {
	                if (_this.markerIndex < RUMOneLogger.MAX_MARKS) {
	                    var markName = mark.name.substr(MARKER_PREFIX.length) + (".mark" + _this.markerIndex++);
	                    marks_1[markName] = Math.round(mark.startTime); // covert to rumone collected marks to object and merge to EUPL Breakdown
	                }
	            });
	            this.writeEUPLBreakdown(JSON.stringify(marks_1));
	        }
	    };
	    RUMOneLogger.prototype.clearMarks = function () {
	        if (window.performance && window.performance.getEntriesByType && window.performance.clearMarks) {
	            window.performance.getEntriesByType("mark").filter(function (mark) {
	                return mark.name.lastIndexOf(MARKER_PREFIX, 0) === 0;
	            }).forEach(function (mark) {
	                window.performance.clearMarks(mark.name);
	            });
	        }
	        this.markerIndex = 0;
	    };
	    RUMOneLogger.prototype.logMessageInConsole = function (message) {
	        try {
	            if ('sessionStorage' in window && window.sessionStorage) {
	                var debugStr = window.sessionStorage["enableRUMOneDebugging"];
	                var debug = debugStr && debugStr.toLowerCase() === "true";
	            }
	        }
	        catch (e) {
	        }
	        if (debug && typeof console !== "undefined" && console) {
	            console.log(message);
	        }
	    };
	    RUMOneLogger.prototype.logObjectForDebugging = function (propertyName, dictProperties) {
	        var logMessageText = propertyName + " : " + JSON.stringify(dictProperties);
	        this.logMessageInConsole(logMessageText);
	    };
	    RUMOneLogger.prototype.isCollected = function (name) {
	        return !RUMOneLogger.isNullOrUndefined(this.getPerformanceDataPropertyValue(name));
	    };
	    RUMOneLogger.prototype.getRUMOnePropertyNames = function (obj) {
	        var names = [];
	        var index = 0;
	        if (!RUMOneLogger.isNullOrUndefined(obj)) {
	            for (var property in obj) {
	                if (obj.hasOwnProperty(property)) {
	                    names[index++] = property;
	                }
	            }
	        }
	        return names;
	    };
	    RUMOneLogger.prototype.setPerfDataTimer = function () {
	        this.perfDataTimer = this.async.setTimeout(this.loopForDataCompleteness, RUMOneLogger.CHECK_INTERVAL);
	    };
	    RUMOneLogger.prototype.clearPerfDataTimer = function () {
	        if (!RUMOneLogger.isNullOrUndefined(this.perfDataTimer)) {
	            this.async.clearTimeout(this.perfDataTimer);
	            this.perfDataTimer = null;
	        }
	    };
	    RUMOneLogger.prototype.categorizeResourceRequests = function (requests, categorizer) {
	        var ret = [];
	        for (var index = 0; index < requests.length; index++) {
	            var request = requests[index];
	            if ((!categorizer.from || categorizer.from(request)) && (!categorizer.requestType || categorizer.requestType(request))) {
	                ret.push(request);
	            }
	        }
	        return ret;
	    };
	    RUMOneLogger.prototype.collectSupplementaryData = function () {
	        this.setAPIDataToRUMOne();
	        this.collectMarks();
	        this.writeServerUrl(null);
	        this.setReferrer();
	        this.logPerformanceData('ServerMetrics', JSON.stringify(this.serverMetrics));
	        this.logPerformanceData('EUPLBreakdown', JSON.stringify(this.euplBreakDown));
	    };
	    RUMOneLogger.prototype.loopForDataCompleteness = function () {
	        this.clearPerfDataTimer();
	        this.logObjectForDebugging("RUMONE: ", this.performanceData);
	        this.logObjectForDebugging("RUMOne DataState: ", String(this.getReadableDataState(this.dataState)));
	        this.logObjectForDebugging("Control Performance Data: ", this.controls);
	        this.logObjectForDebugging("API Performance Data: ", this.apis);
	        this.logObjectForDebugging("Temp Data: ", this.tempData);
	        this.logObjectForDebugging("EUPLBreakdown: ", this.euplBreakDown);
	        this.logObjectForDebugging("ServerMetrics: ", this.serverMetrics);
	        this.logMessageInConsole("====================================================================");
	        if (!this.isRunning()) {
	            return;
	        }
	        var collected = true;
	        var missedKeyMetrics = [];
	        for (var i = 0; i < RUMOneLogger.KeyMetrics.length; i++) {
	            var keyMetricValue = this.getPerformanceDataPropertyValue(RUMOneLogger.KeyMetrics[i]);
	            if (RUMOneLogger.isNullOrUndefined(keyMetricValue)) {
	                collected = false;
	                missedKeyMetrics.push(RUMOneLogger.KeyMetrics[i]);
	            }
	        }
	        this.dataState = collected ? PerformanceDataState.ReadyToUpload : PerformanceDataState.Incomplete;
	        if (this.dataState === PerformanceDataState.Incomplete) {
	            if (Number((new Date()).getTime()) - Number(this.dataStartTime) > RUMOneLogger.ERROR_TIMEOUT) {
	                this.dataState = PerformanceDataState.TimeOut;
	                this.collectSupplementaryData();
	                this.uploadPerfData();
	                this.reportErrors('TimeOut', 'Did not get key perf metrics in ' + String(RUMOneLogger.ERROR_TIMEOUT) + ' milliseconds. Missed metrics: ' + missedKeyMetrics.join() + '.');
	            }
	            else {
	                this.processControlPerfData();
	                if (this.readyToComputeEUPL()) {
	                    this.setEUPL();
	                }
	            }
	        }
	        else {
	            this.collectSupplementaryData();
	            try {
	                this.uploadPerfData();
	            }
	            catch (e) {
	                (function (errorText) {
	                    if (typeof console !== "undefined" && Boolean(console)) {
	                        console.error(errorText);
	                    }
	                })("PerformanceLogger error writing RUMOne data: " + String(e));
	            }
	            this.dataState = PerformanceDataState.Uploaded;
	        }
	        this.setPerfDataTimer();
	    };
	    RUMOneLogger.prototype.getReadableDataState = function (_dataState) {
	        for (var key in PerformanceDataState) {
	            if (_dataState === Number(PerformanceDataState[key])) {
	                return key;
	            }
	        }
	        return 'NaN';
	    };
	    RUMOneLogger.prototype.writeControlDataToRUMOne = function (controlData) {
	        var _this = this;
	        if (controlData) {
	            var indexes = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].filter(function (index) {
	                return !_this.isCollected("Control" + index + "Id");
	            });
	            var index = indexes.length > 0 ? indexes[0] : -1;
	            if (index > 0) {
	                this.logPerformanceData("Control" + index + "Id", controlData.controlId);
	                this.logPerformanceData("Control" + index + "RenderTime", controlData.renderTime);
	            }
	        }
	    };
	    RUMOneLogger.prototype.processControlPerfData = function () {
	        for (var index = 0; index < this.controls.length; index++) {
	            var control = this.controls[index];
	            var that = this;
	            if (!Boolean(control.renderTime) && control.renderTimeRequiredDataChecker(that, control)) {
	                control.renderTime = control.renderTimeCalculator(that, control);
	                this.writeControlDataToRUMOne(control);
	            }
	        }
	    };
	    RUMOneLogger.prototype.readyToComputeEUPL = function () {
	        var readyControls = 0;
	        for (var index = 0; index < this.expectedControls.length; index++) {
	            var keyControl = this.lookUpControls(this.expectedControls[index], this.controls);
	            if (keyControl && Boolean(keyControl.renderTime)) {
	                readyControls++;
	            }
	        }
	        return this.expectedControls.length > 0 && this.expectedControls.length === readyControls;
	    };
	    RUMOneLogger.prototype.lookUpControls = function (_controlId, _controls) {
	        if (_controls) {
	            for (var index = 0; index < _controls.length; index++) {
	                if (_controlId === _controls[index].controlId) {
	                    return _controls[index];
	                }
	            }
	        }
	        return null;
	    };
	    RUMOneLogger.prototype.setEUPL = function () {
	        if (!this.isCollected('EUPL')) {
	            var eupl = 0;
	            for (var index = 0; index < this.controls.length; index++) {
	                var controlData = this.controls[index];
	                if (Boolean(controlData.renderTime) && eupl < controlData.renderTime) {
	                    eupl = controlData.renderTime;
	                }
	            }
	            this.logPerformanceData('EUPL', eupl);
	        }
	    };
	    RUMOneLogger.prototype.setAPIDataToRUMOne = function () {
	        var calls = 0;
	        var durationSum = 0;
	        for (var index = 0; index < this.apis.length; index++) {
	            var apiData = this.apis[index];
	            if (apiData) {
	                calls++;
	                durationSum += apiData.duration;
	                // only take the function part of the API url to avoid cosmos data scrubber
	                // url before processing: /teams/SPGroups/_api/web/GetList(@listUrl)/RenderListDataAsStream?Paged=TRUE&p_FileLeafRef=test%2eurl&p_ID=213&PageFirstRow=121&View=6eab4254-2f2f-4086-91c0-549ae900cc93&@listUrl=%27%2Fteams%2FSPGroups%2FVNextDocLib%27"
	                // url after processing: RenderListDataAsStream
	                apiData.url = apiData.url.split("/").map(function (s) { return s.split("?")[0]; }).slice(-1)[0].replace(/\(.*?\)/g, '()');
	            }
	        }
	        this.logPerformanceData('APICallCount', calls);
	        this.logPerformanceData('APICallDurationSum', durationSum);
	        this.logPerformanceData('APICalls', JSON.stringify(this.apis));
	    };
	    RUMOneLogger.prototype.setReferrer = function () {
	        if (!this.isCollected('Referrer')) {
	            this.logPerformanceData('Referrer', document.referrer);
	        }
	    };
	    RUMOneLogger.prototype.getW3cTimingName = function (timingName) {
	        if (timingName !== 'secureConnectionStart') {
	            return 'W3c' + timingName.charAt(0).toUpperCase() + timingName.slice(1);
	        }
	        else {
	            return 'W3csecureConnectStart'; // to workaround a RUMOne schema issue W3csecureConnectStart should be W3csecureConnectionStart
	        }
	    };
	    RUMOneLogger.prototype.getWindowPerfTimingObject = function () {
	        var perfObject = window.self["performance"];
	        if (!RUMOneLogger.isNullOrUndefined(perfObject) && !RUMOneLogger.isNullOrUndefined(perfObject.timing)) {
	            return perfObject.timing;
	        }
	        return null;
	    };
	    RUMOneLogger.prototype.uploadPerfData = function () {
	        if (this.performanceData && this.loggingFunc &&
	            (this.dataState === PerformanceDataState.ReadyToUpload ||
	                this.dataState === PerformanceDataState.TimeOut)) {
	            this.loggingFunc("RUMOne", this.getPerformanceData());
	        }
	    };
	    RUMOneLogger.prototype.reportErrors = function (reason, message) {
	        var errorObj = new RUMOneErrorsSLAPI_1.default();
	        errorObj.Reason = reason;
	        errorObj.Message = message;
	        if (this.loggingFunc) {
	            this.loggingFunc("RUMOneErrors", errorObj);
	        }
	    };
	    RUMOneLogger.rumOneLogger = null;
	    RUMOneLogger.CHECK_INTERVAL = 100; // in milliseconds
	    RUMOneLogger.ERROR_TIMEOUT = 30000; // in milliseconds
	    RUMOneLogger.MAX_MARKS = 50; // suppport maximum 50 perf markers
	    RUMOneLogger.KeyMetrics = ['EUPL', 'ScenarioId'];
	    return RUMOneLogger;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = RUMOneLogger;


/***/ },
/* 51 */
/***/ function(module, exports) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	//Intentionally Override the normal camel casing style to title casing style because the schema has to match exactly the server side schema which is Title casing.
	//Please do not change back to camel casing.
	var RUMOneSLAPI = (function () {
	    function RUMOneSLAPI() {
	        this.ServerCorrelationId = null;
	        this.ScenarioId = null;
	        this.EUPL = undefined;
	        this.ServerUrl = null;
	        this.Browser = null;
	        this.ClientIP = null;
	        this.UserAgent = null;
	        this.Flights = null;
	        this.PageTransitionType = undefined;
	        this.AppCache = undefined;
	        this.FolderNav = undefined;
	        this.InitiationTimeOffset = undefined;
	        this.ServerRequestDuration = undefined;
	        this.IISLatency = undefined;
	        this.TTFB = undefined;
	        this.TTLB = undefined;
	        this.ParseTime = undefined;
	        this.RenderTime = undefined;
	        this.Control1Id = null;
	        this.Control1RenderTime = undefined;
	        this.Control2Id = null;
	        this.Control2RenderTime = undefined;
	        this.Control3Id = null;
	        this.Control3RenderTime = undefined;
	        this.Control4Id = null;
	        this.Control4RenderTime = undefined;
	        this.SharePointRequestCountTotal = undefined;
	        this.SharePointRequestCountASPX = undefined;
	        this.SharePointRequestCountJS = undefined;
	        this.SharePointRequestCountCSS = undefined;
	        this.SharePointRequestCountIMG = undefined;
	        this.SharePointRequestCountNoneCached = undefined;
	        this.SharePointRequestBytes = undefined;
	        this.SharePointRequestDownloadTime = undefined;
	        this.CDNRequestCountTotal = undefined;
	        this.CDNRequestCountASPX = undefined;
	        this.CDNRequestCountJS = undefined;
	        this.CDNRequestCountCSS = undefined;
	        this.CDNRequestCountIMG = undefined;
	        this.CDNRequestCountNoneCached = undefined;
	        this.CDNRequestBytes = undefined;
	        this.CDNRequestDownloadTime = undefined;
	        this.ThirdPartyRequestCountTotal = undefined;
	        this.ThirdPartyRequestCountASPX = undefined;
	        this.ThirdPartyRequestCountJS = undefined;
	        this.ThirdPartyRequestCountCSS = undefined;
	        this.ThirdPartyRequestCountIMG = undefined;
	        this.ThirdPartyRequestCountNoneCached = undefined;
	        this.ThirdPartyRequestBytes = undefined;
	        this.ThirdPartyRequestDownloadTime = undefined;
	        this.FromEdge = undefined;
	        this.APICallCount = undefined;
	        this.APICallDurationSum = undefined;
	        this.PreRender = undefined;
	        this.DataFetch = undefined;
	        this.PostRender = undefined;
	        this.W3cNavigationStart = undefined;
	        this.W3cUnloadEventStart = undefined;
	        this.W3cUnloadEventEnd = undefined;
	        this.W3cFetchStart = undefined;
	        this.W3cRedirectStart = undefined;
	        this.W3cRedirectEnd = undefined;
	        this.W3cDomainLookupStart = undefined;
	        this.W3cDomainLookupEnd = undefined;
	        this.W3cConnectStart = undefined;
	        this.W3cSecureConnectStart = undefined;
	        this.W3cConnectEnd = undefined;
	        this.W3cRequestStart = undefined;
	        this.W3cResponseStart = undefined;
	        this.W3cResponseEnd = undefined;
	        this.W3cDomLoading = undefined;
	        this.W3cDomLoadEnd = undefined;
	        this.W3cLoadEventStart = undefined;
	        this.W3cLoadEventEnd = undefined;
	        this.MDSDownloadStart = undefined;
	        this.MDSParseDeltaStart = undefined;
	        this.MDSParseDeltaEnd = undefined;
	        this.MDSGCStart = undefined;
	        this.MDSGCEnd = undefined;
	        this.MDSCSSStart = undefined;
	        this.MDSCSSEnd = undefined;
	        this.MDSInnerHTMLStart = undefined;
	        this.MDSScriptLoaderStart = undefined;
	        this.MDSScriptLoaderEnd = undefined;
	        this.MDSAnimationStart = undefined;
	        this.MDSAnimationEnd = undefined;
	        this.MDSParallelDownloadStart = undefined;
	        this.MDSParallelDownloadEnd = undefined;
	        this.APICalls = undefined;
	        this.SharePointRequestNames = undefined;
	        this.CDNRequestNames = undefined;
	        this.ThirdPartyRequestNames = undefined;
	        this.EUPLBreakdown = undefined;
	        this.Control5Id = null;
	        this.Control5RenderTime = undefined;
	        this.Control6Id = null;
	        this.Control6RenderTime = undefined;
	        this.Control7Id = null;
	        this.Control7RenderTime = undefined;
	        this.Control8Id = null;
	        this.Control8RenderTime = undefined;
	        this.Control9Id = null;
	        this.Control9RenderTime = undefined;
	        this.Control10Id = null;
	        this.Control10RenderTime = undefined;
	        this.ServerMetrics = null;
	        this.Referrer = null;
	    }
	    return RUMOneSLAPI;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = RUMOneSLAPI;


/***/ },
/* 52 */
/***/ function(module, exports) {

	// OneDrive:IgnoreCodeCoverage
	//Intentionally Override the normal camel casing style to title casing style because the schema has to match exactly the server side schema which is Title casing.
	//Please do not change back to camel casing.
	"use strict";
	var RUMOneErrorsSLAPI = (function () {
	    function RUMOneErrorsSLAPI() {
	        this.Reason = null;
	        this.Message = null;
	    }
	    return RUMOneErrorsSLAPI;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = RUMOneErrorsSLAPI;


/***/ },
/* 53 */
/***/ function(module, exports) {

	"use strict";
	// encode <>&'"
	var ENCODE_HTML_TEXT_REGEX = /[<>&'"\\]/g;
	var CODES = {
	    '<': '&lt;',
	    '>': '&gt;',
	    '&': '&amp;',
	    '"': '&quot;',
	    '\'': '&#39;',
	    '\\': '&#92;'
	};
	var HtmlEncoding = (function () {
	    function HtmlEncoding() {
	    }
	    /**
	     * Encodes a string for use in HTML text. Not recommended for attribute values
	     * or anything that might be used in a URL.
	     */
	    HtmlEncoding.encodeText = function (inputString) {
	        if (!inputString) {
	            return "";
	        }
	        return inputString.replace(ENCODE_HTML_TEXT_REGEX, function (_match) { return CODES[_match]; });
	    };
	    return HtmlEncoding;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = HtmlEncoding;


/***/ },
/* 54 */
/***/ function(module, exports) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	/**
	 * This datasource makes a call to the Acronyms and Colors service and returns an IAcronymColor object.
	 */
	var SiteHeaderLogoAcronym = (function () {
	    /**
	     * @constructor
	     */
	    function SiteHeaderLogoAcronym(hostSettings) {
	        this._hostSettings = hostSettings;
	    }
	    /**
	     * Given a site name, return an URL to a REST endpoint where the site logo acronym and color information can be retrieved from.
	     * The REST endpoint is through the GetAcronymsAndColors API.
	     * Note: API takes in additional optional arguments like lcid, which as of this writing this method doesn't support.
	     *       Please extend as appropriate.
	     *
	     * @param {string} siteName Name of the site.
	     * @returns { string} the REST endpoint relative URL.
	     */
	    SiteHeaderLogoAcronym.prototype.getAcronymRESTUrl = function (siteName) {
	        return this._hostSettings.webServerRelativeUrl + ("/_api/sphome/GetAcronymsAndColors?labels=[{Text:" + encodeURIComponent('"' + siteName + '"') + "}]");
	    };
	    SiteHeaderLogoAcronym.prototype.getAcronymColor = function (responseText) {
	        //parse the responseText
	        var rtnObj = { acronym: undefined, color: undefined };
	        try {
	            var response = JSON.parse(responseText);
	            var responseResult = response.d.GetAcronymsAndColors.results[0];
	            rtnObj.acronym = responseResult.Acronym;
	            rtnObj.color = responseResult.Color;
	        }
	        catch (e) {
	            // try xml parsing
	            var parser = this._parseFn();
	            var elements = void 0;
	            var xmlDoc = parser(responseText);
	            if (elements = xmlDoc.getElementsByTagName("element")) {
	                var element = elements[0];
	                for (var i = 0; i < element.childNodes.length; i++) {
	                    switch (element.childNodes[i].nodeName) {
	                        case 'Acronym':
	                            rtnObj.acronym = element.childNodes[i].nodeValue;
	                            break;
	                        case 'Color':
	                            rtnObj.color = element.childNodes[i].nodeValue;
	                            break;
	                    }
	                }
	            }
	        }
	        return rtnObj;
	    };
	    /**
	     * Returns an XML parser.
	     */
	    SiteHeaderLogoAcronym.prototype._parseFn = function () {
	        var parseXml;
	        if (DOMParser) {
	            parseXml = function (xmlStr) {
	                return (new DOMParser()).parseFromString(xmlStr, "text/xml");
	            };
	        }
	        else if (ActiveXObject &&
	            new ActiveXObject("Microsoft.XMLDOM")) {
	            parseXml = function (xmlStr) {
	                var xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
	                xmlDoc.async = "false";
	                xmlDoc.loadXML(xmlStr);
	                return xmlDoc;
	            };
	        }
	        else {
	            throw new Error("No XML parser found");
	        }
	        return parseXml;
	    };
	    return SiteHeaderLogoAcronym;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = SiteHeaderLogoAcronym;


/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var StringHelper_1 = __webpack_require__(7);
	var MembersList_1 = __webpack_require__(56);
	/**
	 * This datasource makes server call to get group related information.
	 */
	var GroupDataSource = (function () {
	    /**
	     * @constructor
	     */
	    function GroupDataSource(hostSettings) {
	        this._hostSettings = hostSettings;
	    }
	    /**
	     * Get REST Url to get group properties
	     * @param {string} Id (Guid) of the group
	     * @returns the REST url that can be used to get group basic properties
	     */
	    GroupDataSource.prototype.getGroupBasicPropertiesRESTUrl = function (groupId, withMembership) {
	        return this._getRESTUrl(StringHelper_1.format(withMembership ? GroupDataSource.groupBasicPropertiesWithMembershipUrlTemplate : GroupDataSource.groupBasicPropertiesUrlTemplate, groupId), 'SP.Directory.DirectorySession');
	    };
	    GroupDataSource.prototype.getGroupBasicProperties = function (responseText) {
	        var group = {};
	        try {
	            var response = JSON.parse(responseText);
	            if (response.d) {
	                group = this._copyGroup(response.d);
	                this._calculateMissingGroupProperties(group, group.id);
	            }
	        }
	        catch (e) {
	            group = {};
	        }
	        return group;
	    };
	    GroupDataSource.prototype._getRESTUrl = function (op, ns) {
	        return this._hostSettings.webServerRelativeUrl + '/_api/' + ns + '/' + op;
	    };
	    /**
	     * Given response from the server convert it into a group
	     */
	    GroupDataSource.prototype._copyGroup = function (src) {
	        var groupInfo = {};
	        if (src.description) {
	            groupInfo.description = src.description;
	        }
	        if (src.alias) {
	            groupInfo.alias = src.alias;
	        }
	        if (src.displayName) {
	            groupInfo.name = src.displayName;
	        }
	        if (src.principalName) {
	            groupInfo.principalName = src.principalName;
	        }
	        if (src.creationTime) {
	            groupInfo.creationTime = src.creationTime;
	        }
	        if (src.pictureUrl) {
	            groupInfo.pictureUrl = src.pictureUrl;
	        }
	        if (src.inboxUrl) {
	            groupInfo.inboxUrl = src.inboxUrl;
	        }
	        if (src.calendarUrl) {
	            groupInfo.calendarUrl = src.calendarUrl;
	        }
	        if (src.documentsUrl) {
	            groupInfo.filesUrl = src.documentsUrl;
	        }
	        if (src.siteUrl) {
	            groupInfo.sharePointUrl = src.siteUrl;
	        }
	        if (src.editGroupUrl) {
	            groupInfo.editUrl = src.editGroupUrl;
	        }
	        if (src.peopleUrl) {
	            groupInfo.membersUrl = src.peopleUrl;
	        }
	        if (src.notebookUrl) {
	            groupInfo.notebookUrl = src.notebookUrl;
	        }
	        if (src.isPublic) {
	            groupInfo.isPublic = src.isPublic;
	        }
	        if (src.mail) {
	            groupInfo.mail = src.mail;
	        }
	        // TODO: remove this once all branches get lowerCamelCase changelist
	        if (src.Description) {
	            groupInfo.description = src.Description;
	        }
	        if (src.Alias) {
	            groupInfo.alias = src.Alias;
	        }
	        if (src.DisplayName) {
	            groupInfo.name = src.DisplayName;
	        }
	        if (src.PrincipalName) {
	            groupInfo.principalName = src.PrincipalName;
	        }
	        if (src.CreationTime) {
	            groupInfo.creationTime = src.CreationTime;
	        }
	        if (src.PictureUrl) {
	            groupInfo.pictureUrl = src.PictureUrl;
	        }
	        if (src.InboxUrl) {
	            groupInfo.inboxUrl = src.InboxUrl;
	        }
	        if (src.CalendarUrl) {
	            groupInfo.calendarUrl = src.CalendarUrl;
	        }
	        if (src.DocumentsUrl) {
	            groupInfo.filesUrl = src.DocumentsUrl;
	        }
	        if (src.SiteUrl) {
	            groupInfo.sharePointUrl = src.SiteUrl;
	        }
	        if (src.EditGroupUrl) {
	            groupInfo.editUrl = src.EditGroupUrl;
	        }
	        if (src.PeopleUrl) {
	            groupInfo.membersUrl = src.PeopleUrl;
	        }
	        if (src.NotebookUrl) {
	            groupInfo.notebookUrl = src.NotebookUrl;
	        }
	        if (src.IsPublic) {
	            groupInfo.isPublic = src.IsPublic;
	        }
	        if (src.Mail) {
	            groupInfo.mail = src.Mail;
	        }
	        if (src.members || src.owners) {
	            this._copyMembership(src);
	        }
	        return groupInfo;
	    };
	    /**
	     *  Remove once federated directory makes appropriate fixes
	     */
	    GroupDataSource.prototype._calculateMissingGroupProperties = function (group, groupId) {
	        if (!group.creationTime) {
	            group.creationTime = Date.now();
	        }
	        if (!group.pictureUrl) {
	            group.pictureUrl = group.pictureUrl.replace("EWS/Exchange.asmx/s/GetUserPhoto", "OWA/service.svc/s/GetPersonaPhoto");
	        }
	        if (!group.profileUrl) {
	            group.profileUrl = this._getProfileUrl(groupId);
	        }
	        if (!group.notebookUrl && groupId) {
	            group.notebookUrl = this._getGroupStatusNotebookUrl(groupId);
	        }
	    };
	    GroupDataSource.prototype._getProfileUrl = function (id) {
	        return this._hostSettings.siteAbsoluteUrl + StringHelper_1.format(GroupDataSource.groupStatusPageTemplate, id, 'profile');
	    };
	    GroupDataSource.prototype._getGroupStatusNotebookUrl = function (id) {
	        return this._hostSettings.siteAbsoluteUrl + StringHelper_1.format(GroupDataSource.groupStatusPageTemplate, id, 'notebook');
	    };
	    GroupDataSource.prototype._copyMembership = function (src) {
	        var membershipInfo = {};
	        if (src.members && src.members.results) {
	            var membersList = this._copyMembers(src.members.results);
	            membershipInfo.membersList = membersList;
	        }
	        if (src.owners && src.owners.results) {
	            var ownersList = this._copyMembers(src.owners.results);
	            membershipInfo.ownersList = ownersList;
	        }
	        return membershipInfo;
	    };
	    /**
	     * Copy from member list json to memberList object
	     */
	    GroupDataSource.prototype._copyMembers = function (src) {
	        var membersList = new MembersList_1.default();
	        var members = new Array();
	        for (var i = 0; i < src.length; i++) {
	            var member = this._copyMember(src[i]);
	            members.push(member);
	        }
	        membersList.members = members;
	        membersList.totalCount = members.length;
	        return membersList;
	    };
	    /**
	     * Copy from json to IPerson object
	     */
	    GroupDataSource.prototype._copyMember = function (src) {
	        var user = {};
	        if (src.alias) {
	            user.sip = src.alias;
	        }
	        if (src.id) {
	            user.userId = src.id;
	        }
	        if (src.principalName) {
	            user.email = src.principalName;
	        }
	        if (src.displayName) {
	            user.name = src.displayName;
	        }
	        if (src.title) {
	            user.job = src.title;
	        }
	        if (src.pictureUrl) {
	            user.image = src.pictureUrl;
	        }
	        if (src.profilePage) {
	            user.profilePage = src.profilePage;
	        }
	        return user;
	    };
	    /**
	     * Static members
	     */
	    // Url templates
	    GroupDataSource.groupBasicPropertiesUrlTemplate = 'Group(\'{0}\')?$select=PrincipalName,DisplayName,Alias,Description,InboxUrl,CalendarUrl,DocumentsUrl,SiteUrl,EditGroupUrl,PictureUrl,PeopleUrl,NotebookUrl,Mail,IsPublic,CreationTime';
	    GroupDataSource.groupBasicPropertiesWithMembershipUrlTemplate = 'Group(\'{0}\')?$expand=Members,Owners&$select=PrincipalName,DisplayName,Alias,Description,InboxUrl,CalendarUrl,DocumentsUrl,SiteUrl,EditGroupUrl,PictureUrl,PeopleUrl,NotebookUrl,Mail,IsPublic,CreationTime,Members/PrincipalName,Members/Id,Members/DisplayName,Members/PictureUrl,Owners/PrincipalName,Owners/Id,Owners/DisplayName,Owners/PictureUrl';
	    GroupDataSource.groupStatusPageTemplate = '_layouts/15/groupstatus?id={0}&target={1}';
	    return GroupDataSource;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = GroupDataSource;


/***/ },
/* 56 */
/***/ function(module, exports) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	;
	var MembersList = (function () {
	    function MembersList() {
	        this.totalCount = 0;
	        this.members = new Array();
	    }
	    /**
	     * Add given user to the members list of the group
	     */
	    MembersList.prototype.addUserToList = function (user) {
	        this.members.unshift(user);
	        this.totalCount++;
	    };
	    /**
	     * Remove user from members list of a group
	     */
	    MembersList.prototype.removeUserFromList = function (user) {
	        var indexToRemove = -1; // not found by default
	        for (var i = 0; i < this.members.length; i++) {
	            if (this.members[i].userId === user.userId) {
	                indexToRemove = i; // find the index
	            }
	        }
	        // If user exists in members list then remove it
	        if (indexToRemove >= 0) {
	            this.members.splice(indexToRemove, 1);
	            this.totalCount--;
	        }
	    };
	    return MembersList;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = MembersList;


/***/ },
/* 57 */
/***/ function(module, exports) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	/**
	 * Use PlatformDetection to evaluate which user experience makes sense for the user's
	 * platform. NOTE: This class is NOT COMPLETE! Meaning not all values are parsed out of
	 * the user agent. If something is missing that you need, add it and add unit tests.
	 * WARNING: Avoid using browser checks when you can use detection techniques for caps checking.
	 */
	var PlatformDetection = (function () {
	    function PlatformDetection(agent) {
	        // OS checks
	        this.isWindows = false;
	        this.isWinPhone = false;
	        this.isMac = false;
	        this.isIOS = false;
	        this.isAndroid = false;
	        this.isWindows81 = false;
	        // Check to see if we are definitely on a mobile device.
	        this.isMobile = false;
	        // Browser boolean checks
	        this.isChrome = false;
	        this.isIE = false;
	        this.isIE9 = false;
	        this.isEdge = false;
	        this.isFirefox = false;
	        this.isSafari = false;
	        // Device information
	        this.isIPad = false;
	        this.browserMinor = '0';
	        this.browserMajor = 0;
	        this.areCSS3TransitionsSupported = true;
	        this.isHtml5FileUploadSupported = false;
	        this.isFolderUploadSupported = false;
	        this.isRetinaSupported = false;
	        this.isUnlimitedStyleSheetsSupported = false;
	        this.areTouchEventsSupported = false;
	        this.isWebDavSupported = false;
	        agent = agent || (window && window.navigator && navigator.userAgent) || '';
	        this.userAgent = agent;
	        agent = agent.toLowerCase();
	        // We want to figure out which ONE browser the user is most likely on.
	        // The order of the checks is important so we're not deceived by (for example)
	        // Chrome saying that it's Safari.
	        // (Each regular expression captures the version number so we can parse it later.)
	        var match;
	        if (match = /msie (\d+)([\d.]*)/.exec(agent)) {
	            // IE <= 10 has something like "MSIE 9" in the user agent.
	            // This is also what newer versions do in compatibility mode.
	            this.isIE = true;
	            if (/msie 9/.exec(agent)) {
	                this.isIE9 = true;
	            }
	        }
	        else if (match = /trident.*rv:(\d+)([\d.]*)/.exec(agent)) {
	            // This is IE 11. Sample user agent contains:
	            // Trident/7.0; other stuff... rv:11.0
	            this.isIE = true;
	        }
	        else if (match = /edge\/(\d+)([\d.]*)/.exec(agent)) {
	            // This is Edge (it pretends to be Chrome and Safari).
	            this.isEdge = true;
	        }
	        else if (match = /firefox\/(\d+)([\d.]*)/.exec(agent)) {
	            this.isFirefox = true;
	        }
	        else if (match = /(?:chrome|crios)\/(\d+)([\d.]*)/.exec(agent)) {
	            // Note: lots of random browsers say they're Chrome and will end up in this bucket
	            this.isChrome = true;
	        }
	        else if (match = /safari\/(\d+)/.exec(agent)) {
	            this.isSafari = true;
	            match = /version\/(\d+)([\d.]*)/.exec(agent);
	        }
	        // Some other browser categories:
	        //   IE Mobile: /iemobile\/(\d+)/
	        //   IE Mobile in desktop mode: contains WPDesktop; get version from Trident version
	        //   Opera (currently goes into Chrome bucket): /opr\/(\d+)/
	        // Parse the captured version number for user's browser.
	        if (match) {
	            this.browserMajor = parseInt(match[1], 10) || 0;
	            var browserMinorVersion = match[2];
	            if (browserMinorVersion) {
	                var minorStart = browserMinorVersion.indexOf('.');
	                if (minorStart >= 0 && minorStart < browserMinorVersion.length - 1) {
	                    this.browserMinor = browserMinorVersion.substr(minorStart + 1);
	                }
	            }
	        }
	        // Parse device which gives hints about os / mobile state.
	        // Windows Phone IE sometimes pretends to be Android, so explicitly check for Windows Phone first.
	        // (wpdesktop is used by Windows Phone in desktop mode.)
	        var deviceMatch = agent.match(/windows phone|wpdesktop/) || agent.match(/ipad|iphone|ipod|android/);
	        if (deviceMatch) {
	            var device = deviceMatch[0];
	            this.isWinPhone = device === 'windows phone' || device === 'wpdesktop';
	            this.isAndroid = device === 'android';
	            this.isIOS = device === 'ipad' || device === 'ipod' || device === 'iphone';
	            this.isIPad = device === 'ipad';
	            this.isMobile = this.isWinPhone || this.isAndroid || this.isIOS;
	        }
	        else {
	            this.isMac = agent.indexOf('macintosh') !== -1;
	            this.isWindows = agent.indexOf('windows nt') !== -1;
	            this.isWindows81 = /(windows 8\.1|windows nt 6\.3)/.test(agent) && !this.isWinPhone;
	        }
	        // Other operating systems:
	        //   Chrome OS: /cros/
	        //   Linux: /linux/ (Android can also say it's Linux, so check for Android first)
	        // WARNING: Avoid using browser checks when you can use detection techniques for caps checking.
	        this.isRetinaSupported = !!(window['devicePixelRatio'] && window.devicePixelRatio > 1);
	        var input = document.createElement("input");
	        input.type = "file";
	        this.isFolderUploadSupported = "webkitdirectory" in input;
	        this.isHtml5FileUploadSupported = !!(window['File'] && (window['File'].prototype.slice || window['File'].prototype.mozSlice || window['File'].prototype.webkitSlice));
	        this.isUnlimitedStyleSheetsSupported = !this._shouldUseCssText();
	        this.areTouchEventsSupported = 'ontouchstart' in window;
	        this.isWebDavSupported = 'addBehavior' in document.createElement('div');
	        if (this.isIE && this.browserMajor <= 9) {
	            this.areCSS3TransitionsSupported = false;
	        }
	        var osVersionMatch = /[\s\(](os|os x|windows phone|windows nt|android) ([\d._]+)/.exec(agent);
	        this.osVersion = osVersionMatch ? osVersionMatch[2] : "NA";
	        // Set browser name
	        if (this.isIE) {
	            this.browserName = "IE";
	        }
	        else if (this.isEdge) {
	            this.browserName = "Edge";
	        }
	        else if (this.isChrome) {
	            this.browserName = "Chrome";
	        }
	        else if (this.isFirefox) {
	            this.browserName = "Firefox";
	        }
	        else if (this.isSafari) {
	            this.browserName = "Safari";
	        }
	        else {
	            this.browserName = "NA";
	        }
	        if (this.isWindows) {
	            this.osName = "Windows";
	        }
	        else if (this.isWinPhone) {
	            this.osName = "Windows Phone";
	        }
	        else if (this.isMac) {
	            this.osName = "OSX";
	        }
	        else if (this.isIOS) {
	            this.osName = "IOS";
	        }
	        else if (this.isAndroid) {
	            this.osName = "Android";
	        }
	        else {
	            this.osName = "NA";
	        }
	    }
	    /**
	     * Checks to see if styleSheet exists as a property off of a style element.
	     * This will determine if style registration should be done via cssText (<= IE9) or not
	     */
	    PlatformDetection.prototype._shouldUseCssText = function () {
	        var emptyStyle = document.createElement("style");
	        emptyStyle.type = "text/css";
	        return !!emptyStyle["styleSheet"];
	    };
	    return PlatformDetection;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = PlatformDetection;


/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var ObjectUtil_1 = __webpack_require__(13);
	var StringHelper_1 = __webpack_require__(7);
	(function (UriPartial) {
	    /** The scheme segment of the URI */
	    UriPartial[UriPartial["scheme"] = 0] = "scheme";
	    /** The scheme and authority segments of the URI */
	    UriPartial[UriPartial["authority"] = 1] = "authority";
	    /** The scheme, authority, and path segments of the URI */
	    UriPartial[UriPartial["path"] = 2] = "path";
	    /** The scheme, authority, path, and query segments of the URI */
	    UriPartial[UriPartial["query"] = 3] = "query";
	})(exports.UriPartial || (exports.UriPartial = {}));
	var UriPartial = exports.UriPartial;
	/**
	 * Partial port of groove\Misc\URI.cpp, which was based on RFC2396 and RFC3986 (http://www.ietf.org/rfc/rfc2396.txt).
	 * There are a few differences between this implementation and the RFC:
	 *  - Implementation does not support parameters (we don't use them, and partial implementation was incorrect)
	 *  - Implementation supports some relative URIs at a glance but more investigation required
	 *
	 *   foo://example.com:8042/over/there?name=ferret#nose
	 *   \_/   \______________/\_________/ \_________/ \__/
	 *    |           |            |            |        |
	 * scheme     authority       path        query   fragment
	 *
	 * Possible improvements:
	 *  - Support path parameters
	 *  - Fully support and test relative URLs based on RFC
	 *  - Allow changing/removing remaining URI components (i.e. user, host, port, parameters)
	 *  - URI.equals could allow ?foo=1&bar=2 equals ?bar=2&foo=1
	 *  - URI.parseURI should have better error handling rather than just setting it as path
	 *  - URI.getQueryAsObject should have better error handling for query of "a=1&a=2"
	 */
	var Uri = (function () {
	    function Uri(uriString, options) {
	        this._queryCaseInsensitive = false;
	        this._pathCaseInsensitive = false;
	        // All of these are decoded (if relevant) unless specified as encoded.
	        this._scheme = "";
	        this._user = "";
	        this._host = "";
	        this._port = "";
	        this._path = "";
	        this._pathSegments = [];
	        this._pathEncoded = "";
	        this._query = {};
	        this._fragment = "";
	        if (Boolean(options)) {
	            this._queryCaseInsensitive = Boolean(options.queryCaseInsensitive);
	            this._pathCaseInsensitive = Boolean(options.pathCaseInsensitive);
	        }
	        this._parseURI(uriString);
	    }
	    Uri.concatenate = function () {
	        var uriParts = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            uriParts[_i - 0] = arguments[_i];
	        }
	        var result = '';
	        for (var i = 0; i < uriParts.length; i++) {
	            var part = uriParts[i];
	            if (i > 0) {
	                part = Uri.ensureNoPrecedingSlash(part);
	            }
	            if (i < uriParts.length - 1) {
	                part = Uri.ensureTrailingSlash(part);
	            }
	            result += part;
	        }
	        return result;
	    };
	    Uri.ensureNoPrecedingSlash = function (part) {
	        return part[0] === "/" ? part.substr(1) : part;
	    };
	    Uri.ensureTrailingSlash = function (part) {
	        return part[part.length - 1] !== "/" ? (part + "/") : part;
	    };
	    Uri.prototype.getScheme = function () {
	        return this._scheme;
	    };
	    Uri.prototype.setScheme = function (scheme) {
	        this._scheme = scheme;
	    };
	    Uri.prototype.getAuthority = function () {
	        return this._getAuthority(false);
	    };
	    Uri.prototype.setAuthority = function (authority) {
	        this._parseAuthority(authority);
	    };
	    Uri.prototype.getUser = function () {
	        return this._user;
	    };
	    Uri.prototype.getHost = function () {
	        return this._host;
	    };
	    Uri.prototype.getPort = function () {
	        return this._port;
	    };
	    Uri.prototype.getPath = function (trimTrailingSlash) {
	        var retPath = this._path;
	        if (Boolean(trimTrailingSlash)) {
	            // If the last character is a slash
	            if (retPath !== null && retPath.lastIndexOf("/") === (retPath.length - 1)) {
	                retPath = retPath.slice(0, -1); //trim last character
	            }
	        }
	        return retPath;
	    };
	    /**
	     * Returns a string containing the leftmost portion of the URI string, ending with the portion specified by part
	     */
	    Uri.prototype.getLeftPart = function (part) {
	        var ret = this._scheme + "://"; // default value is UriPartial.scheme
	        if (part === UriPartial.authority) {
	            ret += this.getAuthority();
	        }
	        if (part === UriPartial.path) {
	            ret += this.getPath();
	        }
	        if (part === UriPartial.query) {
	            ret += this.getQuery();
	        }
	        return ret;
	    };
	    Uri.prototype.setPath = function (path) {
	        if (path && path[0] !== "/") {
	            path = "/" + path;
	        }
	        this._parsePath(path);
	    };
	    Uri.prototype.getPathSegments = function () {
	        return this._pathSegments;
	    };
	    Uri.prototype.getLastPathSegment = function () {
	        if (this._pathSegments.length === 0) {
	            return "";
	        }
	        return this._pathSegments[this._pathSegments.length - 1];
	    };
	    Uri.prototype.getQuery = function (encoded) {
	        return this._serializeQuery(encoded);
	    };
	    /**
	     * Query is not well-defined but is commonly formatted as key=value and delimited with & or ;
	     * (http://www.w3.org/TR/REC-html40/appendix/notes.html#h-B.2.2)
	     *  - URI with query "a=1&b=2" or "a=1;b=2" will return {a: "1", b: "2"}
	     *  - Mixed-mode will also work: "a=1&b=2;c=3" will return {a: "1", b: "2", c: "3"}
	     *  - Assumes that parameters will be unique (i.e. "a=1&a=2" is not allowed and will produce unexpected results)
	     */
	    Uri.prototype.setQuery = function (query) {
	        var queryObject = this._deserializeQuery(query);
	        this.setQueryFromObject(queryObject);
	    };
	    Uri.prototype.getQueryAsObject = function () {
	        return this._query;
	    };
	    Uri.prototype.setQueryFromObject = function (queryObj) {
	        this._query = {};
	        for (var queryKey in queryObj) {
	            if (queryObj.hasOwnProperty(queryKey)) {
	                this.setQueryParameter(queryKey, queryObj[queryKey]);
	            }
	        }
	    };
	    Uri.prototype.getQueryParameter = function (queryKey) {
	        var ret = null;
	        var query = this._query;
	        if (this._queryCaseInsensitive) {
	            queryKey = queryKey.toLowerCase();
	            for (var key in query) {
	                if (this._query.hasOwnProperty(key) && key.toLowerCase() === queryKey) {
	                    ret = query[key];
	                }
	            }
	        }
	        else {
	            ret = query[queryKey];
	        }
	        return ret || null;
	    };
	    /**
	     * Adds query parameter to the end if queryKey does not exist, or
	     * overwrites existing query value if queryKey already exists.
	     */
	    Uri.prototype.setQueryParameter = function (queryKey, queryValue, ignoreEmptyValues) {
	        if (ignoreEmptyValues === void 0) { ignoreEmptyValues = true; }
	        var queryKeyDecoded = this._decodeQueryString(queryKey);
	        var queryValueDecoded = this._decodeQueryString(queryValue);
	        // there is no point adding undefined or modifying existing values to undefined or null.
	        if (!!queryValueDecoded || ignoreEmptyValues) {
	            this._query[queryKeyDecoded] = queryValueDecoded;
	        }
	    };
	    Uri.prototype.removeQueryParameter = function (queryKey) {
	        var queryKeyDecoded = this._decodeQueryString(queryKey);
	        delete this._query[queryKeyDecoded];
	    };
	    Uri.prototype.getFragment = function () {
	        return this._fragment;
	    };
	    Uri.prototype.setFragment = function (fragment) {
	        if (fragment[0] === "#") {
	            fragment = fragment.substring(1);
	        }
	        // Treat the fragment as a query string (decode + as space) because we pass in
	        // query parameters using the fragment on page load.
	        this._fragment = this._decodeQueryString(fragment);
	    };
	    /**
	     * Does a strict equality check of URIs (including same query parameters
	     * in the same order, and most comparisons case-sensitive).
	     * According to RFC3986: scheme and host should be case-insensitive.
	     * Note: This does not follow RFC2616's URI Comparison since it is not HTTP-specific.
	     *
	     * KNOWN ISSUE: Depending on your definition of "incorrect," this could return
	     * incorrect results for URI parts that get decoded.
	     * For example: http://somewhere/my%2fpath and http://somewhere/my/path
	     * will compare as equal because the comparisons are done to decoded versions.
	     */
	    Uri.prototype.equals = function (uri) {
	        return StringHelper_1.equalsCaseInsensitive(this._scheme, uri.getScheme()) &&
	            this._user === uri.getUser() &&
	            StringHelper_1.equalsCaseInsensitive(this._host, uri.getHost()) &&
	            this._port === uri.getPort() &&
	            this._fragment === uri.getFragment() &&
	            this._equalsCaseAppropriate(this.getPath(/*trimTrailingSlash*/ true), uri.getPath(true), this._pathCaseInsensitive) &&
	            this._equalsCaseAppropriate(this.getQuery(), uri.getQuery(), this._queryCaseInsensitive);
	    };
	    /**
	     * Does an equivalence check of two URIs. Checks to see if the URIs are
	     * equivalent, but they may not be exact! Strings are compared case
	     * insensitive and query parameters can be in any order.
	     *
	     * KNOWN ISSUE: Depending on your definition of "incorrect," this could return
	     * incorrect results for URI parts that get decoded.
	     * For example: http://somewhere/my%2fpath and http://somewhere/my/path
	     * will compare as equal because the comparisons are done to decoded versions.
	     */
	    Uri.prototype.equivalent = function (uri) {
	        var queryToLower = function (queryObj) {
	            var newQuery = {};
	            for (var key in queryObj) {
	                if (queryObj.hasOwnProperty(key)) {
	                    newQuery[key.toLowerCase()] = queryObj[key].toLowerCase();
	                }
	            }
	            return newQuery;
	        };
	        return StringHelper_1.equalsCaseInsensitive(this._scheme, uri.getScheme()) &&
	            StringHelper_1.equalsCaseInsensitive(this._user, uri.getUser()) &&
	            StringHelper_1.equalsCaseInsensitive(this._host, uri.getHost()) &&
	            StringHelper_1.equalsCaseInsensitive(this._port, uri.getPort()) &&
	            StringHelper_1.equalsCaseInsensitive(this.getPath(/*trimTrailingSlash*/ true), uri.getPath(true)) &&
	            ObjectUtil_1.default.deepCompare(queryToLower(this.getQueryAsObject()), queryToLower(uri.getQueryAsObject())) &&
	            StringHelper_1.equalsCaseInsensitive(this._fragment, uri.getFragment());
	    };
	    /**
	     * Note that this returns the URL encoded/escaped while the getXXX() methods
	     * for the individual components return the unescaped strings. Returning a
	     * concatenation of the decoded components would change the semantics of the
	     * URL. See section 2.4.2 of RFC 2396 (http://www.ietf.org/rfc/rfc2396.txt).
	     *
	     * Use doNotPercentEncodeHost to indicate that the output should not have a
	     * percent-encoded host, such as when passing to the url parameter of
	     * XmlHttpRequest.open(). Section 3.2.2 of RFC 2396 only allows alphanumeric
	     * characters and hyphen in the host of a URL, so percent-encoded hosts are
	     * not allowed. While section 3.2.2 of RFC 3986 does not restrict the host
	     * character set anymore, not all browsers can handle a percent-encoded host
	     * - DNS lookup fails.  But, they will convert the unencoded Unicode to the
	     * IDNA encoding (punycode), so leaving the host as-is in this case is preferred.
	     */
	    Uri.prototype.toString = function (outputOptions) {
	        return this._getStringInternal(/*encoded*/ true, outputOptions);
	    };
	    /**
	     * This method should be used to obtain a string for display purposes only,
	     * because as mentioned above, a decoded URL may have different semantics than
	     * the encoded version.
	     */
	    Uri.prototype.getDecodedStringForDisplay = function () {
	        return this._getStringInternal(/*encoded*/ false);
	    };
	    /*
	     * Input URI of "foo://user:pass@host.com/alpha/beta/gamma/delta;p;a;r;a;m;s?q=1&u=2&e=3&r=4&y=5#fragment"
	     * would return "foo://user:pass@host.com/alpha/beta/gamma/delta;p;a;r;a;m;s";
	     */
	    Uri.prototype.getStringWithoutQueryAndFragment = function () {
	        return this._getStringWithoutQueryAndFragmentInternal(/*encoded=*/ true);
	    };
	    Uri.prototype._equalsCaseAppropriate = function (a, b, isCaseInsensitive) {
	        if (isCaseInsensitive) {
	            return StringHelper_1.equalsCaseInsensitive(a, b);
	        }
	        return a === b;
	    };
	    Uri.prototype._getStringInternal = function (encoded, outputOptions) {
	        var ret = this._getStringWithoutQueryAndFragmentInternal(encoded, outputOptions);
	        var query = this.getQuery(encoded);
	        if (query) {
	            ret += "?" + query;
	        }
	        if (this._fragment) {
	            ret += "#" + (encoded ? encodeURIComponent(this._fragment) : this._fragment);
	        }
	        return ret;
	    };
	    Uri.prototype._getStringWithoutQueryAndFragmentInternal = function (encoded, outputOptions) {
	        var ret = "";
	        if (this._scheme) {
	            ret += (encoded ? encodeURIComponent(this._scheme) : this._scheme) + ":";
	        }
	        // Authority includes user, host, and port
	        var authority = this._getAuthority(/*encoded=*/ encoded, outputOptions);
	        if (authority) {
	            ret += "//" + authority;
	        }
	        if (this._pathEncoded) {
	            ret += (encoded ? this._pathEncoded : this._path);
	        }
	        return ret;
	    };
	    Uri.prototype._deserializeQuery = function (queryStr) {
	        var queryObj = {};
	        if (queryStr.indexOf("?") === 0) {
	            queryStr = queryStr.substring(1);
	        }
	        var queryParts = queryStr.split(/[;&]+/);
	        for (var queryIdx = 0; queryIdx < queryParts.length; queryIdx++) {
	            var queryPart = queryParts[queryIdx];
	            var queryPartSegments = queryPart.split("=");
	            if (queryPartSegments.length > 0) {
	                var queryKey = queryPartSegments[0];
	                if (queryKey.length > 0) {
	                    var queryValue = queryPartSegments.slice(1).join('=');
	                    queryObj[queryKey] = queryValue;
	                }
	            }
	        }
	        return queryObj;
	    };
	    Uri.prototype._serializeQuery = function (encoded) {
	        encoded = Boolean(encoded);
	        var queryStr = "";
	        for (var queryKey in this._query) {
	            if (this._query.hasOwnProperty(queryKey)) {
	                var key = queryKey;
	                var value = this._query[queryKey];
	                if (encoded) {
	                    key = encodeURIComponent(key);
	                    value = encodeURIComponent(value);
	                }
	                if (value === null || value === "") {
	                    queryStr += key + "=&";
	                }
	                else {
	                    queryStr += key + "=" + value + "&";
	                }
	            }
	        }
	        if (queryStr !== "") {
	            queryStr = queryStr.slice(0, -1); //trim extra & at the end
	        }
	        return queryStr;
	    };
	    Uri.prototype._parseURI = function (uriString) {
	        var remainingString = uriString;
	        // Find fragment
	        var fragmentBeginPos = remainingString.indexOf("#");
	        if (fragmentBeginPos >= 0) {
	            var fragment = remainingString.substring(fragmentBeginPos + 1);
	            this.setFragment(fragment);
	            remainingString = remainingString.substring(0, fragmentBeginPos); //remove fragment
	        }
	        // Find scheme
	        var schemeEndPos = StringHelper_1.findOneOf(remainingString, Uri.DELIMITERS);
	        if (schemeEndPos >= 0) {
	            var firstColonPos = remainingString.indexOf(":");
	            if (firstColonPos >= 0 && firstColonPos === schemeEndPos) {
	                this.setScheme(remainingString.substring(0, schemeEndPos));
	                remainingString = remainingString.substring(schemeEndPos + 1); //remove scheme
	            }
	        }
	        else {
	            this.setPath(remainingString);
	            return;
	        }
	        // Find authority
	        var authority = "";
	        var doubleSlashPos = remainingString.indexOf("//");
	        if (doubleSlashPos >= 0 && doubleSlashPos === 0) {
	            remainingString = remainingString.substring(2); //skip the //
	            var authorityEndPos = StringHelper_1.findOneOf(remainingString, Uri.AUTHORITY_TERMINATORS);
	            if (authorityEndPos >= 0) {
	                authority = remainingString.substring(0, authorityEndPos);
	                remainingString = remainingString.substring(authorityEndPos); //remove authority
	            }
	            else {
	                authority = remainingString;
	                remainingString = null;
	            }
	            this.setAuthority(authority);
	            if (!remainingString) {
	                this.setPath("");
	                return;
	            }
	        }
	        // Find query
	        var queryBeginPos = remainingString.indexOf("?");
	        if (queryBeginPos >= 0) {
	            this.setQuery(remainingString.substring(queryBeginPos + 1));
	            remainingString = remainingString.substring(0, queryBeginPos);
	        }
	        this.setPath(remainingString);
	    };
	    Uri.prototype._parseAuthority = function (authority) {
	        this._host = authority;
	        var userNameEndPos = authority.lastIndexOf("@");
	        if (userNameEndPos >= 0) {
	            this._host = this._host.substring(userNameEndPos + 1);
	        }
	        var hostPortSeparatorPos = this._host.indexOf(":");
	        if (userNameEndPos < 0 && hostPortSeparatorPos < 0) {
	            return;
	        }
	        var authorityComponents = authority;
	        if (userNameEndPos < 0) {
	            this._host = authorityComponents;
	        }
	        else {
	            this._user = authorityComponents.substring(0, userNameEndPos);
	            this._host = authorityComponents.substring(userNameEndPos + 1);
	        }
	        if (hostPortSeparatorPos >= 0) {
	            this._port = this._host.substring(hostPortSeparatorPos + 1);
	            this._host = this._host.substring(0, hostPortSeparatorPos);
	        }
	        this._user = decodeURIComponent(this._user);
	        this._host = decodeURIComponent(this._host);
	    };
	    Uri.prototype._parsePath = function (remainingString) {
	        this._path = decodeURIComponent(remainingString);
	        this._pathSegments = [];
	        this._pathEncoded = remainingString;
	        // We have to split the path BEFORE decoding so that encoded / characters
	        // don't get interpreted as path separators.
	        var encodedPathSegments = remainingString.split("/");
	        for (var i = 0; i < encodedPathSegments.length; ++i) {
	            var decodedSegment = decodeURIComponent(encodedPathSegments[i]);
	            this._pathSegments[i] = decodedSegment;
	        }
	        // Trims first/last element if empty
	        if (this._pathSegments[0] === "") {
	            this._pathSegments.shift(); // remove first element
	        }
	        if (this._pathSegments[this._pathSegments.length - 1] === "") {
	            this._pathSegments.pop(); // remove last element
	        }
	    };
	    Uri.prototype._getAuthority = function (encoded, outputOptions) {
	        if (outputOptions === void 0) { outputOptions = {}; }
	        // Note that if encoded is false, doNotPercentEncodeHost doesn't matter - the whole URI (including host) will not be encoded.
	        var doNotPercentEncodeHost = outputOptions && outputOptions.doNotPercentEncodeHost;
	        var authority = "";
	        var user;
	        var host;
	        var port;
	        if (encoded) {
	            // While technically a reserved character, ':' is commonly used in the
	            // username to denote username:password, so we special case not encoding
	            // the first occurence of this character.
	            user = encodeURIComponent(this._user).replace("%3A", ":");
	            if (doNotPercentEncodeHost) {
	                host = this._host;
	            }
	            else {
	                host = encodeURIComponent(this._host);
	            }
	            port = encodeURIComponent(this._port);
	        }
	        else {
	            user = this._user;
	            host = this._host;
	            port = this._port;
	        }
	        if (user !== "") {
	            authority = user + "@";
	        }
	        if (this._host !== "") {
	            authority += host;
	        }
	        if (this._port !== "") {
	            authority += ":" + port;
	        }
	        return authority;
	    };
	    Uri.prototype._decodeQueryString = function (component) {
	        // For query strings only, "+" is a valid substitute for a space, but decodeURIComponent
	        // doesn't take this into account. (Note that replace("+", " ") only replaces one +.)
	        var result = component;
	        try {
	            result = decodeURIComponent(component.replace(/\+/g, " "));
	        }
	        catch (e) {
	        }
	        return result;
	    };
	    Uri.DELIMITERS = ";/?:@&=$,";
	    Uri.AUTHORITY_TERMINATORS = "/?";
	    return Uri;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = Uri;


/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:IgnoreCodeCoverage
	/**
	 * This file was copied from
	 * https://onedrive.visualstudio.com/OneDriveWeb/_git/odsp-utilities?path=%2Fsrc%2Flocal%2Faria%2FAriaLogger.ts
	 * odsp has some special requirejs configuration to indicate how the aria is loaded and
	 * that config comes from server side. We use exports loader to tell webpack how to load aria.
	 * To make life easier, we choose to copy this file instead of complicated loading logic.
	 * Some refactoring was done to make the code better, but the logic is the same.
	 */
	"use strict";
	var EventBase_1 = __webpack_require__(11);
	var Manager_1 = __webpack_require__(12);
	var BeforeUnload_1 = __webpack_require__(60);
	var Beacon_event_1 = __webpack_require__(34);
	var ErrorHelper_1 = __webpack_require__(25);
	var PlatformDetection_1 = __webpack_require__(57);
	var ARIA_QOS_NAME = 'AriaBeacon';
	var AriaLogger = (function () {
	    function AriaLogger() {
	    }
	    AriaLogger.initialize = function (tenantToken, context) {
	        __webpack_require__.e/* nsure */(1, function (require) {
	            var aria = __webpack_require__(61);
	            try {
	                AriaLogger._ariaTelemtry = aria;
	                AriaLogger._ariaTelemtry.LogManager.initialize(tenantToken);
	                AriaLogger._logger = new AriaLogger._ariaTelemtry.Logger();
	                AriaLogger.setContext(context);
	                AriaLogger.registerUnloadFlush();
	                AriaLogger.registerBeacon();
	                var missedClonedEvents = Manager_1.Manager.addLogHandler(function (event) {
	                    AriaLogger.logEvent(event);
	                });
	                for (var _i = 0, missedClonedEvents_1 = missedClonedEvents; _i < missedClonedEvents_1.length; _i++) {
	                    var event_1 = missedClonedEvents_1[_i];
	                    AriaLogger.logEvent(event_1);
	                }
	            }
	            catch (e) {
	                if (e instanceof AriaLogger._ariaTelemtry.Exception) {
	                    e = new Error("Aria error: " + e.toString());
	                }
	                ErrorHelper_1.default.log(e);
	            }
	        });
	    };
	    AriaLogger.setContext = function (context) {
	        var platformDetection = new PlatformDetection_1.default();
	        var semanticContext = AriaLogger._logger.getSemanticContext();
	        /* tslint:disable:no-string-literal no-any */
	        // This is apparently a hack to add more context info, due to aria's lack of
	        // extensibility.
	        var contextMap = semanticContext['contextMap'];
	        /* tslint:enable:no-string-literal no-any */
	        contextMap.Add('AppInfo.Session', context.session);
	        semanticContext.setAppVersion(context.version);
	        contextMap.Add('AppInfo.Manifest', context.manifest);
	        semanticContext.setUserLanguage(context.market || '');
	        semanticContext.setUserId(context.userId);
	        semanticContext.setUserMsaId(context.userMsaId);
	        semanticContext.setUserANID(context.userANID);
	        AriaLogger._logger.setContext('Environment', context.environment);
	        AriaLogger._logger.setContext('Workload', context.workload);
	        AriaLogger._logger.setContext('IsAuthenticated', context.isAuthenticated ? 1 : 0);
	        semanticContext.setDeviceOsName(platformDetection.osName);
	        semanticContext.setDeviceOsVersion(platformDetection.osVersion);
	        AriaLogger._logger.setContext('BrowserName', platformDetection.browserName);
	        AriaLogger._logger.setContext('BrowserMajVer', platformDetection.browserMajor);
	        AriaLogger._logger.setContext('BrowserMinVer', platformDetection.browserMinor);
	        AriaLogger._logger.setContext('BrowserUserAgent', platformDetection.userAgent);
	        AriaLogger._logger.setContext('BrowserIsMobile', platformDetection.isMobile);
	        if (context.farmLabel) {
	            AriaLogger._logger.setContext('FarmLabel', context.farmLabel);
	        }
	        if (context.siteSubscriptionId) {
	            AriaLogger._logger.setContext('SiteSubscriptionId', context.siteSubscriptionId);
	        }
	    };
	    AriaLogger.registerUnloadFlush = function () {
	        /* tslint:disable:no-null-keyword */
	        // null check is used in aria.js
	        BeforeUnload_1.default.init();
	        BeforeUnload_1.default.registerHandler(function (unload) {
	            if (unload) {
	                AriaLogger._ariaTelemtry.LogManager.flush(null);
	            }
	            return null;
	        });
	        /* tslint:enable:no-null-keyword */
	    };
	    AriaLogger.registerBeacon = function () {
	        // Listen to aria beaconing and send qos events to monitor its success rate
	        AriaLogger._ariaTelemtry.LogManager.addCallbackListener(function (isSuccess, statusCode, tenantToken, events) {
	            var beaconEvent = new Beacon_event_1.default({
	                name: ARIA_QOS_NAME,
	                retryCount: 0,
	                totalRetries: 0,
	                eventCount: events ? events.length : 0
	            });
	            beaconEvent.end({
	                success: isSuccess === 0,
	                status: statusCode + ''
	            });
	            if (true) {
	                // Display errors if the aria logger is failing to log
	                if (isSuccess !== 0) {
	                    ErrorHelper_1.default.log(new Error("Aria logger failed with status code " + statusCode));
	                }
	            }
	        });
	    };
	    AriaLogger.logEvent = function (event) {
	        // Dont log its self qos event
	        if (Beacon_event_1.default.isTypeOf(event) && event.data) {
	            var data = event.data;
	            if (data.name === ARIA_QOS_NAME) {
	                return;
	            }
	        }
	        if (event.enabled) {
	            var eventProperties = new AriaLogger._ariaTelemtry.EventProperties();
	            eventProperties.setProperty('Vector', event.vector.toString());
	            eventProperties.setProperty('ValidationErrors', event.validationErrors);
	            var splitEventName = event.eventName.split(',');
	            var eventName = "ev_" + splitEventName[splitEventName.length - 2];
	            var fullEventName = "" + event.eventName;
	            if (event.eventType === EventBase_1.ClonedEventType.End) {
	                eventProperties.setProperty('Duration', event.endTime - event.startTime);
	            }
	            /* tslint:disable:no-any forin */
	            var data = event.data;
	            if (data) {
	                for (var x in data) {
	                    var propertyMetadata = event.metadata[x];
	                    if (propertyMetadata) {
	                        var loggingName = propertyMetadata.definedInName + "_" + x;
	                        var value = data[x];
	                        if (propertyMetadata.isMetric) {
	                            if (value !== undefined) {
	                                eventProperties.setProperty(loggingName, value);
	                            }
	                        }
	                        else {
	                            if (propertyMetadata.baseType === 'Enum') {
	                                eventProperties.setProperty(loggingName, propertyMetadata.typeRef[value]);
	                            }
	                            else if (propertyMetadata.type === 'Object') {
	                                var dataObject = value;
	                                for (var y in dataObject) {
	                                    eventProperties.setProperty(loggingName + "_" + y.replace('.', '_'), dataObject[y]);
	                                }
	                            }
	                            else {
	                                eventProperties.setProperty(loggingName, value);
	                            }
	                        }
	                    }
	                }
	            }
	            /* tslint:enable:no-any forin */
	            eventProperties.name = eventName;
	            eventProperties.setProperty('WebLog_FullName', fullEventName);
	            eventProperties.setProperty('WebLog_EventType', EventBase_1.ClonedEventType[event.eventType]);
	            for (var _i = 0, splitEventName_1 = splitEventName; _i < splitEventName_1.length; _i++) {
	                var name_1 = splitEventName_1[_i];
	                if (name_1) {
	                    eventProperties.setProperty("WebLog_Type_" + name_1, 1);
	                }
	            }
	            AriaLogger._logger.logEvent(eventProperties);
	        }
	    };
	    return AriaLogger;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = AriaLogger;
	


/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var ErrorHelper_1 = __webpack_require__(25);
	var Async_1 = __webpack_require__(30);
	var BeforeUnload = (function () {
	    function BeforeUnload() {
	        this._localHandlers = [];
	    }
	    BeforeUnload.init = function () {
	        var _this = this;
	        if (!this._initialized) {
	            this._initialized = true;
	            // Wire up before unload
	            this._originalBeforeUnload = window.onbeforeunload;
	            window.onbeforeunload = window['__onbeforeunload'] = function (ev) {
	                return _this._handleBeforeUnload(ev);
	            };
	        }
	    };
	    BeforeUnload.registerHandler = function (callback) {
	        this._handlers.push(callback);
	    };
	    BeforeUnload.unRegisterHandler = function (callback) {
	        for (var x = 0; x < this._handlers.length; x++) {
	            if (this._handlers[x] === callback) {
	                this._handlers.splice(x, 1);
	                break;
	            }
	        }
	    };
	    BeforeUnload.dispose = function () {
	        if (this._originalBeforeUnload) {
	            window.onbeforeunload = this._originalBeforeUnload;
	        }
	        else {
	            window.onbeforeunload = null;
	        }
	    };
	    BeforeUnload._handleBeforeUnload = function (ev) {
	        var response = undefined;
	        if (!this._allowNavs) {
	            for (var x = 0; x < this._handlers.length; x++) {
	                try {
	                    response = this._handlers[x](true);
	                    if (response) {
	                        break;
	                    }
	                }
	                catch (e) {
	                    ErrorHelper_1.default.log(e);
	                }
	            }
	            if (!response && this._originalBeforeUnload) {
	                try {
	                    response = this._originalBeforeUnload(ev);
	                }
	                catch (e) {
	                    ErrorHelper_1.default.log(e);
	                }
	            }
	        }
	        // Make sure the response is undefined so ie will not block
	        return response ? response : undefined;
	    };
	    BeforeUnload.prototype.registerHashNavDialogCallback = function (callback) {
	        this._hashNavDialogCallback = callback;
	    };
	    BeforeUnload.prototype.allowHashNav = function (allowNavCallback, disallowNavCallback) {
	        var response = undefined;
	        if (!BeforeUnload._isDialogOpen && !BeforeUnload._allowNavs) {
	            for (var x = 0; x < BeforeUnload._handlers.length; x++) {
	                try {
	                    response = BeforeUnload._handlers[x](false);
	                    if (response) {
	                        break;
	                    }
	                }
	                catch (e) {
	                    ErrorHelper_1.default.log(e);
	                }
	            }
	            if (response) {
	                BeforeUnload._isDialogOpen = true;
	                this._hashNavDialogCallback(response)
	                    .then(function () {
	                    BeforeUnload._isDialogOpen = false;
	                    BeforeUnload._allowNavs = true;
	                    // Dont block until we have a new stack
	                    if (!BeforeUnload._blockNavsAgainId) {
	                        BeforeUnload._blockNavsAgainId = BeforeUnload._async.setImmediate(function () {
	                            BeforeUnload._allowNavs = false;
	                            BeforeUnload._blockNavsAgainId = null;
	                        });
	                    }
	                    if (allowNavCallback) {
	                        allowNavCallback();
	                    }
	                }, function () {
	                    BeforeUnload._isDialogOpen = false;
	                    if (disallowNavCallback) {
	                        disallowNavCallback();
	                    }
	                });
	            }
	        }
	        return !response && !BeforeUnload._isDialogOpen;
	    };
	    BeforeUnload.prototype.registerHandler = function (callback) {
	        this._localHandlers.push(callback);
	        BeforeUnload.registerHandler(callback);
	    };
	    BeforeUnload.prototype.unRegisterHandler = function (callback) {
	        for (var x = 0; x < this._localHandlers.length; x++) {
	            if (this._localHandlers[x] === callback) {
	                this._localHandlers.splice(x, 1);
	                break;
	            }
	        }
	        BeforeUnload.unRegisterHandler(callback);
	    };
	    BeforeUnload.prototype.dispose = function () {
	        // Clean up any hanging handlers
	        for (var _i = 0, _a = this._localHandlers; _i < _a.length; _i++) {
	            var handler = _a[_i];
	            BeforeUnload.unRegisterHandler(handler);
	        }
	    };
	    BeforeUnload._handlers = [];
	    BeforeUnload._async = new Async_1.default();
	    BeforeUnload._initialized = false;
	    return BeforeUnload;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = BeforeUnload;
	BeforeUnload.init();


/***/ },
/* 61 */,
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var HslColor_1 = __webpack_require__(63);
	var RgbaColor_1 = __webpack_require__(64);
	var Shades_1 = __webpack_require__(65);
	/**
	 * Utility class with static methods to work with Fabric-style themes.
	 */
	var FabricTheming = (function () {
	    function FabricTheming() {
	    }
	    /**
	     * Generates a palette of Fabric colors from a primary RGB color value.
	     * @param {RgbaColor} primaryRgb Primary RGB color used to generate a palette.
	     * @param {boolean} inverted Whether the theme is inverted, with a dark background and light foreground.
	     */
	    FabricTheming.generateFabricColors = function (primaryRgb, inverted) {
	        if (inverted === void 0) { inverted = false; }
	        var generatedShades = {
	            "themeDarker": Shades_1.Shades.Darkest,
	            "themeDark": Shades_1.Shades.Darker,
	            "themeDarkAlt": Shades_1.Shades.Darker,
	            "themeLight": Shades_1.Shades.Lighter,
	            "themeLightAlt": Shades_1.Shades.Lighter,
	            "themeLighter": Shades_1.Shades.Lightest,
	            "themeLighterAlt": Shades_1.Shades.Lightest,
	            "themePrimary": Shades_1.Shades.Unshaded,
	            "themeAccent": Shades_1.Shades.Unshaded,
	            "themeSecondary": Shades_1.Shades.Medium,
	            "themeTertiary": Shades_1.Shades.Lighter,
	            "themeTertiaryAlt": Shades_1.Shades.Lighter
	        };
	        // Expected color slots. Start each defaulting to null to avoid warnings about missing slots.
	        var colors = FabricTheming._getDefaultThemeTokenMap();
	        // Starting points for the generated palette.
	        var primaryColor = RgbaColor_1.default.fromRgba(primaryRgb.R, primaryRgb.G, primaryRgb.B);
	        for (var shadeName in generatedShades) {
	            var shade = generatedShades[shadeName];
	            if (inverted && shade !== Shades_1.Shades.Unshaded) {
	                shade = Shades_1.Shades.Darkest + Shades_1.Shades.Lightest - shade;
	            }
	            colors[shadeName] = Shades_1.getShade(primaryColor, shade);
	        }
	        var accent = colors["themeAccent"];
	        colors["themeAccentTranslucent10"] = accent ?
	            RgbaColor_1.default.fromRgba(accent.R, accent.G, accent.B, 0.1 * RgbaColor_1.default.maxComponent) : null;
	        // Handle neutral slots for inverted themes
	        if (inverted) {
	            var invertedText = '#f8f8f8'; // neutralLighterAlt
	            var invertedNeutralQuaternary = '#6b6b6b';
	            var invertedNeutralQuaternaryAlt = '#707070';
	            var invertedNeutralColors = {
	                'black': '#fff',
	                'blackTranslucent40': '#66ffffff',
	                'neutralDark': '#fff',
	                'neutralPrimary': invertedText,
	                'neutralPrimaryTranslucent50': '#7ff8f8f8',
	                'neutralPrimaryAlt': '#f4f4f4',
	                'neutralSecondary': '#eaeaea',
	                'neutralSecondaryAlt': '#c8c8c8',
	                'neutralTertiary': '#a6a6a6',
	                'neutralTertiaryAlt': '#767676',
	                'neutralQuaternary': invertedNeutralQuaternary,
	                'neutralQuaternaryAlt': invertedNeutralQuaternaryAlt,
	                'cmdbarSelected': invertedNeutralQuaternary,
	                'cmdbarSelectedHover': invertedNeutralQuaternaryAlt,
	                'neutralLight': '#666666',
	                'neutralLighter': '#333',
	                'neutralLighterAlt': '#212121',
	                'primaryText': invertedText,
	                'primaryBackground': '#000',
	                'white': '#000',
	                'whiteTranslucent40': '#66000000',
	                'error': '#f00',
	                'errorBackground': '#7e3333'
	            };
	            for (var neutralSlot in invertedNeutralColors) {
	                if (invertedNeutralColors.hasOwnProperty(neutralSlot)) {
	                    colors[neutralSlot] =
	                        RgbaColor_1.default.fromHtmlColor(invertedNeutralColors[neutralSlot]);
	                }
	            }
	        }
	        return colors;
	    };
	    /**
	     * Applies an Hsl delta to an HslColor to produce a new HslColor.
	     * @param {HslColor} primaryHsl Starting HSL color value.
	     * @param {number} hDelta Delta to apply to the hue.
	     * @param {number} sDelta Delta to apply to the saturation.
	     * @param {number} lDelta Delta to apply to the luminance.
	     */
	    FabricTheming.applyHslDelta = function (primaryHsl, hDelta, sDelta, lDelta) {
	        var hue = primaryHsl.hue - hDelta;
	        if (hue > 1 || hue < 0) {
	            hue = hue - Math.floor(hue);
	        }
	        var sat = primaryHsl.sat - sDelta;
	        if (sat > 1) {
	            sat = 1;
	        }
	        else if (sat < 0) {
	            sat = 0;
	        }
	        var lum = primaryHsl.lum - lDelta;
	        if (lum > 1) {
	            lum = 1;
	        }
	        else if (lum < 0) {
	            lum = 0;
	        }
	        var hslValue = new HslColor_1.default(hue, sat, lum);
	        return hslValue;
	    };
	    FabricTheming._getDefaultThemeTokenMap = function () {
	        return {
	            backgroundOverlay: null,
	            primaryBackground: null,
	            primaryText: null,
	            themeDarker: null,
	            themeDark: null,
	            themeDarkAlt: null,
	            themePrimary: null,
	            themeSecondary: null,
	            themeTertiary: null,
	            themeLight: null,
	            themeLighter: null,
	            themeLighterAlt: null,
	            black: null,
	            cmdbarSelected: null,
	            cmdbarSelectedHover: null,
	            neutralDark: null,
	            neutralPrimary: null,
	            neutralPrimaryAlt: null,
	            neutralPrimaryTranslucent50: null,
	            neutralSecondary: null,
	            neutralSecondaryAlt: null,
	            neutralTertiary: null,
	            neutralTertiaryAlt: null,
	            neutralQuaternary: null,
	            neutralQuaternaryAlt: null,
	            neutralLight: null,
	            neutralLighter: null,
	            neutralLighterAlt: null,
	            white: null,
	            blackTranslucent40: null,
	            whiteTranslucent40: null,
	            yellow: null,
	            yellowLight: null,
	            orange: null,
	            orangeLight: null,
	            redDark: null,
	            red: null,
	            magentaDark: null,
	            magenta: null,
	            magentaLight: null,
	            purpleDark: null,
	            purple: null,
	            purpleLight: null,
	            blueDark: null,
	            blueMid: null,
	            blue: null,
	            blueLight: null,
	            tealDark: null,
	            teal: null,
	            tealLight: null,
	            greenDark: null,
	            green: null,
	            greenLight: null,
	            error: null,
	            errorBackground: null,
	            success: null,
	            successBackground: null,
	            alert: null,
	            alertBackground: null,
	            infoBackground: null,
	            info: null,
	            orangeLighter: null
	        };
	    };
	    return FabricTheming;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = FabricTheming;


/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var RgbaColor_1 = __webpack_require__(64);
	/**
	 * A color represented by hue, saturation, luminance, and alpha (opacity) components.
	 */
	var HslColor = (function () {
	    /**
	     * Constructs a new HSL color object.
	     * @param {number} h The hue (between 0 and 1) of the color.
	     * @param {number} s The saturation (between 0 and 1) of the color.
	     * @param {number} l The luminance (between 0 and 1) of the color.
	     * @param {number} a The opacity (between 0 and 255) of the color.
	     */
	    function HslColor(h, s, l, a) {
	        function LimitNumberToUnitInterval(value) {
	            return Math.min(1.0, Math.max(0.0, value));
	        }
	        this.hue = LimitNumberToUnitInterval(h);
	        this.sat = LimitNumberToUnitInterval(s);
	        this.lum = LimitNumberToUnitInterval(l);
	        this.alpha = a == null ? RgbaColor_1.default.maxComponent : a;
	    }
	    /**
	     * Constructs an HslColor from an RgbaColor.
	     * @param {RgbaColor} color The color to convert to HSL.
	     */
	    HslColor.fromRgba = function (color) {
	        // Using integer values as much as possible to make comparisons easier.
	        // I will indicate non-integer values with a  "_float" suffix.
	        // These integer values are each some integer multiple of the true value.
	        var scaleFactor = RgbaColor_1.default.maxComponent;
	        var h_float = 0.0, s_float = 0.0, l_float = 0.0;
	        var r = color.R;
	        var g = color.G;
	        var b = color.B;
	        var cMax = Math.max(Math.max(r, g), b);
	        var cMin = Math.min(Math.min(r, g), b);
	        var twiceL = cMax + cMin;
	        l_float = twiceL / (2 * scaleFactor);
	        if (cMax === cMin) {
	            s_float = 0.0;
	            h_float = -1.0;
	        }
	        else {
	            var dmax = cMax - cMin;
	            var pmax = cMax + cMin;
	            // The scale factor cancels when we divide scaled values, so divisions can ignore it.
	            if (twiceL <= 1 * scaleFactor) {
	                s_float = dmax / pmax;
	            }
	            else {
	                s_float = dmax / (2 * scaleFactor - pmax); // Safe, since cMax != cMin
	            }
	            var dr_float = (cMax - r) * (1 / 6) / dmax;
	            var dg_float = (cMax - g) * (1 / 6) / dmax;
	            var db_float = (cMax - b) * (1 / 6) / dmax;
	            if (r === cMax) {
	                h_float = db_float - dg_float;
	            }
	            else if (g === cMax) {
	                h_float = (1 / 3) + dr_float - db_float;
	            }
	            else {
	                h_float = (2 / 3) + dg_float - dr_float;
	            }
	            if (h_float < 0) {
	                h_float += 1.0;
	            }
	            if (h_float > 1.0) {
	                h_float -= 1.0;
	            }
	        }
	        return new HslColor(h_float, s_float, l_float, color.A);
	    };
	    /**
	     * Converts a hue, saturation, or luminance value between 0 and 1 into
	     * an integer between 0 and 255.
	     */
	    HslColor._hslComponentToByte = function (value) {
	        var c_rgbaMax = RgbaColor_1.default.maxComponent;
	        var result = Math.round(c_rgbaMax * value);
	        return Math.min(c_rgbaMax, Math.max(0, result));
	    };
	    /**
	     * Internal method which given the calculated magic numbers and the hue,
	     * will calculate the appropriate RGB number.
	     * This algorithm is intended to stay in-sync with the equivalent code in
	     * mso\officespace\fscolorgallery.cpp.
	     * @param {number} m1 The first magic number.
	     * @param {number} m2 The second magic number.
	     * @param {number} hue The hue to be converted using the magic numbers.
	     */
	    HslColor._hueToRgbComponent = function (m1, m2, hue) {
	        var result;
	        if (hue < 0) {
	            hue += 1;
	        }
	        if (hue > 1) {
	            hue -= 1;
	        }
	        if (hue < 1 / 6) {
	            result = m1 + (m2 - m1) * hue * 6;
	        }
	        else if (hue < 1 / 2) {
	            result = m2;
	        }
	        else if (hue < 2 / 3) {
	            result = m1 + (m2 - m1) * (2 / 3 - hue) * 6;
	        }
	        else {
	            result = m1;
	        }
	        return HslColor._hslComponentToByte(result);
	    };
	    /**
	     * Darkens the color by the provided factor.
	     * @param {number} factor The factor (between 0 and 1) by which to scale the luminance.
	     */
	    HslColor.prototype.darken = function (factor) {
	        // TODO: Validate input.
	        this.lum *= factor;
	    };
	    /**
	     * Lightens the color by the provided factor.
	     * @param {number} factor The factor (between 0 and 1) by which to scale the luminance.
	     */
	    HslColor.prototype.lighten = function (factor) {
	        // TODO: Validate input.
	        this.lum = this.lum * factor + (1 - factor);
	    };
	    /**
	     * Returns an RgbaColor representation of this HslColor.
	     */
	    HslColor.prototype.toRgbaColor = function () {
	        var r, g, b;
	        var hue = this.hue;
	        var saturation = this.sat;
	        var luminance = this.lum;
	        if (Math.round(saturation * RgbaColor_1.default.maxComponent) === 0) {
	            r = g = b = HslColor._hslComponentToByte(luminance);
	        }
	        else {
	            var m1, m2;
	            if (luminance <= 0.5) {
	                m2 = luminance * (1 + saturation);
	            }
	            else {
	                m2 = luminance + saturation - (luminance * saturation);
	            }
	            m1 = 2 * luminance - m2;
	            r = HslColor._hueToRgbComponent(m1, m2, hue + (1 / 3));
	            g = HslColor._hueToRgbComponent(m1, m2, hue);
	            b = HslColor._hueToRgbComponent(m1, m2, hue - (1 / 3));
	        }
	        return RgbaColor_1.default.fromRgba(r, g, b, this.alpha);
	    };
	    return HslColor;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = HslColor;


/***/ },
/* 64 */
/***/ function(module, exports) {

	"use strict";
	/**
	 * A color represented by red, green, blue, and alpha (opacity) components.
	 */
	var RgbaColor = (function () {
	    /** Constructs a default RgbaColor. Use RgbaColor.fromRgba to specify components. */
	    function RgbaColor() {
	        this.R = 0;
	        this.G = 0;
	        this.B = 0;
	        this.A = RgbaColor.maxComponent; // Default to fully opaque.
	    }
	    /**
	     * Creates a copy of the given color.
	     * @param {RgbaColor} c The color to clone.
	     */
	    RgbaColor.clone = function (c) {
	        return RgbaColor.fromRgba(c.R, c.G, c.B, c.A);
	    };
	    /**
	     * Returns true if the colors have identical component values of R, G, B, and A.
	     * @param {RgbaColor} c1 The first color to compare.
	     * @param {RgbaColor} c2 The second color to compare.
	     */
	    RgbaColor.equals = function (c1, c2) {
	        var c1IsNull = !c1;
	        var c2IsNull = !c2;
	        if (c1IsNull || c2IsNull) {
	            return c1IsNull && c2IsNull;
	        }
	        else {
	            return c1.R === c2.R && c1.G === c2.G && c1.B === c2.B && c1.A === c2.A;
	        }
	    };
	    /**
	     * Creates an RgbaColor from red, green, blue, and alpha component values.
	     * @param {number} r The red component value (between 0 and 255).
	     * @param {number} g The green component value (between 0 and 255).
	     * @param {number} b The blue component value (between 0 and 255).
	     * @param {number} a The alpha component value (between 0 and 255).
	     */
	    RgbaColor.fromRgba = function (r, g, b, a) {
	        var colorObj = new RgbaColor;
	        colorObj.R = Math.round(r);
	        colorObj.G = Math.round(g);
	        colorObj.B = Math.round(b);
	        colorObj.A = a != null ? Math.round(a) : RgbaColor.maxComponent;
	        return colorObj;
	    };
	    /**
	     * Parses an HTML color string in the formats #AARRGGBB, #RRGGBB, or #RGB.
	     * @param {string} htmlColor The HTML color string to parse.
	     */
	    RgbaColor.fromHtmlColor = function (htmlColor) {
	        function TwoHexCharsToNumber(str, index1, index2) {
	            return parseInt(str.charAt(index1) + str.charAt(index2), 16);
	        }
	        var resultColor = new RgbaColor;
	        if (typeof htmlColor === "string" && htmlColor.charAt(0) === "#") {
	            switch (htmlColor.length) {
	                case 9:
	                    resultColor.A = TwoHexCharsToNumber(htmlColor, 1, 2);
	                    resultColor.R = TwoHexCharsToNumber(htmlColor, 3, 4);
	                    resultColor.G = TwoHexCharsToNumber(htmlColor, 5, 6);
	                    resultColor.B = TwoHexCharsToNumber(htmlColor, 7, 8);
	                    break;
	                case 7:
	                    resultColor.R = TwoHexCharsToNumber(htmlColor, 1, 2);
	                    resultColor.G = TwoHexCharsToNumber(htmlColor, 3, 4);
	                    resultColor.B = TwoHexCharsToNumber(htmlColor, 5, 6);
	                    break;
	                case 4:
	                    resultColor.R = TwoHexCharsToNumber(htmlColor, 1, 1);
	                    resultColor.G = TwoHexCharsToNumber(htmlColor, 2, 2);
	                    resultColor.B = TwoHexCharsToNumber(htmlColor, 3, 3);
	                    break;
	            }
	        }
	        return resultColor;
	    };
	    /**
	     * Converts an RgbaColor into an HTML string suitable for use as a CSS color value.
	     * @param {RgbaColor} c The color to convert.
	     * @param {boolean} bFilterValue If true, this produces a string to in the #AARRGGBB format.
	     */
	    RgbaColor.toHtmlString = function (c, bFilterValue) {
	        function ByteToHexString(/*@type(Number)*/ b) {
	            var byte = Number(b);
	            if (!(byte >= 0 && byte <= RgbaColor.maxComponent)) {
	                throw new Error("Argument must be a Number in [0, 255]");
	            }
	            var hex = byte.toString(16);
	            if (byte < 16) {
	                hex = "0" + hex;
	            }
	            return hex;
	        }
	        if (c.A < RgbaColor.maxComponent && !bFilterValue) {
	            return "rgba(" +
	                c.R.toString(10) + ", " +
	                c.G.toString(10) + ", " +
	                c.B.toString(10) + ", " +
	                (c.A / RgbaColor.maxComponent).toFixed(2) + ")";
	        }
	        else {
	            return "#" +
	                (bFilterValue ? ByteToHexString(c.A) : "") +
	                ByteToHexString(c.R) +
	                ByteToHexString(c.G) +
	                ByteToHexString(c.B);
	        }
	    };
	    /**
	     * The maximum value of an R, G, B, or A component in an RgbaColor.
	     */
	    RgbaColor.maxComponent = 255;
	    return RgbaColor;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = RgbaColor;


/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var HslColor_1 = __webpack_require__(63);
	var RgbaColor_1 = __webpack_require__(64);
	// Various constants used for generated shades of a color.
	var WhiteShadeTable = [0.95, 0.85, 0.75, 0.65, 0.50];
	var BlackTintTable = [0.50, 0.65, 0.75, 0.85, 0.95];
	var ColorTintTable = [0.20, 0.40, 0.60];
	var ColorShadeTable = [0.75, 0.50];
	var LumTintTable = [0.10, 0.25, 0.50, 0.75, 0.90];
	var LumShadeTable = [0.90, 0.75, 0.50, 0.25, 0.10];
	var c_LuminanceLow = 0.2;
	var c_LuminanceHigh = 0.8;
	var rgbaMax = RgbaColor_1.default.maxComponent;
	var rgbaWhite = RgbaColor_1.default.fromRgba(rgbaMax, rgbaMax, rgbaMax);
	var rgbaBlack = RgbaColor_1.default.fromRgba(0, 0, 0);
	/** Shades of a given color, from Lightest to Darkest. */
	(function (Shades) {
	    Shades[Shades["Unshaded"] = 0] = "Unshaded";
	    Shades[Shades["Lightest"] = 1] = "Lightest";
	    Shades[Shades["Lighter"] = 2] = "Lighter";
	    Shades[Shades["Medium"] = 3] = "Medium";
	    Shades[Shades["Darker"] = 4] = "Darker";
	    Shades[Shades["Darkest"] = 5] = "Darkest";
	})(exports.Shades || (exports.Shades = {}));
	var Shades = exports.Shades;
	/**
	 * Returns true if the argument is a valid Shades value
	 * @param {Shades} shade The Shades value to validate.
	 */
	function _isValidShade(shade) {
	    'use strict';
	    return (shade >= Shades.Unshaded) && (shade <= Shades.Darkest);
	}
	/**
	 * Given an RgbaColor and a shade specification, generates the requested shade of the color.
	 * @param {RgbaColor} color The base color whose shades are to be computed
	 * @param {Shades} shade The shade of the base color to compute.
	 */
	function getShade(color, shade) {
	    'use strict';
	    if (!color) {
	        return null;
	    }
	    if (shade === Shades.Unshaded || !_isValidShade(shade)) {
	        return RgbaColor_1.default.fromRgba(color.R, color.G, color.B, color.A);
	    }
	    var hsl = HslColor_1.default.fromRgba(color);
	    var lum = hsl.lum;
	    var tableIndex = shade - 1;
	    if (RgbaColor_1.default.equals(color, rgbaWhite)) {
	        hsl.darken(WhiteShadeTable[tableIndex]);
	    }
	    else if (RgbaColor_1.default.equals(color, rgbaBlack)) {
	        hsl.lighten(BlackTintTable[tableIndex]);
	    }
	    else if (lum < c_LuminanceLow) {
	        hsl.lighten(LumTintTable[tableIndex]);
	    }
	    else if (lum > c_LuminanceHigh) {
	        hsl.darken(LumShadeTable[tableIndex]);
	    }
	    else {
	        if (tableIndex < ColorTintTable.length) {
	            hsl.lighten(ColorTintTable[tableIndex]);
	        }
	        else {
	            hsl.darken(ColorShadeTable[tableIndex - ColorTintTable.length]);
	        }
	    }
	    color = hsl.toRgbaColor();
	    return color;
	}
	exports.getShade = getShade;


/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var FabricTheming_1 = __webpack_require__(62);
	var RgbaColor_1 = __webpack_require__(64);
	var UriEncoding_1 = __webpack_require__(14);
	/**
	 * Utility methods which can be used to load the theme of a SharePoint site.
	 */
	var WebTheme = (function () {
	    function WebTheme() {
	    }
	    /**
	     * Constructs the URL of a REST endpoint which will return the web theme.
	     * @param {IWebContextInfo} webContextInfo Context information about the web.
	     * @param {string} cultureName Current UI culture.
	     * @param {string} themeOverride URL to a temporary override theme (e.g. preview).
	     */
	    WebTheme.makeWebThemeRestUrl = function (webServerRelativeUrl, cultureName, themeOverride) {
	        "use strict";
	        var webUrl = webServerRelativeUrl;
	        if (webUrl && webUrl[webUrl.length - 1] === '/') {
	            // Trim trailing slash.
	            webUrl = webUrl.substring(0, webUrl.length - 1);
	        }
	        webUrl = UriEncoding_1.default.escapeUrlForCallback(webUrl);
	        var webThemeRestEndpoint = UriEncoding_1.default.escapeUrlForCallback(webUrl) +
	            '/_api/SP.Web.GetContextWebThemeData?noImages=true&lcid=' +
	            UriEncoding_1.default.encodeURIComponent(cultureName);
	        if (themeOverride) {
	            webThemeRestEndpoint += "&ThemeOverride=" + UriEncoding_1.default.encodeURIComponent(themeOverride);
	        }
	        return webThemeRestEndpoint;
	    };
	    /**
	     * Constructs the URL of a REST endpoint which will return the web theme.
	     * @param {IWebContextInfo} webContextInfo Context information about the web.
	     */
	    WebTheme.processWebThemeRestResponse = function (responseText) {
	        // This could throw if the handler returns an HTML error page or invalis JSON.
	        // DataSource will count that as an error and call the error callback.
	        "use strict";
	        var response = JSON.parse(responseText);
	        var rawThemeData;
	        if (response && response.d && response.d.GetContextWebThemeData) {
	            rawThemeData = JSON.parse(response.d.GetContextWebThemeData);
	        }
	        var themeData = WebTheme.processRawThemeData(rawThemeData);
	        return themeData;
	    };
	    /**
	     * Converts an IThemeDataRaw into an IThemeData.
	     * @param {IThemeDataRaw} themeData Raw theme data to process.
	     */
	    WebTheme.processRawThemeData = function (themeData) {
	        "use strict";
	        if (themeData) {
	            var coerceToColor = WebTheme.coerceToColor;
	            var colors = {};
	            var inputColors = themeData.Palette ? themeData.Palette.Colors : {};
	            for (var colorKey in inputColors) {
	                if (inputColors.hasOwnProperty(colorKey)) {
	                    var colorValue = coerceToColor(inputColors[colorKey]);
	                    // TODO: console.warn if colorValue is undefined?
	                    if (colorValue) {
	                        colors[colorKey] = colorValue;
	                    }
	                }
	            }
	            var fabricColors = FabricTheming_1.default.generateFabricColors(colors['ContentAccent1'], themeData.IsInverted);
	            var pageBG = coerceToColor(colors['PageBackground']) || null;
	            var bgOverlay = coerceToColor(colors['BackgroundOverlay']) || null;
	            var alpha40 = Math.round(0.4 * RgbaColor_1.default.maxComponent);
	            fabricColors['white'] = pageBG;
	            // RgbaColor.fromRgba and RgbaColor.clone both return new objects.
	            // This is important for avoiding duplicate filtering logic in the caching layer.
	            fabricColors['primaryBackground'] = RgbaColor_1.default.clone(pageBG);
	            fabricColors['primaryText'] = fabricColors['primaryText'] || coerceToColor('#333');
	            fabricColors['whiteTranslucent40'] = pageBG && RgbaColor_1.default.fromRgba(pageBG.R, pageBG.G, pageBG.B, alpha40);
	            fabricColors['backgroundOverlay'] = bgOverlay;
	            fabricColors['suiteBarBackground'] = coerceToColor(colors['SuiteBarBackground']) || null;
	            fabricColors['suiteBarText'] = coerceToColor(colors['SuiteBarText']) || null;
	            fabricColors['suiteBarDisabledText'] = coerceToColor(colors['SuiteBarDisabledText']) || null;
	            fabricColors['topBarBackground'] = coerceToColor(colors['TopBarBackground']) || null;
	            fabricColors['topBarText'] = coerceToColor(colors['TopBarText']) || null;
	            fabricColors['topBarHoverText'] = coerceToColor(colors['TopBarHoverText']) || null;
	            fabricColors['dialogBorder'] = coerceToColor(colors['DialogBorder']) || null;
	            return {
	                backgroundImageUri: themeData.BackgroundImageUri,
	                cacheToken: themeData.ThemeCacheToken,
	                isDefault: themeData.IsDefault,
	                isInverted: themeData.IsInverted,
	                palette: fabricColors,
	                version: themeData.Version
	            };
	        }
	        return {
	            backgroundImageUri: "",
	            cacheToken: "",
	            isDefault: true,
	            isInverted: false,
	            palette: {},
	            version: ""
	        };
	    };
	    /**
	     * Coerces an HTML color string or a color object in raw web theme data into an RgbaColor.
	     * @param {any} toColor Object to be converted into an RgbaColor.
	     */
	    WebTheme.coerceToColor = function (toColor) {
	        "use strict";
	        var resultColor;
	        // Use duck typing to extract a color
	        if (!toColor) {
	            resultColor = null;
	        }
	        else if (typeof toColor === "string" || toColor instanceof String) {
	            resultColor = RgbaColor_1.default.fromHtmlColor(String(toColor));
	        }
	        else if ("DefaultColor" in toColor) {
	            resultColor = WebTheme.coerceToColor(toColor["DefaultColor"]);
	        }
	        else if ("R" in toColor && "G" in toColor && "B" in toColor) {
	            resultColor = RgbaColor_1.default.fromRgba(toColor.R, toColor.G, toColor.B, toColor.A);
	        }
	        return resultColor;
	    };
	    return WebTheme;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = WebTheme;


/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var RgbaColor_1 = __webpack_require__(64);
	var ThemeCache_1 = __webpack_require__(68);
	var Promise_1 = __webpack_require__(49);
	var Engagement_event_1 = __webpack_require__(17);
	var Qos_event_1 = __webpack_require__(22);
	/**
	 * Provides theme data, either from the local cache or from the server.
	 */
	var ThemeProvider = (function () {
	    /**
	     * Constructs a ThemeProvider which acts like the provided loadData function but with caching.
	     * @param {() => Promise<IThemeData>} loadData Used to load data on a cache miss.
	     */
	    function ThemeProvider(loadData) {
	        this._loadData = loadData;
	    }
	    /**
	     * Given a URL, returns a string value which can be safely used as a
	     * background-image value in a CSS rule. If the url is falsey, this
	     * returns "none" to specify no background-image.
	     * @param {string} url The URL of a background image.
	     */
	    ThemeProvider._makeCssUrl = function (url) {
	        var cssUrlValue = "none";
	        if (url) {
	            cssUrlValue = 'url("' +
	                ThemeProvider._escapeQuotesAndParentheses(url) +
	                '")';
	        }
	        return cssUrlValue;
	    };
	    /**
	     * Escapes single- and double-quotes along with parentheses so that the
	     * resulting string is safe to use in a CSS background-image: url()
	     * @param {string} str The string to escape.
	     */
	    ThemeProvider._escapeQuotesAndParentheses = function (str) {
	        var replacements = { "'": "%27", '"': "%22", "(": "%28", ")": "%29" };
	        var result = null;
	        if (str != null) {
	            result = str.replace(/(['"\(\)])/gm, function (match, capture) {
	                return replacements[capture];
	            });
	        }
	        return result;
	    };
	    /**
	     * Loads the theme data and returns a map from theme tokens to replacement values.
	     * Suitable for use with loadTheme in load-themed-styles.
	     * @param {string} cacheToken Cache token used to validate cached data.
	     * @param {boolean} forceUpdate Whether to force fresh data to be loaded and cached.
	     */
	    ThemeProvider.prototype.loadThemeTokenMap = function (cacheToken, forceUpdate) {
	        return this.loadThemeData(cacheToken, forceUpdate).then(function (themeData) {
	            var themeValues;
	            if (themeData && themeData.palette) {
	                themeValues = {};
	                var palette = themeData.palette;
	                for (var colorSlot in palette) {
	                    var rgbaValue = palette[colorSlot];
	                    themeValues[colorSlot] = rgbaValue ? RgbaColor_1.default.toHtmlString(rgbaValue) : null;
	                }
	                themeValues["backgroundImageUri"] =
	                    ThemeProvider._makeCssUrl(themeData.backgroundImageUri);
	            }
	            return themeValues;
	        }, function (error) { return null; }); // on error, return null
	    };
	    /**
	     * Loads the theme data from the cache or via the a loadData method.
	     * @param {string} cacheToken Cache token used to validate cached data.
	     * @param {boolean} forceUpdate Whether to force fresh data to be loaded and cached.
	     */
	    ThemeProvider.prototype.loadThemeData = function (cacheToken, forceUpdate) {
	        if (!forceUpdate && this._dataPromise) {
	            return this._dataPromise;
	        }
	        var _this = this;
	        var failureResultCode = null;
	        var failureResultType = Qos_event_1.ResultTypeEnum.Failure;
	        this._dataPromise = Qos_event_1.Qos.instrumentPromise(
	        /*startSchema*/ { name: "ThemeProvider.LoadData" }, 
	        /*createPromise*/ function () { return new Promise_1.default(function loadDataOnExecute(complete, error) {
	            var previousData = null;
	            if (!forceUpdate) {
	                // Checks if we have valid cached data before returning it.
	                previousData = ThemeCache_1.default.getCachedTheme(cacheToken);
	            }
	            // If we have previous data and an update is not forced, use that data.
	            if (previousData) {
	                Engagement_event_1.Engagement.logData({ name: "ThemeProvider.DataFromCache" });
	                complete(previousData);
	            }
	            else {
	                if (forceUpdate) {
	                    Engagement_event_1.Engagement.logData({ name: "ThemeProvider.ForceUpdateData" });
	                }
	                Engagement_event_1.Engagement.logData({ name: "ThemeProvider.DataFromServer" });
	                // Get updated data. Might result in a server call.
	                _this._loadData(forceUpdate).done(function onComplete(themeData) {
	                    if (themeData) {
	                        if (themeData.cacheToken) {
	                            ThemeCache_1.default.updateThemeCache(themeData, cacheToken);
	                            complete(themeData);
	                        }
	                        else {
	                            //TODO what happens if error() is undefined?
	                            failureResultCode = "NoCacheToken";
	                            if (error) {
	                                error("Theme data with no CacheToken returned");
	                            }
	                        }
	                    }
	                    else {
	                        failureResultCode = "NoData";
	                        if (error) {
	                            error("No model returned");
	                        }
	                    }
	                }, function onError(err) {
	                    if (Promise_1.default.isCanceled(error)) {
	                        failureResultCode = "Canceled";
	                        failureResultType = Qos_event_1.ResultTypeEnum.ExpectedFailure;
	                    }
	                    else {
	                        failureResultCode = "ServerLoadFailure";
	                    }
	                    if (error) {
	                        error(err);
	                    }
	                });
	            }
	        }); }, 
	        /*getCompleteSchema*/ null, 
	        /*getErrorSchema*/ function getErrorSchema(error) {
	            if (Promise_1.default.isCanceled(error)) {
	                failureResultType = Qos_event_1.ResultTypeEnum.ExpectedFailure;
	                failureResultCode = "Canceled";
	            }
	            return {
	                resultType: failureResultType,
	                resultCode: failureResultCode || "Other",
	                error: error
	            };
	        });
	        return this._dataPromise;
	    };
	    return ThemeProvider;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = ThemeProvider;


/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	// OneDrive:IgnoreCodeCoverage
	"use strict";
	var BaseDataStore_1 = __webpack_require__(37);
	var DataStoreCachingType_1 = __webpack_require__(38);
	var THEME_CACHE_VERSION = '1.7';
	var THEME_CACHE_PREFIX = 'odTheme';
	var DATA_KEY = 'Data';
	var TOKEN_KEY = 'CacheToken';
	var VERSION_KEY = 'CacheVersion';
	/**
	 * Utility methods for caching theme data.
	 */
	var ThemeCache = (function () {
	    function ThemeCache() {
	    }
	    /**
	     * Clears the theme cache.
	     */
	    ThemeCache.clearThemeCache = function () {
	        "use strict";
	        var ds = ThemeCache.getThemeDataStore();
	        ds.remove(DATA_KEY);
	        ds.remove(TOKEN_KEY);
	        ds.remove(VERSION_KEY);
	    };
	    /**
	     * Reads the cached theme, if the cacheToken is compatible.
	     * @param {string} cacheToken The cached value will only be returned if it has the same cache token.
	     */
	    ThemeCache.getCachedTheme = function (cacheToken) {
	        "use strict";
	        var cachedTheme;
	        var ds = ThemeCache.getThemeDataStore();
	        try {
	            // Make sure the data was cached with the expected version and
	            // the current theme cache token. Otherwise, return undefined.
	            if (cacheToken === ds.getValue(TOKEN_KEY) &&
	                THEME_CACHE_VERSION === ds.getValue(VERSION_KEY)) {
	                cachedTheme = ds.getValue(DATA_KEY);
	            }
	        }
	        catch (exReadCache) {
	        }
	        return cachedTheme;
	    };
	    /**
	     * Updates the theme data in the cache.
	     * @param {IThemeData} themeData The new theme data to cache.
	     */
	    ThemeCache.updateThemeCache = function (themeData, cacheToken) {
	        "use strict";
	        var ds = ThemeCache.getThemeDataStore();
	        ds.setValue(DATA_KEY, themeData);
	        ds.setValue(TOKEN_KEY, cacheToken || themeData.cacheToken);
	        ds.setValue(VERSION_KEY, THEME_CACHE_VERSION);
	    };
	    /**
	     * Returns an instance of the supporting data store for this cache.
	     */
	    ThemeCache.getThemeDataStore = function () {
	        "use strict";
	        return new BaseDataStore_1.default(THEME_CACHE_PREFIX, DataStoreCachingType_1.default.local);
	    };
	    return ThemeCache;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = ThemeCache;


/***/ },
/* 69 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_69__;

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @Copyright (c) Microsoft Corporation.  All rights reserved.
	 *
	 * Utililty code to help manipulate objects.
	 */
	"use strict";
	var lodash = __webpack_require__(5);
	/**
	 * To make obj fully immutable, freeze each object in obj.
	 * @remarks: this works only on pure JSON objects by design.
	 * @param {obj} object to freeze
	 */
	/* tslint:disable:export-name */
	function deepFreeze(obj) {
	    /* tslint:enable:export-name */
	    if (!obj) {
	        return undefined;
	    }
	    if (!Object.isFrozen(obj)) {
	        Object.freeze(obj);
	    }
	    var depth = 0;
	    var func = function (o) {
	        // Do not go more than 5 level deep
	        if (++depth > 5) {
	            return;
	        }
	        var propNames = Object.getOwnPropertyNames(o);
	        propNames.forEach(function (name) {
	            var prop = o[name];
	            if (typeof prop === 'object' && !!prop && !lodash.isElement(prop) && !Object.isFrozen(prop)) {
	                func(prop);
	            }
	        });
	    };
	    func(obj);
	    return obj;
	}
	exports.deepFreeze = deepFreeze;
	


/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	/* This file was generated by a tool. Modifying it will produce unexpected behavior. */
	/* tslint:disable */
	"use strict";
	var strings =  false
	    ? require('../../../../resx-strings/en-us.json')
	    : __webpack_require__(72);
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = strings['_3TQNOPdunsdXO/TupbQUNg'] || {};
	


/***/ },
/* 72 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_72__;

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	__webpack_require__(74);
	/* tslint:disable */
	var styles = {
	    errorBox: 'errorBox_860098e2',
	    errorBoxText: 'errorBoxText_62c7826d',
	    screenReaderOnly: 'screenReaderOnly_2ba9b764',
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = styles;
	/* tslint:enable */
	


/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	var content = __webpack_require__(75);
	var loader = __webpack_require__(77);
	
	if(typeof content === "string") content = [[module.id, content]];
	
	// add the styles to the DOM
	for (var i = 0; i < content.length; i++) loader.loadStyles(content[i][1]);
	
	if(content.locals) module.exports = content.locals;

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(76)();
	// imports
	
	
	// module
	exports.push([module.id, ".errorBox_860098e2{color:#333;font-family:\"Segoe UI Regular WestEuropean\",\"Segoe UI\",Tahoma,Arial,sans-serif;font-size:15px;font-weight:400;color:#ff3a46;padding:12px 0;overflow:hidden;position:relative;top:0;left:0;right:0;z-index:1}.errorBoxText_62c7826d{text-align:left;position:relative;padding-right:28px;display:inline-block}.screenReaderOnly_2ba9b764{position:absolute;text-indent:-9999px;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;border:0}", ""]);
	
	// exports


/***/ },
/* 76 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];
	
		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};
	
		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ },
/* 77 */
/***/ function(module, exports) {

	"use strict";
	;
	;
	// IE needs to inject styles using cssText. However, we need to evaluate this lazily, so this
	// value will initialize as undefined, and later will be set once on first loadStyles injection.
	var _injectStylesWithCssText;
	// Store the theming state in __themeState__ global scope for reuse in the case of duplicate
	// load-themed-styles hosted on the page.
	var _root = (typeof window === 'undefined') ? {} : window;
	var _themeState = _root.__themeState__ = _root.__themeState__ || {
	    theme: null,
	    lastStyleElement: null,
	    registeredStyles: []
	};
	/**
	 * Matches theming tokens. For example, "[theme: themeSlotName, default: #FFF]" (including the quotes).
	 */
	/* tslint:disable: max-line-length */
	var _themeTokenRegex = /[\'\"]\[theme:\s*(\w+)\s*(?:\,\s*default:\s*([\\"\']?[\.\,\(\)\#\-\s\w]*[\.\,\(\)\#\-\w][\"\']?))?\s*\][\'\"]/g;
	/* tslint:enable: max-line-length */
	/** Maximum style text length, for supporting IE style restrictions. */
	var MAX_STYLE_CONTENT_SIZE = 10000;
	/**
	 * Loads a set of style text. If it is registered too early, we will register it when the window.load
	 * event is fired.
	 * @param {string | ThemableArray} styles Themable style text to register.
	 */
	function loadStyles(styles) {
	    var styleParts = Array.isArray(styles) ? styles : splitStyles(styles);
	    if (_injectStylesWithCssText === undefined) {
	        _injectStylesWithCssText = shouldUseCssText();
	    }
	    applyThemableStyles(styleParts);
	}
	exports.loadStyles = loadStyles;
	/**
	 * Loads a set of style text. If it is registered too early, we will register it when the window.load event
	 * is fired.
	 * @param {string} styleText Style to register.
	 * @param {IStyleRecord} styleRecord Existing style record to re-apply.
	 */
	function applyThemableStyles(styles, styleRecord) {
	    _injectStylesWithCssText ?
	        registerStylesIE(styles, styleRecord) :
	        registerStyles(styles, styleRecord);
	}
	/**
	 * Registers a set theme tokens to find and replace. If styles were already registered, they will be
	 * replaced.
	 * @param {any} theme JSON object of theme tokens to values.
	 */
	function loadTheme(theme) {
	    _themeState.theme = theme;
	    // reload styles.
	    reloadStyles();
	}
	exports.loadTheme = loadTheme;
	/**
	 * Reloads styles.
	 * @param {any} theme JSON object of theme tokens to values.
	 */
	function reloadStyles() {
	    if (_themeState.theme) {
	        for (var _i = 0, _a = _themeState.registeredStyles; _i < _a.length; _i++) {
	            var styleRecord = _a[_i];
	            applyThemableStyles(styleRecord.themableStyle, styleRecord);
	        }
	    }
	}
	/**
	 * Find theme tokens and replaces them with provided theme values.
	 * @param {string} styles Tokenized styles to fix.
	 */
	function detokenize(styles) {
	    if (styles) {
	        styles = resolveThemableArray(splitStyles(styles));
	    }
	    return styles;
	}
	exports.detokenize = detokenize;
	/**
	 * Resolves ThemingInstruction objects in an array and joins the result into a string.
	 * @param {ThemableArray} splitStyleArray ThemableArray to resolve and join.
	 */
	function resolveThemableArray(splitStyleArray) {
	    var theme = _themeState.theme;
	    var resolvedCss;
	    if (splitStyleArray) {
	        // Resolve the array of theming instructions to an array of strings.
	        // Then join the array to produce the final CSS string.
	        var resolvedArray = splitStyleArray.map(function (currentValue) {
	            var themeSlot = currentValue.theme;
	            if (themeSlot != null) {
	                // A theming annotation. Resolve it.
	                var themedValue = theme ? theme[themeSlot] : null;
	                var defaultValue = currentValue.defaultValue;
	                // Warn to console if we hit an unthemed value even when themes are provided.
	                // Allow the themedValue to be null to explicitly request the default value.
	                if (theme && !themedValue && console && !(themeSlot in theme)) {
	                    /* tslint:disable: max-line-length */
	                    console.warn("Theming value not provided for \"" + themeSlot + "\". Falling back to \"" + (defaultValue || 'inherit') + "\".");
	                }
	                return themedValue || defaultValue || 'inherit';
	            }
	            else {
	                // A non-themable string. Preserve it.
	                return currentValue.rawString;
	            }
	        });
	        resolvedCss = resolvedArray.join('');
	    }
	    return resolvedCss;
	}
	/**
	 * Split tokenized CSS into an array of strings and theme specification objects
	 * @param {string} styles Tokenized styles to split.
	 */
	function splitStyles(styles) {
	    var result = [];
	    if (styles) {
	        var pos = 0; // Current position in styles.
	        var tokenMatch = void 0;
	        while (tokenMatch = _themeTokenRegex.exec(styles)) {
	            var matchIndex = tokenMatch.index;
	            if (matchIndex > pos) {
	                result.push({
	                    rawString: styles.substring(pos, matchIndex)
	                });
	            }
	            result.push({
	                theme: tokenMatch[1],
	                defaultValue: tokenMatch[2] // May be undefined
	            });
	            // index of the first character after the current match
	            pos = _themeTokenRegex.lastIndex;
	        }
	        // Push the rest of the string after the last match.
	        result.push({
	            rawString: styles.substring(pos)
	        });
	    }
	    return result;
	}
	exports.splitStyles = splitStyles;
	/**
	 * Registers a set of style text. If it is registered too early, we will register it when the
	 * window.load event is fired.
	 * @param {ThemableArray} styleArray Array of IThemingInstruction objects to register.
	 * @param {IStyleRecord} styleRecord May specify a style Element to update.
	 */
	function registerStyles(styleArray, styleRecord) {
	    var head = document.getElementsByTagName('head')[0];
	    var styleElement = document.createElement('style');
	    styleElement.type = 'text/css';
	    styleElement.appendChild(document.createTextNode(resolveThemableArray(styleArray)));
	    if (styleRecord) {
	        head.replaceChild(styleElement, styleRecord.styleElement);
	        styleRecord.styleElement = styleElement;
	    }
	    else {
	        head.appendChild(styleElement);
	    }
	    if (!styleRecord) {
	        _themeState.registeredStyles.push({
	            styleElement: styleElement,
	            themableStyle: styleArray
	        });
	    }
	}
	/**
	 * Registers a set of style text, for IE 9 and below, which has a ~30 style element limit so we need
	 * to register slightly differently.
	 * @param {ThemableArray} styleArray Array of IThemingInstruction objects to register.
	 * @param {IStyleRecord} styleRecord May specify a style Element to update.
	 */
	function registerStylesIE(styleArray, styleRecord) {
	    var head = document.getElementsByTagName('head')[0];
	    var lastStyleElement = _themeState.lastStyleElement, registeredStyles = _themeState.registeredStyles;
	    var stylesheet = lastStyleElement ? lastStyleElement.styleSheet : null;
	    var lastStyleContent = stylesheet ? stylesheet.cssText : '';
	    var lastRegisteredStyle = registeredStyles[registeredStyles.length - 1];
	    var resolvedStyleText = resolveThemableArray(styleArray);
	    if (!lastStyleElement || (lastStyleContent.length + resolvedStyleText.length) > MAX_STYLE_CONTENT_SIZE) {
	        lastStyleElement = document.createElement('style');
	        lastStyleElement.type = 'text/css';
	        if (styleRecord) {
	            head.replaceChild(lastStyleElement, styleRecord.styleElement);
	            styleRecord.styleElement = lastStyleElement;
	        }
	        else {
	            head.appendChild(lastStyleElement);
	        }
	        if (!styleRecord) {
	            lastRegisteredStyle = {
	                styleElement: lastStyleElement,
	                themableStyle: styleArray
	            };
	            registeredStyles.push(lastRegisteredStyle);
	        }
	    }
	    lastStyleElement.styleSheet.cssText += detokenize(resolvedStyleText);
	    Array.prototype.push.apply(lastRegisteredStyle.themableStyle, styleArray); // concat in-place
	    // Preserve the theme state.
	    _themeState.lastStyleElement = lastStyleElement;
	}
	/**
	 * Checks to see if styleSheet exists as a property off of a style element.
	 * This will determine if style registration should be done via cssText (<= IE9) or not
	 */
	function shouldUseCssText() {
	    var useCSSText = false;
	    if (typeof document !== 'undefined') {
	        var emptyStyle = document.createElement('style');
	        emptyStyle.type = 'text/css';
	        useCSSText = !!emptyStyle.styleSheet;
	    }
	    return useCSSText;
	}
	


/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(79);
	


/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	var content = __webpack_require__(80);
	var loader = __webpack_require__(77);
	
	if(typeof content === "string") content = [[module.id, content]];
	
	// add the styles to the DOM
	for (var i = 0; i < content.length; i++) loader.loadStyles(content[i][1]);
	
	if(content.locals) module.exports = content.locals;

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(76)();
	// imports
	
	
	// module
	exports.push([module.id, "-webkit-keyframes cswp-spinner-rotate from{-webkit-transform:rotate(0)}-webkit-keyframes cswp-spinner-rotate to{-webkit-transform:rotate(360deg)}-moz-keyframes cswp-spinner-rotate from{-moz-transform:rotate(0)}-moz-keyframes cswp-spinner-rotate to{-moz-transform:rotate(360deg)}-ms-keyframes cswp-spinner-rotate from{-ms-transform:rotate(0)}-ms-keyframes cswp-spinner-rotate to{-ms-transform:rotate(360deg)}@-webkit-keyframes cswp-spinner-rotate{from{-webkit-transform:rotate(0);transform:rotate(0)}to{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes cswp-spinner-rotate{from{-webkit-transform:rotate(0);transform:rotate(0)}to{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}.cswp-loading{background-color:#fff;text-align:center}.cswp-loading>.cswp-loading-spinner{font-size:14px;min-height:200px;display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center}.cswp-loading>.cswp-loading-spinner>.cswp-spinner-message{color:#666;display:inline-block;position:relative;left:6px;top:-2px}.cswp-loading>.cswp-loading-spinner>.cswp-loading-screenReaderOnly{position:absolute;text-indent:-9999px;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;border:0}.cswp-loading>.cswp-loading-spinner>.cswp-loading-spinner-container{width:32px;height:32px;display:inline-block}.cswp-loading>.cswp-loading-spinner>.cswp-loading-spinner-container>.cswp-loading-spinner{width:28px;height:28px;position:relative;padding:4px 0 0 4px;overflow:hidden;-webkit-animation-duration:1s;-webkit-animation-iteration-count:infinite;-webkit-animation-timing-function:steps(8,end);-webkit-animation-name:cswp-spinner-rotate;-moz-animation-duration:1s;-moz-animation-iteration-count:infinite;-moz-animation-timing-function:steps(8,end);-moz-animation-name:cswp-spinner-rotate;-ms-animation-duration:1s;-ms-animation-iteration-count:infinite;-ms-animation-timing-function:steps(8,end);-ms-animation-name:cswp-spinner-rotate;animation-duration:1s;animation-iteration-count:infinite;animation-timing-function:steps(8,end);animation-name:cswp-spinner-rotate}.cswp-loading>.cswp-loading-spinner>.cswp-loading-spinner-container>.cswp-loading-spinner>.cswp-loading-ball-color{background:#666;width:6px;height:6px;border-radius:100%;position:absolute;-webkit-transform-origin:12px 12px;transform-origin:12px 12px}.cswp-loading>.cswp-loading-spinner>.cswp-loading-spinner-container>.cswp-loading-spinner>.cswp-loading-ball-color:nth-child(1){-webkit-transform:rotate(45deg);transform:rotate(45deg)}.cswp-loading>.cswp-loading-spinner>.cswp-loading-spinner-container>.cswp-loading-spinner>.cswp-loading-ball-color:nth-child(2){opacity:.8;-webkit-transform:rotate(0);transform:rotate(0)}.cswp-loading>.cswp-loading-spinner>.cswp-loading-spinner-container>.cswp-loading-spinner>.cswp-loading-ball-color:nth-child(3){opacity:.6;-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}.cswp-loading>.cswp-loading-spinner>.cswp-loading-spinner-container>.cswp-loading-spinner>.cswp-loading-ball-color:nth-child(4){opacity:.4;-webkit-transform:rotate(-90deg);transform:rotate(-90deg)}.cswp-loading>.cswp-loading-spinner>.cswp-loading-spinner-container>.cswp-loading-spinner>.cswp-loading-ball-color:nth-child(5){opacity:.25;-webkit-transform:rotate(-135deg);transform:rotate(-135deg)}.cswp-loading>.cswp-loading-spinner>.cswp-loading-spinner-container>.cswp-loading-spinner>.cswp-loading-ball-color:nth-child(6){opacity:.15;-webkit-transform:rotate(-180deg);transform:rotate(-180deg)}.cswp-loading>.cswp-loading-spinner>.cswp-loading-spinner-container>.cswp-loading-spinner>.cswp-loading-ball-color:nth-child(7){opacity:.075;-webkit-transform:rotate(-225deg);transform:rotate(-225deg)}.cswp-loading>.cswp-loading-spinner>.cswp-loading-spinner-container>.cswp-loading-spinner>.cswp-loading-ball-color:nth-child(8){opacity:.05;-webkit-transform:rotate(-270deg);transform:rotate(-270deg)}.cswp-loading>.cswp-loading-spinner>.cswp-small-spinner{width:16px;height:16px}.cswp-loading>.cswp-loading-spinner>.cswp-small-spinner>.cswp-loading-spinner{width:14px;height:14px;padding:2px 0 0 2px}.cswp-loading>.cswp-loading-spinner>.cswp-small-spinner>.cswp-loading-spinner>.cswp-loading-ball-color{width:3px;height:3px;-webkit-transform-origin:6px 6px;transform-origin:6px 6px}", ""]);
	
	// exports


/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @Copyright (c) Microsoft Corporation.  All rights reserved.
	 *
	 * @file Base webpart for all React webparts
	 */
	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var React = __webpack_require__(82);
	var ReactDOM = __webpack_require__(83);
	var BaseClientSideWebPart_1 = __webpack_require__(4);
	/**
	 * Implement some common functionality for a base React webpart. All React based
	 * webparts are expected to inherit from this class.
	 *
	 * @alpha
	 */
	var ReactWebPart = (function (_super) {
	    __extends(ReactWebPart, _super);
	    function ReactWebPart(context, componentType) {
	        _super.call(this, context);
	        this._componentType = componentType;
	    }
	    ReactWebPart.prototype.dispose = function () {
	        ReactDOM.unmountComponentAtNode(this.domElement);
	    };
	    ReactWebPart.prototype.render = function () {
	        var element = this.domElement;
	        this._componentInstance = React.createElement(this._componentType, {
	            mode: this.displayMode
	        });
	        ReactDOM.render(this._componentInstance, element);
	    };
	    return ReactWebPart;
	}(BaseClientSideWebPart_1.default));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = ReactWebPart;
	


/***/ },
/* 82 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_82__;

/***/ },
/* 83 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_83__;

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var sp_client_base_1 = __webpack_require__(69);
	var EventAggregator_1 = __webpack_require__(85);
	/*
	 * @internal
	 */
	var MockWebPartManifest = (function () {
	    function MockWebPartManifest() {
	        this.manifestVersion = 2;
	        this.id = 'wpid';
	        this.componentType = 'WebPart';
	        this.version = '1.0.0';
	        this.preconfiguredEntries = [{
	                title: { default: 'wpName' },
	                description: { default: 'wpDescription' },
	                officeFabricIconFontName: 'wpIcon',
	                iconImageUrl: 'wpIcon',
	                groupId: 'group',
	                properties: {}
	            }];
	        this.loaderConfig = undefined;
	    }
	    return MockWebPartManifest;
	}());
	exports.MockWebPartManifest = MockWebPartManifest;
	/*
	 * @internal
	 */
	var MockWebPartManifestInstance = (function () {
	    function MockWebPartManifestInstance() {
	        this.manifestVersion = 2;
	        this.id = 'wpid';
	        this.componentType = 'WebPart';
	        this.version = '1.0.0';
	        this.title = { default: 'wpName' };
	        this.description = { default: 'wpDescription' };
	        this.officeFabricIconFontName = 'wpIcon';
	        this.iconImageUrl = 'wpIcon';
	        this.groupId = 'group';
	        this.properties = {};
	        this.loaderConfig = undefined;
	    }
	    return MockWebPartManifestInstance;
	}());
	exports.MockWebPartManifestInstance = MockWebPartManifestInstance;
	/*
	 * @internal
	 */
	var MockWebPartManagerContext = (function () {
	    function MockWebPartManagerContext() {
	        this.domElement = document.createElement('div');
	        this.instanceId = 'wpInstanceId';
	        this.manifest = new MockWebPartManifest();
	        this.webPartData = undefined;
	        this.displayMode = sp_client_base_1.DisplayMode.Read;
	        this.host = undefined;
	    }
	    return MockWebPartManagerContext;
	}());
	exports.MockWebPartManagerContext = MockWebPartManagerContext;
	/*
	 * @internal
	 */
	var MockWebPartContext = (function () {
	    function MockWebPartContext() {
	        this.domElement = document.createElement('div');
	        this.manifest = new MockWebPartManifestInstance();
	        this.instanceId = 'wpInstanceId';
	        this.webPartTag = 'WebPart.daf0b71c-6de8-4ef7-b511-faae7c388708.0ae4973a-70e3-451e-9f1f-3f25e5455a60';
	        /* tslint:disable:no-any */
	        this.httpClient = {};
	        this.basicHttpClient = {};
	        this.pageContext = {};
	        this.statusRenderer = {};
	        this.eventAggregator = {};
	        this.configureStart = {};
	        this.serviceScope = {};
	        this.environment = {};
	        this.host = {};
	    }
	    return MockWebPartContext;
	}());
	exports.MockWebPartContext = MockWebPartContext;
	/*
	 * @internal
	 */
	var MockPreloadedPageData = (function () {
	    function MockPreloadedPageData() {
	        this.appId = '00000000-0000-0000-0000-000000000000';
	        this.webServerRelativeUrl = 'http://localhost:4321';
	        this.webAbsoluteUrl = 'http://localhost:4321';
	    }
	    return MockPreloadedPageData;
	}());
	exports.MockPreloadedPageData = MockPreloadedPageData;
	/*
	 * @internal
	 */
	var MockWebPartHost = (function () {
	    function MockWebPartHost() {
	        this.pageContext = new sp_client_base_1.PageContext(undefined);
	        this.basicHttpClient = undefined;
	        this.httpClient = undefined;
	        /* tslint:disable:no-any */
	        this.eventAggregator = EventAggregator_1.default;
	        /* tslint:enable:no-any */
	        this.statusRenderer = new MockClientSideWebPartStatusRenderer();
	        this.serviceScope = undefined;
	        this.environment = new sp_client_base_1.Environment(this.serviceScope);
	        this.renderPropertyPane = function (props) { };
	        this.environment._initialize(sp_client_base_1.EnvironmentType.Test);
	    }
	    return MockWebPartHost;
	}());
	exports.MockWebPartHost = MockWebPartHost;
	/*
	 * @internal
	 */
	var MockClientSideWebPartStatusRenderer = (function () {
	    function MockClientSideWebPartStatusRenderer() {
	        this.displayCalled = false;
	        this.clearCalled = false;
	        this.errorCalled = false;
	        this.clearErrorCalled = false;
	    }
	    MockClientSideWebPartStatusRenderer.prototype.displayLoadingIndicator = function (domElement) {
	        this.displayCalled = true;
	    };
	    MockClientSideWebPartStatusRenderer.prototype.clearLoadingIndicator = function (domElement) {
	        this.clearCalled = true;
	    };
	    MockClientSideWebPartStatusRenderer.prototype.renderError = function (domElement, error) {
	        this.errorCalled = true;
	    };
	    MockClientSideWebPartStatusRenderer.prototype.clearError = function (domElement) {
	        this.clearErrorCalled = true;
	    };
	    return MockClientSideWebPartStatusRenderer;
	}());
	exports.MockClientSideWebPartStatusRenderer = MockClientSideWebPartStatusRenderer;
	


/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @copyright Microsoft Corporation. All rights reserved.
	 *
	 * @file Event aggregator utility. This utility is a generic publish-subscribe
	 * model to help two or more components pass events to each other.
	 */
	"use strict";
	var sp_client_base_1 = __webpack_require__(69);
	var ReservedEventNames_1 = __webpack_require__(86);
	/**
	 * Event Aggregator
	 *
	 * @internal
	 */
	var EventAggregator = (function () {
	    function EventAggregator() {
	        this._events = new Map();
	        this._sources = new Map();
	    }
	    /**
	     * Subscribe for an event from all sources
	     *
	     * @param Name of the event
	     * @param Id of the subscriber to the event
	     * @param Callback for when the event is raised
	     */
	    EventAggregator.prototype.subscribeByEventName = function (eventName, subscriberId, callback) {
	        sp_client_base_1.Validate.isNotNullOrUndefined(eventName, 'eventName');
	        this._validateEvent(eventName);
	        this._setSubscription(eventName, subscriberId, callback, this._events);
	    };
	    /**
	     * Subscribe for all events from a specific source.
	     *
	     * @param Source of the event
	     * @param Id of the subscriber to the event
	     * @param Callback for when the event is raised
	     */
	    EventAggregator.prototype.subscribeBySourceId = function (sourceId, subscriberId, callback) {
	        sp_client_base_1.Validate.isNotNullOrUndefined(sourceId, 'sourceId');
	        this._setSubscription(sourceId, subscriberId, callback, this._sources);
	    };
	    /**
	     * Raise an event
	     *
	     * @param Event name
	     * @param Event object
	     */
	    EventAggregator.prototype.raiseEvent = function (eventName, eventObject) {
	        sp_client_base_1.Validate.isNotNullOrUndefined(eventName, 'eventName');
	        sp_client_base_1.Validate.isNotNullOrUndefined(eventObject, 'eventObject');
	        sp_client_base_1.Validate.isNotNullOrUndefined(eventObject.sourceId, 'eventObject.sourceId');
	        var targets = {};
	        this._validateEvent(eventName);
	        // First process all eventName subscriptions and then sourceId subscriptions
	        this._processEvent(eventName, eventObject, targets, this._events.get(eventName));
	        this._processEvent(eventName, eventObject, targets, this._sources.get(eventObject.sourceId));
	    };
	    EventAggregator.prototype._validateEvent = function (eventName) {
	        var e = eventName.split(ReservedEventNames_1.default.delimitor);
	        if (e.length !== 2) {
	            throw new Error('Event ' + eventName + ' not in eventName:action format');
	        }
	    };
	    EventAggregator.prototype._processEvent = function (eventName, eventObject, targets, map) {
	        if (map) {
	            map.forEach(function (callback, targetId) {
	                if (!targets[targetId]) {
	                    targets[targetId] = true;
	                    callback(eventName, eventObject);
	                }
	            });
	        }
	    };
	    EventAggregator.prototype._setSubscription = function (id, subscriberId, callback, eventBucket) {
	        sp_client_base_1.Validate.isNotNullOrUndefined(subscriberId, 'subscriberId');
	        sp_client_base_1.Validate.isNotNullOrUndefined(callback, 'callback');
	        if (!eventBucket.get(id)) {
	            eventBucket.set(id, new Map());
	        }
	        var map = eventBucket.get(id);
	        map.set(subscriberId, callback);
	    };
	    return EventAggregator;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = EventAggregator;
	


/***/ },
/* 86 */
/***/ function(module, exports) {

	/**
	 * @file ReservedEventNames.ts
	 * @copyright Microsoft Corporation. All rights reserved.
	 */
	"use strict";
	/** ReservedEventNames
	 *  Event names should follow the following format
	 *  'EventName:Action'
	 *
	 *  e.g.
	 *    'configure:start'
	 *    'configure:end'
	 *
	 * @alpha
	 */
	/* tslint:disable:no-internal-module */
	var ReservedEventNames;
	(function (ReservedEventNames) {
	    /* tslint:enable:no-internal-module */
	    'use strict';
	    ReservedEventNames.delimitor = ':';
	    /* Commonly used events */
	    ReservedEventNames.configure = 'configure';
	    /* Commonly used acitons a.k.a. event verbs */
	    ReservedEventNames.start = 'start';
	    ReservedEventNames.end = 'end';
	    /* Commonly used event names */
	    ReservedEventNames.configureStart = ReservedEventNames.configure + ReservedEventNames.delimitor + ReservedEventNames.start;
	    ReservedEventNames.configureEnd = ReservedEventNames.configure + ReservedEventNames.delimitor + ReservedEventNames.end;
	    /* Event source */
	    ReservedEventNames.classicToolpane = 'ClassicToolpane';
	    ReservedEventNames.classicToolpaneId = '121ff297-293c-4d66-a24b-916156760cab';
	})(ReservedEventNames || (ReservedEventNames = {}));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = ReservedEventNames;
	


/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var SuiteNavManagerConfiguration_1 = __webpack_require__(88);
	/**
	 * This is the system base class for client-side applications.  It manages the overall
	 * life cycle of your application, and is the first entry point for your code to start
	 * executing when the page loads.  The two main events are onLoad() which occurs first,
	 * and onRender() which occurs after the shell has initialized the environment and
	 * completed rendering the page chrome.
	 */
	var ClientSideApplication = (function () {
	    function ClientSideApplication() {
	        this._shell = undefined;
	        this._domElement = undefined;
	        /* tslint:disable:no-string-literal */
	        this['__type'] = 'ClientSideApplication';
	        /* tslint:enable:no-string-literal */
	    }
	    Object.defineProperty(ClientSideApplication.prototype, "shell", {
	        /**
	         * Returns a reference to the shell, which is a global singleton object that contains
	         * the main service classes.
	         */
	        get: function () {
	            return this._shell;
	        },
	        set: function (value) {
	            throw new Error('The property cannot be assigned because it is read-only');
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ClientSideApplication.prototype, "domElement", {
	        /**
	         * Returns the DOM element where the application is expected to render its content.
	         * The domElement will be undefined until the onRender() event occurs.
	         * IMPORTANT: The application should not access DOM elements outside of this subtree,
	         * as they are system-defined and may change over time.
	         */
	        get: function () {
	            return this._domElement;
	        },
	        set: function (value) {
	            throw new Error('The property cannot be assigned because it is read-only');
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * RESERVED FOR INTERNAL USAGE.  This method is invoked automatically by the system shell.
	     * The application code should not call it directly.
	     */
	    ClientSideApplication.prototype.load = function (shell) {
	        this._shell = shell;
	        this.onLoad();
	    };
	    /**
	     * This life cycle event occurs immediately after the shell has loaded the application,
	     * before the DOM is constructed.  Applications can use this event to load scripts
	     * or start asynchronous operations that need to occur early in the lifecycle.
	     * Inside the onLoad() event, applications may also modify the rendering of various
	     * page chrome elements, for example by calling this.shell.suiteNav.setComponentVisibility(false).
	     */
	    ClientSideApplication.prototype.onLoad = function () {
	        // EMPTY BLOCK
	    };
	    /**
	     * RESERVED FOR INTERNAL USAGE.  This method is invoked automatically by the system shell.
	     * The application code should not call it directly.
	     */
	    ClientSideApplication.prototype.render = function (domElement) {
	        this._domElement = domElement;
	        this.onRender();
	    };
	    /**
	     * This lifecycle event occurs after the shell has constructed the DOM for the page chrome.
	     * At this time, the domElement property will be initialized, and the application can begin
	     * rendering its own DOM elements.
	     */
	    ClientSideApplication.prototype.onRender = function () {
	        // EMPTY BLOCK
	    };
	    ClientSideApplication.prototype.suiteNavConfiguration = function () {
	        return new SuiteNavManagerConfiguration_1.default(this._shell.appPageContext);
	    };
	    return ClientSideApplication;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = ClientSideApplication;
	


/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @Copyright (c) Microsoft Corporation.  All rights reserved.
	 *
	 * @file Represents a set of app specific configuration for the suite nav manager.
	 */
	"use strict";
	var SuiteNavLinkIds_1 = __webpack_require__(89);
	var SuiteNavManagerConfiguration = (function () {
	    /**
	     * Initializes a new instance of the SuiteNavManagerConfiguration.
	     */
	    function SuiteNavManagerConfiguration(pageContext) {
	        this._pageContext = pageContext;
	        this._currentUICultureName = this._pageContext.core.currentUICultureName;
	        this._webServerRelativeUrl = this._pageContext.core.webServerRelativeUrl;
	        this._o365ShellRenderSettings = {
	            disableDelayLoad: false,
	            disableShellPlus: false,
	            layout: 'Mouse',
	            top: undefined
	        };
	        this._hamburgerMenuCallback = undefined;
	        this._suiteNavPostRenderCallback = undefined;
	        this._systemUserKey = this._pageContext.core.systemUserKey;
	        this._siteClientTag = this._pageContext.core.siteClientTag;
	        this._isSuiteNavDisabled = this._shouldDisableSuiteNav();
	        if (this._pageContext.core.menuData) {
	            /* tslint:disable:no-string-literal */
	            this._settingsLinks = this._pageContext.core.menuData['SettingsData'];
	            this._signoutUrl = this._pageContext.core.menuData['SignOutUrl'];
	        }
	    }
	    SuiteNavManagerConfiguration.prototype.isSuiteNavDisabled = function () {
	        return this._isSuiteNavDisabled;
	    };
	    /**
	     * Function for disabling the suiteNav from loading
	     */
	    SuiteNavManagerConfiguration.prototype.disableSuiteNav = function () {
	        this._isSuiteNavDisabled = true;
	    };
	    /**
	     * Function for modifying the suite nav data that came back from the service.
	     * @param new SuiteNav data to replace the current data
	     * @returns the new SuiteNav data
	     */
	    SuiteNavManagerConfiguration.prototype.modifySuiteNavData = function (suiteNavData) {
	        // For now, always assume we're on the SharePoint home page.
	        suiteNavData.CurrentMainLinkElementID = SuiteNavLinkIds_1.default.SITES;
	        suiteNavData.CurrentWorkloadSettingsSubLinks =
	            this._settingsLinks && this._settingsLinks.length > 0 ? this._settingsLinks : undefined;
	        suiteNavData.FeedbackLink = undefined;
	        if (suiteNavData.SignOutLink) {
	            suiteNavData.SignOutLink.Url = this._signoutUrl;
	        }
	        return suiteNavData;
	    };
	    ;
	    Object.defineProperty(SuiteNavManagerConfiguration.prototype, "systemUserKey", {
	        /**
	         * Gets the systemUserKey token.
	         * @returns the systemUserKey or empty string
	         */
	        get: function () {
	            return this._systemUserKey || '';
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SuiteNavManagerConfiguration.prototype, "cacheToken", {
	        /**
	         * Gets the cache token.
	         * @returns the site client tag or empty string
	         */
	        get: function () {
	            /**
	             * The site client tag will be something like '0$$16.0.3912.1218' -- the only part
	             * we care about is before the $$. This number will be incremented if the user's theme changes.
	             */
	            var clientTag = this._siteClientTag;
	            if (clientTag !== undefined) {
	                return clientTag.substring(0, clientTag.indexOf('$$'));
	            }
	            return '';
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    Object.defineProperty(SuiteNavManagerConfiguration.prototype, "o365ShellRenderSettings", {
	        /**
	         * Gets the o365ShellRenderSettings for rendering the SuiteNav.
	         * @returns _o365ShellRenderSettings
	         */
	        get: function () {
	            return this._o365ShellRenderSettings;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SuiteNavManagerConfiguration.prototype, "currentUICultureName", {
	        /**
	         * Property representing the culture name (e.g. "en-us")
	         */
	        get: function () {
	            return this._currentUICultureName;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SuiteNavManagerConfiguration.prototype, "webServerRelativeUrl", {
	        /**
	         * Represents the web server relative url where we would ping the Suite Nav service.
	         */
	        get: function () {
	            return this._webServerRelativeUrl;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SuiteNavManagerConfiguration.prototype, "hamburgerCallback", {
	        get: function () {
	            return this._hamburgerMenuCallback;
	        },
	        set: function (hamburgerCallback) {
	            this._hamburgerMenuCallback = hamburgerCallback;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SuiteNavManagerConfiguration.prototype, "suiteNavPostRenderCallback", {
	        get: function () {
	            return this._suiteNavPostRenderCallback;
	        },
	        set: function (suiteNavPostRenderCallback) {
	            this._suiteNavPostRenderCallback = suiteNavPostRenderCallback;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    SuiteNavManagerConfiguration.prototype._shouldDisableSuiteNav = function () {
	        return (window.location.hostname === 'localhost' ||
	            this._pageContext.urlQueryParameters.getValue('disableSuiteNav') === 'true') ?
	            true :
	            false;
	    };
	    return SuiteNavManagerConfiguration;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = SuiteNavManagerConfiguration;
	


/***/ },
/* 89 */
/***/ function(module, exports) {

	/**
	 * @Copyright (c) Microsoft Corporation.  All rights reserved.
	 *
	 * @file Strings for the 'Id' option of suite nav links.
	 * These are defined by the suite nav team and are used to correlate icons/colors with links.
	 */
	"use strict";
	var SuiteNavLinkIds = (function () {
	    function SuiteNavLinkIds() {
	    }
	    // Settings menu
	    SuiteNavLinkIds.CUSTOM_SETTINGS_1 = 'WorkloadSettingsSubLinks1';
	    SuiteNavLinkIds.CUSTOM_SETTINGS_2 = 'WorkloadSettingsSubLinks2';
	    SuiteNavLinkIds.CUSTOM_SETTINGS_3 = 'WorkloadSettingsSubLinks3';
	    SuiteNavLinkIds.FEEDBACK = 'ShellFeedback';
	    SuiteNavLinkIds.DIAGNOSTICS = 'Diagnostics';
	    SuiteNavLinkIds.O365_SETTINGS = 'ShellO365Settings'; // 'O365 settings'
	    SuiteNavLinkIds.ADD_APP = 'SuiteMenu_zz5_MenuItemCreate'; // 'Add an app'
	    SuiteNavLinkIds.CREATE_PAGE = 'SuiteMenu_MenuItemCreatePage'; // 'Create a publishing page'
	    SuiteNavLinkIds.SITE_CONTENTS = 'SuiteMenu_zz6_MenuItem_ViewAllSiteContents'; // 'Site contents'
	    SuiteNavLinkIds.SITE_SETTINGS = 'SuiteMenu_zz7_MenuItem_Settings'; // 'Site settings'
	    SuiteNavLinkIds.USER_ACTIVITY = 'UserActivity'; // User activity dialog
	    // Person menu
	    SuiteNavLinkIds.ABOUT_ME = 'ShellAboutMe'; // 'About me'/'Edit profile'
	    SuiteNavLinkIds.SETTINGS = 'ShellSettings'; // 'Account settings' (ODC)
	    SuiteNavLinkIds.MY_SETTINGS = 'SuiteMenu_zz2_ID_PersonalInformation'; // 'My Settings' (ODB)
	    SuiteNavLinkIds.SIGN_OUT = 'ShellSignout';
	    // Help menu
	    SuiteNavLinkIds.HELP = 'HelpLink';
	    SuiteNavLinkIds.COMMUNITY = 'ShellCommunity';
	    SuiteNavLinkIds.PRIVACY = 'ShellPrivacy';
	    SuiteNavLinkIds.LEGAL = 'ShellLegal';
	    // App switcher
	    SuiteNavLinkIds.MAIL = 'ShellMail'; // 'Outlook'/'Outlook.com'
	    SuiteNavLinkIds.CALENDAR = 'ShellCalendar';
	    SuiteNavLinkIds.PEOPLE = 'ShellPeople';
	    SuiteNavLinkIds.ONEDRIVE = 'ShellDocuments'; // 'OneDrive'
	    SuiteNavLinkIds.WORD = 'ShellWordOnline';
	    SuiteNavLinkIds.EXCEL = 'ShellExcelOnline';
	    SuiteNavLinkIds.POWERPOINT = 'ShellPowerPointOnline';
	    SuiteNavLinkIds.ONENOTE = 'ShellOneNoteOnline';
	    SuiteNavLinkIds.SITES = 'ShellSites';
	    SuiteNavLinkIds.YAMMER = 'ShellYammer';
	    SuiteNavLinkIds.TASKS = 'ShellTasks';
	    SuiteNavLinkIds.POWER_BI = 'ShellPowerBI';
	    SuiteNavLinkIds.DELVE = 'ShellOfficeGraph'; // 'Delve'
	    SuiteNavLinkIds.VIDEO = 'ShellVideo';
	    SuiteNavLinkIds.ALCHEMY = 'ShellAlchemy';
	    SuiteNavLinkIds.SMILE = 'ShellSendASmile';
	    return SuiteNavLinkIds;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = SuiteNavLinkIds;
	


/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var sp_client_base_1 = __webpack_require__(69);
	var sp_client_base_2 = __webpack_require__(69);
	var ApplicationContext_1 = __webpack_require__(91);
	var SPWeb_1 = __webpack_require__(94);
	var SPSite_1 = __webpack_require__(96);
	var SPList_1 = __webpack_require__(97);
	var SPListItem_1 = __webpack_require__(98);
	var SPUser_1 = __webpack_require__(99);
	var SPNavigationNodeCollection_1 = __webpack_require__(100);
	var PageContextCore_1 = __webpack_require__(101);
	/**
	  * The page context represents contextual information about the SharePoint page that
	  * is currently being viewed, such as its site URL, the client side application ID,
	  * the current user, etc.  The page context objects themselves represent key information
	  * that is needed e.g. to identify the site/web/list/listitem in a REST service call,
	  * but it is not a full cache with invalidation and change notifications.  If your
	  * application maintains such a cache, it can keep the PageContext up to date by
	  * means of methods such as SPListItem.updateOdataObject().
	  */
	var AppPageContext = (function () {
	    function AppPageContext(serviceScope) {
	        this._application = new ApplicationContext_1.default(this);
	        this._site = new SPSite_1.default(this);
	        this._web = new SPWeb_1.default(this);
	        this._list = new SPList_1.default(this);
	        this._listItem = new SPListItem_1.default(this);
	        this._quickLaunch = new SPNavigationNodeCollection_1.default(this);
	        this._topNav = new SPNavigationNodeCollection_1.default(this);
	        this._core = new PageContextCore_1.default(this);
	        this._user = new SPUser_1.default(this);
	        this._urlQueryParameters = new sp_client_base_2.UrlQueryParameterCollection(window.location.href);
	    }
	    Object.defineProperty(AppPageContext.prototype, "application", {
	        // TODO: Bug 176509: Change PageContext getters to readonly on Typescript 2.0 release
	        /**
	         * Contextual information for the client-side application.
	         */
	        get: function () {
	            return this._application;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AppPageContext.prototype, "site", {
	        /**
	         * Contextual information for the SharePoint site collection that is hosting the page.
	         * If unsure whether this object is initialized, check the SPSite.state property first.
	         */
	        get: function () {
	            return this._site;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AppPageContext.prototype, "web", {
	        /**
	         * Contextual information for the SharePoint site ("web") that is hosting the page.
	         * If unsure whether this object is initialized, check the SPWeb.state property first.
	         */
	        get: function () {
	            return this._web;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AppPageContext.prototype, "list", {
	        /**
	         * Contextual information for the SharePoint list that is hosting the page.
	         * If unsure whether this object is initialized, check the SPList.state property first.
	         */
	        get: function () {
	            return this._list;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AppPageContext.prototype, "listItem", {
	        /**
	         * Contextual information for the SharePoint list item that stores data for the page.
	         * If unsure whether this object is initialized, check the SPListItem.state property first.
	         */
	        get: function () {
	            return this._listItem;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AppPageContext.prototype, "quickLaunch", {
	        /**
	         * Contextual quick launch navigation information for the page.
	         * If unsure whether this object is initialized, check the SPNavigation.state property first.
	         */
	        get: function () {
	            return this._quickLaunch;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AppPageContext.prototype, "topNav", {
	        /**
	         * Top navigation information for the page.
	         * If unsure whether this object is initialized, check the SPNavigation.state property first.
	         */
	        get: function () {
	            return this._topNav;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AppPageContext.prototype, "core", {
	        /**
	         * Contextual information for the SharePoint SPPageContextInfo object
	         * If unsure whether this object is initialized, check the SPPageContextInfo.state property first.
	         */
	        get: function () {
	            return this._core;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AppPageContext.prototype, "user", {
	        /**
	         * Contextual information for the current SharePoint user
	         * If unsure whether this object is initialized, check the SPPageContextInfo.state property first.
	         */
	        get: function () {
	            return this._user;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AppPageContext.prototype, "urlQueryParameters", {
	        /**
	         * Object for retrieving the current page's query parameter values.
	         */
	        get: function () {
	            return this._urlQueryParameters;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return AppPageContext;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = AppPageContext;
	exports.appPageContextServiceKey = sp_client_base_1.ServiceKey.create('sp-client-preview:PageContext', AppPageContext);
	


/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var PageContextItem_1 = __webpack_require__(92);
	var GuidHelpers_1 = __webpack_require__(93);
	/**
	 * Tracks contextual information about the client-side application that
	 * is currently running.
	 */
	var ApplicationContext = (function (_super) {
	    __extends(ApplicationContext, _super);
	    function ApplicationContext(pageContext) {
	        _super.call(this, pageContext);
	        this._clientSideApplicationId = undefined;
	        this._hostedByClassicPage = undefined;
	    }
	    /**
	     * Assigns all properties of the object, then assigns the "state" property
	     * to PageContextItemState.Ready.
	     */
	    ApplicationContext.prototype.load = function (args) {
	        this.validateLoad();
	        GuidHelpers_1.default.requireValid(args.clientSideApplicationId);
	        this._clientSideApplicationId = args.clientSideApplicationId;
	        this._hostedByClassicPage = args.hostedByClassicPage;
	        this.state = PageContextItem_1.PageContextItemState.Ready;
	    };
	    Object.defineProperty(ApplicationContext.prototype, "clientSideApplicationId", {
	        /**
	         * Returns the client side component identifier for the client-side application.
	         * This corresponds to the "id" field in the application's manifest JSON file.
	         * Example: "00000000-0000-0000-0000-000000000000"
	         */
	        get: function () {
	            return this._clientSideApplicationId;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ApplicationContext.prototype, "hostedByClassicPage", {
	        /**
	         * Indicates whether the application is currently being hosted by a classic page,
	         * e.g. if a client side web part has been added to a classic publishing page.
	         */
	        get: function () {
	            return this._hostedByClassicPage;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return ApplicationContext;
	}(PageContextItem_1.default));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = ApplicationContext;
	


/***/ },
/* 92 */
/***/ function(module, exports) {

	"use strict";
	/**
	  * This enum is used with the PageContextItem.state property to indicate
	  * whether the PageContext objects are ready for usage.,
	  */
	(function (PageContextItemState) {
	    /**
	     * The object is not initialized, and there is no pending request to load it.
	     */
	    PageContextItemState[PageContextItemState["Uninitialized"] = 0] = "Uninitialized";
	    /**
	     * A promise is currently executing.  When it completes, the object will be loaded.
	     */
	    PageContextItemState[PageContextItemState["Requested"] = 1] = "Requested";
	    /**
	     * The object has been loaded and its state is valid.
	     */
	    PageContextItemState[PageContextItemState["Ready"] = 2] = "Ready";
	})(exports.PageContextItemState || (exports.PageContextItemState = {}));
	var PageContextItemState = exports.PageContextItemState;
	/**
	 * This is an abstract base class for the SPSite, SPWeb, SPList, SPListItem,
	 * and ApplicationContext classes.  It defines the "state" of these objects.
	 */
	var PageContextItem = (function () {
	    function PageContextItem(pageContext) {
	        this._pageContext = pageContext;
	        this._state = PageContextItemState.Uninitialized;
	    }
	    /**
	     * Returns the PageContext that owns this object.  You can use this to find
	     * other related objects, e.g. the parent SPWeb for an SPList.
	     */
	    PageContextItem.prototype.getPageContext = function () {
	        return this._pageContext;
	    };
	    Object.defineProperty(PageContextItem.prototype, "state", {
	        /**
	         * Indicates whether the context item is uninitialized, waiting to be loaded,
	         * or ready to use.
	         */
	        get: function () {
	            return this._state;
	        },
	        set: function (value) {
	            this._state = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Reports an error if the object has already been loaded.
	     */
	    PageContextItem.prototype.validateLoad = function () {
	        if (this._state === PageContextItemState.Ready) {
	            throw new Error('The object has already been loaded');
	        }
	    };
	    return PageContextItem;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = PageContextItem;
	


/***/ },
/* 93 */
/***/ function(module, exports) {

	"use strict";
	var GuidHelpers = (function () {
	    function GuidHelpers() {
	    }
	    GuidHelpers.isValid = function (guid) {
	        var regex = new RegExp('^[a-f0-9]{8}(?:-[a-f0-9]{4}){3}-[a-f0-9]{12}$', 'i');
	        return regex.test(guid);
	    };
	    GuidHelpers.requireValid = function (guid) {
	        if (!GuidHelpers.isValid(guid)) {
	            throw Error("Invalid GUID syntax " + guid);
	        }
	    };
	    /**
	     * Example: "/Guid(d5369f3b-bd7a-412a-9c0f-7f0650bb5489)/"
	     *          -> 'd5369f3b-bd7a-412a-9c0f-7f0650bb5489'
	     * Example: "{d5369f3b-bd7a-412a-9c0f-7f0650bb5489}"
	     *          -> 'd5369f3b-bd7a-412a-9c0f-7f0650bb5489'
	     */
	    GuidHelpers.getNormalized = function (guid) {
	        var normalized = guid;
	        var regexp = new RegExp('^/Guid\\((.*)\\)/', 'i');
	        var result = regexp.exec(guid);
	        if (result) {
	            normalized = result[1];
	        }
	        if (normalized.length === 38) {
	            // Strip leading/trailing {}
	            normalized = normalized.substr(1, 36);
	        }
	        GuidHelpers.requireValid(normalized);
	        return normalized.toLowerCase();
	    };
	    /* tslint:disable:no-bitwise */
	    GuidHelpers.generateGuid = function () {
	        return 'AAAAAAAA-AAAA-4AAA-BAAA-AAAAAAAAAAAA'
	            .replace(/[AB]/g, function (character) {
	            var num = Math.random() * 16 | 0;
	            var masked = character === 'A' ? num : (num & 0x3 | 0x8);
	            return masked.toString(16);
	        });
	    };
	    return GuidHelpers;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = GuidHelpers;
	


/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var PageContextItem_1 = __webpack_require__(92);
	var url_1 = __webpack_require__(95);
	var GuidHelpers_1 = __webpack_require__(93);
	/**
	  * This class is primarily used with the PageContext class.  It provides contextual
	  * information for the SharePoint site ("web") that hosts the page.
	  *
	  * @alpha
	  */
	var SPWeb = (function (_super) {
	    __extends(SPWeb, _super);
	    function SPWeb(pageContext) {
	        _super.call(this, pageContext);
	        this._id = undefined;
	        this._serverRelativeUrl = undefined;
	        this._title = undefined;
	    }
	    /**
	     * Assigns all properties of the object, then assigns the "state" property
	     * to PageContextItemState.Ready.
	     */
	    SPWeb.prototype.load = function (args) {
	        this.validateLoad();
	        GuidHelpers_1.default.requireValid(args.id);
	        this._id = args.id;
	        url_1.requireServerRelativeUrl(args.serverRelativeUrl);
	        this._serverRelativeUrl = args.serverRelativeUrl;
	        this._title = args.title;
	        this.state = PageContextItem_1.PageContextItemState.Ready;
	    };
	    Object.defineProperty(SPWeb.prototype, "id", {
	        /**
	         * The GUID that identifies the SPWeb on the server.
	         */
	        get: function () {
	            return this._id;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SPWeb.prototype, "serverRelativeUrl", {
	        /**
	         * Returns a server-relative URL for this SPWeb.
	         * Example: "/sites/PubSite/SubWeb"
	         */
	        get: function () {
	            return this._serverRelativeUrl;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SPWeb.prototype, "title", {
	        /**
	         * Returns the title of the SharePoint site.
	         */
	        get: function () {
	            return this._title;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SPWeb.prototype, "parentSite", {
	        /**
	         * Returns the parent site collection that this site ("web") belongs to.
	         */
	        get: function () {
	            return this.getPageContext().site;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Returns an ODATA object containing additional information for this SharePoint site ("web"),
	     * if available.  Otherwise, this returns undefined.  If your application fetches this
	     * data itself, it can call updateOdataObject() to update the context.
	     */
	    SPWeb.prototype.getOdataObject = function () {
	        return this._odataObject;
	    };
	    /**
	     * Updates the ODATA object that will be returned when getOdataObject() is called.
	     * This allows the application to share its data with other objects (e.g. web parts)
	     * to avoid unnecessary REST calls.
	     */
	    SPWeb.prototype.updateOdataObject = function (value) {
	        this._odataObject = value;
	    };
	    return SPWeb;
	}(PageContextItem_1.default));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = SPWeb;
	


/***/ },
/* 95 */
/***/ function(module, exports) {

	/**
	 * @copyright (c) Microsoft Corporation. All rights reserved.
	 */
	"use strict";
	/**
	 * Checks if the url argument is a server relative url.
	 *
	 * @param url - Test url
	 */
	function isServerRelative(url) {
	    // If the first character is a forward-slash the url is server relative
	    return url && url[0] === '/';
	}
	exports.isServerRelative = isServerRelative;
	/**
	 * Throw an Error if the url argument is not a server relative url.
	 *
	 * @param url - A string, which should be a server relative url.
	 */
	function requireServerRelativeUrl(url) {
	    if (!isServerRelative(url)) {
	        throw Error('A server-relative URL is required');
	    }
	}
	exports.requireServerRelativeUrl = requireServerRelativeUrl;
	


/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var PageContextItem_1 = __webpack_require__(92);
	var GuidHelpers_1 = __webpack_require__(93);
	var url_1 = __webpack_require__(95);
	/**
	  * This class is primarily used with the PageContext class.  It provides contextual
	  * information for the SharePoint site collection that hosts the page.
	  */
	var SPSite = (function (_super) {
	    __extends(SPSite, _super);
	    function SPSite(pageContext) {
	        _super.call(this, pageContext);
	        this._id = undefined;
	        this._serverRelativeUrl = undefined;
	        this._title = undefined;
	    }
	    /**
	     * Assigns all properties of the object, then assigns the "state" property
	     * to PageContextItemState.Ready.
	     */
	    SPSite.prototype.load = function (args) {
	        this.validateLoad();
	        GuidHelpers_1.default.requireValid(args.id);
	        this._id = args.id;
	        url_1.requireServerRelativeUrl(args.serverRelativeUrl);
	        this._serverRelativeUrl = args.serverRelativeUrl;
	        this._title = args.title;
	        this.state = PageContextItem_1.PageContextItemState.Ready;
	    };
	    Object.defineProperty(SPSite.prototype, "id", {
	        /**
	         * The GUID that identifies the SPSite on the server.
	         */
	        get: function () {
	            return this._id;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SPSite.prototype, "serverRelativeUrl", {
	        /**
	         * Returns a server-relative URL for this SPSite.
	         * Example: "/sites/PubSite"
	         */
	        get: function () {
	            return this._serverRelativeUrl;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SPSite.prototype, "title", {
	        /**
	         * Returns the title of the current site collection.
	         */
	        get: function () {
	            return this._title;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return SPSite;
	}(PageContextItem_1.default));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = SPSite;
	


/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var PageContextItem_1 = __webpack_require__(92);
	var GuidHelpers_1 = __webpack_require__(93);
	/**
	  * This class is primarily used with the PageContext class.  It provides contextual
	  * information for the SharePoint site collection that is hosting the page.
	  *
	  * @alpha
	  */
	var SPList = (function (_super) {
	    __extends(SPList, _super);
	    function SPList(pageContext) {
	        _super.call(this, pageContext);
	        this._id = undefined;
	        this._title = undefined;
	        this._description = undefined;
	    }
	    /**
	     * Assigns all properties of the object, then assigns the "state" property
	     * to PageContextItemState.Ready.
	     */
	    SPList.prototype.load = function (args) {
	        this.validateLoad();
	        GuidHelpers_1.default.requireValid(args.id);
	        this._id = args.id;
	        this._title = args.title;
	        this._description = args.description;
	        this.state = PageContextItem_1.PageContextItemState.Ready;
	    };
	    Object.defineProperty(SPList.prototype, "id", {
	        /**
	         * The GUID that identifies the SPList on the server.
	         */
	        get: function () {
	            return this._id;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SPList.prototype, "title", {
	        /**
	         * The title of the list.
	         */
	        get: function () {
	            return this._title;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SPList.prototype, "description", {
	        /**
	         * The description of the list.
	         */
	        get: function () {
	            return this._description;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SPList.prototype, "parentWeb", {
	        /**
	         * The parent SPWeb that this list belongs to.
	         */
	        get: function () {
	            return this.getPageContext().web;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Returns an ODATA object containing additional information for this list, if available.
	     * Otherwise, this returns undefined.  If your application fetches this data itself, it
	     * can call updateOdataObject() to update the context.
	     */
	    SPList.prototype.getOdataObject = function () {
	        return this._odataObject;
	    };
	    /**
	     * Updates the ODATA object that will be returned when getOdataObject() is called.
	     * This allows the application to share its data with other objects (e.g. web parts)
	     * to avoid unnecessary REST calls.
	     */
	    SPList.prototype.updateOdataObject = function (value) {
	        this._odataObject = value;
	    };
	    return SPList;
	}(PageContextItem_1.default));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = SPList;
	


/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var PageContextItem_1 = __webpack_require__(92);
	/**
	  * This class is primarily used with the PageContext class.  It provides contextual
	  * information for the SharePoint list item associated with the current page.
	  *
	  * @alpha
	  */
	var SPListItem = (function (_super) {
	    __extends(SPListItem, _super);
	    function SPListItem(pageContext) {
	        _super.call(this, pageContext);
	        this._id = undefined;
	        this._list = undefined;
	        this._odataObject = undefined;
	    }
	    /**
	     * Assigns all properties of the object, then assigns the "state" property
	     * to PageContextItemState.Ready.
	     */
	    SPListItem.prototype.load = function (args) {
	        this.validateLoad();
	        this._id = args.id;
	        this.state = PageContextItem_1.PageContextItemState.Ready;
	    };
	    Object.defineProperty(SPListItem.prototype, "id", {
	        /**
	         * Returns the integer that identifies this list item on the server.  These integers
	         * are assigned in increasing order.
	         */
	        get: function () {
	            return this._id;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SPListItem.prototype, "parentList", {
	        /**
	         * Returns the SPList that this list item belongs to.
	         */
	        get: function () {
	            return this.getPageContext().list;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Returns an ODATA object containing additional information for this list item, if available.
	     * Otherwise, this returns undefined.  If your application fetches this data itself, it
	     * can call updateOdataObject() to update the context.
	     */
	    SPListItem.prototype.getOdataObject = function () {
	        return this._odataObject;
	    };
	    /**
	     * Updates the ODATA object that will be returned when getOdataObject() is called.
	     * This allows the application to share its data with other objects (e.g. web parts)
	     * to avoid unnecessary REST calls.
	     */
	    SPListItem.prototype.updateOdataObject = function (value) {
	        this._odataObject = value;
	    };
	    return SPListItem;
	}(PageContextItem_1.default));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = SPListItem;
	


/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var PageContextItem_1 = __webpack_require__(92);
	/**
	  * This class is primarily used with the PageContext class.  It provides contextual
	  * information for the current user visiting the page.
	  *
	  * @alpha
	  */
	var SPUser = (function (_super) {
	    __extends(SPUser, _super);
	    function SPUser(pageContext) {
	        _super.call(this, pageContext);
	        this._id = undefined;
	    }
	    /**
	     * Assigns all properties of the object, then assigns the "state" property
	     * to PageContextItemState.Ready.
	     */
	    SPUser.prototype.load = function (args) {
	        this.validateLoad();
	        this._id = args.id;
	        this.state = PageContextItem_1.PageContextItemState.Ready;
	    };
	    Object.defineProperty(SPUser.prototype, "id", {
	        /**
	         * The ID that identifies the SPUser on the server.
	         */
	        get: function () {
	            return this._id;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Returns an ODATA object containing additional information for this user, if available.
	     * Otherwise, this returns undefined.  If your application fetches this data itself, it
	     * can call updateOdataObject() to update the context.
	     */
	    SPUser.prototype.getOdataObject = function () {
	        return this._odataObject;
	    };
	    /**
	     * Updates the ODATA object that will be returned when getOdataObject() is called.
	     * This allows the application to share its data with other objects (e.g. web parts)
	     * to avoid unnecessary REST calls.
	     */
	    SPUser.prototype.updateOdataObject = function (value) {
	        this._odataObject = value;
	    };
	    return SPUser;
	}(PageContextItem_1.default));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = SPUser;
	


/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var PageContextItem_1 = __webpack_require__(92);
	/**
	  * This class is primarily used with the PageContext class. It provides navigation
	  * information for the hosting application.
	  *
	  * @alpha
	  */
	var SPNavigationNodeCollection = (function (_super) {
	    __extends(SPNavigationNodeCollection, _super);
	    function SPNavigationNodeCollection(pageContext) {
	        _super.call(this, pageContext);
	        this.state = PageContextItem_1.PageContextItemState.Ready;
	    }
	    Object.defineProperty(SPNavigationNodeCollection.prototype, "items", {
	        /**
	         * Returns all navigation nodes in the collection.
	         */
	        get: function () {
	            return this._items;
	        },
	        /**
	         * Returns all navigation nodes in the collection.
	         */
	        set: function (value) {
	            this._items = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Returns an ODATA object containing additional navigation information if available.
	     * Otherwise, this returns undefined.  If your application fetches this
	     * data itself, it can call updateOdataObject() to update the context.
	     */
	    SPNavigationNodeCollection.prototype.getOdataObject = function () {
	        return this._odataObject;
	    };
	    /**
	     * Updates the ODATA object that will be returned when getOdataObject() is called.
	     * This allows the application to share its data with other objects (e.g. web parts)
	     * to avoid unnecessary REST calls.
	     */
	    SPNavigationNodeCollection.prototype.updateOdataObject = function (value) {
	        this._odataObject = value;
	    };
	    return SPNavigationNodeCollection;
	}(PageContextItem_1.default));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = SPNavigationNodeCollection;
	


/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var sp_client_base_1 = __webpack_require__(69);
	var PageContextItem_1 = __webpack_require__(92);
	/**
	  * This class is primarily used with the PageContext class.  It provides contextual
	  * information for the SharePoint site collection that is hosting the page.
	  */
	var PageContextCore = (function (_super) {
	    __extends(PageContextCore, _super);
	    function PageContextCore(pageContext) {
	        _super.call(this, pageContext);
	    }
	    /**
	     * Assigns all properties of the object, then assigns the "state" property
	     * to PageContextItemState.Ready.
	     */
	    PageContextCore.prototype.load = function (args) {
	        this.validateLoad();
	        this._menuData = args.MenuData;
	        this._currentCultureName = args.currentCultureName;
	        this._currentUICultureName = args.currentUICultureName;
	        this._initialCorrelationId = args.correlationId;
	        this._spoEnvironment = args.spoEnvironment;
	        this._farmLabel = args.farmLabel;
	        this._groupColor = args.groupColor;
	        this._hasManageWebPermission = args.hasManageWebPermission;
	        this._listPermsMask = args.listPermsMask;
	        this._layoutsUrl = args.layoutsUrl;
	        this._siteAbsoluteUrl = args.siteAbsoluteUrl;
	        this._siteClientTag = args.siteClientTag;
	        this._siteServerRelativeUrl = args.siteServerRelativeUrl;
	        this._siteSubscriptionId = args.siteSubscriptionId;
	        this._siteId = args.siteId;
	        this._systemUserKey = args.systemUserKey;
	        this._themedCssFolderUrl = args.themedCssFolderUrl;
	        this._userDisplayName = args.userDisplayName;
	        this._userLoginName = args.userLoginName;
	        this._webAbsoluteUrl = args.webAbsoluteUrl;
	        this._webId = args.webId;
	        this._webLogoUrl = args.webLogoUrl;
	        this._webServerRelativeUrl = args.webServerRelativeUrl;
	        this._webTitle = args.webTitle;
	        this._webTemplate = args.webTemplate;
	        this._webPermMasks = new sp_client_base_1.SPPermission(args.webPermMasks);
	        this.state = PageContextItem_1.PageContextItemState.Ready;
	    };
	    Object.defineProperty(PageContextCore.prototype, "menuData", {
	        /**
	         * Common menu data that is shared throughout all Sharepoint applications.
	         */
	        get: function () {
	            return this._menuData;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PageContextCore.prototype, "currentCultureName", {
	        /**
	         * The culture used for rendering date/time components.
	         */
	        get: function () {
	            return this._currentCultureName;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PageContextCore.prototype, "currentUICultureName", {
	        /**
	         * The culture used for rendering UI components.
	         */
	        get: function () {
	            return this._currentUICultureName;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PageContextCore.prototype, "initialCorrelationId", {
	        /**
	         * The GUID that identifies the CorrelationId of the request.
	         */
	        get: function () {
	            return this._initialCorrelationId;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PageContextCore.prototype, "spoEnvironment", {
	        /**
	         * The name of the SPO Environment (eDog, MSIT, Prod, ...) for this request.
	         */
	        get: function () {
	            return this._spoEnvironment;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PageContextCore.prototype, "farmLabel", {
	        /**
	         * The farm Label for this request. (US_2_Content)
	         */
	        get: function () {
	            return this._farmLabel;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PageContextCore.prototype, "groupColor", {
	        /**
	         * The group Color (ie "0xFFFFFF"") (only from Group Sites)
	         */
	        get: function () {
	            return this._groupColor;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PageContextCore.prototype, "layoutsUrl", {
	        /**
	         * The relative layout url of the web
	         */
	        get: function () {
	            return this._layoutsUrl;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PageContextCore.prototype, "hasManageWebPermission", {
	        /**
	         * Indicates if the user has ManageWeb Permissions for the site this request was in.
	         */
	        get: function () {
	            return this._hasManageWebPermission;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PageContextCore.prototype, "listPermsMask", {
	        /**
	         * The Mask of list Permissions for the current user in the list of this request.
	         */
	        get: function () {
	            return this._listPermsMask;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PageContextCore.prototype, "siteAbsoluteUrl", {
	        /**
	         * The AbsoluteUrl of this request.
	         */
	        get: function () {
	            return this._siteAbsoluteUrl;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PageContextCore.prototype, "siteClientTag", {
	        /**
	         * The site's version number of sharepoint.
	         */
	        get: function () {
	            return this._siteClientTag;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PageContextCore.prototype, "siteId", {
	        /**
	           * The site's id on sharepoint.
	           */
	        get: function () {
	            return this._siteId;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PageContextCore.prototype, "siteServerRelativeUrl", {
	        /**
	         * The server relative Url to the SPSite
	         */
	        get: function () {
	            return this._siteServerRelativeUrl;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PageContextCore.prototype, "siteSubscriptionId", {
	        /**
	         * The siteSubscriptionId of the Tenant for which this request was made.
	         */
	        get: function () {
	            return this._siteSubscriptionId;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PageContextCore.prototype, "systemUserKey", {
	        /**
	         * The string that represents the unique user.
	         */
	        get: function () {
	            return this._systemUserKey;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PageContextCore.prototype, "themedCssFolderUrl", {
	        /**
	         * The url for the themed CSS if this site has a theme appplied, otherwise null.
	         */
	        get: function () {
	            return this._themedCssFolderUrl;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PageContextCore.prototype, "userDisplayName", {
	        /**
	         * The absolute url to the SPWeb
	         */
	        get: function () {
	            return this._userDisplayName;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PageContextCore.prototype, "userLoginName", {
	        /**
	         * The absolute url to the SPWeb
	         */
	        get: function () {
	            return this._userLoginName;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PageContextCore.prototype, "webAbsoluteUrl", {
	        /**
	         * The absolute url to the SPWeb
	         */
	        get: function () {
	            return this._webAbsoluteUrl;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PageContextCore.prototype, "webId", {
	        /**
	         * The absolute url to the SPWeb
	         */
	        get: function () {
	            return this._webId;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PageContextCore.prototype, "webLogoUrl", {
	        /**
	         * The server relative Url to the web Logo
	         */
	        get: function () {
	            return this._webLogoUrl;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PageContextCore.prototype, "webServerRelativeUrl", {
	        /**
	         * The server Relative url to the SPWeb
	         */
	        get: function () {
	            return this._webServerRelativeUrl;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PageContextCore.prototype, "webTitle", {
	        /**
	         * The Title of the Web
	         */
	        get: function () {
	            return this._webTitle;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PageContextCore.prototype, "webTemplate", {
	        /**
	         * The site template used to create the web.
	         */
	        get: function () {
	            return this._webTemplate;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Returns an ODATA object containing additional information for this list, if available.
	     * Otherwise, this returns undefined.  If your application fetches this data itself, it
	     * can call updateOdataObject() to update the context.
	     */
	    PageContextCore.prototype.getOdataObject = function () {
	        return this._odataObject;
	    };
	    /**
	     * Updates the ODATA object that will be returned when getOdataObject() is called.
	     * This allows the application to share its data with other objects (e.g. web parts)
	     * to avoid unnecessary REST calls.
	     */
	    PageContextCore.prototype.updateOdataObject = function (value) {
	        this._odataObject = value;
	    };
	    Object.defineProperty(PageContextCore.prototype, "userPermissionsForWeb", {
	        /**
	         * The permissions mask of the current user on the web.
	         */
	        get: function () {
	            return this._webPermMasks;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return PageContextCore;
	}(PageContextItem_1.default));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = PageContextCore;
	


/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var PageContextItem_1 = __webpack_require__(92);
	/**
	  * This class is primarily used with the PageContext class.  It provides quick launch
	  * navigation information for the hosting application.
	  *
	  * @alpha
	  */
	var SPNavigationNode = (function (_super) {
	    __extends(SPNavigationNode, _super);
	    function SPNavigationNode(pageContext) {
	        _super.call(this, pageContext);
	    }
	    /**
	     * Assigns all properties of the object, then assigns the "state" property
	     * to PageContextItemState.Ready.
	     */
	    SPNavigationNode.prototype.load = function (args) {
	        this.validateLoad();
	        this._id = args.id;
	        this.state = PageContextItem_1.PageContextItemState.Ready;
	    };
	    Object.defineProperty(SPNavigationNode.prototype, "id", {
	        /**
	         * The numeric ID that identifies the SPNavigationNode on the server.
	         */
	        get: function () {
	            return this._id;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Returns an ODATA object containing additional navigation information if available.
	     * Otherwise, this returns undefined.  If your application fetches thiscls
	     * data itself, it can call updateOdataObject() to update the context.
	     */
	    SPNavigationNode.prototype.getOdataObject = function () {
	        return this._odataObject;
	    };
	    /**
	     * Updates the ODATA object that will be returned when getOdataObject() is called.
	     * This allows the application to share its data with other objects (e.g. web parts)
	     * to avoid unnecessary REST calls.
	     */
	    SPNavigationNode.prototype.updateOdataObject = function (value) {
	        this._odataObject = value;
	    };
	    return SPNavigationNode;
	}(PageContextItem_1.default));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = SPNavigationNode;
	


/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @copyright (c) Microsoft Corporation. All rights reserved.
	 */
	"use strict";
	var React = __webpack_require__(82);
	var reactDOM = __webpack_require__(83);
	var CanvasComponent_1 = __webpack_require__(104);
	var CanvasStore_1 = __webpack_require__(201);
	__webpack_require__(232);
	/**
	 * SharePoint Client-side Applications can use the SharePoint Canvas to enable rich content authoring
	 * as part of their experience. The SharePoint canvas provides Rich Text Editing capabilities, SharePoint
	 * Client-side WebPart aggregation and hosting, and a beautiful railed design experience.
	 *
	 * @unreleased
	 * @public
	 */
	var Canvas = (function () {
	    /**
	     * Construct a new instance of the Canvas.
	     *
	     * @param serviceScope - A context object that will provide dependencies needed by the canvas and
	     *   any web parts that it loads.
	     * @param container - The host DOM container for the Canvas. When render() is invoked the Canvas will
	     *   render into 'container'.
	     * @param mode - The initial DisplayMode of the Canvas.
	     * @param serializedCanvas - Optional. Used to initialize a Canvas' state when render() is invoked. The
	     *   string must have been created by a previous instance of the Canvas. If absent, an empty Canvas will
	     *   be rendered. If present, the Canvas will rehydrate to represent the state of the Canvas when
	     *   serialized.
	     * @param handleCanvasChanged - Optional. When text is editied or canvas controls are added/removed this
	     *   callback will be invoked. Web parts will also invoke this call back when there is interaction with
	     *   the web part.
	     * @param scrollThreshold - Optional. If the Canvas is inside a scrollable element, this value can be passed
	     * to let the Canvas know how much of the initial scrolling must be ignored in re-positioning its inner elements.
	     * This is useful when the Canvas has a non-zero top relative to its scrollable parent. In that case, a part of
	     * the initial scrolling does not move the Canvas out of view and must be ignored by the Canvas. Defaults to zero
	     */
	    function Canvas(serviceScope, container, mode, serializedCanvas, handleCanvasChanged, scrollThreshold) {
	        this._render = this._render.bind(this);
	        this._container = container;
	        this._store =
	            new CanvasStore_1.default(serviceScope, this._render, mode, serializedCanvas, handleCanvasChanged, scrollThreshold);
	    }
	    /**
	     * Render the Canvas into its container DOM element. The Canvas will use the DisplayMode it was
	     * constructed with.
	     * If the Canvas has already been rendered once, the Canvas will clear its contents and then, if present,
	     * use 'serializedCanvas' to rehydrate itself.
	     *
	     * @param serializedCanvas - Optional. The string must have been created by a previous instance of
	     *   the Canvas. If absent, an empty Canvas will be rendered. If present, the Canvas will rehydrate
	     *   to represent the state of the Canvas when serialized.
	     */
	    Canvas.prototype.render = function (serializedCanvas) {
	        // Unmount any existing Canvas instances
	        this.dispose();
	        this._store.webPartManager.dispose();
	        /**
	         * @see CanvasStore.handleWindowBlur
	         */
	        window.addEventListener('blur', this._store.handleWindowBlur, true);
	        this._store.deserialize(serializedCanvas);
	        this._render();
	    };
	    Object.defineProperty(Canvas.prototype, "count", {
	        /**
	         * @return The number of controls in the Canvas.
	         */
	        get: function () {
	            return this._store.controlsProps.length;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Canvas.prototype, "previewImageUrl", {
	        /**
	          * Get the preview image url generated from webpart manager if it is available.
	          * The preview image is the first preview image provided by a webpart
	          *
	          * @return the URL of the preview image
	          */
	        get: function () {
	            return this._store.tryGeneratePreviewImageUrl();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Canvas.prototype, "displayMode", {
	        /**
	         * Re-render the Canvas in a new DisplayMode.
	         *
	         * @param newMode - The desired DisplayMode of the Canvas
	         */
	        set: function (newMode) {
	            this._store.displayMode = newMode;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Unmount the Canvas from the container it was constructed with.
	     */
	    Canvas.prototype.dispose = function () {
	        window.removeEventListener('blur', this._store.handleWindowBlur, true);
	        reactDOM.unmountComponentAtNode(this._container);
	    };
	    /**
	     * Display the Canvas' Toolbox at a given row. If the Toolbox is already open, the Toolbox will close
	     * at its previous row and re-open at the new row.
	     *
	     * @param row - The desired row for the Toolbox to open at. The rows are zero-based numbered.
	     *   If an invalid row is passed, no changes will occur.
	     *
	     * @return A boolean indicating whether the Toolbox successfully opened.
	     */
	    Canvas.prototype.openToolbox = function (row) {
	        var didToolboxOpen = false;
	        if (0 <= row && row <= this._store.controlsProps.length) {
	            var hint = document.querySelectorAll('.CanvasToolboxHint')[row];
	            this._store.openToolbox(row, hint.offsetTop);
	            didToolboxOpen = true;
	        }
	        return didToolboxOpen;
	    };
	    /**
	     * Serialize the current contents of the Canvas. The serialized string is in a HTML format understood by
	     * SharePoint's Rich Text Field. The returned string can be crawled by search. Modifying the returned
	     * string outside of the Canvas is not supported.
	     *
	     * @return Serialized representation of the Canvas at the time the method is invoked.
	     */
	    Canvas.prototype.serialize = function () {
	        return this._store.serialize();
	    };
	    Canvas.prototype._render = function () {
	        var props = {
	            store: this._store
	        };
	        var coreElement = React.createElement(CanvasComponent_1.default, props);
	        this._coreComponent = reactDOM.render(coreElement, this._container);
	    };
	    return Canvas;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = Canvas;
	


/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var React = __webpack_require__(82);
	var ReactDOM = __webpack_require__(83);
	var css_1 = __webpack_require__(105);
	var sp_client_base_1 = __webpack_require__(69);
	var CanvasControlFactory_1 = __webpack_require__(106);
	var CanvasZone_1 = __webpack_require__(134);
	var CanvasA11y_1 = __webpack_require__(117);
	var CanvasToolboxHint_1 = __webpack_require__(139);
	var ConfirmationDialog_1 = __webpack_require__(143);
	var Toolbar_1 = __webpack_require__(179);
	var Toolbox_1 = __webpack_require__(188);
	var CanvasStrings_resx_1 = __webpack_require__(110);
	var CanvasComponent = (function (_super) {
	    __extends(CanvasComponent, _super);
	    function CanvasComponent(props, context) {
	        _super.call(this, props, context);
	    }
	    CanvasComponent.prototype.getChildContext = function () {
	        return {
	            store: this.props.store
	        };
	    };
	    CanvasComponent.prototype.render = function () {
	        var store = this.props.store;
	        var controlsProps = store.controlsProps;
	        var deletedRow = store.deletedRow;
	        var displayMode = store.displayMode;
	        var toolboxProps = store.toolboxProps;
	        var rows = [];
	        var row = 0;
	        if (controlsProps) {
	            for (var _i = 0, controlsProps_1 = controlsProps; _i < controlsProps_1.length; _i++) {
	                var control = controlsProps_1[_i];
	                var isSelected = store.selectedControlId === control.id;
	                if (isSelected && row) {
	                    // Replace the last hint pushed with a hint that is visible
	                    rows.pop();
	                    rows.push(React.createElement(CanvasToolboxHint_1.default, {ariaLabel: CanvasStrings_resx_1.default.ToolboxHintTitle, isVisible: true, key: row, row: row}));
	                }
	                rows.push(React.createElement(CanvasZone_1.default, {displayMode: displayMode, id: control.id, isSelected: isSelected, key: control.id, row: row}, CanvasControlFactory_1.default.CreateCanvasControl(control, store), React.createElement(Toolbar_1.default, {controlType: control.controlType, displayMode: displayMode, id: control.id, row: row, onConfigureButtonClick: store.handleConfigureButtonClicked, onDeleteButtonClick: store.handleDeleteButtonClicked})));
	                ++row;
	                rows.push(React.createElement(CanvasToolboxHint_1.default, {ariaLabel: CanvasStrings_resx_1.default.ToolboxHintTitle, isVisible: toolboxProps.row === row, shouldFocus: deletedRow === row, key: row, row: row}));
	            }
	        }
	        /**
	         * Only set focus on a hint during the render after control is deleted.
	         */
	        store.deletedRow = undefined;
	        var className = css_1.css('Canvas', {
	            'Canvas--edit': displayMode === sp_client_base_1.DisplayMode.Edit
	        });
	        return (React.createElement("div", {className: className, role: displayMode === sp_client_base_1.DisplayMode.Edit ? 'application' : undefined}, React.createElement(CanvasToolboxHint_1.default, {ariaLabel: CanvasStrings_resx_1.default.ToolboxHintTitle, shouldFocus: deletedRow === 0, isVisible: rows[0] && rows[0].props.isSelected || toolboxProps.row === 0, row: 0}), rows, React.createElement(Toolbox_1.default, React.__spread({}, toolboxProps)), React.createElement(ConfirmationDialog_1.default, {isOpen: store.isDeleteDialogOpen, message: CanvasStrings_resx_1.default.DeleteConfirmationDialogMessage, onConfirmation: store.handleDeleteDialogConfirmation, onDismiss: store.handleDeleteDialogDismiss, title: CanvasStrings_resx_1.default.DeleteConfirmationDialogTitle})));
	    };
	    CanvasComponent.prototype.componentDidMount = function () {
	        var canvasElement = ReactDOM.findDOMNode(this);
	        this.props.store.canvasElement = canvasElement;
	        this.props.store.a11yManager = new CanvasA11y_1.CanvasA11yManager(canvasElement);
	        // Find and set scrollable parent
	        var canvasContainer = canvasElement;
	        var hasScrollbar = false;
	        do {
	            canvasContainer = canvasContainer.parentElement;
	            var overflowY = window.getComputedStyle(canvasContainer)['overflow-y'];
	            hasScrollbar = (overflowY === 'scroll' || overflowY === 'auto');
	        } while (!hasScrollbar && canvasContainer.tagName !== 'BODY');
	        this.props.store.scrollableParent = canvasContainer;
	    };
	    CanvasComponent.childContextTypes = {
	        store: React.PropTypes.object.isRequired
	    };
	    return CanvasComponent;
	}(React.Component));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = CanvasComponent;
	


/***/ },
/* 105 */
/***/ function(module, exports) {

	"use strict";
	function css() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i - 0] = arguments[_i];
	    }
	    var classes = [];
	    for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {
	        var arg = args_1[_a];
	        if (arg) {
	            if (typeof arg === 'string') {
	                classes.push(arg);
	            }
	            else {
	                for (var key in arg) {
	                    if (arg[key]) {
	                        classes.push(key);
	                    }
	                }
	            }
	        }
	    }
	    return classes.join(' ');
	}
	exports.css = css;
	


/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var React = __webpack_require__(82);
	var CanvasControlType_1 = __webpack_require__(107);
	var SPRte_1 = __webpack_require__(108);
	var WebPartZone_1 = __webpack_require__(133);
	var CanvasControlFactory = (function () {
	    function CanvasControlFactory() {
	    }
	    CanvasControlFactory.CreateCanvasControl = function (props, store) {
	        props.onChange = store.notifyChanged;
	        props.ref = store.addReference;
	        var control;
	        switch (props.controlType) {
	            case CanvasControlType_1.default.RTE:
	                control = React.createElement(SPRte_1.default, props);
	                break;
	            case CanvasControlType_1.default.WebPartZone:
	                control = React.createElement(WebPartZone_1.default, props);
	                break;
	        }
	        return control;
	    };
	    return CanvasControlFactory;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = CanvasControlFactory;
	


/***/ },
/* 107 */
/***/ function(module, exports) {

	"use strict";
	var CanvasControlType;
	(function (CanvasControlType) {
	    CanvasControlType[CanvasControlType["BodyText"] = 0] = "BodyText";
	    CanvasControlType[CanvasControlType["HeaderText"] = 1] = "HeaderText";
	    CanvasControlType[CanvasControlType["QuoteText"] = 2] = "QuoteText";
	    CanvasControlType[CanvasControlType["WebPartZone"] = 3] = "WebPartZone";
	    CanvasControlType[CanvasControlType["RTE"] = 4] = "RTE";
	})(CanvasControlType || (CanvasControlType = {}));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = CanvasControlType;
	


/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @copyright Microsoft Corporation. All rights reserved.
	 */
	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var React = __webpack_require__(82);
	var ReactDom = __webpack_require__(83);
	var sp_client_base_1 = __webpack_require__(69);
	var odsp_utilities_bundle_1 = __webpack_require__(6);
	var SPRteConfiguration_1 = __webpack_require__(109);
	var SPRteFormattingBar_1 = __webpack_require__(111);
	var SPRteLinkDialog_1 = __webpack_require__(116);
	var QuillEditor_1 = __webpack_require__(118);
	var ToolbarButton_1 = __webpack_require__(122);
	var ToolbarSubmenu_1 = __webpack_require__(126);
	var CanvasA11y_1 = __webpack_require__(117);
	__webpack_require__(130);
	var CanvasStrings_resx_1 = __webpack_require__(110);
	/**
	 * @class Rich Text Editor class. This component wraps around all the RTE logic including the text editor
	 * and the formatting bar and is used as a canvas control.
	 */
	var SPRte = (function (_super) {
	    __extends(SPRte, _super);
	    function SPRte(props) {
	        _super.call(this, props);
	        this._checkSelectionChange = this._checkSelectionChange.bind(this);
	        this._getFormatButtonProps = this._getFormatButtonProps.bind(this);
	        this._handleAlignCenter = this._handleAlignCenter.bind(this);
	        this._handleAlignLeft = this._handleAlignLeft.bind(this);
	        this._handleAlignRight = this._handleAlignRight.bind(this);
	        this._handleBold = this._handleBold.bind(this);
	        this._handleClearFormatting = this._handleClearFormatting.bind(this);
	        this._handleEditorFocus = this._handleEditorFocus.bind(this);
	        this._handleHeading2 = this._handleHeading2.bind(this);
	        this._handleHeading3 = this._handleHeading3.bind(this);
	        this._handleHeading4 = this._handleHeading4.bind(this);
	        this._handleItalic = this._handleItalic.bind(this);
	        this._handleLink = this._handleLink.bind(this);
	        this._handleListBullets = this._handleListBullets.bind(this);
	        this._handleListNumbered = this._handleListNumbered.bind(this);
	        this._handlePlainText = this._handlePlainText.bind(this);
	        this._handleQuote = this._handleQuote.bind(this);
	        this._handleSelectionChange = this._handleSelectionChange.bind(this);
	        this._handleTextChange = this._handleTextChange.bind(this);
	        this._handleUnderline = this._handleUnderline.bind(this);
	        this._handleUnlink = this._handleUnlink.bind(this);
	        this._handleFormattingBarKeyDown = this._handleFormattingBarKeyDown.bind(this);
	        this._handleKeyDown = this._handleKeyDown.bind(this);
	        this._handleKeyUp = this._handleKeyUp.bind(this);
	        this._handleScroll = this._handleScroll.bind(this);
	        this._restoreOnFocus = this._restoreOnFocus.bind(this);
	        this._onLinkDialogSaved = this._onLinkDialogSaved.bind(this);
	        this._openLinkDialog = this._openLinkDialog.bind(this);
	        this._closeLinkDialog = this._closeLinkDialog.bind(this);
	        this.state = {
	            displayMode: this.props.displayMode,
	            formattingBarPosition: undefined,
	            isFormattingBarHidden: true,
	            isLinkDialogOpen: false
	        };
	        this._config = new SPRteConfiguration_1.default();
	        this._restoreScrollTopOnNextFocus = false;
	        this._restoreSelectionOnNextFocus = false;
	        this._buttonStates = new Map();
	        this._selectionInitiated = false;
	        this._selectionShouldEnd = false;
	        if (this.state.displayMode === sp_client_base_1.DisplayMode.Edit && !this._editor) {
	            QuillEditor_1.default.moduleLoader.loadModule();
	        }
	    }
	    SPRte.prototype.render = function () {
	        var _this = this;
	        var formattingBar;
	        var html;
	        var className;
	        if (this.state.displayMode === sp_client_base_1.DisplayMode.Read) {
	            className = 'ql-container';
	            html = this._previousHTML || this.props.innerHTML;
	        }
	        // Do not render a formatting bar if the control is not in edit mode and the
	        // formatting bar is hidden
	        var isEditMode = this.state.displayMode === sp_client_base_1.DisplayMode.Edit;
	        if (isEditMode && !this.state.isFormattingBarHidden) {
	            formattingBar = React.createElement(SPRteFormattingBar_1.default, {buttons: this._formattingBarButtons, position: this.state.formattingBarPosition, onKeyDown: this._handleFormattingBarKeyDown, ref: function (c) { return _this._formattingbar = c; }});
	        }
	        return (React.createElement("div", {ref: function (c) { return _this._domElement = c; }}, React.createElement("div", {"aria-role": isEditMode ? 'textbox' : undefined, "aria-multiline": isEditMode || undefined, dangerouslySetInnerHTML: { __html: html }, className: className, onKeyUp: this._handleKeyUp, ref: function (c) { return _this._editorElement = c; }}), formattingBar, React.createElement(SPRteLinkDialog_1.default, {editorElement: this._editableDiv, isOpen: this.state.isLinkDialogOpen, onCancelClicked: this._closeLinkDialog, onDismiss: this._closeLinkDialog, onSaveClicked: this._onLinkDialogSaved, ref: function (c) { return _this._linkDialog = c; }, textFieldValue: this._linkAddress || '', validationRegex: SPRte._URL_VALIDATION_REGEX})));
	    };
	    SPRte.prototype.componentDidMount = function () {
	        var _this = this;
	        if (this.state.displayMode === sp_client_base_1.DisplayMode.Edit) {
	            this._createNewEditor(this.props.innerHTML || '').then(function (editor) {
	                _this._afterEditorCreated(editor);
	                _this.context.store.webPartManager.configureStart(undefined);
	                _this.focus();
	            });
	        }
	    };
	    SPRte.prototype.componentDidUpdate = function (prevProps, prevState) {
	        if (this._formattingbar) {
	            this._formattingbarElement = ReactDom.findDOMNode(this._formattingbar);
	            this._formattingbarWidth = this._formattingbarElement.offsetWidth || this._formattingbarWidth;
	            if (this.context.store.scrollableParent) {
	                this.context.store.scrollableParent.addEventListener('scroll', this._handleScroll);
	            }
	            /* If formattingbar exists and editable div doesn't have focus, make the editable div un-tabbable
	              This is because we want tab to switch between the toolbars and only ESC can set the focus back to editor */
	            var tabIndex = (this._editableDiv && this._editableDiv.isEqualNode(document.activeElement)) ? '0' : '-1';
	            this._editableDiv.setAttribute('tabindex', tabIndex);
	        }
	        else {
	            this._formattingbarElement = undefined;
	            if (this.context.store.scrollableParent) {
	                this.context.store.scrollableParent.removeEventListener('scroll', this._handleScroll);
	            }
	            if (this._editableDiv) {
	                this._editableDiv.setAttribute('tabindex', '0');
	            }
	        }
	    };
	    SPRte.prototype.componentWillUnmount = function () {
	        if (this._editor) {
	            this._previousHTML = this._editor.destroy();
	            this._editor = undefined;
	        }
	    };
	    SPRte.prototype.componentWillUpdate = function (nextProps, nextState) {
	        var _this = this;
	        if (this.state.displayMode !== nextState.displayMode) {
	            if (nextState.displayMode === sp_client_base_1.DisplayMode.Edit) {
	                /**
	                 * Switching from Read mode to Edit mode. Create a new editor
	                 * If SPRte has previously been in edit mode during the same session we want to use the saved HTML.
	                 * The props value is used if the editor is switching to edit mode for the first time since
	                 * _previousHTML will be null.
	                 */
	                this._createNewEditor(this._previousHTML || this.props.innerHTML || '').then(function (editor) {
	                    _this._afterEditorCreated(editor);
	                    _this._setButtonStates();
	                });
	            }
	            else if (nextState.displayMode === sp_client_base_1.DisplayMode.Read) {
	                // Switching from Edit mode to Read mode. Remove the editor instance
	                this.componentWillUnmount();
	            }
	        }
	        else if (nextState.displayMode === sp_client_base_1.DisplayMode.Edit && this._editor) {
	            /* Re-evaluate button activeness map before every render
	            We assume that we only need to change activeness if the focus is inside the editor
	            IMPORTANT: this._quill.focus() should not be called during state-transition, because it will trigger
	            selection-change and cause another state-transition which is forbidden by React */
	            this._setButtonStates();
	        }
	    };
	    SPRte.prototype.focus = function () {
	        if (this._editableDiv) {
	            // If focus() is explicitly called on the React component, force the editor to be tabbable
	            this._editableDiv.setAttribute('tabindex', '0');
	        }
	        this._editor.focus();
	    };
	    SPRte.prototype.setDisplayMode = function (newMode) {
	        if (this.state.displayMode !== newMode) {
	            this.setState({
	                displayMode: newMode,
	                formattingBarPosition: undefined,
	                isFormattingBarHidden: true,
	                isLinkDialogOpen: false
	            });
	        }
	    };
	    /**
	     * Return the serialized instance of this control
	     */
	    SPRte.prototype.serialize = function () {
	        var serialization = JSON.parse(JSON.stringify(this.props));
	        serialization.innerHTML = this._editor ? this._editor.getHTML() : this.props.innerHTML;
	        return serialization;
	    };
	    SPRte.prototype._afterEditorCreated = function (editor) {
	        this._editor = editor;
	        this._handleTextChange();
	        this._editorElement.addEventListener('keydown', this._handleKeyDown);
	        document.addEventListener('mouseup', this._checkSelectionChange);
	        this._editableDiv = this._editorElement.querySelector('.ql-editor');
	        if (this._editableDiv) {
	            this._editableDiv.setAttribute('aria-label', CanvasStrings_resx_1.default.RichTextEditorAriaLabel);
	            this._editableDiv.addEventListener('focus', this._handleEditorFocus);
	        }
	    };
	    SPRte.prototype._ariaConfirmAction = function (formatKeyOrName) {
	        var format = this._config.formats.get(formatKeyOrName);
	        var name = format ? format.button.title : formatKeyOrName;
	        var message = odsp_utilities_bundle_1.StringHelper.format(CanvasStrings_resx_1.default.FormattingBarConfirmAction, name);
	        if (this._currentSelection && this._currentSelection.start !== this._currentSelection.end &&
	            !(format && format.isLine)) {
	            var text = this._editor.getText(this._currentSelection);
	            message = odsp_utilities_bundle_1.StringHelper.format(CanvasStrings_resx_1.default.FormattingBarConfirmActionOnSelection, name, text);
	        }
	        this.context.store.a11yManager.ariaAlert(message);
	    };
	    /**
	     * Note: keyup and mouseup can happen before or after selection-change depending on the user input
	     * That's why we need to mark these events in separate flags (_selectionInitiated and _selectionShouldEnd)
	     * Whenever one of them happens, we check if the other one has happened so we could complete the action
	     *
	     * Checks if a selection change should complete, then:
	     * - If the selection was already initiated, completes it
	     * - Otherwise, markes the selection to be completed after initiation
	     */
	    SPRte.prototype._checkSelectionChange = function () {
	        if (this._editor) {
	            this._selectionShouldEnd = true;
	            if (this._selectionInitiated) {
	                var range = this._editor.getSelection();
	                this._currentSelection = range;
	                this._updateFormattingBar();
	                // Reset completion flag because selection change is already handled
	                this._selectionShouldEnd = false;
	            }
	            // Reset initiation flag for future events
	            this._selectionInitiated = false;
	        }
	    };
	    SPRte.prototype._closeLinkDialog = function () {
	        this._restoreSelectionOnNextFocus = true;
	        this._restoreScrollTopOnNextFocus = true;
	        this._currentScrollTop = this.context.store.scrollableParent.scrollTop;
	        this._linkAddress = '';
	        this.setState({
	            isLinkDialogOpen: false
	        });
	    };
	    SPRte.prototype._createNewEditor = function (innerHTML) {
	        return QuillEditor_1.default.createNewEditor(this._config, innerHTML, this._editorElement, this._handleSelectionChange, this._handleTextChange);
	    };
	    SPRte.prototype._shouldFormattingBarStick = function () {
	        var editorRelativeTop = this._editorElement.getBoundingClientRect().top - this.context.store.canvasElement.getBoundingClientRect().top;
	        return this.context.store.scrollableParent.scrollTop >
	            this.context.store.scrollThreshold + SPRte._BASE_SCROLL_THRESHOLD +
	                editorRelativeTop + SPRte._TOOLBAR_DEFAULT_POSITION.top;
	    };
	    SPRte.prototype._getFormattingBarPosition = function () {
	        var left = SPRte._TOOLBAR_DEFAULT_POSITION.left;
	        var top = SPRte._TOOLBAR_DEFAULT_POSITION.top;
	        var position = 'absolute';
	        var isFloating = false;
	        if (this._formattingbarElement) {
	            if (this._currentSelection && this._currentSelection.start !== this._currentSelection.end) {
	                // Use range.end - 1, because getBounds returns left:0 when the selection ends at the end of line
	                var startBounds = this._editor.getBounds(this._currentSelection.start);
	                var endBounds = this._editor.getBounds(Math.max(0, this._currentSelection.end - 1));
	                if (startBounds.top === endBounds.top) {
	                    isFloating = true;
	                    // Fix the problem where Quill returns faulty endBounds.left when the selection ends close to end of line
	                    endBounds.left = startBounds.left <= endBounds.left ? endBounds.left : this._editorElement.offsetWidth;
	                    var toolbarLeft = (startBounds.left + endBounds.left) / 2 - this._formattingbarWidth / 2;
	                    var canvasZoneWidth = this._editorElement.offsetWidth + SPRte._CANVASZONE_PADDING_HORIZONTAL * 2;
	                    left = toolbarLeft + this._formattingbarWidth <= canvasZoneWidth ?
	                        Math.max(toolbarLeft, SPRte._TOOLBAR_DEFAULT_POSITION.left) :
	                        canvasZoneWidth - this._formattingbarWidth;
	                    // If the floating top is too close to the fixed top (<line-height), use the fixed top to avoid funkiness
	                    top = startBounds.top < 23 ?
	                        SPRte._TOOLBAR_DEFAULT_POSITION.top :
	                        startBounds.top + SPRte._TOOLBAR_DEFAULT_POSITION.top;
	                    position = 'absolute';
	                }
	            }
	        }
	        // Even if the formatting bar element doesn't exist, we can still calculate the sticky bar position
	        if (!isFloating && this._shouldFormattingBarStick()) {
	            left = SPRte._TOOLBAR_DEFAULT_POSITION.left +
	                this._editorElement.getBoundingClientRect().left - SPRte._CANVASZONE_PADDING_HORIZONTAL;
	            top = this.context.store.canvasElement.getBoundingClientRect().top +
	                this.context.store.scrollableParent.scrollTop - this.context.store.scrollThreshold;
	            position = 'fixed';
	        }
	        return { left: left, top: top, position: position };
	    };
	    SPRte.prototype._getFormatButtonProps = function (formatKey, onClick) {
	        var format = this._config.formats.get(formatKey);
	        return {
	            key: format.key,
	            fabricIconKey: format.button.fabricIconKey,
	            iconClassName: format.button.iconClassName,
	            onClick: onClick,
	            canBeActive: format.button.canBeActive,
	            isActive: this._buttonStates.get(format.key) === ToolbarButton_1.ButtonState.Active,
	            disabled: this._buttonStates.get(format.key) === ToolbarButton_1.ButtonState.Disabled,
	            title: format.button.title + (format.button.shortcut ? " (" + format.button.shortcut + ")" : ''),
	            label: format.button.label,
	            className: format.button.className
	        };
	    };
	    Object.defineProperty(SPRte.prototype, "_formattingBarButtons", {
	        get: function () {
	            var _this = this;
	            var formatSubmenuButtons = [
	                {
	                    canBeActive: true,
	                    title: CanvasStrings_resx_1.default.FormattingBarNormalTextButtonTitle,
	                    label: CanvasStrings_resx_1.default.FormattingBarNormalTextButtonTitle,
	                    onClick: this._handlePlainText
	                },
	                this._getFormatButtonProps('h2', this._handleHeading2),
	                this._getFormatButtonProps('h3', this._handleHeading3),
	                this._getFormatButtonProps('h4', this._handleHeading4),
	                this._getFormatButtonProps('blockquote', this._handleQuote)
	            ];
	            var alignmentSubmenuButtons = [
	                this._getFormatButtonProps('alignLeft', this._handleAlignLeft),
	                this._getFormatButtonProps('alignCenter', this._handleAlignCenter),
	                this._getFormatButtonProps('alignRight', this._handleAlignRight)
	            ];
	            var listSubmenuButtons = [
	                this._getFormatButtonProps('bullet', this._handleListBullets),
	                this._getFormatButtonProps('list', this._handleListNumbered)
	            ];
	            var buttons = [
	                React.createElement(ToolbarSubmenu_1.default, {key: 'format', buttons: formatSubmenuButtons, isOpen: this.state.currentSubmenuOpen === 'format', isWide: true, onOpen: function () { return _this.setState({ currentSubmenuOpen: 'format' }); }}),
	                React.createElement(ToolbarButton_1.default, React.__spread({}, this._getFormatButtonProps('bold', this._handleBold))),
	                React.createElement(ToolbarButton_1.default, React.__spread({}, this._getFormatButtonProps('italic', this._handleItalic))),
	                React.createElement(ToolbarButton_1.default, React.__spread({}, this._getFormatButtonProps('underline', this._handleUnderline))),
	                React.createElement(ToolbarSubmenu_1.default, {key: 'alignment', buttons: alignmentSubmenuButtons, isOpen: this.state.currentSubmenuOpen === 'alignment', onOpen: function () { return _this.setState({ currentSubmenuOpen: 'alignment' }); }}),
	                React.createElement(ToolbarSubmenu_1.default, {key: 'list', buttons: listSubmenuButtons, isOpen: this.state.currentSubmenuOpen === 'list', onOpen: function () { return _this.setState({ currentSubmenuOpen: 'list' }); }}),
	                React.createElement(ToolbarButton_1.default, React.__spread({}, this._getFormatButtonProps('link', this._handleLink))),
	                React.createElement(ToolbarButton_1.default, {key: 'unlink', canBeActive: false, className: 'button_linkRemove_temp', fabricIconKey: 'Link', onClick: this._handleUnlink, title: CanvasStrings_resx_1.default.FormattingBarUnlinkButtonTitle, disabled: this._buttonStates.get('link') !== ToolbarButton_1.ButtonState.Active}),
	                React.createElement(ToolbarButton_1.default, {key: 'clearFormatting', canBeActive: false, fabricIconKey: 'ClearFormatting', onClick: this._handleClearFormatting, title: CanvasStrings_resx_1.default.FormattingBarClearFormattingButtonTitle})
	            ];
	            return buttons;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    SPRte.prototype._finalizeAction = function (ariaActionName) {
	        if (ariaActionName) {
	            this._ariaConfirmAction(ariaActionName);
	        }
	        this._updateActiveButtons();
	    };
	    /**
	     * @param format - Name of the format to apply
	     */
	    SPRte.prototype._formatOrPrepare = function (formatKey) {
	        this.focus();
	        var format = this._config.formats.get(formatKey);
	        // Check if the format is masked and skip action
	        if (format.maskedBy) {
	            for (var _i = 0, _a = format.maskedBy; _i < _a.length; _i++) {
	                var maskingFormat = _a[_i];
	                if (this._buttonStates.get(maskingFormat) === ToolbarButton_1.ButtonState.Active) {
	                    return;
	                }
	            }
	        }
	        var range = this._currentSelection;
	        var _b = [range.start, range.end], start = _b[0], end = _b[1];
	        var value = format.editorValue ? format.editorValue : !this._editor.isFormatAppliedToRange(start, end, format);
	        this._cleanupBeforeFormatting(start, end, format);
	        var formats = {};
	        formats[format.editorKey] = value;
	        this._editor.format(start, end, formats);
	        this._finalizeAction(formatKey);
	    };
	    SPRte.prototype._handleAlignCenter = function () {
	        this._formatOrPrepare('alignCenter');
	    };
	    SPRte.prototype._handleAlignLeft = function () {
	        this._formatOrPrepare('alignLeft');
	    };
	    SPRte.prototype._handleAlignRight = function () {
	        this._formatOrPrepare('alignRight');
	    };
	    SPRte.prototype._handleBold = function () {
	        this._formatOrPrepare('bold');
	    };
	    SPRte.prototype._handleHeading2 = function () {
	        this._formatOrPrepare('h2');
	    };
	    SPRte.prototype._handleHeading3 = function () {
	        this._formatOrPrepare('h3');
	    };
	    SPRte.prototype._handleHeading4 = function () {
	        this._formatOrPrepare('h4');
	    };
	    SPRte.prototype._handleItalic = function () {
	        this._formatOrPrepare('italic');
	    };
	    SPRte.prototype._handleLink = function () {
	        if (this._currentSelection) {
	            // If there is existing link modify its URL, otherwise create new one if selection is not collapsed
	            if (this._buttonStates.get('link') === ToolbarButton_1.ButtonState.Active) {
	                var linkAddress = this._editor.getFormatValue(this._currentSelection.start, this._currentSelection.end, this._config.formats.get('link'));
	                this._openLinkDialog(linkAddress);
	            }
	            else if (this._currentSelection.start !== this._currentSelection.end) {
	                this._openLinkDialog();
	            }
	            this._updateActiveButtons();
	        }
	    };
	    SPRte.prototype._handleListBullets = function () {
	        this._formatOrPrepare('bullet');
	    };
	    SPRte.prototype._handleListNumbered = function () {
	        this._formatOrPrepare('list');
	    };
	    SPRte.prototype._handlePlainText = function () {
	        this.focus();
	        if (this._currentSelection) {
	            // Use the clean method for any styling format
	            var blockStyles = this._config.supportedFormatsArray.filter(function (format) { return format.isBlockStyle; });
	            this._cleanupBeforeFormatting(this._currentSelection.start, this._currentSelection.end, blockStyles[0]);
	            this._finalizeAction();
	        }
	    };
	    SPRte.prototype._handleQuote = function () {
	        this._formatOrPrepare('blockquote');
	    };
	    /**
	      * Checks if a selection change should initiate, then:
	      * - If the selection was marked for completion, completes it
	      * - Otherwise, markes the selection as initiated to be completed later
	      */
	    SPRte.prototype._handleSelectionChange = function (range) {
	        if (range) {
	            this.setState({ currentSubmenuOpen: undefined });
	            if (this._restoreOnFocus()) {
	                this._updateFormattingBar();
	                return;
	            }
	        }
	        if (!range) {
	            this._updateFormattingBar(true);
	        }
	        else if (!this._currentSelection || this.state.isFormattingBarHidden) {
	            this._currentSelection = range;
	            this._updateFormattingBar();
	        }
	        else if (this._currentSelection.start !== range.start || this._currentSelection.end !== range.end) {
	            // Initiate a selection and complete it if it was marked for completion
	            this._selectionInitiated = true;
	            if (this._selectionShouldEnd) {
	                this._currentSelection = range;
	                this._updateFormattingBar();
	                // Reset initiation flag because selection change is already handled
	                this._selectionInitiated = false;
	            }
	            // Clear completion flag for future events
	            this._selectionShouldEnd = false;
	        }
	    };
	    SPRte.prototype._handleClearFormatting = function () {
	        this.focus();
	        var range = this._currentSelection;
	        var _a = [range.start, range.end], start = _a[0], end = _a[1];
	        var formats = {};
	        for (var _i = 0, _b = this._config.supportedFormatsArray; _i < _b.length; _i++) {
	            var format = _b[_i];
	            formats[format.editorKey] = false;
	        }
	        this._editor.format(start, end, formats);
	        this._finalizeAction(CanvasStrings_resx_1.default.FormattingBarClearFormattingButtonTitle);
	    };
	    SPRte.prototype._handleTextChange = function () {
	        if (this.state.displayMode === sp_client_base_1.DisplayMode.Edit) {
	            // Note: Use if-else because classList.toggle doesn't work properly in IE
	            if (this._editorElement.textContent === '') {
	                this._editorElement.classList.add('ql-container--blank');
	            }
	            else {
	                this._editorElement.classList.remove('ql-container--blank');
	            }
	            if (this._editor) {
	                this._currentSelection = this._editor.getSelection() || this._currentSelection;
	            }
	            if (this.props.onChange) {
	                this.props.onChange();
	            }
	        }
	    };
	    SPRte.prototype._handleUnderline = function () {
	        this._formatOrPrepare('underline');
	    };
	    SPRte.prototype._handleUnlink = function () {
	        this.focus();
	        if (this._currentSelection) {
	            this._editor.format(this._currentSelection.start, this._currentSelection.end, { 'link': false });
	            this._finalizeAction(CanvasStrings_resx_1.default.FormattingBarUnlinkButtonTitle);
	        }
	    };
	    /**
	     * Clean up the existing formatting of given range before applying the new format, by doing:
	     *  - Clear all styling formats if new format is also a styling format
	     *  - Clear all the formats masked by the new format
	     *
	     * @param start - Start of the range getting formatted
	     * @param end - End of the range getting formatted
	     * @param newFormat - Name of new format being applied
	     */
	    SPRte.prototype._cleanupBeforeFormatting = function (start, end, newFormat) {
	        var formatsToClear = {};
	        // If this is a styling format, clear all styling formats
	        if (newFormat.isBlockStyle) {
	            var blockStyles = this._config.supportedFormatsArray.filter(function (format) { return format.isBlockStyle; });
	            for (var _i = 0, blockStyles_1 = blockStyles; _i < blockStyles_1.length; _i++) {
	                var format = blockStyles_1[_i];
	                formatsToClear[format.editorKey] = false;
	            }
	        }
	        // Clear all formats masked by this format
	        if (newFormat.masks) {
	            for (var _a = 0, _b = newFormat.masks; _a < _b.length; _a++) {
	                var maskedFormatKey = _b[_a];
	                formatsToClear[this._config.formats.get(maskedFormatKey).editorKey] = false;
	            }
	        }
	        this._editor.format(start, end, formatsToClear, true);
	    };
	    SPRte.prototype._onLinkDialogSaved = function () {
	        if (this._linkDialog.textFieldValue) {
	            this._editor.format(this._currentSelection.start, this._currentSelection.end, { 'link': this._linkDialog.textFieldValue });
	        }
	        this._linkElement = undefined;
	        this._finalizeAction(CanvasStrings_resx_1.default.FormattingBarLinkButtonTitle);
	        this._closeLinkDialog();
	    };
	    SPRte.prototype._openLinkDialog = function (defaultAddress) {
	        if (defaultAddress === void 0) { defaultAddress = ''; }
	        this._linkAddress = defaultAddress;
	        this.setState({
	            isLinkDialogOpen: true
	        });
	    };
	    SPRte.prototype._handleEditorFocus = function (evt) {
	        this._restoreOnFocus();
	    };
	    SPRte.prototype._handleFormattingBarKeyDown = function (evt) {
	        if (CanvasA11y_1.isEscape(evt)) {
	            if (this._editableDiv && !this._editableDiv.isEqualNode(document.activeElement)) {
	                this.focus();
	                evt.stopPropagation();
	                evt.preventDefault();
	            }
	        }
	    };
	    SPRte.prototype._handleKeyDown = function (evt) {
	        if (CanvasA11y_1.isKey(CanvasA11y_1.KeyCodes.F10, evt, true) && this._formattingbarElement) {
	            this.context.store.a11yManager.navigateInside(this._formattingbarElement);
	            this.context.store.a11yManager.
	                ariaAlert(CanvasStrings_resx_1.default.ToolbarNavigationArrowKeys + " " + CanvasStrings_resx_1.default.ToolbarNavigationTabKeys);
	            evt.stopPropagation();
	            evt.preventDefault();
	        }
	        else if (CanvasA11y_1.isKey('K'.charCodeAt(0), evt, false, true)) {
	            this._handleLink();
	            evt.stopPropagation();
	            evt.preventDefault();
	        }
	    };
	    SPRte.prototype._handleKeyUp = function (evt) {
	        this._checkSelectionChange();
	        this._updateActiveButtons();
	    };
	    SPRte.prototype._handleScroll = function () {
	        if (this.state.formattingBarPosition) {
	            var isSticky = this.state.formattingBarPosition.position === 'fixed';
	            if (this._shouldFormattingBarStick() ? !isSticky : isSticky) {
	                var newState = {
	                    formattingBarPosition: this._getFormattingBarPosition(),
	                    isLinkDialogOpen: false
	                };
	                this.setState(newState);
	            }
	        }
	    };
	    SPRte.prototype._restoreOnFocus = function () {
	        var restore = false;
	        if (this._restoreSelectionOnNextFocus && this._currentSelection) {
	            this._restoreSelectionOnNextFocus = false;
	            this._editor.setSelection(this._currentSelection);
	            restore = true;
	        }
	        if (this._restoreScrollTopOnNextFocus && this._currentScrollTop) {
	            this._restoreScrollTopOnNextFocus = false;
	            this.context.store.scrollableParent.scrollTop = this._currentScrollTop;
	            restore = true;
	        }
	        return restore;
	    };
	    SPRte.prototype._setButtonStates = function () {
	        var range = this._currentSelection;
	        if (range) {
	            /* Make a map to keep track of updated buttons. Its goal is to minimize the number
	            of calls to isFormatAppliedToRange (equal to the number of currently non-masked formats) */
	            var updatedFormats = new Map();
	            for (var _i = 0, _a = this._config.supportedFormatsArray; _i < _a.length; _i++) {
	                var format = _a[_i];
	                updatedFormats.set(format.key, false);
	            }
	            // First figure out the state of masking formats and their masked formats
	            var maskingFormats = this._config.supportedFormatsArray.filter(function (format) { return !!format.masks; });
	            for (var _b = 0, maskingFormats_1 = maskingFormats; _b < maskingFormats_1.length; _b++) {
	                var maskingFormat = maskingFormats_1[_b];
	                if (!updatedFormats.get(maskingFormat.key)) {
	                    var isActive = this._editor.isFormatAppliedToRange(range.start, range.end, maskingFormat);
	                    this._buttonStates.set(maskingFormat.key, isActive ? ToolbarButton_1.ButtonState.Active : ToolbarButton_1.ButtonState.Normal);
	                    updatedFormats.set(maskingFormat.key, true);
	                    if (isActive) {
	                        for (var _c = 0, _d = maskingFormat.masks; _c < _d.length; _c++) {
	                            var maskedFormat = _d[_c];
	                            this._buttonStates.set(maskedFormat, ToolbarButton_1.ButtonState.Disabled);
	                            updatedFormats.set(maskedFormat, true);
	                        }
	                    }
	                }
	            }
	            // Figure out activeness for the rest of the formats
	            for (var _e = 0, _f = this._config.supportedFormatsArray; _e < _f.length; _e++) {
	                var format = _f[_e];
	                if (!updatedFormats.get(format.key)) {
	                    var isActive = this._editor.isFormatAppliedToRange(range.start, range.end, format);
	                    this._buttonStates.set(format.key, isActive ? ToolbarButton_1.ButtonState.Active : ToolbarButton_1.ButtonState.Normal);
	                }
	            }
	        }
	    };
	    /**
	     * This should be called whenever the activeness of buttons could have changed
	     * It rerenders the component to make sure the change is rendered
	     */
	    SPRte.prototype._updateActiveButtons = function () {
	        this.forceUpdate();
	    };
	    /**
	     * Hide/Show the formatting bar and update the formatting bar position if needed
	     * If the editor is not focused, hide the formatting bar
	     * If the selection is collapsed the formatting bar will render in a static location
	     * If the selection is not collapsed the formatting bar will appear near the selection
	     */
	    SPRte.prototype._updateFormattingBar = function (isHidden) {
	        if (isHidden === void 0) { isHidden = false; }
	        if (!this._editorElement) {
	            return;
	        }
	        var updatePosition = true;
	        var newState = {
	            formattingBarPosition: {
	                left: SPRte._TOOLBAR_DEFAULT_POSITION.left,
	                top: SPRte._TOOLBAR_DEFAULT_POSITION.top,
	                position: SPRte._TOOLBAR_DEFAULT_POSITION.position
	            },
	            isFormattingBarHidden: isHidden
	        };
	        if (isHidden && this._formattingbarElement) {
	            // If the editor or a toolbar button has the focus, don't hide the toolbar
	            if (document.activeElement.isEqualNode(this._editableDiv)) {
	                isHidden = false;
	            }
	            else {
	                var buttonNodes = this._formattingbarElement.querySelectorAll('.ToolbarButton');
	                for (var i = 0; i < buttonNodes.length; i++) {
	                    if (document.activeElement.isEqualNode(buttonNodes[i])) {
	                        newState.isFormattingBarHidden = false;
	                        newState.formattingBarPosition = this.state.formattingBarPosition;
	                        isHidden = false;
	                        // Don't update the position if isHidden got overriden because a button was clicked
	                        updatePosition = false;
	                        break;
	                    }
	                }
	            }
	            if (isHidden && !document.activeElement.isContentEditable) {
	                // This makes the contenteditable element non-editable
	                window.getSelection().removeAllRanges();
	            }
	        }
	        if (!isHidden) {
	            newState.isFormattingBarHidden = false;
	            if (updatePosition) {
	                newState.formattingBarPosition = this._getFormattingBarPosition();
	            }
	        }
	        this.setState(newState);
	    };
	    SPRte.contextTypes = {
	        store: React.PropTypes.object.isRequired
	    };
	    /**
	     * @ readOnly
	     */
	    SPRte._TOOLBAR_DEFAULT_POSITION = {
	        left: 0,
	        top: -36,
	        position: 'absolute'
	    };
	    /* tslint:disable:max-line-length */
	    SPRte._URL_VALIDATION_REGEX = new RegExp('((^https?:\/\/)|(^ftp:\/\/)|(^file:\/\/)|(^mailto:)|(^news:)|(^pnm:\/\/)|(^mms:\/\/)|(^\/)|(^#)|(^\\\\)).+', 'i');
	    /* tslint:enable:max-line-length */
	    /**
	     * @ readOnly
	     *
	     * The scrollOffset that works for a full-height canvas
	     */
	    SPRte._BASE_SCROLL_THRESHOLD = -10;
	    /**
	     * @ readOnly
	     */
	    SPRte._CANVASZONE_PADDING_HORIZONTAL = 8;
	    return SPRte;
	}(React.Component));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = SPRte;
	


/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @copyright Microsoft Corporation. All rights reserved.
	 */
	"use strict";
	var CanvasStrings_resx_1 = __webpack_require__(110);
	/**
	 * Static class for SPRte configuratoion
	 * Note: We assume all RTE instances share the same configuration by design
	 * Should this change in the future, we'll need to change this to non-static design
	 */
	var SPRteConfiguration = (function () {
	    function SPRteConfiguration() {
	        this._supportedFormatsArray = [
	            {
	                key: 'bold',
	                editorKey: 'bold',
	                browserKey: 'bold',
	                isBlockStyle: false,
	                isLine: false,
	                isEditorNative: true,
	                button: {
	                    canBeActive: true,
	                    fabricIconKey: 'Bold',
	                    shortcut: 'Ctrl+B',
	                    title: CanvasStrings_resx_1.default.FormattingBarBoldButtonTitle
	                }
	            },
	            {
	                key: 'italic',
	                editorKey: 'italic',
	                browserKey: 'italic',
	                isBlockStyle: false,
	                isLine: false,
	                isEditorNative: true,
	                button: {
	                    canBeActive: true,
	                    fabricIconKey: 'Italic',
	                    shortcut: 'Ctrl+I',
	                    title: CanvasStrings_resx_1.default.FormattingBarItalicButtonTitle
	                }
	            },
	            {
	                key: 'underline',
	                editorKey: 'underline',
	                browserKey: 'underline',
	                isBlockStyle: false,
	                isLine: false,
	                isEditorNative: true,
	                button: {
	                    canBeActive: true,
	                    fabricIconKey: 'Underline',
	                    shortcut: 'Ctrl+U',
	                    title: CanvasStrings_resx_1.default.FormattingBarUnderlineButtonTitle
	                }
	            },
	            {
	                key: 'link',
	                editorKey: 'link',
	                isBlockStyle: false,
	                isLine: false,
	                isEditorNative: true,
	                masks: ['underline'],
	                button: {
	                    canBeActive: true,
	                    fabricIconKey: 'Link',
	                    shortcut: 'Ctrl+K',
	                    title: CanvasStrings_resx_1.default.FormattingBarLinkButtonTitle
	                }
	            },
	            {
	                key: 'alignLeft',
	                editorKey: 'align',
	                browserKey: 'justifyLeft',
	                isBlockStyle: false,
	                isLine: true,
	                isEditorNative: true,
	                editorValue: 'left',
	                button: {
	                    canBeActive: true,
	                    fabricIconKey: 'AlignLeft',
	                    title: CanvasStrings_resx_1.default.FormattingBarAlignLeftButtonTitle
	                }
	            },
	            {
	                browserKey: 'justifyCenter',
	                key: 'alignCenter',
	                editorKey: 'align',
	                isBlockStyle: false,
	                isLine: true,
	                isEditorNative: true,
	                editorValue: 'center',
	                button: {
	                    canBeActive: true,
	                    fabricIconKey: 'AlignCenter',
	                    title: CanvasStrings_resx_1.default.FormattingBarAlignCenterButtonTitle
	                }
	            },
	            {
	                key: 'alignRight',
	                editorKey: 'align',
	                browserKey: 'justifyRight',
	                isBlockStyle: false,
	                isLine: true,
	                isEditorNative: true,
	                editorValue: 'right',
	                button: {
	                    canBeActive: true,
	                    fabricIconKey: 'AlignRight',
	                    title: CanvasStrings_resx_1.default.FormattingBarAlignRightButtonTitle
	                }
	            },
	            {
	                key: 'bullet',
	                editorKey: 'bullet',
	                browserKey: 'insertUnorderedList',
	                isBlockStyle: true,
	                isLine: true,
	                isEditorNative: true,
	                button: {
	                    canBeActive: true,
	                    fabricIconKey: 'BulletedList',
	                    title: CanvasStrings_resx_1.default.FormattingBarBulletListButtonTitle
	                }
	            },
	            {
	                key: 'list',
	                editorKey: 'list',
	                browserKey: 'insertOrderedList',
	                isBlockStyle: true,
	                isLine: true,
	                isEditorNative: true,
	                button: {
	                    canBeActive: true,
	                    fabricIconKey: 'NumberedList',
	                    title: CanvasStrings_resx_1.default.FormattingBarNumberedListButtonTitle
	                }
	            },
	            {
	                key: 'h2',
	                editorKey: 'h2',
	                isBlockStyle: true,
	                isLine: true,
	                isEditorNative: false,
	                masks: ['bold', 'italic', 'underline'],
	                button: {
	                    canBeActive: true,
	                    title: CanvasStrings_resx_1.default.FormattingBarHeading2ButtonTitle,
	                    label: CanvasStrings_resx_1.default.FormattingBarHeading2ButtonTitle,
	                    className: 'ToolbarButton--h2'
	                }
	            },
	            {
	                key: 'h3',
	                editorKey: 'h3',
	                isBlockStyle: true,
	                isLine: true,
	                isEditorNative: false,
	                masks: ['bold', 'italic', 'underline'],
	                button: {
	                    canBeActive: true,
	                    title: CanvasStrings_resx_1.default.FormattingBarHeading3ButtonTitle,
	                    label: CanvasStrings_resx_1.default.FormattingBarHeading3ButtonTitle,
	                    className: 'ToolbarButton--h3'
	                }
	            },
	            {
	                key: 'h4',
	                editorKey: 'h4',
	                isBlockStyle: true,
	                isLine: true,
	                isEditorNative: false,
	                masks: ['bold', 'italic', 'underline'],
	                button: {
	                    canBeActive: true,
	                    title: CanvasStrings_resx_1.default.FormattingBarHeading4ButtonTitle,
	                    label: CanvasStrings_resx_1.default.FormattingBarHeading4ButtonTitle,
	                    className: 'ToolbarButton--h4'
	                }
	            },
	            {
	                key: 'blockquote',
	                editorKey: 'blockquote',
	                isBlockStyle: true,
	                isLine: true,
	                isEditorNative: false,
	                masks: ['bold', 'italic', 'underline', 'alignLeft', 'alignCenter', 'alignRight'],
	                button: {
	                    canBeActive: true,
	                    title: CanvasStrings_resx_1.default.FormattingBarQuoteButtonTitle,
	                    label: CanvasStrings_resx_1.default.FormattingBarQuoteButtonTitle,
	                    className: 'ToolbarButton--blockquote'
	                }
	            }
	        ];
	        // Build a map to look up formats by their key quickly
	        this._formats = new Map();
	        for (var _i = 0, _a = this._supportedFormatsArray; _i < _a.length; _i++) {
	            var format = _a[_i];
	            this._formats.set(format.key, format);
	        }
	        // Populate 'maskedBy' field of all formats based on 'masks' fields
	        var maskingFormats = this._supportedFormatsArray.filter(function (format) { return !!format.masks; });
	        for (var _b = 0, maskingFormats_1 = maskingFormats; _b < maskingFormats_1.length; _b++) {
	            var maskingFormat = maskingFormats_1[_b];
	            for (var _c = 0, _d = maskingFormat.masks; _c < _d.length; _c++) {
	                var maskedFormatKey = _d[_c];
	                var maskedFormat = this._formats.get(maskedFormatKey);
	                if (!maskedFormat.maskedBy) {
	                    maskedFormat.maskedBy = [maskingFormat.key];
	                }
	                else {
	                    maskedFormat.maskedBy.push(maskingFormat.key);
	                }
	            }
	        }
	    }
	    Object.defineProperty(SPRteConfiguration.prototype, "formats", {
	        get: function () {
	            return this._formats;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SPRteConfiguration.prototype, "supportedFormatsArray", {
	        get: function () {
	            return this._supportedFormatsArray;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return SPRteConfiguration;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = SPRteConfiguration;
	


/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	/* This file was generated by a tool. Modifying it will produce unexpected behavior. */
	/* tslint:disable */
	"use strict";
	var strings =  false
	    ? require('../../../../../resx-strings/en-us.json')
	    : __webpack_require__(72);
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = strings['_oflHTFVm9vC1S7l66uvnQQ'] || {};
	


/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * @copyright Microsoft Corporation. All rights reserved. *
	 */
	var office_ui_fabric_react_1 = __webpack_require__(112);
	var React = __webpack_require__(82);
	__webpack_require__(113);
	/**
	 * @class The formatting bar for the SPRte exposes text editing actions.
	 */
	var SPRteFormattingBar = (function (_super) {
	    __extends(SPRteFormattingBar, _super);
	    function SPRteFormattingBar(props) {
	        _super.call(this, props);
	        this.state = {
	            isFaded: false
	        };
	    }
	    SPRteFormattingBar.prototype.componentDidMount = function () {
	        this._domNode.addEventListener('keydown', this.props.onKeyDown);
	    };
	    SPRteFormattingBar.prototype.componentWillReceiveProps = function (nextProps) {
	        if (this.props.position.top !== nextProps.position.top) {
	            this.setState({
	                isFaded: true
	            });
	        }
	    };
	    SPRteFormattingBar.prototype.componentDidUpdate = function () {
	        var _this = this;
	        if (this.state.isFaded) {
	            window.setTimeout(function () {
	                _this.setState({
	                    isFaded: false
	                });
	            }, 300);
	        }
	    };
	    /**
	     * Renders the formatting bar in the position given in props
	     * Formatting bar renders on top left side of the control by default
	     * If there is a text selection the bar renders above the selection
	     */
	    SPRteFormattingBar.prototype.render = function () {
	        var _this = this;
	        var style = this.props.position;
	        var className = office_ui_fabric_react_1.css('SPRteFormattingBar', 'rteFlyout-visible', 'stack-panel-class', 'ms-u-slideUpIn10', {
	            'faded': this.state.isFaded
	        });
	        return (React.createElement("div", {role: 'toolbar', "aria-label": 'Formatting', className: className, ref: function (ref) { return _this._domNode = ref; }, style: style}, React.createElement(office_ui_fabric_react_1.FocusZone, {ref: function (ref) { return _this._focusZone = ref; }, isCircularNavigation: true}, this.props.buttons)));
	    };
	    SPRteFormattingBar.prototype.focus = function () {
	        this._focusZone.focus();
	    };
	    return SPRteFormattingBar;
	}(React.Component));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = SPRteFormattingBar;
	


/***/ },
/* 112 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_112__;

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(114);
	


/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	var content = __webpack_require__(115);
	var loader = __webpack_require__(77);
	
	if(typeof content === "string") content = [[module.id, content]];
	
	// add the styles to the DOM
	for (var i = 0; i < content.length; i++) loader.loadStyles(content[i][1]);
	
	if(content.locals) module.exports = content.locals;

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(76)();
	// imports
	
	
	// module
	exports.push([module.id, ".rteFlyout-visible{position:absolute;z-index:2;box-shadow:0 0 5px 0 #c8c8c8;top:-45px}@media (max-width:720px){.rteFlyout-visible .rteFlyout-button{padding:10px;font-size:11px}}.rteFlyout-visible .rteFlyout-button:hover{background:#0078D7}.rteFlyout-visible .rteFlyout-button .ms-Icon{padding:13px;color:#767676;font-size:14px!important}.rteFlyout-visible .rteFlyout-button:hover .ms-Icon{color:#fff}.rteFlyout-visible .rteFlyout-button img{vertical-align:middle;display:inline-block}.rteFlyout-visible .stack-panel-class{background:\"[theme:neutralPrimary, default: #333333]\"}.rteFlyout-button{background-color:transparent;border-width:0;padding:0;cursor:pointer!important}.stack-panel-class{white-space:nowrap}.SPRteFormattingBar{display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;background-color:\"[theme:neutralPrimary, default: #333333]\";-webkit-transition:all 367ms cubic-bezier(.1,.9,.2,1);transition:all 367ms cubic-bezier(.1,.9,.2,1)}.SPRteFormattingBar .ToolbarButton,.SPRteFormattingBar .ToolbarSubmenu{float:left}.SPRteFormattingBar.faded{display:none}.SPRteFormattingBar-divider{float:left;height:16px;margin-top:8px;width:0;border-right:solid 1px \"[theme:neutralSecondary, default: #666666]\"}.msIcon_h2_temp::after{content:'H2';font-size:16px;font-style:normal;font-weight:600}.button_quote_temp .ms-Icon{font-size:28px!important;line-height:1.7!important}.button_linkRemove_temp .ms-Icon::after{content:'x';font-family:Arial;margin-left:-5px;margin-right:5px}", ""]);
	
	// exports


/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @copyright Microsoft Corporation. All rights reserved.
	 */
	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var React = __webpack_require__(82);
	var CanvasStrings_resx_1 = __webpack_require__(110);
	var office_ui_fabric_react_1 = __webpack_require__(112);
	var CanvasA11y_1 = __webpack_require__(117);
	var SPRteLinkDialog = (function (_super) {
	    __extends(SPRteLinkDialog, _super);
	    function SPRteLinkDialog(props) {
	        _super.call(this, props);
	        this._getErrorMessage = this._getErrorMessage.bind(this);
	        this._handleKeyDown = this._handleKeyDown.bind(this);
	        this._handleTextFieldChange = this._handleTextFieldChange.bind(this);
	        this._isURLValid = this._isURLValid.bind(this);
	        this.state = {
	            isURLValid: true
	        };
	    }
	    SPRteLinkDialog.prototype.render = function () {
	        var _this = this;
	        var _a = this.props, editorElement = _a.editorElement, isOpen = _a.isOpen, onDismiss = _a.onDismiss, onSaveClicked = _a.onSaveClicked, onCancelClicked = _a.onCancelClicked, textFieldValue = _a.textFieldValue;
	        return (React.createElement(office_ui_fabric_react_1.Dialog, {isOpen: isOpen, type: office_ui_fabric_react_1.DialogType.normal, onDismiss: onDismiss, title: CanvasStrings_resx_1.default.LinkDialogTitle, isBlocking: true, elementToFocusOnDismiss: editorElement}, React.createElement(office_ui_fabric_react_1.TextField, {className: 'SPRteLinkDialog-textField', label: CanvasStrings_resx_1.default.LinkDialogTextFieldLabel, ariaLabel: CanvasStrings_resx_1.default.LinkDialogTextFieldAriaLabel, onChanged: this._handleTextFieldChange, onGetErrorMessage: this._getErrorMessage, onKeyDown: this._handleKeyDown, defaultValue: textFieldValue, ref: function (c) { return _this._textField = c; }}), React.createElement(office_ui_fabric_react_1.DialogFooter, null, React.createElement(office_ui_fabric_react_1.Button, {buttonType: office_ui_fabric_react_1.ButtonType.primary, disabled: !this.state.isURLValid, onClick: onSaveClicked, ariaLabel: CanvasStrings_resx_1.default.RichTextLinkDialogSaveButtonLabel}, CanvasStrings_resx_1.default.RichTextLinkDialogSaveButtonLabel), React.createElement(office_ui_fabric_react_1.Button, {onClick: onCancelClicked, ariaLabel: CanvasStrings_resx_1.default.RichTextLinkDialogCancelButtonLabel}, CanvasStrings_resx_1.default.RichTextLinkDialogCancelButtonLabel))));
	    };
	    SPRteLinkDialog.prototype.componentDidUpdate = function (prevProps) {
	        if (this._textField && this.props.isOpen && !this._initCursorSet) {
	            this._initCursorSet = true;
	            this._textField.select();
	            var textValue = this._textField.value;
	            if (textValue) {
	                this._textField.setSelectionStart(textValue.length);
	                this._textField.setSelectionEnd(textValue.length);
	            }
	        }
	        else if (!this.props.isOpen) {
	            this._initCursorSet = false;
	        }
	    };
	    SPRteLinkDialog.prototype.componentWillReceiveProps = function (newProps) {
	        this.state = {
	            isURLValid: this._isURLValid(newProps.textFieldValue)
	        };
	    };
	    Object.defineProperty(SPRteLinkDialog.prototype, "textFieldValue", {
	        get: function () {
	            var url = '';
	            if (this._textField) {
	                url = this._textField.value;
	                if (!this._hasProtocol(url)) {
	                    url = 'http://' + url;
	                }
	            }
	            return url;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    SPRteLinkDialog.prototype._getErrorMessage = function () {
	        return !this._isURLValid(this.textFieldValue) && this.textFieldValue !== '' ?
	            CanvasStrings_resx_1.default.LinkDialogErrorNotSupportedLink : '';
	    };
	    SPRteLinkDialog.prototype._handleKeyDown = function (evt) {
	        if (CanvasA11y_1.isEnter(evt) && this.state.isURLValid) {
	            this.props.onSaveClicked();
	            evt.stopPropagation();
	            evt.preventDefault();
	        }
	    };
	    SPRteLinkDialog.prototype._handleTextFieldChange = function () {
	        this.setState({
	            isURLValid: this._isURLValid(this.textFieldValue)
	        });
	    };
	    SPRteLinkDialog.prototype._hasProtocol = function (url) {
	        var hasProtocolRegex = new RegExp('^([A-Za-z0-9]+:(\/\/)?|#|\/|\\\\).+', 'i');
	        return hasProtocolRegex.test(url);
	    };
	    SPRteLinkDialog.prototype._isURLValid = function (url) {
	        return this.props.validationRegex.test(url);
	    };
	    return SPRteLinkDialog;
	}(React.Component));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = SPRteLinkDialog;
	


/***/ },
/* 117 */
/***/ function(module, exports) {

	"use strict";
	(function (KeyCodes) {
	    KeyCodes[KeyCodes["Enter"] = 13] = "Enter";
	    KeyCodes[KeyCodes["Escape"] = 27] = "Escape";
	    KeyCodes[KeyCodes["Tab"] = 9] = "Tab";
	    KeyCodes[KeyCodes["F10"] = 121] = "F10";
	    KeyCodes[KeyCodes["P"] = 80] = "P";
	})(exports.KeyCodes || (exports.KeyCodes = {}));
	var KeyCodes = exports.KeyCodes;
	function isEscape(e) {
	    return isKey(KeyCodes.Escape, e);
	}
	exports.isEscape = isEscape;
	function isEnter(e) {
	    return isKey(KeyCodes.Enter, e);
	}
	exports.isEnter = isEnter;
	function isShiftTab(e) {
	    return isKey(KeyCodes.Tab, e, false, false, true);
	}
	exports.isShiftTab = isShiftTab;
	function isTab(e) {
	    return isKey(KeyCodes.Tab, e);
	}
	exports.isTab = isTab;
	function isKey(keyCode, e, allowAlt, allowCtrl, allowShift) {
	    if (allowAlt === void 0) { allowAlt = false; }
	    if (allowCtrl === void 0) { allowCtrl = false; }
	    if (allowShift === void 0) { allowShift = false; }
	    return e.keyCode === keyCode &&
	        ((allowAlt && e.altKey) || (!allowAlt && !e.altKey)) &&
	        ((allowCtrl && e.ctrlKey) || (!allowCtrl && !e.ctrlKey)) &&
	        ((allowShift && e.shiftKey) || (!allowShift && !e.shiftKey));
	}
	exports.isKey = isKey;
	function getFocusableChildren(elem, ignoreTabIndex) {
	    if (ignoreTabIndex === void 0) { ignoreTabIndex = false; }
	    var children = [];
	    for (var _i = 0, _a = getFocusableDescendants(elem, ignoreTabIndex); _i < _a.length; _i++) {
	        var descendant = _a[_i];
	        if (isElementFocusableChildOf(descendant, elem)) {
	            children.push(descendant);
	        }
	    }
	    return children;
	}
	exports.getFocusableChildren = getFocusableChildren;
	function isElementFocusable(elem, ignoreTabIndex) {
	    if (ignoreTabIndex === void 0) { ignoreTabIndex = false; }
	    var tagName = elem.tagName.toLowerCase();
	    if (elem && !elem.hidden && window.getComputedStyle(elem).display !== 'none') {
	        var hasTabIndex = elem.hasAttribute('tabindex');
	        var tabindex = parseInt(elem.getAttribute('tabindex'), 10);
	        if (!ignoreTabIndex && hasTabIndex && tabindex < 0) {
	            return false;
	        }
	        if (tagName === 'a' && !!elem.href ||
	            elem.isContentEditable) {
	            return true;
	        }
	        if ((tagName === 'button' ||
	            tagName === 'input' ||
	            tagName === 'select' ||
	            tagName === 'textarea') && !elem.disabled) {
	            return true;
	        }
	        if (!ignoreTabIndex && hasTabIndex && tabindex > -1) {
	            return true;
	        }
	    }
	    return false;
	}
	exports.isElementFocusable = isElementFocusable;
	function getFocusableParent(elem, topElement) {
	    if (topElement === void 0) { topElement = document.body; }
	    var parent = elem;
	    do {
	        parent = parent.parentElement;
	    } while (!isElementFocusable(parent) && !parent.isEqualNode(topElement));
	    return parent;
	}
	exports.getFocusableParent = getFocusableParent;
	function queryFocusableSelector(elem) {
	    var selector = 'button,input,textarea,select,a[href]:not([href=\'\']),\
	      [tabindex],[contenteditable=\'true\']';
	    return elem.querySelectorAll(selector);
	}
	function getFirstFocusableChild(elem, ignoreTabIndex) {
	    if (ignoreTabIndex === void 0) { ignoreTabIndex = false; }
	    var nodes = queryFocusableSelector(elem);
	    for (var i = 0; i < nodes.length; i++) {
	        var node = nodes[i];
	        if (isElementFocusable(node, ignoreTabIndex)) {
	            return node;
	        }
	    }
	    return undefined;
	}
	exports.getFirstFocusableChild = getFirstFocusableChild;
	function getFocusableDescendants(elem, ignoreTabIndex) {
	    if (ignoreTabIndex === void 0) { ignoreTabIndex = false; }
	    var descendants = [];
	    var nodes = queryFocusableSelector(elem);
	    for (var i = 0; i < nodes.length; i++) {
	        var node = nodes[i];
	        if (isElementFocusable(node, ignoreTabIndex)) {
	            descendants.push(node);
	        }
	    }
	    return descendants;
	}
	exports.getFocusableDescendants = getFocusableDescendants;
	function getFocusableSiblings(elem, topElement) {
	    if (topElement === void 0) { topElement = document.body; }
	    var children = getFocusableChildren(getFocusableParent(elem, topElement));
	    // Remove input element and start the list from its next sibling
	    var siblings = [];
	    var insertPointer = 0;
	    for (var _i = 0, children_1 = children; _i < children_1.length; _i++) {
	        var child = children_1[_i];
	        if (!child.isEqualNode(elem)) {
	            siblings.splice(insertPointer++, 0, child);
	        }
	        else {
	            insertPointer = 0;
	        }
	    }
	    return siblings;
	}
	exports.getFocusableSiblings = getFocusableSiblings;
	function getNextFocusableElement(elem, topElement) {
	    if (topElement === void 0) { topElement = document.body; }
	    var siblings = getFocusableSiblings(elem, topElement);
	    return siblings[0];
	}
	exports.getNextFocusableElement = getNextFocusableElement;
	function getPrevFocusableElement(elem, topElement) {
	    if (topElement === void 0) { topElement = document.body; }
	    var siblings = getFocusableSiblings(elem, topElement);
	    return siblings[siblings.length - 1];
	}
	exports.getPrevFocusableElement = getPrevFocusableElement;
	function isElementFocusableChildOf(elem, ancestor) {
	    var parent = elem.parentElement;
	    while (parent.tagName !== 'BODY') {
	        if (parent.isEqualNode(ancestor)) {
	            return true;
	        }
	        if (isElementFocusable(parent)) {
	            break;
	        }
	        parent = parent.parentElement;
	    }
	    return false;
	}
	exports.isElementFocusableChildOf = isElementFocusableChildOf;
	function navigateInside(elem) {
	    var children = getFocusableChildren(elem);
	    if (children.length) {
	        children[0].focus();
	        return true;
	    }
	    else {
	        return false;
	    }
	}
	exports.navigateInside = navigateInside;
	function navigateTo(elem) {
	    if (isElementFocusable(elem)) {
	        elem.focus();
	        return true;
	    }
	    else {
	        return navigateInside(elem);
	    }
	}
	exports.navigateTo = navigateTo;
	function navigateOutOf(elem, topElement) {
	    if (topElement === void 0) { topElement = document.body; }
	    topElement = topElement || document.body;
	    getFocusableParent(elem, topElement).focus();
	}
	exports.navigateOutOf = navigateOutOf;
	var CanvasA11yManager = (function () {
	    function CanvasA11yManager(canvasElement, shouldHandleKeyDown) {
	        if (shouldHandleKeyDown === void 0) { shouldHandleKeyDown = true; }
	        this._canvasElement = canvasElement;
	        this._handleKeyDown = this._handleKeyDown.bind(this);
	        this._randId = Math.floor(Math.random() * 1000000);
	        if (shouldHandleKeyDown) {
	            this._canvasElement.addEventListener('keydown', this._handleKeyDown);
	        }
	    }
	    CanvasA11yManager.prototype.ariaAlert = function (message) {
	        var divId = 'aria_alert_' + this._randId;
	        var oldAlert = document.querySelector('#' + divId);
	        if (oldAlert) {
	            document.body.removeChild(oldAlert);
	        }
	        var alertNode = document.createElement('p');
	        alertNode.classList.add('Canvas-screenReaderOnly');
	        alertNode.setAttribute('role', 'alert');
	        alertNode.setAttribute('id', divId);
	        var alertText = document.createTextNode(message);
	        alertNode.appendChild(alertText);
	        document.body.appendChild(alertNode);
	    };
	    CanvasA11yManager.prototype.navigateInside = function (elem) {
	        return navigateInside(elem);
	    };
	    CanvasA11yManager.prototype.navigateTo = function (elem) {
	        return navigateTo(elem);
	    };
	    CanvasA11yManager.prototype.navigateOutOf = function (elem) {
	        navigateOutOf(elem);
	    };
	    CanvasA11yManager.prototype.clearState = function () {
	        this._savedFocusedElement = undefined;
	    };
	    CanvasA11yManager.prototype.restoreState = function () {
	        return this.navigateTo(this._savedFocusedElement);
	    };
	    CanvasA11yManager.prototype.saveState = function (elem) {
	        elem = elem || document.activeElement;
	        this._savedFocusedElement = elem;
	    };
	    CanvasA11yManager.prototype.skipEvent = function (e) {
	        e[CanvasA11yManager._SKIP_FLAG] = true;
	    };
	    CanvasA11yManager.prototype._shouldSkipEvent = function (e) {
	        return e[CanvasA11yManager._SKIP_FLAG];
	    };
	    CanvasA11yManager.prototype._handleKeyDown = function (e) {
	        if (this._shouldSkipEvent(e)) {
	            return;
	        }
	        var currentElement = isElementFocusable(e.target) ?
	            e.target : getFocusableParent(e.target, this._canvasElement);
	        var elementToGo;
	        if (isTab(e)) {
	            var children = getFocusableChildren(this._canvasElement);
	            if (children.length && !currentElement.isEqualNode(children[children.length - 1])) {
	                elementToGo = getNextFocusableElement(currentElement, this._canvasElement);
	            }
	        }
	        else if (isShiftTab(e)) {
	            var children = getFocusableChildren(this._canvasElement);
	            if (children.length && !currentElement.isEqualNode(children[0])) {
	                elementToGo = getPrevFocusableElement(currentElement, this._canvasElement);
	            }
	        }
	        else if (isEnter(e)) {
	            var children = getFocusableChildren(currentElement);
	            elementToGo = children.length ? children[0] : undefined;
	        }
	        else if (isEscape(e)) {
	            elementToGo = getFocusableParent(currentElement, this._canvasElement);
	        }
	        if (elementToGo) {
	            elementToGo.focus();
	            e.preventDefault();
	            e.stopPropagation();
	        }
	    };
	    CanvasA11yManager._SKIP_FLAG = 'a11y-skip';
	    return CanvasA11yManager;
	}());
	exports.CanvasA11yManager = CanvasA11yManager;
	


/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @copyright Microsoft Corporation. All rights reserved.
	 */
	"use strict";
	var QuillLoader_1 = __webpack_require__(119);
	var CanvasStrings_resx_1 = __webpack_require__(110);
	/**
	 * Implmentation of ISPRteQuillIntegration for Quill 0.20.1
	 */
	var QuillEditor = (function () {
	    /**
	     * Use createNewEditor instead of constructor to ensure using the editor after it's loaded
	     * Note: TypeScript doesn't allow private constructors
	     */
	    function QuillEditor(config, currentHTML, editorElement, selectionChangeCallback, textChangeCallback) {
	        this._config = config;
	        this._editorElement = editorElement;
	        this._findWrappingElementByTagName = this._findWrappingElementByTagName.bind(this);
	        this._handleSelectionChange = selectionChangeCallback;
	        this._handleTextChange = textChangeCallback;
	        this.focus = this.focus.bind(this);
	        this.format = this.format.bind(this);
	        this.getSelection = this.getSelection.bind(this);
	        this._initialize(currentHTML);
	    }
	    /**
	     * @return Promise of the instance that resolves once the editor is loaded on the element
	     *
	     * Static wrapper for constructing an instance
	     */
	    QuillEditor.createNewEditor = function (config, currentHTML, editorElement, selectionChangeCallback, textChangeCallback) {
	        return new Promise(function (resolve) {
	            QuillEditor.moduleLoader.loadModule().then(function () {
	                var editor = new QuillEditor(config, currentHTML, editorElement, selectionChangeCallback, textChangeCallback);
	                resolve(editor);
	            });
	        });
	    };
	    QuillEditor.prototype.destroy = function () {
	        if (this._quill) {
	            var previousHTML = this._quill.destroy();
	            this._quill = undefined;
	            return previousHTML;
	        }
	        return undefined;
	    };
	    /**
	     * @param start - Start position of selection
	     * @param end - End position of selection
	     * @param formats - Map of key:value pairs for formats to apply
	     * @param applyAllFormatsToLine - Forces all formats to be applied to the whole line(s). If not provided,
	     * formats are divided into two buckets (line vs non-line) based on their isLine field
	     *
	     * A unified method for applying Quill formats to any selection
	     */
	    QuillEditor.prototype.format = function (start, end, formats, applyAllFormatsToLine) {
	        var lineFormats = applyAllFormatsToLine ? formats : {};
	        var nonLineFormats = {};
	        if (!applyAllFormatsToLine) {
	            // Divide formats into two buckets: Line and Non-Line
	            /* tslint:disable */
	            var _loop_1 = function(formateditorKey) {
	                /* tslint:enable */
	                var format = this_1._config.supportedFormatsArray
	                    .filter(function (format) { return format.editorKey === formateditorKey; })[0];
	                if (format.isLine) {
	                    lineFormats[format.editorKey] = formats[format.editorKey];
	                }
	                else {
	                    nonLineFormats[format.editorKey] = formats[format.editorKey];
	                }
	            };
	            var this_1 = this;
	            for (var formateditorKey in formats) {
	                _loop_1(formateditorKey);
	            }
	        }
	        /* Apply line formats: If there is a newline character at the end of the selection, Quill.formatLine
	        formats an extra line. We don't want the extra line by design so we remove the last character if
	        it's a newline character */
	        var firstLineOffset = this._quill.editor.doc.findLineAt(start)[1];
	        var _a = this._quill.editor.doc.findLineAt(end), lastLine = _a[0], lastLineOffset = _a[1];
	        var startOfFirstLine = start - firstLineOffset;
	        var endOfLastLine = (start !== end && lastLineOffset === 0) ? end - 1 : end + lastLine.length - lastLineOffset - 1;
	        this._quill.formatLine(startOfFirstLine, endOfLastLine, lineFormats);
	        if (!applyAllFormatsToLine) {
	            // Apply Non-Line formats
	            /* tslint:disable */
	            if (nonLineFormats.hasOwnProperty('link') &&
	                this.isFormatAppliedToRange(start, end, this._config.formats.get('link'))) {
	                // There is already a link on the selection, remove or edit it
	                if (start === end) {
	                    var linkElement = this._findWrappingElementByTagName(start, 'A');
	                    if (linkElement) {
	                        if (nonLineFormats['link']) {
	                            linkElement.setAttribute('href', nonLineFormats['link']);
	                            linkElement.setAttribute('target', '_blank');
	                        }
	                        else {
	                            var container = linkElement.parentElement;
	                            if (container) {
	                                var textNode = document.createTextNode(linkElement.textContent);
	                                container.insertBefore(textNode, linkElement);
	                                container.removeChild(linkElement);
	                            }
	                        }
	                        nonLineFormats['link'] = undefined;
	                    }
	                }
	                else if (nonLineFormats['link']) {
	                    // Edit link on non-collapsed selection
	                    var linkElement = void 0;
	                    var linkAtEnd = this._findWrappingElementByTagName(end, 'A');
	                    // If the selection size is larger than 1, make sure the whole selection is on the same link
	                    if (end - start > 1) {
	                        var linkAtStart = this._findWrappingElementByTagName(start + 1, 'A');
	                        linkElement = linkAtStart && linkAtEnd && linkAtStart.isEqualNode(linkAtEnd) ? linkAtEnd : undefined;
	                    }
	                    else {
	                        linkElement = linkAtEnd;
	                    }
	                    if (linkElement) {
	                        linkElement.setAttribute('href', nonLineFormats['link']);
	                        linkElement.setAttribute('target', '_blank');
	                        nonLineFormats['link'] = undefined;
	                    }
	                }
	            }
	            if (start === end) {
	                for (var format in nonLineFormats) {
	                    if (format === 'bold' || format === 'italic' || format === 'underline') {
	                        this._quill.prepareFormat(format, nonLineFormats[format]);
	                    }
	                }
	            }
	            else {
	                this._quill.formatText(start, end, nonLineFormats);
	                if (nonLineFormats.hasOwnProperty('link') && nonLineFormats['link']) {
	                    var linkElement = this._findWrappingElementByTagName(end, 'A');
	                    if (linkElement) {
	                        linkElement.setAttribute('target', '_blank');
	                    }
	                }
	            }
	        }
	        /* tslint:enable */
	    };
	    QuillEditor.prototype.getBounds = function (position) {
	        return this._quill.getBounds(position);
	    };
	    QuillEditor.prototype.getSelection = function () {
	        return this._quill.getSelection();
	    };
	    QuillEditor.prototype.getText = function (range) {
	        return range ?
	            this._quill.getText(range.start, range.end) :
	            this._quill.getText();
	    };
	    QuillEditor.prototype.getHTML = function () {
	        return this._quill.getHTML();
	    };
	    QuillEditor.prototype.getFormatValue = function (start, end, format) {
	        if (format.key === 'link') {
	            var linkElement = void 0;
	            var linkAtEnd = this._findWrappingElementByTagName(end, 'A');
	            // If the selection size is larger than 1, make sure the whole selection is on the same link
	            if (end - start > 1) {
	                var linkAtStart = this._findWrappingElementByTagName(start + 1, 'A');
	                linkElement = linkAtStart && linkAtEnd && linkAtStart.isEqualNode(linkAtEnd) ? linkAtEnd : undefined;
	            }
	            else {
	                linkElement = linkAtEnd;
	            }
	            return linkElement ? linkAtEnd.getAttribute('href') : undefined;
	        }
	        else {
	            return this.isFormatAppliedToRange(start, end, format);
	        }
	    };
	    /**
	     * @param format - Name of the format to apply from QUILL_FORMATS or SPRTE_FORMATS
	     * @param start - Start value of range
	     * @param end - End value of range
	     *
	     * @return A dictionary of string=>boolean indicating if the format is applied to the given range
	     */
	    QuillEditor.prototype.isFormatAppliedToRange = function (start, end, format) {
	        var canBrowserHandle = !!format.browserKey;
	        /* Chrome has a bug that returns true for bold, italic, underline if an empty line is selected
	        We temporarily add this block to use Quill for those formats until the issue is fixed.
	        Issue filed at: https://bugs.chromium.org/p/chromium/issues/detail?id=606047 */
	        if (start !== end && ['bold', 'italic', 'underline'].indexOf(format.key) !== -1) {
	            canBrowserHandle = false;
	        }
	        // IE and FF don't support justification commands, use Quill API instead
	        if (['alignCenter', 'alignLeft', 'alignRight'].indexOf(format.key) !== -1) {
	            var line = this._quill.editor.doc.findLineAt(end)[0];
	            if (line.delta.ops.length > 0) {
	                /* tslint:disable */
	                // The align attribute is always set in last delta attributes because it contains the newline character
	                var attributes = line.delta.ops[line.delta.ops.length - 1].attributes;
	                // @todo #188988: default alignment should match locale (LTR vs RTL)
	                var textAlign = attributes && attributes.align ? attributes.align : 'left';
	                /* tslint:disable */
	                if (format.key === 'alignCenter') {
	                    return textAlign === 'center';
	                }
	                else if (format.key === 'alignLeft') {
	                    return textAlign === 'left';
	                }
	                else if (format.key === 'alignRight') {
	                    return textAlign === 'right';
	                }
	            }
	        }
	        // If the format can't be handled by browser use Quill to find active formats
	        if (!canBrowserHandle) {
	            // If the selection is collapsed, check the last character
	            start = start === end ? Math.max(0, end - 1) : start;
	            var activeFormats = this._getActiveFormatsInRange(start, end, format.isLine);
	            return (format.isLine || start === 0) ?
	                !!activeFormats.get(format.key) :
	                activeFormats.get('count') === activeFormats.get(format.key);
	        }
	        else {
	            return document.queryCommandState(format.browserKey);
	        }
	    };
	    QuillEditor.prototype.setSelection = function (range) {
	        this._quill.setSelection(range.start, range.end);
	    };
	    QuillEditor.prototype.focus = function () {
	        // Use setActive() instead of focus() if available, because focus() scrolls to view in IE
	        if (this._quillEditorElement && this._quillEditorElement.setActive) {
	            this._quillEditorElement.setActive();
	        }
	        else {
	            this._quill.focus();
	        }
	    };
	    QuillEditor.prototype._findWrappingElementByTagName = function (position, tagName) {
	        var leafNode = this._quill.editor.doc.findLeafAt(Math.max(0, position - 1))[0].node;
	        /* Move up the dom tree until find the first node with the given tag name or reach the editor element
	        Note: Use .parentNode instead of .parentElement, because IE doesn't have .parentElement on text nodes */
	        var parentNode = leafNode.parentNode;
	        while (parentNode && parentNode.tagName !== tagName && !parentNode.isEqualNode(this._editorElement)) {
	            parentNode = parentNode.parentNode;
	        }
	        return parentNode.tagName === tagName ? parentNode : undefined;
	    };
	    /**
	     * @param start - start value of a selection
	     * @param end - end value of a selection
	     *
	     * Find and calculate all the non-sequential formattings in a selection.
	     *
	     * @return A dictionary mapping of format to non-sequential occurrences in the range of start to end
	     */
	    QuillEditor.prototype._getActiveFormatsInRange = function (start, end, isLine) {
	        if (isLine === void 0) { isLine = false; }
	        start = start === end ? Math.max(0, end - 1) : start;
	        /* tslint:disable:no-any */
	        var contentAttributes;
	        /* tslint:enable:no-any */
	        if (isLine) {
	            var line = this._quill.editor.doc.findLineAt(end)[0];
	            contentAttributes = line ? line.delta.ops : [];
	        }
	        else {
	            contentAttributes = this._quill.getContents(start, end).ops;
	        }
	        /* The length of contentAttributes is the number of non-sequential formatting parts in the selection.
	           Keeping track of count for the special case of formatting an entire selection where only a portion
	           of the selection is formatted with a given format. */
	        var attrDict = new Map([['count', contentAttributes.length]]);
	        var formats = this._config.supportedFormatsArray.map(function (format) { return format.key; });
	        for (var _i = 0, formats_1 = formats; _i < formats_1.length; _i++) {
	            var format = formats_1[_i];
	            attrDict.set(format, 0);
	        }
	        for (var _a = 0, contentAttributes_1 = contentAttributes; _a < contentAttributes_1.length; _a++) {
	            var op = contentAttributes_1[_a];
	            // op.attributes can be undefined if the chunk is unformatted
	            if (op.attributes) {
	                for (var attr in op.attributes) {
	                    // Verify the attribute is a recognized format
	                    if (attrDict.has(attr)) {
	                        attrDict.set(attr, attrDict.get(attr) + 1);
	                    }
	                }
	            }
	        }
	        return attrDict;
	    };
	    /**
	     * Initialize Quill with whitelist of formats, prevent default css,
	     * add custom formats, and registering event handlers.
	     */
	    QuillEditor.prototype._initialize = function (currentHTML) {
	        var _this = this;
	        QuillEditor.moduleLoader.loadModule().then(function (quillModule) {
	            if (!QuillEditor.quillDelta) {
	                QuillEditor.quillDelta = quillModule.require('delta');
	            }
	            if (!QuillEditor.quillDocument) {
	                QuillEditor.quillDocument = quillModule.require('document');
	            }
	            var quillFormatKeys = _this._config.supportedFormatsArray
	                .filter(function (format) { return format.isEditorNative; })
	                .map(function (format) { return format.editorKey; })
	                .filter(function (formatKey, index, self) { return self.indexOf(formatKey) === index; }); // Distinct keys
	            var quill = new quillModule(_this._editorElement, {
	                formats: quillFormatKeys,
	                readOnly: false,
	                styles: false,
	                modules: {
	                    'paste-manager': {
	                        onConvert: function (container) {
	                            // Remove images
	                            var wordImages = container.querySelectorAll('img, .MsoNormal [src]:not([src=\'\']');
	                            for (var i = 0; i < wordImages.length; i++) {
	                                wordImages[i].parentElement.removeChild(wordImages[i]);
	                            }
	                            var doc = new QuillEditor.quillDocument(container, {
	                                formats: quillFormatKeys,
	                                readOnly: false,
	                                styles: false
	                            });
	                            // Clean up children with no text content
	                            var line = doc.lines.first;
	                            while (line) {
	                                var next = line.next;
	                                if (!line.data.textContent.length) {
	                                    doc.removeLine(line);
	                                }
	                                line = next;
	                            }
	                            var delta = doc.toDelta();
	                            // Remove added newline if applicable
	                            var lengthAdded = delta.length();
	                            if (lengthAdded === 0) {
	                                return delta;
	                            }
	                            return delta.compose(new QuillEditor.quillDelta().retain(lengthAdded - 1)['delete'](1));
	                        }
	                    }
	                }
	            });
	            _this._quillEditorElement = _this._editorElement.querySelector('.ql-editor');
	            // @todo 181437, get placeholder text via props later
	            _this._quillEditorElement.setAttribute('data-placeholder', CanvasStrings_resx_1.default.TextWebPartPlaceholder);
	            // Add custom non-Quill formats to Quill
	            // @todo 198188: Do this using _supportedFormatsArray after upgrading to Quill 1.0
	            quill.addFormat('blockquote', {
	                class: 'quote-',
	                type: 'line'
	            });
	            quill.addFormat('h2', {
	                tag: 'H2',
	                type: 'line'
	            });
	            quill.addFormat('h3', {
	                tag: 'H3',
	                type: 'line'
	            });
	            quill.addFormat('h4', {
	                tag: 'H4',
	                type: 'line'
	            });
	            quill.on('text-change', _this._handleTextChange);
	            quill.on('selection-change', _this._handleSelectionChange);
	            quill.setHTML(currentHTML);
	            _this._quill = quill;
	        });
	    };
	    QuillEditor.moduleLoader = new QuillLoader_1.default();
	    return QuillEditor;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = QuillEditor;
	


/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @copyright Microsoft Corporation. All rights reserved.
	 */
	"use strict";
	var sp_client_base_1 = __webpack_require__(69);
	var QuillLoader = (function () {
	    function QuillLoader() {
	    }
	    QuillLoader.prototype.loadModule = function () {
	        if (!QuillLoader._quillPromise) {
	            QuillLoader._quillPromise = new Promise(function (complete) {
	                __webpack_require__.e/* nsure */(2, function (require) {
	                    var quill = __webpack_require__(120);
	                    QuillLoader._quillModule = quill;
	                    complete(quill);
	                });
	            });
	            QuillLoader._quillPromise.catch(function (error) {
	                sp_client_base_1._TraceLogger.logError(QuillLoader.logSource, error);
	            });
	        }
	        return QuillLoader._quillPromise;
	    };
	    QuillLoader.logSource = sp_client_base_1._LogSource.create('SPRteQuillLoader');
	    return QuillLoader;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = QuillLoader;
	


/***/ },
/* 120 */,
/* 121 */,
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @copyright Microsoft Corporation. All rights reserved.
	 *
	 * @file The button component used by toolbars on the Canvas.
	 * It implements all common functionalities expected of a toolbar button.
	 * It is used in the Canvas control toolbar and Rich Text Editor formatting bar.
	 */
	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var css_1 = __webpack_require__(105);
	var React = __webpack_require__(82);
	__webpack_require__(123);
	(function (ButtonState) {
	    ButtonState[ButtonState["Active"] = 0] = "Active";
	    ButtonState[ButtonState["Disabled"] = 1] = "Disabled";
	    ButtonState[ButtonState["Normal"] = 2] = "Normal";
	})(exports.ButtonState || (exports.ButtonState = {}));
	var ButtonState = exports.ButtonState;
	/**
	 * @class The button component used by toolbars on the Canvas.
	 */
	var ToolbarButton = (function (_super) {
	    __extends(ToolbarButton, _super);
	    /**
	     * Constructs an instance of ToolbarButton
	     */
	    function ToolbarButton(props) {
	        _super.call(this, props);
	    }
	    /**
	     * Renders ToolbarButton
	     */
	    ToolbarButton.prototype.render = function () {
	        var buttonClassName = css_1.css('ToolbarButton', this.props.className, {
	            'ToolbarButton--disabled': this.props.disabled,
	            'ToolbarButton--active': this.props.isActive
	        });
	        // @todo 198107: Clean this up when mdl2 icons are in
	        var iconCssClass = this.props.fabricIconKey ?
	            "ms-Icon ms-Icon--" + this.props.fabricIconKey : (this.props.iconClassName || '');
	        return (React.createElement("button", {"aria-disabled": this.props.disabled ? true : undefined, "aria-label": this.props.title, "aria-pressed": this.props.canBeActive ? this.props.isActive : undefined, className: buttonClassName, key: this.props.key, onClick: this.props.onClick, title: this.props.title, tabIndex: this.props.tabIndex}, React.createElement("i", {className: iconCssClass}), this.props.label));
	    };
	    /* tslint:disable:member-access */
	    ToolbarButton.defaultProps = {
	        // required fields default to undefined
	        key: undefined,
	        fabricIconKey: undefined,
	        onClick: undefined,
	        // optional fields default values
	        canBeActive: true,
	        className: 'CanvasControlToolbar-item',
	        disabled: false,
	        isActive: false
	    };
	    return ToolbarButton;
	}(React.Component));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = ToolbarButton;
	


/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(124);
	


/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	var content = __webpack_require__(125);
	var loader = __webpack_require__(77);
	
	if(typeof content === "string") content = [[module.id, content]];
	
	// add the styles to the DOM
	for (var i = 0; i < content.length; i++) loader.loadStyles(content[i][1]);
	
	if(content.locals) module.exports = content.locals;

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(76)();
	// imports
	
	
	// module
	exports.push([module.id, ".ToolbarButton{background-color:\"[theme:neutralPrimary, default: #333333]\";border:none;height:34px;overflow:hidden;padding:0 8px;position:relative;text-align:center;top:0;-webkit-transition:all .3s;transition:all .3s;-webkit-transition-property:background-color,color;transition-property:background-color,color;min-width:34px;color:\"[theme:neutralLighterAlt, default: #f8f8f8]\";font-family:\"Segoe UI Light WestEuropean\",\"Segoe UI Light\",\"Segoe WP Light\",\"Segoe UI\",\"Segoe WP\",Tahoma,Arial,sans-serif;font-size:14px}.ToolbarButton .ms-Icon{font-family:sp-MDL2;font-size:16px;line-height:1.2}.ToolbarButton:hover{background-color:\"[theme:neutralSecondaryAlt, default: #767676]\";cursor:pointer}.ToolbarButton.ToolbarButton--active{background-color:\"[theme:themeSecondary, default:#2b88d8]\"}.ToolbarButton.ToolbarButton--active+.ToolbarButton--divider::after,.ToolbarButton.ToolbarButton--active.ToolbarButton--divider::after{border:\"[theme:themeSecondary, default:#2b88d8]\"}.ToolbarButton:active{background-color:\"[theme:themeDarkAlt, default:#106ebe]\"}.ToolbarButton.ToolbarButton--disabled,.ToolbarButton.ToolbarButton--disabled:hover{background-color:\"[theme:neutralPrimary, default: #333333]\";color:\"[theme:neutralSecondary, default: #666666]\"}.ToolbarButton.ToolbarButton--disabled .ms-Icon,.ToolbarButton.ToolbarButton--disabled:hover .ms-Icon{color:\"[theme:neutralSecondary, default: #666666]\"}.ToolbarButton:focus{background-color:\"[theme:themeDark, default:#005a9e]\";border:1px solid \"[theme:neutralSecondaryAlt, default: #767676]\";outline:0}.ToolbarButton.ToolbarButton--divider::after{content:'';position:absolute;height:20px;left:0;top:6px;border-left:1px solid \"[theme:neutralSecondary, default: #666666]\"}.ToolbarButton--h2{font-size:21px}.ToolbarButton--blockquote{font-style:italic}", ""]);
	
	// exports


/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @copyright Microsoft Corporation. All rights reserved.
	 *
	 * @file Contains ToolbarSubmenu class which is used to group related buttons in toolbar
	 */
	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var React = __webpack_require__(82);
	var office_ui_fabric_react_1 = __webpack_require__(112);
	var ToolbarButton_1 = __webpack_require__(122);
	var CanvasA11y_1 = __webpack_require__(117);
	__webpack_require__(127);
	/**
	 * @class Submenu can be used in as toolbar item just like a button, to group a number of related buttons
	 * that do different variations of an action (like text alignment). Only one of the buttons in a submenu
	 * can be active at a time. The icon shown in the closed state is the icon of the active button
	 */
	var ToolbarSubmenu = (function (_super) {
	    __extends(ToolbarSubmenu, _super);
	    function ToolbarSubmenu(props) {
	        _super.call(this, props);
	        this._bindButtonClickHandlers = this._bindButtonClickHandlers.bind(this);
	        this._handleCloseSubmenu = this._handleCloseSubmenu.bind(this);
	        this._handleKeyDown = this._handleKeyDown.bind(this);
	        this._handleOpenSubmenu = this._handleOpenSubmenu.bind(this);
	        this._hasExplicitActiveButton = false;
	        // Submenu closed by default
	        this.state = {
	            isOpen: props.isOpen
	        };
	    }
	    ToolbarSubmenu.prototype.componentDidUpdate = function (prevProps, prevState) {
	        /**
	         * Ensure focus isn't lost when navigating out of a submenu via the left/right arrow keys.
	         * Set the focus back to the submenu active button.
	         */
	        if (!this.state.isOpen && this._isKeyboardNav && this._focusElement) {
	            this._focusElement.focus();
	            this._focusElement = undefined;
	            this._isKeyboardNav = false;
	        }
	        if (this.state.isOpen && !prevState.isOpen && this._menuElement) {
	            CanvasA11y_1.navigateInside(this._menuElement);
	        }
	    };
	    ToolbarSubmenu.prototype.componentWillReceiveProps = function (nextProps) {
	        this.setState({ isOpen: nextProps.isOpen });
	    };
	    /**
	     *  Render the submenu, depending on its open state
	     */
	    ToolbarSubmenu.prototype.render = function () {
	        var _this = this;
	        var openedCssClass = this.state.isOpen ? 'is-open' : '';
	        var wideCssClass = this.props.isWide ? 'ToolbarSubmenu--wide' : '';
	        this._bindButtonClickHandlers();
	        var buttonElements = [];
	        for (var _i = 0, _a = this.props.buttons; _i < _a.length; _i++) {
	            var buttonProps = _a[_i];
	            buttonProps.tabIndex = this.state.isOpen ? 0 : -1;
	            buttonElements.push(React.createElement(ToolbarButton_1.default, React.__spread({}, buttonProps)));
	        }
	        var activeButton = this._getActiveButton();
	        return (React.createElement("div", {"aria-selected": this.state.isOpen, className: "ToolbarSubmenu " + openedCssClass + " " + wideCssClass}, React.createElement(ToolbarButton_1.default, {className: 'ToolbarSubmenu-displayButton', fabricIconKey: activeButton.fabricIconKey, iconClassName: activeButton.iconClassName, key: 'displayButton', onClick: this._handleOpenSubmenu, isActive: this._hasExplicitActiveButton, label: activeButton.label, tabIndex: this.state.isOpen ? -1 : 0}), React.createElement("i", {className: 'ms-Icon ms-Icon--caretDown ToolbarSubmenu-caret'}), React.createElement(office_ui_fabric_react_1.FocusZone, {isCircularNavigation: true}, React.createElement("div", {className: 'ToolbarSubmenu-menuItems', ref: function (c) { return _this._menuElement = c; }, onKeyDown: this._handleKeyDown}, buttonElements))));
	    };
	    ToolbarSubmenu.prototype._bindButtonClickHandlers = function () {
	        // Bind submenu button click handler to the exisiting one for each button
	        // This makes sure the submenu closes after the action is done
	        for (var _i = 0, _a = this.props.buttons; _i < _a.length; _i++) {
	            var buttonProps = _a[_i];
	            buttonProps.onClick = this._handleOnButtonClick.bind(this, buttonProps.onClick);
	        }
	    };
	    /**
	     * Return the props of the currently active button
	     */
	    ToolbarSubmenu.prototype._getActiveButton = function () {
	        this._hasExplicitActiveButton = false;
	        for (var _i = 0, _a = this.props.buttons; _i < _a.length; _i++) {
	            var button = _a[_i];
	            if (button.isActive) {
	                this._hasExplicitActiveButton = true;
	                return button;
	            }
	        }
	        // No active button found, return the first one
	        return this.props.buttons[0];
	    };
	    ToolbarSubmenu.prototype._handleKeyDown = function (e) {
	        if (this.state.isOpen &&
	            (e.key === 'ArrowRight' || e.key === 'ArrowLeft')) {
	            this._isKeyboardNav = true;
	            this._handleCloseSubmenu();
	        }
	    };
	    ToolbarSubmenu.prototype._handleOpenSubmenu = function () {
	        this._focusElement = document.activeElement;
	        this.props.onOpen();
	        this.setState({ isOpen: true });
	    };
	    ToolbarSubmenu.prototype._handleCloseSubmenu = function () {
	        this.setState({ isOpen: false });
	    };
	    /**
	     * @param onClickAction - The original onClick callback passed for the button
	     *
	     * Closes the submenu after calling the action of the button
	     * All the button props must be updated to use this function as their onClick handler
	     */
	    ToolbarSubmenu.prototype._handleOnButtonClick = function (onClickCallback) {
	        onClickCallback();
	        // Close the submenu to the OnClick behavior of each button
	        this._handleCloseSubmenu();
	    };
	    return ToolbarSubmenu;
	}(React.Component));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = ToolbarSubmenu;
	


/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(128);
	


/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	var content = __webpack_require__(129);
	var loader = __webpack_require__(77);
	
	if(typeof content === "string") content = [[module.id, content]];
	
	// add the styles to the DOM
	for (var i = 0; i < content.length; i++) loader.loadStyles(content[i][1]);
	
	if(content.locals) module.exports = content.locals;

/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(76)();
	// imports
	
	
	// module
	exports.push([module.id, ".ToolbarSubmenu{width:44px;position:relative}.ToolbarSubmenu .ToolbarButton{width:44px}.ToolbarSubmenu-displayButton{padding-right:20px}.ToolbarSubmenu-caret{color:\"[theme:neutralLighterAlt, default: #f8f8f8]\";font-size:12px;pointer-events:none;position:absolute;right:2px;top:11px;z-index:1}.ToolbarSubmenu-menuItems{display:none;position:absolute;top:0}.ToolbarSubmenu-menuItems .ToolbarButton{padding-right:20px}.ToolbarSubmenu--wide{width:160px!important}.ToolbarSubmenu--wide .ToolbarButton{width:100%;text-align:left}.ToolbarSubmenu.is-open .ToolbarSubmenu-menuItems{display:block}", ""]);
	
	// exports


/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(131);
	


/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	var content = __webpack_require__(132);
	var loader = __webpack_require__(77);
	
	if(typeof content === "string") content = [[module.id, content]];
	
	// add the styles to the DOM
	for (var i = 0; i < content.length; i++) loader.loadStyles(content[i][1]);
	
	if(content.locals) module.exports = content.locals;

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(76)();
	// imports
	
	
	// module
	exports.push([module.id, ".ql-container{cursor:text;margin:0;min-height:100%;margin-bottom:-16px}.ql-container:focus{outline:0}.ql-editor:focus{outline:0}.ql-paste-manager{position:absolute;text-indent:-9999px;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;border:0}.ql-editor.ql-ie-10 br,.ql-editor.ql-ie-9 br{display:none}.ql-container .quote-true,.ql-container div:not(.ql-editor),.ql-container h2,.ql-container h3,.ql-container h4,.ql-container ol,.ql-container ul,.ql-container.ql-container--blank .ql-editor[contenteditable=true]::before{-webkit-font-smoothing:antialiased;color:\"[theme:neutralPrimary, default: #333333]\";font-family:\"Segoe UI Regular WestEuropean\",\"Segoe UI\",\"Segoe WP\",Tahoma,Arial,sans-serif;line-height:1.5;margin:0 0 16px 0;padding:0;white-space:pre-wrap;word-wrap:break-word}.ql-container h3{font-size:20px}.ql-container h4{font-family:\"Segoe UI Semibold WestEuropean\",\"Segoe UI Semibold\",\"Segoe WP Semibold\",\"Segoe UI\",\"Segoe WP\",Tahoma,Arial,sans-serif;font-size:18px}.ql-container.ql-container--blank .ql-editor[contenteditable=true]::before{color:\"[theme:neutralTertiary, default: #a6a6a6]\"!important;content:attr(data-placeholder);position:absolute;pointer-events:none}.ql-container h2{font-family:\"Segoe UI Light WestEuropean\",\"Segoe UI Light\",\"Segoe WP Light\",\"Segoe UI\",\"Segoe WP\",Tahoma,Arial,sans-serif;font-size:24px;font-weight:400}.ql-container div:not(.ql-editor),.ql-container.ql-container--blank .ql-editor[contenteditable=true]::before{font-family:\"Segoe UI Semilight WestEuropean\",\"Segoe UI Semilight\",\"Segoe WP Semilight\",\"Segoe UI\",\"Segoe WP\",Tahoma,Arial,sans-serif;font-size:16px}.ql-container ol,.ql-container ul{font-family:\"Segoe UI Semilight WestEuropean\",\"Segoe UI Semilight\",\"Segoe WP Semilight\",\"Segoe UI\",\"Segoe WP\",Tahoma,Arial,sans-serif;font-size:16px;list-style-position:inside;padding:0}.ql-container ol li,.ql-container ul li{margin-bottom:8px}.ql-container ol{list-style-type:decimal}.ql-container ul{list-style-type:disc}.ql-container div.quote-true{border-bottom:1px solid \"[theme:neutralTertiaryAlt, default: #c8c8c8]\";border-top:1px solid \"[theme:neutralTertiaryAlt, default: #c8c8c8]\";border-bottom-color:\"[theme:neutralTertiaryAlt, default: #c8c8c8]\";border-top-color:\"[theme:neutralTertiaryAlt, default: #c8c8c8]\";font-family:\"Segoe UI Semilight WestEuropean\",\"Segoe UI Semilight\",\"Segoe WP Semilight\",\"Segoe UI\",\"Segoe WP\",Tahoma,Arial,sans-serif;font-size:20px;font-style:italic;margin:28px 0;padding:32px;text-align:center}.ql-container a{text-decoration:underline}.ql-container i{font-style:italic}.ql-container u{text-decoration:underline}@media screen and (min-width:480px){.ql-container h2{font-size:28px}.ql-container h3{font-size:24px}.ql-container h4{font-size:20px}.ql-container div.quote-true{font-size:24px}}@media screen and (min-width:1024px){.ql-container h2{font-size:32px}.ql-container h3{font-size:30px}.ql-container h4{font-size:24px}.ql-container div:not(.ql-editor),.ql-container.ql-container--blank.ql-editor[contenteditable=true]::before{font-size:18px;line-height:1.75}.ql-container ol,.ql-container ul{font-size:18px;line-height:1.75}}", ""]);
	
	// exports


/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file WebPartZone.ts
	 * @copyright (c) Microsoft Corporation. All rights reserved.
	 */
	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var React = __webpack_require__(82);
	var sp_client_base_1 = __webpack_require__(69);
	var PropertyPaneDefinitions_1 = __webpack_require__(3);
	var CanvasA11y_1 = __webpack_require__(117);
	var WebPartZone = (function (_super) {
	    __extends(WebPartZone, _super);
	    function WebPartZone(props, context) {
	        _super.call(this, props, context);
	        this._webPartManager = this.context.store.webPartManager;
	        this.handleConfigureButtonClicked = this.handleConfigureButtonClicked.bind(this);
	        this.state = {
	            displayMode: this.props.displayMode
	        };
	    }
	    // @todo This is a workaround for deserialization of a Canvas without the manifests.
	    // We need to think about a longer term solution.
	    WebPartZone.prototype.componentDidMount = function () {
	        var _this = this;
	        var context = {
	            domElement: this._webPartDiv,
	            instanceId: this.props.id,
	            manifest: this.props.webPartManifest,
	            displayMode: this.props.displayMode,
	            webPartData: this.props.webPartData
	        };
	        this._loadWebPartPromise = this._webPartManager.loadWebPart(context).then(function () {
	            if (_this.state.displayMode === sp_client_base_1.DisplayMode.Edit && _this.props.id === _this.context.store.selectedControlId) {
	                _this.context.store.webPartManager.configureStart(_this.props.id);
	            }
	            // @todo: Currently loadWebPart() swallows exceptions
	            _this._isLoaded = true;
	        });
	    };
	    WebPartZone.prototype.shouldComponentUpdate = function (newProps, newState) {
	        // Defer all updating to the web part manager and the web part
	        return false;
	    };
	    WebPartZone.prototype.render = function () {
	        var _this = this;
	        return (React.createElement("div", {ref: function (htmlElement) { return _this._webPartDiv = htmlElement; }, style: { width: '100%' }}));
	    };
	    Object.defineProperty(WebPartZone.prototype, "instanceId", {
	        get: function () {
	            return this.props.id;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(WebPartZone.prototype, "isFocusable", {
	        get: function () {
	            return !!CanvasA11y_1.getFirstFocusableChild(this._webPartDiv);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    WebPartZone.prototype.focus = function () {
	        if (!this.context.store.a11yManager.navigateInside(this._webPartDiv)) {
	            this.context.store.a11yManager.navigateOutOf(this._webPartDiv);
	        }
	    };
	    WebPartZone.prototype.handleConfigureButtonClicked = function (shouldToggle) {
	        /**
	         * Using _isLoaded flag instead of the promise because we want a click on the configure button to
	         * no-op. If we had used a promise, the web part selection could have shifted by the time the
	         * loading is complete and thus incorrectly change the context of the property pane. A no-op makes
	         * sense because the web part would have no UI rendered yet, and the framework indicates the web part
	         * is still in the process of loading.
	         */
	        if (this._isLoaded) {
	            this._webPartManager.configureStart(this.props.id, shouldToggle ? PropertyPaneDefinitions_1.PropertyPaneState.Toggle : PropertyPaneDefinitions_1.PropertyPaneState.Open);
	        }
	    };
	    WebPartZone.prototype.handleDeleteButtonClicked = function () {
	        var _this = this;
	        /**
	         * If a web part was still in the process of loading and then the zone is deleted from the Canvas,
	         * we still want to ensure the web part manager cleans up its references and disposes the web part.
	         */
	        this._loadWebPartPromise.then(function () { return _this._webPartManager.onWebPartDelete(_this.props.id); });
	    };
	    WebPartZone.prototype.serialize = function () {
	        var tempArray = [this.props.id];
	        /**
	         * If the web part has not loaded, we can safely return the web part data we are trying to load with because
	         * the data could not have been modified.
	         */
	        var webPartData = this._isLoaded ? this._webPartManager.serialize(tempArray).get(this.props.id) : this.props.webPartData;
	        var serialization = JSON.parse(JSON.stringify(this.props));
	        serialization.webPartManifest = undefined;
	        serialization.webPartData = webPartData;
	        return serialization;
	    };
	    WebPartZone.prototype.setDisplayMode = function (newDisplayMode) {
	        var _this = this;
	        this.setState({
	            displayMode: newDisplayMode
	        });
	        /**
	         * The Canvas zone will switch mode, and then wait for the web part to fully render before asking
	         * the web part manager to switch the mode of the web part.
	         */
	        this._loadWebPartPromise.then(function () { return _this._webPartManager.setDisplayMode(newDisplayMode, _this.props.id); });
	    };
	    WebPartZone.contextTypes = {
	        store: React.PropTypes.object.isRequired
	    };
	    WebPartZone.webPartManagerInitialized = false;
	    return WebPartZone;
	}(React.Component));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = WebPartZone;
	


/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var React = __webpack_require__(82);
	var css_1 = __webpack_require__(105);
	var sp_client_base_1 = __webpack_require__(69);
	var odsp_utilities_bundle_1 = __webpack_require__(6);
	var CanvasControlType_1 = __webpack_require__(135);
	var CanvasA11y_1 = __webpack_require__(117);
	var PropertyPaneDefinitions_1 = __webpack_require__(3);
	__webpack_require__(136);
	var CanvasStrings_resx_1 = __webpack_require__(110);
	var CanvasZone = (function (_super) {
	    __extends(CanvasZone, _super);
	    function CanvasZone(props, context) {
	        _super.call(this, props, context);
	        this._handleClickCapture = this._handleClickCapture.bind(this);
	        this._handleKeydownCapture = this._handleKeydownCapture.bind(this);
	        this._handleMouseOut = this._handleMouseOut.bind(this);
	        this._handleMouseOver = this._handleMouseOver.bind(this);
	        this._handleToolbarKeydown = this._handleToolbarKeydown.bind(this);
	        this._handleTrapFocus = this._handleTrapFocus.bind(this);
	        this._handleControlFocus = this._handleControlFocus.bind(this);
	        this._selectControl = this._selectControl.bind(this);
	    }
	    CanvasZone.prototype.shouldComponentUpdate = function (nextProps) {
	        var _a = this.props, displayMode = _a.displayMode, isSelected = _a.isSelected, row = _a.row;
	        return (displayMode !== nextProps.displayMode ||
	            isSelected !== nextProps.isSelected ||
	            row !== nextProps.row);
	    };
	    CanvasZone.prototype.componentDidMount = function () {
	        if (this.context.store.selectedControlId === this.props.id) {
	            // 500ms animation duration
	            this.context.store.scrollIntoView('partial', this._domElement, 500, CanvasZone._VERTICAL_MARGIN * 2);
	            this.context.store.a11yManager.navigateTo(this._domElement);
	        }
	        this._childControl = this.context.store.getControl(this.props.id);
	        if (this.props.displayMode === sp_client_base_1.DisplayMode.Edit) {
	            this._toolbarElement.addEventListener('keydown', this._handleToolbarKeydown);
	            this._childControlElement.addEventListener('keydown', this._handleKeydownCapture, true);
	        }
	    };
	    CanvasZone.prototype.componentDidUpdate = function (prevProps) {
	        var displayMode = this.props.displayMode;
	        if (prevProps.displayMode !== displayMode) {
	            if (displayMode === sp_client_base_1.DisplayMode.Edit) {
	                this._toolbarElement.addEventListener('keydown', this._handleToolbarKeydown);
	                this._childControlElement.addEventListener('keydown', this._handleKeydownCapture, true);
	            }
	            else if (displayMode === sp_client_base_1.DisplayMode.Read) {
	                this._toolbarElement.removeEventListener('keydown', this._handleToolbarKeydown);
	                this._childControlElement.removeEventListener('keydown', this._handleKeydownCapture, true);
	            }
	        }
	    };
	    CanvasZone.prototype.render = function () {
	        var _this = this;
	        var _a = this.props, children = _a.children, displayMode = _a.displayMode, isSelected = _a.isSelected, id = _a.id;
	        var controlType = children[0].props.controlType;
	        var isReadMode = displayMode === sp_client_base_1.DisplayMode.Read;
	        var accessibleLabel = '';
	        var ariaPrimaryLabelById = "cswpAccessibleLabel_" + id;
	        // Keep ID in sync with BaseClientSideWebpart._renderWithAccessibileTitle,
	        // where each webpart can provide contextual info based on its properties:
	        // ie. "image of a house" instead of just "image"
	        var ariaContextualLabelId = "cswpAccessibleLabelContextual_" + id;
	        // Have to provide multiple IDs because IE doesn't care for aria-describedBy on DIVs
	        var ariaLabelledBy;
	        if (controlType === CanvasControlType_1.default.WebPartZone) {
	            // Want additional listed first since it will provide most contextual info
	            ariaLabelledBy = ariaContextualLabelId;
	        }
	        else if (controlType === CanvasControlType_1.default.RTE) {
	            accessibleLabel = odsp_utilities_bundle_1.StringHelper.format(CanvasStrings_resx_1.default.CanvasZoneAriaWebpartName || '', CanvasStrings_resx_1.default.TextWebPartDisplayName || '') || '';
	            // No contextual info available for text
	            ariaLabelledBy = ariaPrimaryLabelById;
	        }
	        if (displayMode === sp_client_base_1.DisplayMode.Edit) {
	            accessibleLabel = odsp_utilities_bundle_1.StringHelper.format(CanvasStrings_resx_1.default.AriaWebPartEnterTemplate || '', accessibleLabel) || '';
	            if (controlType === CanvasControlType_1.default.WebPartZone) {
	                ariaLabelledBy += " " + ariaPrimaryLabelById;
	            }
	        }
	        var zoneClassName = css_1.css('CanvasZone', {
	            'CanvasZone--edit': !isReadMode,
	            'CanvasZone--selected': isSelected
	        });
	        return (
	        /**
	         * Passing undefined once you set the tab index does not remove the tab index in React 14.
	         * This is fixed in React 15. https://github.com/facebook/react/issues/2528
	         */
	        React.createElement("div", {"aria-labelledby": ariaLabelledBy, className: zoneClassName, ref: function (ref) { return _this._domElement = ref; }, onMouseOut: this._handleMouseOut, onMouseOver: this._handleMouseOver, tabIndex: isReadMode ? -1 : 0}, React.createElement("div", null, React.createElement("div", {className: 'CanvasZone-control', isHidden: isReadMode, onClickCapture: isReadMode ? undefined : this._handleClickCapture, onFocus: isReadMode ? undefined : this._handleControlFocus, ref: function (ref) { return _this._childControlElement = ref; }}, children[0]), React.createElement("div", {isHidden: isReadMode, ref: function (ref) { return _this._toolbarElement = ref; }}, children[1]), React.createElement("div", {id: ariaPrimaryLabelById, className: 'CanvasZone-screenReaderOnly'}, accessibleLabel))));
	    };
	    CanvasZone.prototype._handleControlFocus = function (e) {
	        this._selectControl();
	    };
	    CanvasZone.prototype._handleClickCapture = function (e) {
	        this._selectControl();
	    };
	    CanvasZone.prototype._handleKeydownCapture = function (evt) {
	        if (this._childControl && this._childControl.props.controlType === CanvasControlType_1.default.WebPartZone) {
	            if (CanvasA11y_1.isEscape(evt)) {
	                this.context.store.a11yManager.navigateTo(this._domElement);
	                evt.stopPropagation();
	                evt.preventDefault();
	            }
	            else if (CanvasA11y_1.isKey(CanvasA11y_1.KeyCodes.F10, evt, true)) {
	                this.context.store.a11yManager.navigateTo(this._toolbarElement);
	                this.context.store.a11yManager.ariaAlert(CanvasStrings_resx_1.default.ToolbarNavigationArrowKeys);
	                evt.stopPropagation();
	                evt.preventDefault();
	            }
	            else if (CanvasA11y_1.isKey(CanvasA11y_1.KeyCodes.P, evt, true)) {
	                this.context.store.webPartManager.configureStart(this._childControl.props.id, PropertyPaneDefinitions_1.PropertyPaneState.Open);
	                evt.stopPropagation();
	                evt.preventDefault();
	            }
	            else {
	                this.context.store.a11yManager.skipEvent(evt);
	            }
	        }
	    };
	    CanvasZone.prototype._handleToolbarKeydown = function (evt) {
	        if (this._childControl && this._childControl.props.controlType === CanvasControlType_1.default.RTE) {
	            // Only for RTE: pressing escape on toolbar takes the focus inside the editor
	            if (CanvasA11y_1.isEscape(evt)) {
	                this._childControl.focus();
	                evt.stopPropagation();
	                evt.preventDefault();
	            }
	        }
	    };
	    CanvasZone.prototype._handleMouseOut = function (e) {
	        this.context.store.hoveredControlId = undefined;
	    };
	    CanvasZone.prototype._handleMouseOver = function (e) {
	        this.context.store.hoveredControlId = this.props.id;
	    };
	    CanvasZone.prototype._handleTrapFocus = function (e) {
	        if (e.target === this._trapDiv) {
	            this._childControl.focus();
	        }
	    };
	    CanvasZone.prototype._selectControl = function () {
	        if (this.context.store.selectedControlId !== this.props.id) {
	            this.context.store.selectedControlId = this.props.id;
	        }
	    };
	    CanvasZone.contextTypes = {
	        store: React.PropTypes.object.isRequired
	    };
	    /**
	     * @ readOnly
	     */
	    CanvasZone._VERTICAL_MARGIN = 22;
	    return CanvasZone;
	}(React.Component));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = CanvasZone;
	


/***/ },
/* 135 */
/***/ function(module, exports) {

	"use strict";
	var CanvasControlType;
	(function (CanvasControlType) {
	    CanvasControlType[CanvasControlType["BodyText"] = 0] = "BodyText";
	    CanvasControlType[CanvasControlType["HeaderText"] = 1] = "HeaderText";
	    CanvasControlType[CanvasControlType["QuoteText"] = 2] = "QuoteText";
	    CanvasControlType[CanvasControlType["WebPartZone"] = 3] = "WebPartZone";
	    CanvasControlType[CanvasControlType["RTE"] = 4] = "RTE";
	})(CanvasControlType || (CanvasControlType = {}));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = CanvasControlType;
	


/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(137);
	


/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	var content = __webpack_require__(138);
	var loader = __webpack_require__(77);
	
	if(typeof content === "string") content = [[module.id, content]];
	
	// add the styles to the DOM
	for (var i = 0; i < content.length; i++) loader.loadStyles(content[i][1]);
	
	if(content.locals) module.exports = content.locals;

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(76)();
	// imports
	
	
	// module
	exports.push([module.id, ".CanvasZone{padding:8px;margin:28px 0;outline:0;position:relative}.CanvasZone .CanvasZone-target{bottom:0;cursor:pointer;left:0;position:absolute;right:0;top:0}.CanvasZone .CanvasZone-target:focus{outline:0}.CanvasZone .CanvasZone-target.CanvasZone-target--hidden{z-index:-1}.CanvasZone::after{border:1px solid \"[theme:neutralTertiary, default: #a6a6a6]\";color:\"[theme:neutralTertiary, default: #a6a6a6]\";bottom:0;content:\"\";left:0;pointer-events:none;position:absolute;right:0;top:0;-webkit-transition:all .3s ease;transition:all .3s ease}.CanvasZone .CanvasControlToolbar,.CanvasZone::after{opacity:0;-webkit-transition:all .3s ease;transition:all .3s ease}.CanvasZone.CanvasZone--edit.CanvasZone--selected .CanvasControlToolbar,.CanvasZone.CanvasZone--edit.CanvasZone--selected::after,.CanvasZone.CanvasZone--edit:focus .CanvasControlToolbar,.CanvasZone.CanvasZone--edit:focus::after,.CanvasZone.CanvasZone--edit:hover .CanvasControlToolbar,.CanvasZone.CanvasZone--edit:hover::after{opacity:1}.CanvasZone.CanvasZone--selected::after{border:1px solid \"[theme:themePrimary, default:#0078d7]\";color:\"[theme:themePrimary, default:#0078d7]\"}.CanvasZone.CanvasZone--selected+button.CanvasToolboxHint{opacity:1}.CanvasZone .CanvasZone-screenReaderOnly{position:absolute;text-indent:-9999px;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;border:0}", ""]);
	
	// exports


/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var css_1 = __webpack_require__(105);
	var sp_client_base_1 = __webpack_require__(69);
	var React = __webpack_require__(82);
	var ReactDOM = __webpack_require__(83);
	__webpack_require__(140);
	var CanvasToolboxHint = (function (_super) {
	    __extends(CanvasToolboxHint, _super);
	    function CanvasToolboxHint(props, context) {
	        _super.call(this, props, context);
	        this._handleClick = this._handleClick.bind(this);
	    }
	    CanvasToolboxHint.prototype.componentDidMount = function () {
	        this._domNode = ReactDOM.findDOMNode(this);
	        if (this.props.shouldFocus) {
	            this.focus();
	        }
	    };
	    CanvasToolboxHint.prototype.componentDidUpdate = function () {
	        /**
	         * Calling componentDidMount because we want the code to run
	         * during each update as well.
	         */
	        this.componentDidMount();
	    };
	    CanvasToolboxHint.prototype.render = function () {
	        var _a = this.props, ariaLabel = _a.ariaLabel, isVisible = _a.isVisible;
	        var hintClassName = css_1.css('CanvasToolboxHint', {
	            'is-visible': isVisible
	        });
	        return this.context.store.displayMode === sp_client_base_1.DisplayMode.Edit && (React.createElement("button", {"aria-haspopup": true, "aria-label": ariaLabel, className: hintClassName, onClick: this._handleClick}, React.createElement("div", {className: 'CanvasToolboxHint-plusButton'}, React.createElement("i", {className: 'ms-Icon ms-Icon--Add'}))));
	    };
	    CanvasToolboxHint.prototype.focus = function () {
	        var _this = this;
	        /**
	         * Setting a 0ms timeout to let the browser drawing finish before we set focus to an element.
	         * Chrome's event queue lags more than IE's in this particular instance. Without this timeout
	         * the focus will not be correct set in Chrome.
	         */
	        window.setTimeout(function () { return _this._domNode.focus(); }, 0);
	    };
	    CanvasToolboxHint.prototype._handleClick = function () {
	        this.context.store.selectedControlId = undefined;
	        this.context.store.openToolbox(this.props.row, this._domNode.offsetTop);
	    };
	    CanvasToolboxHint.contextTypes = {
	        store: React.PropTypes.object.isRequired
	    };
	    return CanvasToolboxHint;
	}(React.Component));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = CanvasToolboxHint;
	


/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(141);
	


/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	var content = __webpack_require__(142);
	var loader = __webpack_require__(77);
	
	if(typeof content === "string") content = [[module.id, content]];
	
	// add the styles to the DOM
	for (var i = 0; i < content.length; i++) loader.loadStyles(content[i][1]);
	
	if(content.locals) module.exports = content.locals;

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(76)();
	// imports
	
	
	// module
	exports.push([module.id, ".CanvasToolboxHint{background:0 0;border:none;cursor:pointer;height:24px;left:48px;margin-top:-26px;opacity:0;outline:0;padding:0;position:absolute;right:48px;-webkit-transition:all .3s ease;transition:all .3s ease;width:calc(100% - 96px)}.CanvasToolboxHint .CanvasToolboxHint-plusButton{background-color:\"[theme:neutralTertiary, default: #a6a6a6]\";border-radius:50%;color:\"[theme:white, default: #ffffff]\";font-size:15px;height:24px;left:calc(50% - 12px);line-height:24px;padding:0;position:absolute;text-align:center;top:0;width:24px;z-index:1;-webkit-transition:all .3s ease;transition:all .3s ease}.CanvasToolboxHint .CanvasToolboxHint-plusButton .ms-Icon{font-family:sp-MDL2;position:relative;top:2px}.CanvasToolboxHint::after{border-top:1px solid \"[theme:neutralTertiary, default: #a6a6a6]\";content:'';height:1px;left:0;position:absolute;top:12px;width:100%;-webkit-transition:all .3s ease;transition:all .3s ease}.CanvasToolboxHint.is-visible{opacity:1}.CanvasToolboxHint:nth-of-type(1):nth-last-of-type(1){margin-top:2px;opacity:1}.CanvasToolboxHint:focus,.CanvasToolboxHint:hover{opacity:1}.CanvasToolboxHint:focus .CanvasToolboxHint-plusButton,.CanvasToolboxHint:hover .CanvasToolboxHint-plusButton{background-color:\"[theme:themePrimary, default:#0078d7]\"}.CanvasToolboxHint:focus::after,.CanvasToolboxHint:hover::after{border-color:\"[theme:themePrimary, default:#0078d7]\"}@media screen and (min-width:640px){.CanvasToolboxHint:first-of-type{margin-top:2px}}", ""]);
	
	// exports


/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var React = __webpack_require__(82);
	var button_1 = __webpack_require__(144);
	var dialog_1 = __webpack_require__(151);
	var CanvasStrings_resx_1 = __webpack_require__(110);
	function ConfirmationDialog(props) {
	    var isOpen = props.isOpen, message = props.message, onConfirmation = props.onConfirmation, onDismiss = props.onDismiss, title = props.title;
	    return (React.createElement(dialog_1.Dialog, {isOpen: isOpen, onDismiss: onDismiss, title: title, subText: message}, React.createElement(dialog_1.DialogFooter, null, React.createElement(button_1.Button, {buttonType: button_1.ButtonType.primary, onClick: onConfirmation, ariaLabel: CanvasStrings_resx_1.default.ConfirmationDialogYes}, CanvasStrings_resx_1.default.ConfirmationDialogYes), React.createElement(button_1.Button, {onClick: onDismiss, ariaLabel: CanvasStrings_resx_1.default.ConfirmationDialogNo}, CanvasStrings_resx_1.default.ConfirmationDialogNo))));
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = ConfirmationDialog;
	ConfirmationDialog.contextTypes = {
	    store: React.PropTypes.object.isRequired
	};
	


/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(145));
	


/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(146));
	__export(__webpack_require__(149));
	


/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var React = __webpack_require__(82);
	var css_1 = __webpack_require__(105);
	var object_1 = __webpack_require__(147);
	var Button_Props_1 = __webpack_require__(149);
	var object_2 = __webpack_require__(147);
	__webpack_require__(150);
	var Button = (function (_super) {
	    __extends(Button, _super);
	    function Button(props) {
	        _super.call(this, props);
	        this.state = {
	            labelId: object_2.getId('Button'),
	            descriptionId: object_2.getId('Button'),
	            ariaDescriptionId: object_2.getId('Button')
	        };
	    }
	    Button.prototype.render = function () {
	        var _this = this;
	        var _a = this.props, buttonType = _a.buttonType, children = _a.children, icon = _a.icon, description = _a.description, ariaLabel = _a.ariaLabel, ariaDescription = _a.ariaDescription, href = _a.href, disabled = _a.disabled, onClick = _a.onClick;
	        var _b = this.state, labelId = _b.labelId, descriptionId = _b.descriptionId, ariaDescriptionId = _b.ariaDescriptionId;
	        var renderAsAnchor = !!href;
	        var tag = renderAsAnchor ? 'a' : 'button';
	        var className = css_1.css((this.props.className), 'ms-Button', {
	            'ms-Button--primary': buttonType === Button_Props_1.ButtonType.primary,
	            'ms-Button--hero': buttonType === Button_Props_1.ButtonType.hero,
	            'ms-Button--compound': buttonType === Button_Props_1.ButtonType.compound,
	            'ms-Button--command': buttonType === Button_Props_1.ButtonType.command,
	            'ms-Button--icon': buttonType === Button_Props_1.ButtonType.icon,
	            'disabled': (renderAsAnchor && disabled) // add disable styling if it is an anchor
	        });
	        var iconSpan = icon && (buttonType === Button_Props_1.ButtonType.command || buttonType === Button_Props_1.ButtonType.hero || buttonType === Button_Props_1.ButtonType.icon)
	            ? React.createElement("span", {className: 'ms-Button-icon'}, React.createElement("i", {className: "ms-Icon ms-Icon--" + icon}))
	            : null;
	        // ms-Button-description is only shown when the button type is compound.
	        // In other cases it will not be displayed.
	        var descriptionSpan = description
	            ? React.createElement("span", {className: 'ms-Button-description', id: descriptionId}, description)
	            : null;
	        // If ariaDescription is given, descriptionId will be assigned to ariaDescriptionSpan,
	        // otherwise it will be assigned to descriptionSpan.
	        var ariaDescriptionSpan = ariaDescription
	            ? React.createElement("span", {className: 'ms-u-screenReaderOnly', id: ariaDescriptionId}, ariaDescription)
	            : null;
	        return React.createElement(tag, object_1.assign({}, this.props.rootProps, {
	            'aria-label': ariaLabel,
	            'aria-labelledby': ariaLabel ? null : labelId,
	            'aria-describedby': ariaDescription ? ariaDescriptionId : description ? descriptionId : null,
	            'ref': function (c) { return _this._buttonElement = c; }
	        }, onClick && { 'onClick': onClick }, disabled && { 'disabled': disabled }, { className: className }), iconSpan, React.createElement("span", {className: 'ms-Button-label', id: labelId}, children), descriptionSpan, ariaDescriptionSpan);
	    };
	    Button.prototype.focus = function () {
	        if (this._buttonElement) {
	            this._buttonElement.focus();
	        }
	    };
	    Button.defaultProps = {
	        buttonType: Button_Props_1.ButtonType.normal
	    };
	    return Button;
	}(React.Component));
	exports.Button = Button;
	


/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	// Initialize global window id.
	var CURRENT_ID_PROPERTY = '__currentId__';
	var _global = window || process;
	if (_global[CURRENT_ID_PROPERTY] === undefined) {
	    _global[CURRENT_ID_PROPERTY] = 0;
	}
	function checkProperties(a, b) {
	    for (var propName in a) {
	        if (a.hasOwnProperty(propName)) {
	            if (!b.hasOwnProperty(propName) || (b[propName] !== a[propName])) {
	                return false;
	            }
	        }
	    }
	    return true;
	}
	// Compare a to b and b to a
	function shallowCompare(a, b) {
	    return checkProperties(a, b) && checkProperties(b, a);
	}
	exports.shallowCompare = shallowCompare;
	// Assign function.
	function assign(target) {
	    var args = [];
	    for (var _i = 1; _i < arguments.length; _i++) {
	        args[_i - 1] = arguments[_i];
	    }
	    target = target || {};
	    for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {
	        var sourceObject = args_1[_a];
	        if (sourceObject) {
	            for (var propName in sourceObject) {
	                if (sourceObject.hasOwnProperty(propName)) {
	                    target[propName] = sourceObject[propName];
	                }
	            }
	        }
	    }
	    return target;
	}
	exports.assign = assign;
	/** Generates a unique id in the global scope (this spans across duplicate copies of the same library.) */
	function getId(prefix) {
	    var index = _global[CURRENT_ID_PROPERTY]++;
	    return (prefix || '') + index;
	}
	exports.getId = getId;
	
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(148)))

/***/ },
/* 148 */
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};
	
	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.
	
	var cachedSetTimeout;
	var cachedClearTimeout;
	
	(function () {
	    try {
	        cachedSetTimeout = setTimeout;
	    } catch (e) {
	        cachedSetTimeout = function () {
	            throw new Error('setTimeout is not defined');
	        }
	    }
	    try {
	        cachedClearTimeout = clearTimeout;
	    } catch (e) {
	        cachedClearTimeout = function () {
	            throw new Error('clearTimeout is not defined');
	        }
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }
	
	
	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }
	
	
	
	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 149 */
/***/ function(module, exports) {

	"use strict";
	(function (ElementType) {
	    /** <button> element. */
	    ElementType[ElementType["button"] = 0] = "button";
	    /** <a> element. */
	    ElementType[ElementType["anchor"] = 1] = "anchor";
	})(exports.ElementType || (exports.ElementType = {}));
	var ElementType = exports.ElementType;
	(function (ButtonType) {
	    ButtonType[ButtonType["normal"] = 0] = "normal";
	    ButtonType[ButtonType["primary"] = 1] = "primary";
	    ButtonType[ButtonType["hero"] = 2] = "hero";
	    ButtonType[ButtonType["compound"] = 3] = "compound";
	    ButtonType[ButtonType["command"] = 4] = "command";
	    ButtonType[ButtonType["icon"] = 5] = "icon";
	})(exports.ButtonType || (exports.ButtonType = {}));
	var ButtonType = exports.ButtonType;
	


/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var load_themed_styles_1 = __webpack_require__(77);
	load_themed_styles_1.loadStyles('.ms-Button{color:"[theme:neutralPrimary, default: #333333]";font-family:"Segoe UI Regular WestEuropean","Segoe UI",Tahoma,Arial,sans-serif;font-size:14px;font-weight:400;box-sizing:border-box;margin:0;padding:0;box-shadow:none;background-color:"[theme:neutralLighter, default: #f4f4f4]";border:1px solid "[theme:neutralLighter, default: #f4f4f4]";cursor:pointer;display:inline-block;height:32px;min-width:80px;padding:4px 20px 6px}.ms-Fabric .ms-Button::-moz-focus-inner{border:0}.ms-Fabric .ms-Button{outline:transparent;position:relative}.ms-Fabric.is-focusVisible .ms-Button:focus:before{content:\'\';position:absolute;top:0;right:0;bottom:0;left:0;pointer-events:none;border:1px solid "[theme:neutralSecondaryAlt, default: #767676]"}.ms-Button:hover{background-color:"[theme:neutralLight, default: #eaeaea]";border-color:"[theme:neutralLight, default: #eaeaea]";outline:1px solid transparent}.ms-Button:hover .ms-Button-label{color:"[theme:black, default: #000000]"}.ms-Button:focus{background-color:"[theme:neutralLight, default: #eaeaea]";border-color:"[theme:neutralLighter, default: #f4f4f4]";outline:1px solid transparent}.ms-Button:focus .ms-Button-label{color:"[theme:black, default: #000000]"}.ms-Button:active{background-color:"[theme:themePrimary, default: #0078d7]";border-color:"[theme:themePrimary, default: #0078d7]"}.ms-Button:active .ms-Button-label{color:"[theme:white, default: #ffffff]"}.ms-Button.is-disabled,.ms-Button:disabled{background-color:"[theme:neutralLighter, default: #f4f4f4]";border-color:"[theme:neutralLighter, default: #f4f4f4]";cursor:default}.ms-Button.is-disabled .ms-Button-label,.ms-Button:disabled .ms-Button-label{color:"[theme:neutralTertiary, default: #a6a6a6]"}.ms-Button.is-disabled:focus,.ms-Button.is-disabled:hover,.ms-Button:disabled:focus,.ms-Button:disabled:hover{outline:0}.ms-Button+.ms-Button{margin-left:6px}.ms-Button-label{color:"[theme:neutralPrimary, default: #333333]";font-family:"Segoe UI Semibold WestEuropean","Segoe UI Semibold","Segoe UI",Tahoma,Arial,sans-serif;font-size:14px}.ms-Button-description,.ms-Button-icon{display:none}.ms-Fabric.is-focusVisible .ms-Button:focus{color:"[theme:black, default: #000000]"}.ms-Fabric.is-focusVisible .ms-Button:focus:before{border-color:"[theme:themePrimary, default: #0078d7]"}.ms-Button.ms-Button--primary{background-color:"[theme:themePrimary, default: #0078d7]";border-color:"[theme:themePrimary, default: #0078d7]"}.ms-Button.ms-Button--primary .ms-Button-label{color:"[theme:white, default: #ffffff]"}.ms-Button.ms-Button--primary:hover{background-color:"[theme:themeDark, default: #005a9e]";border-color:"[theme:themeDark, default: #005a9e]"}.ms-Button.ms-Button--primary:focus{background-color:"[theme:themeDark, default: #005a9e]";border-color:"[theme:themePrimary, default: #0078d7]"}.ms-Button.ms-Button--primary:active{background-color:"[theme:themePrimary, default: #0078d7]";border-color:"[theme:themePrimary, default: #0078d7]"}.ms-Button.ms-Button--primary.is-disabled,.ms-Button.ms-Button--primary:disabled{background-color:"[theme:neutralLighter, default: #f4f4f4]";border-color:"[theme:neutralLighter, default: #f4f4f4]"}.ms-Button.ms-Button--primary.is-disabled .ms-Button-label,.ms-Button.ms-Button--primary:disabled .ms-Button-label{color:"[theme:neutralTertiary, default: #a6a6a6]"}.ms-Fabric.is-focusVisible .ms-Button.ms-Button--primary:focus{color:"[theme:white, default: #ffffff]"}.ms-Fabric.is-focusVisible .ms-Button.ms-Button--primary:focus:before{border-color:"[theme:themeDarker, default: #004578]"}.ms-Button.ms-Button--hero{background-color:transparent;border:none;vertical-align:top;line-height:normal}.ms-Button.ms-Button--hero .ms-Button-icon{color:"[theme:themePrimary, default: #0078d7]";display:inline-block;font-size:12px;position:relative;top:-8px;text-align:center}.ms-Button.ms-Button--hero .ms-Button-icon .ms-Icon{border-radius:18px;border:1px solid "[theme:themePrimary, default: #0078d7]";height:18px;line-height:18px;width:18px;font-size:12px;margin:0}.ms-Button.ms-Button--hero .ms-Button-label{color:"[theme:themePrimary, default: #0078d7]";font-family:"Segoe UI Light WestEuropean","Segoe UI Light","Segoe UI",Tahoma,Arial,sans-serif;font-size:21px;position:relative;top:-5px;text-decoration:none}.ms-Button.ms-Button--hero:focus .ms-Button-icon .ms-Icon,.ms-Button.ms-Button--hero:hover .ms-Button-icon .ms-Icon{color:"[theme:themeDark, default: #005a9e]"}.ms-Button.ms-Button--hero:focus .ms-Button-label,.ms-Button.ms-Button--hero:hover .ms-Button-label{color:"[theme:themeDarker, default: #004578]"}.ms-Button.ms-Button--hero:active .ms-Button-icon .ms-Icon{color:"[theme:themePrimary, default: #0078d7]"}.ms-Button.ms-Button--hero:active .ms-Button-label{color:"[theme:themePrimary, default: #0078d7]"}.ms-Button.ms-Button--hero.is-disabled .ms-Button-icon .ms-Icon,.ms-Button.ms-Button--hero:disabled .ms-Button-icon .ms-Icon{color:"[theme:neutralTertiaryAlt, default: #c8c8c8]"}.ms-Button.ms-Button--hero.is-disabled .ms-Button-label,.ms-Button.ms-Button--hero:disabled .ms-Button-label{color:"[theme:neutralTertiary, default: #a6a6a6]"}.ms-Button.ms-Button--compound{height:auto;min-height:72px;max-width:280px;padding:20px}.ms-Button.ms-Button--compound .ms-Button-label{display:block;font-family:"Segoe UI Semibold WestEuropean","Segoe UI Semibold","Segoe UI",Tahoma,Arial,sans-serif;position:relative;color:"[theme:black, default: #000000]";margin-top:-5px}html[dir=ltr] .ms-Button.ms-Button--compound .ms-Button-label{text-align:left}html[dir=rtl] .ms-Button.ms-Button--compound .ms-Button-label{text-align:right}.ms-Button.ms-Button--compound .ms-Button-description{color:"[theme:neutralSecondary, default: #666666]";display:block;font-family:"Segoe UI Regular WestEuropean","Segoe UI",Tahoma,Arial,sans-serif;font-size:12px;position:relative;top:3px}html[dir=ltr] .ms-Button.ms-Button--compound .ms-Button-description{text-align:left}html[dir=rtl] .ms-Button.ms-Button--compound .ms-Button-description{text-align:right}.ms-Button.ms-Button--compound:hover .ms-Button-description{color:"[theme:neutralDark, default: #212121]"}.ms-Button.ms-Button--compound:focus{border-color:"[theme:themePrimary, default: #0078d7]";background-color:"[theme:neutralLighter, default: #f4f4f4]"}.ms-Button.ms-Button--compound:focus .ms-Button-label{color:"[theme:neutralPrimary, default: #333333]"}.ms-Button.ms-Button--compound:focus .ms-Button-description{color:"[theme:neutralSecondary, default: #666666]"}.ms-Button.ms-Button--compound:active{background-color:"[theme:themePrimary, default: #0078d7]"}.ms-Button.ms-Button--compound:active .ms-Button-description,.ms-Button.ms-Button--compound:active .ms-Button-label{color:"[theme:white, default: #ffffff]"}.ms-Button.ms-Button--compound.is-disabled .ms-Button-description,.ms-Button.ms-Button--compound.is-disabled .ms-Button-label,.ms-Button.ms-Button--compound:disabled .ms-Button-description,.ms-Button.ms-Button--compound:disabled .ms-Button-label{color:"[theme:neutralTertiary, default: #a6a6a6]"}.ms-Button.ms-Button--compound.is-disabled:active,.ms-Button.ms-Button--compound.is-disabled:focus,.ms-Button.ms-Button--compound:disabled:active,.ms-Button.ms-Button--compound:disabled:focus{border-color:"[theme:neutralLighter, default: #f4f4f4]";background-color:"[theme:neutralLighter, default: #f4f4f4]"}.ms-Button.ms-Button--compound.is-disabled:active .ms-Button-description,.ms-Button.ms-Button--compound.is-disabled:active .ms-Button-label,.ms-Button.ms-Button--compound.is-disabled:focus .ms-Button-description,.ms-Button.ms-Button--compound.is-disabled:focus .ms-Button-label,.ms-Button.ms-Button--compound:disabled:active .ms-Button-description,.ms-Button.ms-Button--compound:disabled:active .ms-Button-label,.ms-Button.ms-Button--compound:disabled:focus .ms-Button-description,.ms-Button.ms-Button--compound:disabled:focus .ms-Button-label{color:"[theme:neutralTertiary, default: #a6a6a6]"}.ms-Button.ms-Button--command{background-color:transparent;border:none;height:32px;line-height:32px;min-width:0;padding:0 8px;font-size:14px}html[dir=ltr] .ms-Button.ms-Button--command{text-align:left}html[dir=rtl] .ms-Button.ms-Button--command{text-align:right}.ms-Button.ms-Button--command .ms-Button-label{color:"[theme:themePrimary, default: #0078d7]"}.ms-Button.ms-Button--command .ms-Button-icon{color:"[theme:themePrimary, default: #0078d7]";display:inline-block;margin-right:4px;position:relative}html[dir=ltr] .ms-Button.ms-Button--command .ms-Button-icon{text-align:left}html[dir=rtl] .ms-Button.ms-Button--command .ms-Button-icon{text-align:right}.ms-Button.ms-Button--command .ms-Button-label{font-family:"Segoe UI Regular WestEuropean","Segoe UI",Tahoma,Arial,sans-serif}.ms-Button.ms-Button--command:focus .ms-Button-icon,.ms-Button.ms-Button--command:focus .ms-Button-label,.ms-Button.ms-Button--command:hover .ms-Button-icon,.ms-Button.ms-Button--command:hover .ms-Button-label{color:"[theme:themeDarker, default: #004578]"}.ms-Button.ms-Button--command:active .ms-Button-icon,.ms-Button.ms-Button--command:active .ms-Button-label{color:"[theme:themePrimary, default: #0078d7]"}.ms-Button.ms-Button--command.is-disabled .ms-Button-icon,.ms-Button.ms-Button--command:disabled .ms-Button-icon{color:"[theme:neutralTertiaryAlt, default: #c8c8c8]"}.ms-Button.ms-Button--command.is-disabled .ms-Button-label,.ms-Button.ms-Button--command:disabled .ms-Button-label{color:"[theme:neutralTertiary, default: #a6a6a6]"}html[dir=ltr] .ms-Button.ms-Button--command+.ms-Button.ms-Button--command{margin-left:14px}html[dir=rtl] .ms-Button.ms-Button--command+.ms-Button.ms-Button--command{margin-right:14px}.ms-Button--icon{background-color:transparent;color:"[theme:neutralSecondary, default: #666666]";padding:0;min-width:auto;height:auto;border:0}.ms-Fabric .ms-Button--icon::-moz-focus-inner{border:0}.ms-Fabric .ms-Button--icon{outline:transparent;position:relative}.ms-Fabric.is-focusVisible .ms-Button--icon:focus:before{content:\'\';position:absolute;top:0;right:0;bottom:0;left:0;pointer-events:none;border:1px solid "[theme:neutralSecondaryAlt, default: #767676]"}.ms-Button--icon:active,.ms-Button--icon:hover{background-color:transparent;border-color:transparent;outline-color:transparent;color:"[theme:neutralPrimary, default: #333333]"}.ms-Button--icon:focus{background-color:transparent}.ms-Button--icon .ms-Icon{font-size:16px;padding:8px}.ms-Button--icon .ms-Button-icon{display:inline}.ms-Button--icon.is-disabled,.ms-Button--icon:disabled{color:"[theme:neutralTertiaryAlt, default: #c8c8c8]";background-color:transparent}@media screen and (-ms-high-contrast:active){.ms-Button--icon{color:"[theme:yellowLight, default: #fff100]"}}@media screen and (-ms-high-contrast:black-on-white){.ms-Button--icon{color:"[theme:blueMid, default: #00188f]"}}.ms-Button.ms-Button--primary.disabled{background-color:"[theme:neutralLighter, default: #f4f4f4]";border-color:"[theme:neutralLighter, default: #f4f4f4]";pointer-events:none;cursor:default}.ms-Button.ms-Button--primary.disabled .ms-Button-label{color:"[theme:neutralTertiary, default: #a6a6a6]"}html[dir=ltr] .ms-Button+.ms-Button{margin-left:6px}html[dir=rtl] .ms-Button+.ms-Button{margin-right:6px}a.ms-Button{text-decoration:none;text-align:center}');
	


/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(152));
	var index_2 = __webpack_require__(152);
	exports.default = index_2.Dialog;
	


/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(153));
	__export(__webpack_require__(172));
	__export(__webpack_require__(159));
	


/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var React = __webpack_require__(82);
	var index_1 = __webpack_require__(154);
	var Dialog_Props_1 = __webpack_require__(159);
	var Overlay_1 = __webpack_require__(160);
	var Layer_1 = __webpack_require__(164);
	var DialogFooter_1 = __webpack_require__(172);
	var css_1 = __webpack_require__(105);
	var index_2 = __webpack_require__(174);
	var withResponsiveMode_1 = __webpack_require__(178);
	var object_1 = __webpack_require__(147);
	__webpack_require__(173);
	// @TODO - need to add animations, pending Fabric Team + Coulton work
	// @TODO - need to change this to a panel whenever the breakpoint is under medium (verify the spec)
	var Dialog = (function (_super) {
	    __extends(Dialog, _super);
	    function Dialog(props) {
	        _super.call(this, props);
	        this.state = {
	            id: object_1.getId('Dialog'),
	        };
	    }
	    Dialog.prototype.render = function () {
	        var _a = this.props, isOpen = _a.isOpen, type = _a.type, isDarkOverlay = _a.isDarkOverlay, onDismiss = _a.onDismiss, title = _a.title, subText = _a.subText, isBlocking = _a.isBlocking, responsiveMode = _a.responsiveMode, elementToFocusOnDismiss = _a.elementToFocusOnDismiss, ignoreExternalFocusing = _a.ignoreExternalFocusing, forceFocusInsideTrap = _a.forceFocusInsideTrap, firstFocusableSelector = _a.firstFocusableSelector, closeButtonAriaLabel = _a.closeButtonAriaLabel, onLayerMounted = _a.onLayerMounted;
	        var id = this.state.id;
	        // @TODO - the discussion on whether the Dialog contain a property for rendering itself is still being discussed
	        if (!isOpen) {
	            return null;
	        }
	        var subTextContent;
	        var dialogClassName = css_1.css('ms-Dialog', this.props.className, {
	            'ms-Dialog--lgHeader': type === Dialog_Props_1.DialogType.largeHeader,
	            'ms-Dialog--close': type === Dialog_Props_1.DialogType.close
	        });
	        var groupings = this._groupChildren();
	        if (subText) {
	            subTextContent = React.createElement("p", {className: 'ms-Dialog-subText', id: id + '-subText'}, subText);
	        }
	        // @temp tuatology - Will adjust this to be a panel at certain breakpoints
	        if (responsiveMode >= withResponsiveMode_1.ResponsiveMode.small) {
	            return (React.createElement(Layer_1.Layer, {onLayerMounted: onLayerMounted}, React.createElement(index_2.Popup, {className: dialogClassName, role: 'dialog', ariaLabelledBy: title ? id + '-title' : '', ariaDescribedBy: subText ? id + '-subText' : '', onDismiss: onDismiss}, React.createElement("div", {className: dialogClassName}, React.createElement(Overlay_1.Overlay, {isDarkThemed: isDarkOverlay, onClick: isBlocking ? null : onDismiss}), React.createElement(index_1.FocusTrapZone, {className: css_1.css('ms-Dialog-main', this.props.containerClassName), elementToFocusOnDismiss: elementToFocusOnDismiss, isClickableOutsideFocusTrap: !isBlocking, ignoreExternalFocusing: ignoreExternalFocusing, forceFocusInsideTrap: forceFocusInsideTrap, firstFocusableSelector: firstFocusableSelector}, React.createElement("button", {className: 'ms-Dialog-button ms-Dialog-button--close', onClick: onDismiss, "aria-label": closeButtonAriaLabel}, React.createElement("i", {className: 'ms-Icon ms-Icon--x'})), React.createElement("div", {className: 'ms-Dialog-header'}, React.createElement("p", {className: 'ms-Dialog-title', id: id + '-title'}, title)), React.createElement("div", {className: 'ms-Dialog-inner'}, React.createElement("div", {className: css_1.css('ms-Dialog-content', this.props.contentClassName)}, subTextContent, groupings.contents), groupings.footers))))));
	        }
	    };
	    // @TODO - typing the footers as an array of DialogFooter is difficult because
	    // casing "child as DialogFooter" causes a problem because
	    // "Neither type 'ReactElement<any>' nor type 'DialogFooter' is assignable to the other."
	    Dialog.prototype._groupChildren = function () {
	        var groupings = {
	            footers: [],
	            contents: []
	        };
	        React.Children.map(this.props.children, function (child) {
	            if (typeof child === 'object' && child.type === DialogFooter_1.DialogFooter) {
	                groupings.footers.push(child);
	            }
	            else {
	                groupings.contents.push(child);
	            }
	        });
	        return groupings;
	    };
	    Dialog.defaultProps = {
	        isOpen: false,
	        type: Dialog_Props_1.DialogType.normal,
	        isDarkOverlay: true,
	        isBlocking: false,
	        className: '',
	        containerClassName: '',
	        contentClassName: ''
	    };
	    Dialog = __decorate([
	        withResponsiveMode_1.withResponsiveMode
	    ], Dialog);
	    return Dialog;
	}(React.Component));
	exports.Dialog = Dialog;
	


/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(155));
	


/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var React = __webpack_require__(82);
	var KeyCodes_1 = __webpack_require__(156);
	var EventGroup_1 = __webpack_require__(157);
	var focus_1 = __webpack_require__(158);
	var FocusTrapZone = (function (_super) {
	    __extends(FocusTrapZone, _super);
	    function FocusTrapZone(props) {
	        _super.call(this, props);
	        this._onKeyboardHandler = this._onKeyboardHandler.bind(this);
	        this._events = new EventGroup_1.EventGroup(this);
	    }
	    FocusTrapZone.prototype.componentDidMount = function () {
	        var _a = this.props, elementToFocusOnDismiss = _a.elementToFocusOnDismiss, _b = _a.isClickableOutsideFocusTrap, isClickableOutsideFocusTrap = _b === void 0 ? false : _b, _c = _a.forceFocusInsideTrap, forceFocusInsideTrap = _c === void 0 ? true : _c;
	        this._previouslyFocusedElement = elementToFocusOnDismiss ? elementToFocusOnDismiss : document.activeElement;
	        this.focus();
	        if (forceFocusInsideTrap) {
	            this._events.on(window, 'focus', this._forceFocusInTrap, true);
	        }
	        if (!isClickableOutsideFocusTrap) {
	            this._events.on(window, 'click', this._forceClickInTrap, true);
	        }
	    };
	    FocusTrapZone.prototype.componentWillUnmount = function () {
	        var ignoreExternalFocusing = this.props.ignoreExternalFocusing;
	        this._events.dispose();
	        if (!ignoreExternalFocusing && this._previouslyFocusedElement) {
	            this._previouslyFocusedElement.focus();
	        }
	    };
	    FocusTrapZone.prototype.render = function () {
	        var _a = this.props, className = _a.className, ariaLabelledBy = _a.ariaLabelledBy;
	        return (React.createElement("div", React.__spread({}, this.props, {className: className, ref: 'root', "aria-labelledby": ariaLabelledBy, onKeyDown: this._onKeyboardHandler}), this.props.children));
	    };
	    /**
	     * Need to expose this method in case of popups since focus needs to be set when popup is opened
	     **/
	    FocusTrapZone.prototype.focus = function () {
	        var firstFocusableSelector = this.props.firstFocusableSelector;
	        var _firstFocusableChild;
	        var root = this.refs.root;
	        if (firstFocusableSelector) {
	            _firstFocusableChild = root.querySelector('.' + firstFocusableSelector);
	        }
	        else {
	            _firstFocusableChild = focus_1.getNextElement(root, root.firstChild, true, false, false, true);
	        }
	        if (_firstFocusableChild) {
	            _firstFocusableChild.focus();
	        }
	    };
	    FocusTrapZone.prototype._onKeyboardHandler = function (ev) {
	        if (ev.which !== KeyCodes_1.KeyCodes.tab) {
	            return;
	        }
	        var root = this.refs.root;
	        var _firstFocusableChild = focus_1.getFirstFocusable(root, root.firstChild, true);
	        var _lastFocusableChild = focus_1.getLastFocusable(root, root.lastChild, true);
	        if (ev.shiftKey && _firstFocusableChild === ev.target) {
	            _lastFocusableChild.focus();
	            ev.preventDefault();
	            ev.stopPropagation();
	        }
	        else if (!ev.shiftKey && _lastFocusableChild === ev.target) {
	            _firstFocusableChild.focus();
	            ev.preventDefault();
	            ev.stopPropagation();
	        }
	    };
	    FocusTrapZone.prototype._forceFocusInTrap = function (ev) {
	        var focusedElement = document.activeElement;
	        if (!this.refs.root.contains(focusedElement)) {
	            this.focus();
	            ev.preventDefault();
	            ev.stopPropagation();
	        }
	    };
	    FocusTrapZone.prototype._forceClickInTrap = function (ev) {
	        var clickedElement = ev.target;
	        if (clickedElement && !this.refs.root.contains(clickedElement)) {
	            this.focus();
	            ev.preventDefault();
	            ev.stopPropagation();
	        }
	    };
	    return FocusTrapZone;
	}(React.Component));
	exports.FocusTrapZone = FocusTrapZone;
	


/***/ },
/* 156 */
/***/ function(module, exports) {

	"use strict";
	(function (KeyCodes) {
	    KeyCodes[KeyCodes["a"] = 65] = "a";
	    KeyCodes[KeyCodes["backspace"] = 8] = "backspace";
	    KeyCodes[KeyCodes["comma"] = 188] = "comma";
	    KeyCodes[KeyCodes["del"] = 46] = "del";
	    KeyCodes[KeyCodes["down"] = 40] = "down";
	    KeyCodes[KeyCodes["end"] = 35] = "end";
	    KeyCodes[KeyCodes["enter"] = 13] = "enter";
	    KeyCodes[KeyCodes["escape"] = 27] = "escape";
	    KeyCodes[KeyCodes["home"] = 36] = "home";
	    KeyCodes[KeyCodes["left"] = 37] = "left";
	    KeyCodes[KeyCodes["pageDown"] = 34] = "pageDown";
	    KeyCodes[KeyCodes["pageUp"] = 33] = "pageUp";
	    KeyCodes[KeyCodes["right"] = 39] = "right";
	    KeyCodes[KeyCodes["semicolon"] = 186] = "semicolon";
	    KeyCodes[KeyCodes["space"] = 32] = "space";
	    KeyCodes[KeyCodes["tab"] = 9] = "tab";
	    KeyCodes[KeyCodes["up"] = 38] = "up";
	})(exports.KeyCodes || (exports.KeyCodes = {}));
	var KeyCodes = exports.KeyCodes;
	


/***/ },
/* 157 */
/***/ function(module, exports) {

	/* tslint:disable:no-string-literal */
	"use strict";
	/** An instance of EventGroup allows anything with a handle to it to trigger events on it.
	 *  If the target is an HTMLElement, the event will be attached to the element and can be
	 *  triggered as usual (like clicking for onclick).
	 *  The event can be triggered by calling EventGroup.raise() here. If the target is an
	 *  HTMLElement, the event gets raised and is handled by the browser. Otherwise, it gets
	 *  handled here in EventGroup, and the handler is called in the context of the parent
	 *  (which is passed in in the constructor).
	 */
	var EventGroup = (function () {
	    /** parent: the context in which events attached to non-HTMLElements are called */
	    function EventGroup(parent) {
	        this._id = EventGroup._uniqueId++;
	        this._parent = parent;
	        this._eventRecords = [];
	    }
	    /** For IE8, bubbleEvent is ignored here and must be dealt with by the handler.
	     *  Events raised here by default have bubbling set to false and cancelable set to true.
	     *  This applies also to built-in events being raised manually here on HTMLElements,
	     *  which may lead to unexpected behavior if it differs from the defaults.
	     */
	    EventGroup.raise = function (target, eventName, eventArgs, bubbleEvent) {
	        var retVal;
	        if (EventGroup._isElement(target)) {
	            if (document.createEvent) {
	                var ev = document.createEvent('HTMLEvents');
	                ev.initEvent(eventName, bubbleEvent, true);
	                ev['args'] = eventArgs;
	                retVal = target.dispatchEvent(ev);
	            }
	            else if (document['createEventObject']) {
	                var evObj = document['createEventObject'](eventArgs);
	                // cannot set cancelBubble on evObj, fireEvent will overwrite it
	                target.fireEvent('on' + eventName, evObj);
	            }
	        }
	        else {
	            while (target && retVal !== false) {
	                var events = target.__events__;
	                var eventRecords = events ? events[eventName] : null;
	                for (var id in eventRecords) {
	                    if (eventRecords.hasOwnProperty(id)) {
	                        var eventRecordList = eventRecords[id];
	                        for (var listIndex = 0; retVal !== false && listIndex < eventRecordList.length; listIndex++) {
	                            var record = eventRecordList[listIndex];
	                            if (record.objectCallback) {
	                                retVal = record.objectCallback.call(record.parent, eventArgs);
	                            }
	                        }
	                    }
	                }
	                // If the target has a parent, bubble the event up.
	                target = bubbleEvent ? target.parent : null;
	            }
	        }
	        return retVal;
	    };
	    EventGroup.isObserved = function (target, eventName) {
	        var events = target && target.__events__;
	        return !!events && !!events[eventName];
	    };
	    /** Check to see if the target has declared support of the given event. */
	    EventGroup.isDeclared = function (target, eventName) {
	        var declaredEvents = target && target.__declaredEvents;
	        return !!declaredEvents && !!declaredEvents[eventName];
	    };
	    EventGroup.stopPropagation = function (event) {
	        if (event.stopPropagation) {
	            event.stopPropagation();
	        }
	        else {
	            event.cancelBubble = true;
	        }
	    };
	    EventGroup._isElement = function (target) {
	        return !!target && (target instanceof HTMLElement || target.addEventListener);
	    };
	    EventGroup.prototype.dispose = function () {
	        if (!this._isDisposed) {
	            this._isDisposed = true;
	            this.off();
	            this._parent = null;
	        }
	    };
	    /** On the target, attach a set of events, where the events object is a name to function mapping. */
	    EventGroup.prototype.onAll = function (target, events, useCapture) {
	        for (var eventName in events) {
	            if (events.hasOwnProperty(eventName)) {
	                this.on(target, eventName, events[eventName], useCapture);
	            }
	        }
	    };
	    /** On the target, attach an event whose handler will be called in the context of the parent
	     * of this instance of EventGroup.
	     */
	    EventGroup.prototype.on = function (target, eventName, callback, useCapture) {
	        var _this = this;
	        if (eventName.indexOf(',') > -1) {
	            var events = eventName.split(/[ ,]+/);
	            for (var i = 0; i < events.length; i++) {
	                this.on(target, events[i], callback, useCapture);
	            }
	        }
	        else {
	            var parent_1 = this._parent;
	            var eventRecord = {
	                target: target,
	                eventName: eventName,
	                parent: parent_1,
	                callback: callback,
	                objectCallback: null,
	                elementCallback: null,
	                useCapture: useCapture
	            };
	            // Initialize and wire up the record on the target, so that it can call the callback if the event fires.
	            var events = (target.__events__ = target.__events__ || {});
	            events[eventName] = events[eventName] || {
	                count: 0
	            };
	            events[eventName][this._id] = events[eventName][this._id] || [];
	            events[eventName][this._id].push(eventRecord);
	            events[eventName].count++;
	            if (EventGroup._isElement(target)) {
	                var processElementEvent = function () {
	                    var args = [];
	                    for (var _i = 0; _i < arguments.length; _i++) {
	                        args[_i - 0] = arguments[_i];
	                    }
	                    if (_this._isDisposed) {
	                        return;
	                    }
	                    var result;
	                    try {
	                        result = callback.apply(parent_1, args);
	                        if (result === false && args[0]) {
	                            var e = args[0];
	                            if (e.preventDefault) {
	                                e.preventDefault();
	                            }
	                            if (e.stopPropagation) {
	                                e.stopPropagation();
	                            }
	                            e.cancelBubble = true;
	                        }
	                    }
	                    catch (e) {
	                    }
	                    return result;
	                };
	                eventRecord.elementCallback = processElementEvent;
	                if (target.addEventListener) {
	                    /* tslint:disable:ban-native-functions */
	                    target.addEventListener(eventName, processElementEvent, useCapture);
	                }
	                else if (target.attachEvent) {
	                    target.attachEvent('on' + eventName, processElementEvent);
	                }
	            }
	            else {
	                var processObjectEvent = function () {
	                    var args = [];
	                    for (var _i = 0; _i < arguments.length; _i++) {
	                        args[_i - 0] = arguments[_i];
	                    }
	                    if (_this._isDisposed) {
	                        return;
	                    }
	                    return callback.apply(parent_1, args);
	                };
	                eventRecord.objectCallback = processObjectEvent;
	            }
	            // Remember the record locally, so that it can be removed.
	            this._eventRecords.push(eventRecord);
	        }
	    };
	    EventGroup.prototype.off = function (target, eventName, callback, useCapture) {
	        for (var i = 0; i < this._eventRecords.length; i++) {
	            var eventRecord = this._eventRecords[i];
	            if ((!target || target === eventRecord.target) &&
	                (!eventName || eventName === eventRecord.eventName) &&
	                (!callback || callback === eventRecord.callback) &&
	                ((typeof useCapture !== 'boolean') || useCapture === eventRecord.useCapture)) {
	                var events = eventRecord.target.__events__;
	                var targetArrayLookup = events[eventRecord.eventName];
	                var targetArray = targetArrayLookup ? targetArrayLookup[this._id] : null;
	                // We may have already target's entries, so check for null.
	                if (targetArray) {
	                    if (targetArray.length === 1 || !callback) {
	                        targetArrayLookup.count -= targetArray.length;
	                        delete events[eventRecord.eventName][this._id];
	                    }
	                    else {
	                        targetArrayLookup.count--;
	                        targetArray.splice(targetArray.indexOf(eventRecord), 1);
	                    }
	                    if (!targetArrayLookup.count) {
	                        delete events[eventRecord.eventName];
	                    }
	                }
	                if (eventRecord.elementCallback) {
	                    if (eventRecord.target.removeEventListener) {
	                        eventRecord.target.removeEventListener(eventRecord.eventName, eventRecord.elementCallback, eventRecord.useCapture);
	                    }
	                    else if (eventRecord.target.detachEvent) {
	                        eventRecord.target.detachEvent('on' + eventRecord.eventName, eventRecord.elementCallback);
	                    }
	                }
	                this._eventRecords.splice(i--, 1);
	            }
	        }
	    };
	    /** Trigger the given event in the context of this instance of EventGroup. */
	    EventGroup.prototype.raise = function (eventName, eventArgs, bubbleEvent) {
	        return EventGroup.raise(this._parent, eventName, eventArgs, bubbleEvent);
	    };
	    /** Declare an event as being supported by this instance of EventGroup. */
	    EventGroup.prototype.declare = function (event) {
	        var declaredEvents = this._parent.__declaredEvents = this._parent.__declaredEvents || {};
	        if (typeof event === 'string') {
	            declaredEvents[event] = true;
	        }
	        else {
	            for (var i = 0; i < event.length; i++) {
	                declaredEvents[event[i]] = true;
	            }
	        }
	    };
	    EventGroup._uniqueId = 0;
	    return EventGroup;
	}());
	exports.EventGroup = EventGroup;
	


/***/ },
/* 158 */
/***/ function(module, exports) {

	/* tslint:disable:no-string-literal */
	"use strict";
	var IS_FOCUSABLE_ATTRIBUTE = 'data-is-focusable';
	var IS_VISIBLE_ATTRIBUTE = 'data-is-visible';
	var FOCUSZONE_ID_ATTRIBUTE = 'data-focuszone-id';
	function getFirstFocusable(rootElement, currentElement, includeElementsInFocusZones) {
	    return getNextElement(rootElement, currentElement, true, false, false, includeElementsInFocusZones);
	}
	exports.getFirstFocusable = getFirstFocusable;
	function getLastFocusable(rootElement, currentElement, includeElementsInFocusZones) {
	    return getPreviousElement(rootElement, currentElement, true, false, true, includeElementsInFocusZones);
	}
	exports.getLastFocusable = getLastFocusable;
	/** Traverse to find the previous element. */
	function getPreviousElement(rootElement, currentElement, checkNode, suppressParentTraversal, traverseChildren, includeElementsInFocusZones) {
	    if (!currentElement ||
	        currentElement === rootElement) {
	        return null;
	    }
	    var isCurrentElementVisible = isElementVisible(currentElement);
	    // Check its children.
	    if (traverseChildren && (includeElementsInFocusZones || !isElementFocusZone(currentElement)) && isCurrentElementVisible) {
	        var childMatch = getPreviousElement(rootElement, currentElement.lastElementChild, true, true, true, includeElementsInFocusZones);
	        if (childMatch) {
	            return childMatch;
	        }
	    }
	    // Check the current node, if it's not the first traversal.
	    if (checkNode && isCurrentElementVisible && isElementTabbable(currentElement)) {
	        return currentElement;
	    }
	    // Check its previous sibling.
	    var siblingMatch = getPreviousElement(rootElement, currentElement.previousElementSibling, true, true, true, includeElementsInFocusZones);
	    if (siblingMatch) {
	        return siblingMatch;
	    }
	    // Check its parent.
	    if (!suppressParentTraversal) {
	        return getPreviousElement(rootElement, currentElement.parentElement, true, false, false, includeElementsInFocusZones);
	    }
	    return null;
	}
	exports.getPreviousElement = getPreviousElement;
	/** Traverse to find the next focusable element. */
	function getNextElement(rootElement, currentElement, checkNode, suppressParentTraversal, suppressChildTraversal, includeElementsInFocusZones) {
	    if (!currentElement ||
	        (currentElement === rootElement && suppressChildTraversal)) {
	        return null;
	    }
	    var isCurrentElementVisible = isElementVisible(currentElement);
	    // Check the current node, if it's not the first traversal.
	    if (checkNode && isCurrentElementVisible && isElementTabbable(currentElement)) {
	        return currentElement;
	    }
	    // Check its children.
	    if (!suppressChildTraversal && isCurrentElementVisible && (includeElementsInFocusZones || !isElementFocusZone(currentElement))) {
	        var childMatch = getNextElement(rootElement, currentElement.firstElementChild, true, true, false, includeElementsInFocusZones);
	        if (childMatch) {
	            return childMatch;
	        }
	    }
	    if (currentElement === rootElement) {
	        return null;
	    }
	    // Check its sibling.
	    var siblingMatch = getNextElement(rootElement, currentElement.nextElementSibling, true, true, false, includeElementsInFocusZones);
	    if (siblingMatch) {
	        return siblingMatch;
	    }
	    if (!suppressParentTraversal) {
	        return getNextElement(rootElement, currentElement.parentElement, false, false, true, includeElementsInFocusZones);
	    }
	    return null;
	}
	exports.getNextElement = getNextElement;
	function isElementVisible(element) {
	    return (!!element &&
	        (element.offsetHeight !== 0 ||
	            element.offsetParent !== null ||
	            element.isVisible === true ||
	            (element.getAttribute && element.getAttribute(IS_VISIBLE_ATTRIBUTE) === 'true')));
	}
	exports.isElementVisible = isElementVisible;
	function isElementTabbable(element) {
	    return (!!element &&
	        (element.tagName === 'A' ||
	            (element.tagName === 'BUTTON' && !element.disabled) ||
	            (element.tagName === 'INPUT' && !element.disabled) ||
	            (element.getAttribute && element.getAttribute(IS_FOCUSABLE_ATTRIBUTE) === 'true')));
	}
	exports.isElementTabbable = isElementTabbable;
	function isElementFocusZone(element) {
	    return element && !!element.getAttribute(FOCUSZONE_ID_ATTRIBUTE);
	}
	exports.isElementFocusZone = isElementFocusZone;
	


/***/ },
/* 159 */
/***/ function(module, exports) {

	"use strict";
	(function (DialogType) {
	    /** Standard dialog */
	    DialogType[DialogType["normal"] = 0] = "normal";
	    /** Dialog with large header banner */
	    DialogType[DialogType["largeHeader"] = 1] = "largeHeader";
	    /** Dialog with an 'x' close button in the upper-right corner */
	    DialogType[DialogType["close"] = 2] = "close";
	})(exports.DialogType || (exports.DialogType = {}));
	var DialogType = exports.DialogType;
	


/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(161));
	


/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(162));
	


/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var React = __webpack_require__(82);
	var css_1 = __webpack_require__(105);
	__webpack_require__(163);
	var Overlay = (function (_super) {
	    __extends(Overlay, _super);
	    function Overlay() {
	        _super.apply(this, arguments);
	    }
	    Overlay.prototype.render = function () {
	        var _a = this.props, isDarkThemed = _a.isDarkThemed, className = _a.className;
	        var modifiedClassName = css_1.css('ms-Overlay', className, {
	            'ms-Overlay--dark': isDarkThemed
	        });
	        return (React.createElement("div", React.__spread({}, this.props, {className: modifiedClassName})));
	    };
	    return Overlay;
	}(React.Component));
	exports.Overlay = Overlay;
	


/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var load_themed_styles_1 = __webpack_require__(77);
	load_themed_styles_1.loadStyles('.ms-Overlay{background-color:"[theme:whiteTranslucent40, default: rgba(255,255,255,.4)]";position:absolute;bottom:0;left:0;right:0;top:0;z-index:200}.ms-Overlay.ms-Overlay--none{visibility:hidden}.ms-Overlay.ms-Overlay--dark{background-color:"[theme:blackTranslucent40, default: rgba(0,0,0,.4)]"}');
	


/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(165));
	


/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(166));
	


/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var React = __webpack_require__(82);
	var ReactDOM = __webpack_require__(83);
	var LayerHost_1 = __webpack_require__(167);
	var object_1 = __webpack_require__(147);
	__webpack_require__(171);
	var LAYER_HOST_ELEMENT_ID = 'ms-layer-host';
	var _layerHost;
	var Layer = (function (_super) {
	    __extends(Layer, _super);
	    function Layer(props) {
	        _super.call(this, props);
	        this._layer = {
	            id: object_1.getId('Layer'),
	            children: props.children
	        };
	    }
	    Layer.prototype.render = function () {
	        var isInLayer = this.context.isInLayer;
	        return isInLayer ? this.props.children : null;
	    };
	    Layer.prototype.componentWillMount = function () {
	        if (!_layerHost) {
	            var hostElement = document.createElement('div');
	            hostElement.setAttribute('id', LAYER_HOST_ELEMENT_ID);
	            document.body.appendChild(hostElement);
	            var layerHost = ReactDOM.render((React.createElement(LayerHost_1.LayerHost, null)), hostElement);
	            _layerHost = layerHost;
	        }
	    };
	    Layer.prototype.componentDidMount = function () {
	        if (!this.context.isInLayer) {
	            _layerHost.addLayer(this._layer, this.props.onLayerMounted);
	        }
	        else {
	            if (this.props.onLayerMounted) {
	                this.props.onLayerMounted();
	            }
	        }
	    };
	    Layer.prototype.componentWillReceiveProps = function (props) {
	        if (!this.context.isInLayer) {
	            this._layer.children = props.children;
	            _layerHost.updateLayer(this._layer);
	        }
	    };
	    Layer.prototype.componentWillUnmount = function () {
	        if (!this.context.isInLayer) {
	            _layerHost.removeLayer(this._layer);
	        }
	    };
	    Layer.contextTypes = {
	        isInLayer: React.PropTypes.bool
	    };
	    return Layer;
	}(React.Component));
	exports.Layer = Layer;
	


/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var React = __webpack_require__(82);
	var Fabric_1 = __webpack_require__(168);
	var LayerHost = (function (_super) {
	    __extends(LayerHost, _super);
	    function LayerHost(props) {
	        _super.call(this, props);
	        this._layers = [];
	        this.state = {
	            layers: this._layers
	        };
	    }
	    LayerHost.prototype.getChildContext = function () {
	        return {
	            isInLayer: true
	        };
	    };
	    LayerHost.prototype.render = function () {
	        var layers = this.state.layers.map(function (layer, index) {
	            return (React.createElement("div", {className: 'ms-LayerHost-layer', key: layer.id}, layer.children));
	        });
	        return (React.createElement(Fabric_1.Fabric, {className: 'ms-LayerHost'}, layers));
	    };
	    LayerHost.prototype.addLayer = function (layerToAdd, onComplete) {
	        this._layers.push(layerToAdd);
	        this.setState({
	            layers: this._layers
	        }, function () {
	            if (onComplete) {
	                onComplete();
	            }
	        });
	    };
	    LayerHost.prototype.updateLayer = function (layerToUpdate) {
	        this.forceUpdate();
	    };
	    LayerHost.prototype.removeLayer = function (layerToRemove) {
	        var index = this._layers.indexOf(layerToRemove);
	        if (index > -1) {
	            this._layers.splice(index, 1);
	            this.forceUpdate();
	        }
	    };
	    LayerHost.childContextTypes = {
	        isInLayer: React.PropTypes.bool
	    };
	    return LayerHost;
	}(React.Component));
	exports.LayerHost = LayerHost;
	


/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(169));
	


/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(170));
	


/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var React = __webpack_require__(82);
	var css_1 = __webpack_require__(105);
	var EventGroup_1 = __webpack_require__(157);
	var KeyCodes_1 = __webpack_require__(156);
	var DIRECTIONAL_KEY_CODES = [
	    KeyCodes_1.KeyCodes.up,
	    KeyCodes_1.KeyCodes.down,
	    KeyCodes_1.KeyCodes.left,
	    KeyCodes_1.KeyCodes.right,
	    KeyCodes_1.KeyCodes.home,
	    KeyCodes_1.KeyCodes.end,
	    KeyCodes_1.KeyCodes.tab,
	    KeyCodes_1.KeyCodes.pageUp,
	    KeyCodes_1.KeyCodes.pageDown
	];
	// We will track the last focus visibility state so that if we tear down and recreate
	// the Fabric component, we will use the last known value as the default.
	var _lastIsFocusVisible = false;
	var Fabric = (function (_super) {
	    __extends(Fabric, _super);
	    function Fabric() {
	        _super.call(this);
	        this.state = {
	            isFocusVisible: _lastIsFocusVisible
	        };
	        this._events = new EventGroup_1.EventGroup(this);
	    }
	    Fabric.prototype.componentDidMount = function () {
	        this._events.on(document.body, 'mousedown', this._onMouseDown, true);
	        this._events.on(document.body, 'keydown', this._onKeyDown, true);
	    };
	    Fabric.prototype.componentWillUnmount = function () {
	        this._events.dispose();
	    };
	    Fabric.prototype.render = function () {
	        var isFocusVisible = this.state.isFocusVisible;
	        var rootClass = css_1.css('ms-Fabric ms-font-m', this.props.className, {
	            'is-focusVisible': isFocusVisible
	        });
	        return (React.createElement("div", React.__spread({}, this.props, {className: rootClass, ref: 'root'})));
	    };
	    Fabric.prototype._onMouseDown = function () {
	        if (this.state.isFocusVisible) {
	            this.setState({
	                isFocusVisible: false
	            });
	            _lastIsFocusVisible = false;
	        }
	    };
	    Fabric.prototype._onKeyDown = function (ev) {
	        if (!this.state.isFocusVisible && DIRECTIONAL_KEY_CODES.indexOf(ev.which) > -1) {
	            this.setState({
	                isFocusVisible: true
	            });
	            _lastIsFocusVisible = true;
	        }
	    };
	    return Fabric;
	}(React.Component));
	exports.Fabric = Fabric;
	


/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var load_themed_styles_1 = __webpack_require__(77);
	load_themed_styles_1.loadStyles('.ms-Layer{display:block;visibility:hidden}.ms-LayerHost{position:absolute;visibility:hidden;top:0;left:0;bottom:0;right:0}.ms-LayerHost-layer{visibility:visible}');
	


/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var React = __webpack_require__(82);
	__webpack_require__(173);
	var DialogFooter = (function (_super) {
	    __extends(DialogFooter, _super);
	    function DialogFooter() {
	        _super.apply(this, arguments);
	    }
	    DialogFooter.prototype.render = function () {
	        return (React.createElement("div", {className: 'ms-Dialog-actions'}, React.createElement("div", {className: 'ms-Dialog-actionsRight'}, this._renderChildrenAsActions())));
	    };
	    DialogFooter.prototype._renderChildrenAsActions = function () {
	        var key = 0;
	        return this.props.children.map(function (child) {
	            return React.createElement("span", {key: key++, className: 'ms-Dialog-action'}, child);
	        });
	    };
	    return DialogFooter;
	}(React.Component));
	exports.DialogFooter = DialogFooter;
	


/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var load_themed_styles_1 = __webpack_require__(77);
	load_themed_styles_1.loadStyles('.ms-Dialog{background-color:transparent;position:fixed;height:100%;width:100%;top:0;left:0;z-index:300;display:block;font-size:0;line-height:100vh;text-align:center;display:-ms-flexbox;display:-webkit-box;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.ms-Dialog::before{vertical-align:middle;display:inline-block;content:"";height:100%;width:0}.ms-Dialog .ms-Button.ms-Button--compound{display:block;margin-left:0}.ms-Dialog .ms-Overlay{z-index:0}@media screen and (-ms-high-contrast:active){.ms-Dialog .ms-Overlay{opacity:0}}.ms-Dialog-main{vertical-align:middle;display:inline-block;box-shadow:0 0 5px 0 rgba(0,0,0,.4);background-color:"[theme:white, default: #ffffff]";box-sizing:border-box;line-height:1.35;margin:auto;width:288px;position:relative;text-align:left;outline:3px solid transparent}.ms-Dialog-button.ms-Dialog-button--close{display:none;position:absolute;margin:0;padding:0;border:0;background:0 0;cursor:pointer;top:12px;right:12px;padding:8px;z-index:10}.ms-Dialog-button.ms-Dialog-button--close .ms-Icon.ms-Icon--x{color:"[theme:neutralSecondary, default: #666666]";font-size:16px}.ms-Dialog-inner{height:100%;padding:0 20px 20px}.ms-Dialog-header{position:relative;width:100%;box-sizing:border-box;padding:12px 20px 15px}.ms-Dialog-title{margin:0;font-family:"Segoe UI Light WestEuropean","Segoe UI Light","Segoe UI",Tahoma,Arial,sans-serif;font-size:21px}.ms-Dialog-content{position:relative;width:100%}.ms-Dialog-content .ms-Button.ms-Button--compound:not(:last-child){margin-bottom:20px}.ms-Dialog-subText{margin:0 0 20px 0;padding-top:8px;font-family:"Segoe UI Semilight WestEuropean","Segoe UI Semilight","Segoe UI",Tahoma,Arial,sans-serif;color:"[theme:neutralPrimary, default: #333333]";font-size:12px}.ms-Dialog-actions{position:relative;width:100%;min-height:24px;line-height:24px;margin:20px 0 0;font-size:0}.ms-Dialog-actions .ms-Button{line-height:normal}.ms-Dialog-actionsRight{text-align:right;font-size:0}.ms-Dialog-actionsRight .ms-Dialog-action:first-child{margin:0}.ms-Dialog-actionsRight .ms-Dialog-action+.ms-Dialog-action{margin:0 0 0 16px}.ms-Dialog.ms-Dialog--close:not(.ms-Dialog--lgHeader) .ms-Dialog-title{margin-right:20px}.ms-Dialog.ms-Dialog--close:not(.ms-Dialog--lgHeader) .ms-Dialog-button.ms-Dialog-button--close{display:block}.ms-Dialog.ms-Dialog--multiline .ms-Dialog-title{font-size:28px}.ms-Dialog.ms-Dialog--multiline .ms-Dialog-inner{padding:0 20px 20px}.ms-Dialog.ms-Dialog--lgHeader .ms-Dialog-header{background-color:"[theme:themePrimary, default: #0078d7]";padding:26px 20px 28px;margin-bottom:8px}.ms-Dialog.ms-Dialog--lgHeader .ms-Dialog-title{font-size:28px;font-family:"Segoe UI Light WestEuropean","Segoe UI Light","Segoe UI",Tahoma,Arial,sans-serif;color:"[theme:white, default: #ffffff]"}.ms-Dialog.ms-Dialog--lgHeader .ms-Dialog-subText{font-size:14px}@media (min-width:480px){.ms-Dialog-main{width:auto;min-width:288px;max-width:340px}}');
	


/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(175));
	


/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var React = __webpack_require__(82);
	var KeyCodes_1 = __webpack_require__(156);
	var BaseComponent_1 = __webpack_require__(176);
	/**
	 * This adds accessibility to Dialog and Panel controls
	 **/
	var Popup = (function (_super) {
	    __extends(Popup, _super);
	    function Popup() {
	        _super.apply(this, arguments);
	    }
	    Popup.prototype.componentDidMount = function () {
	        var _this = this;
	        this._originalFocusedElement = document.activeElement;
	        this._events.on(this.refs.root, 'keydown', this._onKeyDown);
	        this._events.on(this.refs.root, 'focus', function () { return _this._containsFocus = true; }, true);
	        this._events.on(this.refs.root, 'blur', function () { return _this._containsFocus = false; }, true);
	    };
	    Popup.prototype.componentWillUnmount = function () {
	        if (this.props.shouldRestoreFocus &&
	            this._originalFocusedElement &&
	            this._containsFocus &&
	            this._originalFocusedElement !== window) {
	            this._originalFocusedElement.focus();
	        }
	    };
	    Popup.prototype.render = function () {
	        var _a = this.props, role = _a.role, className = _a.className, ariaLabelledBy = _a.ariaLabelledBy, ariaDescribedBy = _a.ariaDescribedBy;
	        return (React.createElement("div", React.__spread({}, this.props, {ref: 'root', className: className, role: role, "aria-labelledby": ariaLabelledBy, "aria-desribedby": ariaDescribedBy})));
	    };
	    Popup.prototype._onKeyDown = function (ev) {
	        switch (ev.which) {
	            case KeyCodes_1.KeyCodes.escape:
	                if (this.props.onDismiss) {
	                    this.props.onDismiss();
	                    ev.preventDefault();
	                    ev.stopPropagation();
	                }
	                break;
	        }
	    };
	    Popup.defaultProps = {
	        shouldRestoreFocus: true
	    };
	    return Popup;
	}(BaseComponent_1.BaseComponent));
	exports.Popup = Popup;
	


/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var React = __webpack_require__(82);
	var Async_1 = __webpack_require__(177);
	var EventGroup_1 = __webpack_require__(157);
	// Ensure that the HTML element has a dir specified. This helps to ensure RTL/LTR macros in css for all components will work.
	if (document && document.documentElement && !document.documentElement.getAttribute('dir')) {
	    document.documentElement.setAttribute('dir', 'ltr');
	}
	var BaseComponent = (function (_super) {
	    __extends(BaseComponent, _super);
	    function BaseComponent(props) {
	        _super.call(this, props);
	        _makeAllSafe(this, BaseComponent.prototype, [
	            'componentWillMount',
	            'componentDidMount',
	            'shouldComponentUpdate',
	            'componentWillUpdate',
	            'componentWillReceiveProps',
	            'render',
	            'componentDidUpdate',
	            'componentWillUnmount'
	        ]);
	    }
	    /** If we have disposables, dispose them automatically on unmount. */
	    BaseComponent.prototype.componentWillUnmount = function () {
	        if (this.__disposables) {
	            for (var i = 0, len = this._disposables.length; i < len; i++) {
	                this.__disposables[i].dispose();
	            }
	            this.__disposables = null;
	        }
	    };
	    Object.defineProperty(BaseComponent.prototype, "className", {
	        /** Gets the object's class name. */
	        get: function () {
	            var funcNameRegex = /function (.{1,})\(/;
	            var results = (funcNameRegex).exec((this).constructor.toString());
	            return (results && results.length > 1) ? results[1] : '';
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BaseComponent.prototype, "_disposables", {
	        /** Allows subclasses to push things to this._disposables to be auto disposed. */
	        get: function () {
	            if (!this.__disposables) {
	                this.__disposables = [];
	            }
	            return this.__disposables;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BaseComponent.prototype, "_async", {
	        /**
	         * Gets the async instance associated with the component, created on demand. The async instance gives
	         * subclasses a way to execute setTimeout/setInterval async calls safely, where the callbacks
	         * will be cleared/ignored automatically after unmounting. The helpers within the async object also
	         * preserve the this pointer so that you don't need to "bind" the callbacks.
	         */
	        get: function () {
	            if (!this.__async) {
	                this.__async = new Async_1.Async(this);
	                this._disposables.push(this.__async);
	            }
	            return this.__async;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BaseComponent.prototype, "_events", {
	        /**
	         * Gets the event group instance assocaited with the component, created on demand. The event instance
	         * provides on/off methods for listening to DOM (or regular javascript object) events. The event callbacks
	         * will be automatically disconnected after unmounting. The helpers within the events object also
	         * preserve the this reference so that you don't need to "bind" the callbacks.
	         */
	        get: function () {
	            if (!this.__events) {
	                this.__events = new EventGroup_1.EventGroup(this);
	                this._disposables.push(this.__events);
	            }
	            return this.__events;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return BaseComponent;
	}(React.Component));
	exports.BaseComponent = BaseComponent;
	/**
	 * Helper to override a given method with a wrapper method that can try/catch the original, but also
	 * ensures that the BaseComponent's methods are called before the subclass's. This ensures that
	 * componentWillUnmount in the base is called and that things in the _disposables array are disposed.
	 **/
	function _makeAllSafe(obj, prototype, methodNames) {
	    for (var i = 0, len = methodNames.length; i < len; i++) {
	        _makeSafe(obj, prototype, methodNames[i]);
	    }
	}
	function _makeSafe(obj, prototype, methodName) {
	    var classMethod = obj[methodName];
	    var prototypeMethod = prototype[methodName];
	    if (classMethod || prototypeMethod) {
	        obj[methodName] = function () {
	            var retVal;
	            try {
	                if (prototypeMethod) {
	                    retVal = prototypeMethod.apply(this, arguments);
	                }
	                if (classMethod) {
	                    retVal = classMethod.apply(this, arguments);
	                }
	            }
	            catch (e) {
	                var errorMessage = "Exception in " + obj.className + "." + methodName + "(): " + (typeof e === 'string' ? e : e.stack);
	                if (BaseComponent.onError) {
	                    BaseComponent.onError(errorMessage, e);
	                }
	            }
	            return retVal;
	        };
	    }
	}
	BaseComponent.onError = function (errorMessage) { return console.error(errorMessage); };
	


/***/ },
/* 177 */
/***/ function(module, exports) {

	/**
	 * Bugs often appear in async code when stuff gets disposed, but async operations don't get canceled.
	 * This Async helper class solves these issues by tying async code to the lifetime of a disposable object.
	 *
	 * Usage: Anything class extending from BaseModel can access this helper via this.async. Otherwise create a
	 * new instance of the class and remember to call dispose() during your code's dispose handler.
	 */
	"use strict";
	var Async = (function () {
	    function Async(parent, onError) {
	        this._timeoutIds = null;
	        this._immediateIds = null;
	        this._intervalIds = null;
	        this._animationFrameIds = null;
	        this._isDisposed = false;
	        this._parent = parent || null;
	        this._onErrorHandler = onError;
	        this._noop = function () { };
	    }
	    /**
	     * Dispose function, clears all async operations.
	     */
	    Async.prototype.dispose = function () {
	        var id;
	        this._isDisposed = true;
	        this._parent = null;
	        // Clear timeouts.
	        if (this._timeoutIds) {
	            for (id in this._timeoutIds) {
	                if (this._timeoutIds.hasOwnProperty(id)) {
	                    this.clearTimeout(id);
	                }
	            }
	            this._timeoutIds = null;
	        }
	        // Clear immediates.
	        if (this._immediateIds) {
	            for (id in this._immediateIds) {
	                if (this._immediateIds.hasOwnProperty(id)) {
	                    this.clearImmediate(id);
	                }
	            }
	            this._immediateIds = null;
	        }
	        // Clear intervals.
	        if (this._intervalIds) {
	            for (id in this._intervalIds) {
	                if (this._intervalIds.hasOwnProperty(id)) {
	                    this.clearInterval(id);
	                }
	            }
	            this._intervalIds = null;
	        }
	        // Clear animation frames.
	        if (this._animationFrameIds) {
	            for (id in this._animationFrameIds) {
	                if (this._animationFrameIds.hasOwnProperty(id)) {
	                    this.cancelAnimationFrame(id);
	                }
	            }
	            this._animationFrameIds = null;
	        }
	    };
	    /**
	     * SetTimeout override, which will auto cancel the timeout during dispose.
	     * @param callback Callback to execute.
	     * @param duration Duration in milliseconds.
	     * @return The setTimeout id.
	     */
	    Async.prototype.setTimeout = function (callback, duration) {
	        var _this = this;
	        var timeoutId = 0;
	        if (!this._isDisposed) {
	            if (!this._timeoutIds) {
	                this._timeoutIds = {};
	            }
	            /* tslint:disable:ban-native-functions */
	            timeoutId = setTimeout(function () {
	                // Time to execute the timeout, enqueue it as a foreground task to be executed.
	                try {
	                    // Now delete the record and call the callback.
	                    delete _this._timeoutIds[timeoutId];
	                    callback.apply(_this._parent);
	                }
	                catch (e) {
	                    if (_this._onErrorHandler) {
	                        _this._onErrorHandler(e);
	                    }
	                }
	            }, duration);
	            /* tslint:enable:ban-native-functions */
	            this._timeoutIds[timeoutId] = true;
	        }
	        return timeoutId;
	    };
	    /**
	     * Clears the timeout.
	     * @param id Id to cancel.
	     */
	    Async.prototype.clearTimeout = function (id) {
	        if (this._timeoutIds && this._timeoutIds[id]) {
	            /* tslint:disable:ban-native-functions */
	            clearTimeout(id);
	            delete this._timeoutIds[id];
	        }
	    };
	    /**
	     * SetImmediate override, which will auto cancel the immediate during dispose.
	     * @param callback Callback to execute.
	     * @return The setTimeout id.
	     */
	    Async.prototype.setImmediate = function (callback) {
	        var _this = this;
	        var immediateId = 0;
	        if (!this._isDisposed) {
	            if (!this._immediateIds) {
	                this._immediateIds = {};
	            }
	            /* tslint:disable:ban-native-functions */
	            var setImmediateCallback = function () {
	                // Time to execute the timeout, enqueue it as a foreground task to be executed.
	                try {
	                    // Now delete the record and call the callback.
	                    delete _this._immediateIds[immediateId];
	                    callback.apply(_this._parent);
	                }
	                catch (e) {
	                    _this._logError(e);
	                }
	            };
	            immediateId = window.setImmediate ? window.setImmediate(setImmediateCallback) : window.setTimeout(setImmediateCallback, 0);
	            /* tslint:enable:ban-native-functions */
	            this._immediateIds[immediateId] = true;
	        }
	        return immediateId;
	    };
	    /**
	     * Clears the immediate.
	     * @param id Id to cancel.
	     */
	    Async.prototype.clearImmediate = function (id) {
	        if (this._immediateIds && this._immediateIds[id]) {
	            /* tslint:disable:ban-native-functions */
	            window.clearImmediate ? window.clearImmediate(id) : window.clearTimeout(id);
	            delete this._immediateIds[id];
	        }
	    };
	    /**
	     * SetInterval override, which will auto cancel the timeout during dispose.
	     * @param callback Callback to execute.
	     * @param duration Duration in milliseconds.
	     * @return The setTimeout id.
	     */
	    Async.prototype.setInterval = function (callback, duration) {
	        var _this = this;
	        var intervalId = 0;
	        if (!this._isDisposed) {
	            if (!this._intervalIds) {
	                this._intervalIds = {};
	            }
	            /* tslint:disable:ban-native-functions */
	            intervalId = setInterval(function () {
	                // Time to execute the interval callback, enqueue it as a foreground task to be executed.
	                try {
	                    callback.apply(_this._parent);
	                }
	                catch (e) {
	                    _this._logError(e);
	                }
	            }, duration);
	            /* tslint:enable:ban-native-functions */
	            this._intervalIds[intervalId] = true;
	        }
	        return intervalId;
	    };
	    /**
	     * Clears the interval.
	     * @param id Id to cancel.
	     */
	    Async.prototype.clearInterval = function (id) {
	        if (this._intervalIds && this._intervalIds[id]) {
	            /* tslint:disable:ban-native-functions */
	            clearInterval(id);
	            delete this._intervalIds[id];
	        }
	    };
	    /**
	     * Creates a function that, when executed, will only call the func function at most once per
	     * every wait milliseconds. Provide an options object to indicate that func should be invoked
	     * on the leading and/or trailing edge of the wait timeout. Subsequent calls to the throttled
	     * function will return the result of the last func call.
	     *
	     * Note: If leading and trailing options are true func will be called on the trailing edge of
	     * the timeout only if the the throttled function is invoked more than once during the wait timeout.
	     *
	     * @param func The function to throttle.
	     * @param wait The number of milliseconds to throttle executions to. Defaults to 0.
	     * @param options The options object.
	     * @param options.leading Specify execution on the leading edge of the timeout.
	     * @param options.trailing Specify execution on the trailing edge of the timeout.
	     * @return The new throttled function.
	     */
	    Async.prototype.throttle = function (func, wait, options) {
	        var _this = this;
	        if (this._isDisposed) {
	            return this._noop;
	        }
	        var waitMS = wait || 0;
	        var leading = true;
	        var trailing = true;
	        var lastExecuteTime = 0;
	        var lastResult;
	        var lastArgs;
	        var timeoutId = null;
	        if (options && typeof (options.leading) === 'boolean') {
	            leading = options.leading;
	        }
	        if (options && typeof (options.trailing) === 'boolean') {
	            trailing = options.trailing;
	        }
	        var callback = function (userCall) {
	            var now = (new Date).getTime();
	            var delta = now - lastExecuteTime;
	            var waitLength = leading ? waitMS - delta : waitMS;
	            if (delta >= waitMS && (!userCall || leading)) {
	                lastExecuteTime = now;
	                if (timeoutId) {
	                    _this.clearTimeout(timeoutId);
	                    timeoutId = null;
	                }
	                lastResult = func.apply(_this._parent, lastArgs);
	            }
	            else if (timeoutId === null && trailing) {
	                timeoutId = _this.setTimeout(callback, waitLength);
	            }
	            return lastResult;
	        };
	        var resultFunction = function () {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i - 0] = arguments[_i];
	            }
	            lastArgs = args;
	            return callback(true);
	        };
	        return resultFunction;
	    };
	    /**
	     * Creates a function that will delay the execution of func until after wait milliseconds have
	     * elapsed since the last time it was invoked. Provide an options object to indicate that func
	     * should be invoked on the leading and/or trailing edge of the wait timeout. Subsequent calls
	     * to the debounced function will return the result of the last func call.
	     *
	     * Note: If leading and trailing options are true func will be called on the trailing edge of
	     * the timeout only if the the debounced function is invoked more than once during the wait
	     * timeout.
	     *
	     * @param func The function to debounce.
	     * @param wait The number of milliseconds to delay.
	     * @param options The options object.
	     * @param options.leading Specify execution on the leading edge of the timeout.
	     * @param options.maxWait The maximum time func is allowed to be delayed before it's called.
	     * @param options.trailing Specify execution on the trailing edge of the timeout.
	     * @return The new debounced function.
	     */
	    Async.prototype.debounce = function (func, wait, options) {
	        var _this = this;
	        if (this._isDisposed) {
	            return this._noop;
	        }
	        var waitMS = wait || 0;
	        var leading = false;
	        var trailing = true;
	        var maxWait = null;
	        var lastCallTime = 0;
	        var lastExecuteTime = (new Date).getTime();
	        var lastResult;
	        var lastArgs;
	        var timeoutId = null;
	        if (options && typeof (options.leading) === 'boolean') {
	            leading = options.leading;
	        }
	        if (options && typeof (options.trailing) === 'boolean') {
	            trailing = options.trailing;
	        }
	        if (options && typeof (options.maxWait) === 'number' && !isNaN(options.maxWait)) {
	            maxWait = options.maxWait;
	        }
	        var callback = function (userCall) {
	            var now = (new Date).getTime();
	            var executeImmediately = false;
	            if (userCall) {
	                if (leading && now - lastCallTime >= waitMS) {
	                    executeImmediately = true;
	                }
	                lastCallTime = now;
	            }
	            var delta = now - lastCallTime;
	            var waitLength = waitMS - delta;
	            var maxWaitDelta = now - lastExecuteTime;
	            var maxWaitExpired = false;
	            if (maxWait !== null) {
	                // maxWait only matters when there is a pending callback
	                if (maxWaitDelta >= maxWait && timeoutId) {
	                    maxWaitExpired = true;
	                }
	                else {
	                    waitLength = Math.min(waitLength, maxWait - maxWaitDelta);
	                }
	            }
	            if (delta >= waitMS || maxWaitExpired || executeImmediately) {
	                if (timeoutId) {
	                    _this.clearTimeout(timeoutId);
	                    timeoutId = null;
	                }
	                lastExecuteTime = now;
	                lastResult = func.apply(_this._parent, lastArgs);
	            }
	            else if ((timeoutId === null || !userCall) && trailing) {
	                timeoutId = _this.setTimeout(callback, waitLength);
	            }
	            return lastResult;
	        };
	        var resultFunction = function () {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i - 0] = arguments[_i];
	            }
	            lastArgs = args;
	            return callback(true);
	        };
	        return resultFunction;
	    };
	    Async.prototype.requestAnimationFrame = function (callback) {
	        var _this = this;
	        var animationFrameId = 0;
	        if (!this._isDisposed) {
	            if (!this._animationFrameIds) {
	                this._animationFrameIds = {};
	            }
	            /* tslint:disable:ban-native-functions */
	            var animationFrameCallback = function () {
	                try {
	                    // Now delete the record and call the callback.
	                    delete _this._animationFrameIds[animationFrameId];
	                    callback.apply(_this._parent);
	                }
	                catch (e) {
	                    _this._logError(e);
	                }
	            };
	            animationFrameId = window.requestAnimationFrame ?
	                window.requestAnimationFrame(animationFrameCallback) :
	                window.setTimeout(animationFrameCallback, 0);
	            /* tslint:enable:ban-native-functions */
	            this._animationFrameIds[animationFrameId] = true;
	        }
	        return animationFrameId;
	    };
	    Async.prototype.cancelAnimationFrame = function (id) {
	        if (this._animationFrameIds && this._animationFrameIds[id]) {
	            /* tslint:disable:ban-native-functions */
	            window.cancelAnimationFrame ? window.cancelAnimationFrame(id) : window.clearTimeout(id);
	            /* tslint:enable:ban-native-functions */
	            delete this._animationFrameIds[id];
	        }
	    };
	    Async.prototype._logError = function (e) {
	        if (this._onErrorHandler) {
	            this._onErrorHandler(e);
	        }
	    };
	    return Async;
	}());
	exports.Async = Async;
	


/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var React = __webpack_require__(82);
	var EventGroup_1 = __webpack_require__(157);
	(function (ResponsiveMode) {
	    ResponsiveMode[ResponsiveMode["small"] = 0] = "small";
	    ResponsiveMode[ResponsiveMode["medium"] = 1] = "medium";
	    ResponsiveMode[ResponsiveMode["large"] = 2] = "large";
	    ResponsiveMode[ResponsiveMode["xLarge"] = 3] = "xLarge";
	    ResponsiveMode[ResponsiveMode["xxLarge"] = 4] = "xxLarge";
	    ResponsiveMode[ResponsiveMode["xxxLarge"] = 5] = "xxxLarge";
	})(exports.ResponsiveMode || (exports.ResponsiveMode = {}));
	var ResponsiveMode = exports.ResponsiveMode;
	var RESPONSIVE_MAX_CONSTRAINT = [
	    479,
	    639,
	    1023,
	    1365,
	    1919,
	    99999999
	];
	function withResponsiveMode(ComposedComponent) {
	    return (function (_super) {
	        __extends(WithResponsiveMode, _super);
	        function WithResponsiveMode() {
	            _super.call(this);
	            this._events = new EventGroup_1.EventGroup(this);
	            this.state = {
	                responsiveMode: this._getResponsiveMode()
	            };
	        }
	        WithResponsiveMode.prototype.componentWillMount = function () {
	            var _this = this;
	            this._events.on(window, 'resize', function () {
	                var responsiveMode = _this._getResponsiveMode();
	                if (responsiveMode !== _this.state.responsiveMode) {
	                    _this.setState({
	                        responsiveMode: responsiveMode
	                    });
	                }
	            });
	        };
	        WithResponsiveMode.prototype.componentWillUnmount = function () {
	            this._events.dispose();
	        };
	        WithResponsiveMode.prototype.render = function () {
	            var responsiveMode = this.state.responsiveMode;
	            return (React.createElement(ComposedComponent, React.__spread({responsiveMode: responsiveMode}, this.props)));
	        };
	        WithResponsiveMode.prototype._getResponsiveMode = function () {
	            var responsiveMode = ResponsiveMode.small;
	            while (window.innerWidth > RESPONSIVE_MAX_CONSTRAINT[responsiveMode]) {
	                responsiveMode++;
	            }
	            return responsiveMode;
	        };
	        return WithResponsiveMode;
	    }(React.Component));
	}
	exports.withResponsiveMode = withResponsiveMode;
	


/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var sp_client_base_1 = __webpack_require__(69);
	var FocusZone_1 = __webpack_require__(180);
	var React = __webpack_require__(82);
	var CanvasControlType_1 = __webpack_require__(135);
	var ToolbarButton_1 = __webpack_require__(122);
	__webpack_require__(185);
	var CanvasStrings_resx_1 = __webpack_require__(110);
	var Toolbar = (function (_super) {
	    __extends(Toolbar, _super);
	    function Toolbar(props) {
	        _super.call(this, props);
	        this._handleConfigureButtonClicked = this._handleConfigureButtonClicked.bind(this);
	        this._handleDeleteButtonClicked = this._handleDeleteButtonClicked.bind(this);
	    }
	    Toolbar.prototype.render = function () {
	        var configureButton;
	        if (this.props.controlType === CanvasControlType_1.default.WebPartZone) {
	            configureButton = (React.createElement(ToolbarButton_1.default, {canBeActive: false, fabricIconKey: 'Edit', onClick: this._handleConfigureButtonClicked, title: CanvasStrings_resx_1.default.ToolbarConfigButtonTitle}));
	        }
	        return (this.props.displayMode === sp_client_base_1.DisplayMode.Edit &&
	            React.createElement(FocusZone_1.FocusZone, {isCircularNavigation: true}, React.createElement("div", {className: 'CanvasControlToolbar', role: 'toolbar'}, configureButton, React.createElement(ToolbarButton_1.default, {canBeActive: false, fabricIconKey: 'Delete', onClick: this._handleDeleteButtonClicked, title: CanvasStrings_resx_1.default.ToolbarDeleteButtonTitle}))));
	    };
	    Toolbar.prototype._handleConfigureButtonClicked = function () {
	        this.props.onConfigureButtonClick(this.props.id);
	    };
	    Toolbar.prototype._handleDeleteButtonClicked = function () {
	        this.props.onDeleteButtonClick(this.props.row);
	    };
	    return Toolbar;
	}(React.Component));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = Toolbar;
	


/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(181));
	


/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(182));
	__export(__webpack_require__(183));
	


/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var React = __webpack_require__(82);
	var FocusZone_Props_1 = __webpack_require__(183);
	var EventGroup_1 = __webpack_require__(157);
	var KeyCodes_1 = __webpack_require__(156);
	var rtl_1 = __webpack_require__(184);
	var object_1 = __webpack_require__(147);
	var css_1 = __webpack_require__(105);
	var focus_1 = __webpack_require__(158);
	var IS_FOCUSABLE_ATTRIBUTE = 'data-is-focusable';
	var IS_ENTER_DISABLED_ATTRIBUTE = 'data-disable-click-on-enter';
	var FOCUSZONE_ID_ATTRIBUTE = 'data-focuszone-id';
	var TABINDEX = 'tabindex';
	var _allInstances = {};
	var FocusZone = (function (_super) {
	    __extends(FocusZone, _super);
	    function FocusZone(props) {
	        _super.call(this, props);
	        this._id = object_1.getId('FocusZone');
	        _allInstances[this._id] = this;
	        this._focusAlignment = {
	            left: 0,
	            top: 0
	        };
	        this._events = new EventGroup_1.EventGroup(this);
	        this._onKeyDown = this._onKeyDown.bind(this);
	        this._onFocus = this._onFocus.bind(this);
	        this._onMouseDown = this._onMouseDown.bind(this);
	    }
	    FocusZone.prototype.componentDidMount = function () {
	        var windowElement = this.refs.root.ownerDocument.defaultView;
	        var parentElement = this.refs.root.parentElement;
	        while (parentElement && parentElement !== document.body) {
	            if (focus_1.isElementFocusZone(parentElement)) {
	                this._isInnerZone = true;
	                break;
	            }
	            parentElement = parentElement.parentElement;
	        }
	        this._events.on(windowElement, 'keydown', this._onKeyDownCapture, true);
	    };
	    FocusZone.prototype.componentWillUnmount = function () {
	        this._events.dispose();
	        delete _allInstances[this._id];
	    };
	    FocusZone.prototype.render = function () {
	        var _a = this.props, rootProps = _a.rootProps, ariaLabelledBy = _a.ariaLabelledBy, className = _a.className;
	        return (React.createElement("div", React.__spread({}, rootProps, {className: css_1.css('ms-FocusZone', className), ref: 'root', "data-focuszone-id": this._id, "aria-labelledby": ariaLabelledBy, onMouseDownCapture: this._onMouseDown, onKeyDown: this._onKeyDown, onFocus: this._onFocus}), this.props.children));
	    };
	    /** Sets focus to the first tabbable item in the zone. */
	    FocusZone.prototype.focus = function () {
	        if (this._activeElement && this.refs.root.contains(this._activeElement)) {
	            this._activeElement.focus();
	            return true;
	        }
	        else {
	            var firstChild = this.refs.root.firstChild;
	            return this._focusElement(focus_1.getNextElement(this.refs.root, firstChild, true));
	        }
	    };
	    FocusZone.prototype._onFocus = function (ev) {
	        var onActiveElementChanged = this.props.onActiveElementChanged;
	        if (this._isImmediateDescendantOfZone(ev.target)) {
	            this._activeElement = ev.target;
	            this._setFocusAlignment(this._activeElement);
	        }
	        else {
	            var parentElement = ev.target;
	            while (parentElement && parentElement !== this.refs.root) {
	                if (focus_1.isElementTabbable(parentElement) && this._isImmediateDescendantOfZone(parentElement)) {
	                    this._activeElement = parentElement;
	                    break;
	                }
	                parentElement = parentElement.parentElement;
	            }
	        }
	        if (onActiveElementChanged) {
	            onActiveElementChanged(this._activeElement, ev);
	        }
	    };
	    /** Handle global tab presses so that we can patch tabindexes on the fly. */
	    FocusZone.prototype._onKeyDownCapture = function (ev) {
	        if (ev.which === KeyCodes_1.KeyCodes.tab) {
	            this._updateTabIndexes();
	        }
	    };
	    FocusZone.prototype._onMouseDown = function (ev) {
	        var disabled = this.props.disabled;
	        if (disabled) {
	            return;
	        }
	        var target = ev.target;
	        var path = [];
	        while (target && target !== this.refs.root) {
	            path.push(target);
	            target = target.parentElement;
	        }
	        while (path.length) {
	            target = path.pop();
	            if (focus_1.isElementFocusZone(target)) {
	                break;
	            }
	            else if (target && focus_1.isElementTabbable(target)) {
	                target.tabIndex = 0;
	                this._setFocusAlignment(target, true, true);
	            }
	        }
	    };
	    /** Handle the keystrokes. */
	    FocusZone.prototype._onKeyDown = function (ev) {
	        var _a = this.props, direction = _a.direction, disabled = _a.disabled, isInnerZoneKeystroke = _a.isInnerZoneKeystroke;
	        if (disabled) {
	            return;
	        }
	        if (isInnerZoneKeystroke &&
	            this._isImmediateDescendantOfZone(ev.target) &&
	            isInnerZoneKeystroke(ev)) {
	            // Try to focus
	            var innerZone = this._getFirstInnerZone();
	            if (!innerZone || !innerZone.focus()) {
	                return;
	            }
	        }
	        else {
	            switch (ev.which) {
	                case KeyCodes_1.KeyCodes.left:
	                    if (direction !== FocusZone_Props_1.FocusZoneDirection.vertical && this._moveFocusLeft()) {
	                        break;
	                    }
	                    return;
	                case KeyCodes_1.KeyCodes.right:
	                    if (direction !== FocusZone_Props_1.FocusZoneDirection.vertical && this._moveFocusRight()) {
	                        break;
	                    }
	                    return;
	                case KeyCodes_1.KeyCodes.up:
	                    if (direction !== FocusZone_Props_1.FocusZoneDirection.horizontal && this._moveFocusUp()) {
	                        break;
	                    }
	                    return;
	                case KeyCodes_1.KeyCodes.down:
	                    if (direction !== FocusZone_Props_1.FocusZoneDirection.horizontal && this._moveFocusDown()) {
	                        break;
	                    }
	                    return;
	                case KeyCodes_1.KeyCodes.home:
	                    var firstChild = this.refs.root.firstChild;
	                    if (this._focusElement(focus_1.getNextElement(this.refs.root, firstChild, true))) {
	                        break;
	                    }
	                    return;
	                case KeyCodes_1.KeyCodes.end:
	                    var lastChild = this.refs.root.lastChild;
	                    if (this._focusElement(focus_1.getPreviousElement(this.refs.root, lastChild, true, true, true))) {
	                        break;
	                    }
	                    return;
	                case KeyCodes_1.KeyCodes.enter:
	                    if (this._tryInvokeClickForFocusable(ev.target)) {
	                        break;
	                    }
	                    return;
	                default:
	                    return;
	            }
	        }
	        ev.preventDefault();
	        ev.stopPropagation();
	    };
	    /** Walk up the dom try to find a focusable element. */
	    FocusZone.prototype._tryInvokeClickForFocusable = function (target) {
	        do {
	            if (target.tagName === 'BUTTON' || target.tagName === 'A') {
	                return false;
	            }
	            if (this._isImmediateDescendantOfZone(target) &&
	                target.getAttribute(IS_FOCUSABLE_ATTRIBUTE) === 'true' &&
	                target.getAttribute(IS_ENTER_DISABLED_ATTRIBUTE) !== 'true') {
	                EventGroup_1.EventGroup.raise(target, 'click', null, true);
	                return true;
	            }
	            target = target.parentElement;
	        } while (target !== this.refs.root);
	        return false;
	    };
	    /** Traverse to find first child zone. */
	    FocusZone.prototype._getFirstInnerZone = function (rootElement) {
	        rootElement = rootElement || this._activeElement || this.refs.root;
	        var child = rootElement.firstElementChild;
	        while (child) {
	            if (focus_1.isElementFocusZone(child)) {
	                return _allInstances[child.getAttribute(FOCUSZONE_ID_ATTRIBUTE)];
	            }
	            var match = this._getFirstInnerZone(child);
	            if (match) {
	                return match;
	            }
	            child = child.nextElementSibling;
	        }
	        return null;
	    };
	    FocusZone.prototype._moveFocus = function (isForward, getDistanceFromCenter, ev) {
	        var element = this._activeElement;
	        var candidateDistance = -1;
	        var candidateElement;
	        var changedFocus = false;
	        var isBidirectional = this.props.direction === FocusZone_Props_1.FocusZoneDirection.bidirectional;
	        if (!this._activeElement) {
	            return;
	        }
	        var activeRect = isBidirectional ? this._activeElement.getBoundingClientRect() : null;
	        do {
	            element = isForward ?
	                focus_1.getNextElement(this.refs.root, element) :
	                focus_1.getPreviousElement(this.refs.root, element);
	            if (isBidirectional) {
	                if (element) {
	                    var targetRect = element.getBoundingClientRect();
	                    var elementDistance = getDistanceFromCenter(activeRect, targetRect);
	                    if (elementDistance > -1 && (candidateDistance === -1 || elementDistance < candidateDistance)) {
	                        candidateDistance = elementDistance;
	                        candidateElement = element;
	                    }
	                    if (candidateDistance >= 0 && elementDistance < 0) {
	                        break;
	                    }
	                }
	            }
	            else {
	                candidateElement = element;
	                break;
	            }
	        } while (element);
	        // Focus the closest candidate
	        if (candidateElement && candidateElement !== this._activeElement) {
	            changedFocus = true;
	            this._focusElement(candidateElement);
	        }
	        else if (this.props.isCircularNavigation) {
	            if (isForward) {
	                return this._focusElement(focus_1.getNextElement(this.refs.root, this.refs.root.firstElementChild, true));
	            }
	            else {
	                return this._focusElement(focus_1.getPreviousElement(this.refs.root, this.refs.root.lastElementChild, true, true, true));
	            }
	        }
	        return changedFocus;
	    };
	    FocusZone.prototype._moveFocusDown = function () {
	        var targetTop = -1;
	        var leftAlignment = this._focusAlignment.left;
	        if (this._moveFocus(true, function (activeRect, targetRect) {
	            var distance = -1;
	            if ((targetTop === -1 && targetRect.top >= activeRect.bottom) ||
	                (targetRect.top === targetTop)) {
	                targetTop = targetRect.top;
	                distance = Math.abs((targetRect.left + (targetRect.width / 2)) - leftAlignment);
	            }
	            return distance;
	        })) {
	            this._setFocusAlignment(this._activeElement, false, true);
	            return true;
	        }
	        return false;
	    };
	    FocusZone.prototype._moveFocusUp = function () {
	        var targetTop = -1;
	        var leftAlignment = this._focusAlignment.left;
	        if (this._moveFocus(false, function (activeRect, targetRect) {
	            var distance = -1;
	            if ((targetTop === -1 && targetRect.bottom <= activeRect.top) ||
	                (targetRect.top === targetTop)) {
	                targetTop = targetRect.top;
	                distance = Math.abs((targetRect.left + (targetRect.width / 2)) - leftAlignment);
	            }
	            return distance;
	        })) {
	            this._setFocusAlignment(this._activeElement, false, true);
	            return true;
	        }
	        return false;
	    };
	    FocusZone.prototype._moveFocusLeft = function () {
	        var _this = this;
	        var targetTop = -1;
	        var topAlignment = this._focusAlignment.top;
	        if (this._moveFocus(rtl_1.getRTL(), function (activeRect, targetRect) {
	            var distance = -1;
	            if ((targetTop === -1 &&
	                targetRect.right <= activeRect.right &&
	                (_this.props.direction === FocusZone_Props_1.FocusZoneDirection.horizontal || targetRect.top === activeRect.top)) ||
	                (targetRect.top === targetTop)) {
	                targetTop = targetRect.top;
	                distance = Math.abs((targetRect.top + (targetRect.height / 2)) - topAlignment);
	            }
	            return distance;
	        })) {
	            this._setFocusAlignment(this._activeElement, true, false);
	            return true;
	        }
	        return false;
	    };
	    FocusZone.prototype._moveFocusRight = function () {
	        var _this = this;
	        var targetTop = -1;
	        var topAlignment = this._focusAlignment.top;
	        if (this._moveFocus(!rtl_1.getRTL(), function (activeRect, targetRect) {
	            var distance = -1;
	            if ((targetTop === -1 &&
	                targetRect.left >= activeRect.left &&
	                (_this.props.direction === FocusZone_Props_1.FocusZoneDirection.horizontal || targetRect.top === activeRect.top)) ||
	                (targetRect.top === targetTop)) {
	                targetTop = targetRect.top;
	                distance = Math.abs((targetRect.top + (targetRect.height / 2)) - topAlignment);
	            }
	            return distance;
	        })) {
	            this._setFocusAlignment(this._activeElement, true, false);
	            return true;
	        }
	        return false;
	    };
	    FocusZone.prototype._focusElement = function (element) {
	        if (element) {
	            if (this._activeElement) {
	                this._activeElement.tabIndex = -1;
	            }
	            this._activeElement = element;
	            if (element) {
	                if (!this._focusAlignment) {
	                    this._setFocusAlignment(element, true, true);
	                }
	                this._activeElement.tabIndex = 0;
	                element.focus();
	                return true;
	            }
	        }
	        return false;
	    };
	    FocusZone.prototype._setFocusAlignment = function (element, isHorizontal, isVertical) {
	        if (this.props.direction === FocusZone_Props_1.FocusZoneDirection.bidirectional &&
	            (!this._focusAlignment || isHorizontal || isVertical)) {
	            var rect = element.getBoundingClientRect();
	            var left = rect.left + (rect.width / 2);
	            var top_1 = rect.top + (rect.height / 2);
	            if (!this._focusAlignment) {
	                this._focusAlignment = { left: left, top: top_1 };
	            }
	            if (isHorizontal) {
	                this._focusAlignment.left = left;
	            }
	            if (isVertical) {
	                this._focusAlignment.top = top_1;
	            }
	        }
	    };
	    FocusZone.prototype._isImmediateDescendantOfZone = function (element) {
	        var parentElement = element.parentElement;
	        while (parentElement && parentElement !== this.refs.root && parentElement !== document.body) {
	            if (focus_1.isElementFocusZone(parentElement)) {
	                return false;
	            }
	            parentElement = parentElement.parentElement;
	        }
	        return true;
	    };
	    FocusZone.prototype._updateTabIndexes = function (element) {
	        if (!element) {
	            element = this.refs.root;
	            if (this._activeElement && !element.contains(this._activeElement)) {
	                this._activeElement = null;
	            }
	        }
	        var childNodes = element.children;
	        for (var childIndex = 0; childNodes && childIndex < childNodes.length; childIndex++) {
	            var child = childNodes[childIndex];
	            if (!focus_1.isElementFocusZone(child)) {
	                if (focus_1.isElementTabbable(child)) {
	                    if (this.props.disabled) {
	                        child.setAttribute(TABINDEX, '-1');
	                    }
	                    else if (!this._isInnerZone && (!this._activeElement || this._activeElement === child)) {
	                        this._activeElement = child;
	                        if (child.getAttribute(TABINDEX) !== '0') {
	                            child.setAttribute(TABINDEX, '0');
	                        }
	                    }
	                    else if (child.getAttribute(TABINDEX) !== '-1') {
	                        child.setAttribute(TABINDEX, '-1');
	                    }
	                }
	                else if (child.tagName === 'svg' && child.getAttribute('focusable') !== 'false') {
	                    // Disgusting IE hack. Sad face.
	                    child.setAttribute('focusable', 'false');
	                }
	                this._updateTabIndexes(child);
	            }
	        }
	    };
	    FocusZone.defaultProps = {
	        isCircularNavigation: false,
	        direction: FocusZone_Props_1.FocusZoneDirection.bidirectional
	    };
	    return FocusZone;
	}(React.Component));
	exports.FocusZone = FocusZone;
	


/***/ },
/* 183 */
/***/ function(module, exports) {

	"use strict";
	(function (FocusZoneDirection) {
	    /** Only react to up/down arrows. */
	    FocusZoneDirection[FocusZoneDirection["vertical"] = 0] = "vertical";
	    /** Only react to left/right arrows. */
	    FocusZoneDirection[FocusZoneDirection["horizontal"] = 1] = "horizontal";
	    /** React to all arrows. */
	    FocusZoneDirection[FocusZoneDirection["bidirectional"] = 2] = "bidirectional";
	})(exports.FocusZoneDirection || (exports.FocusZoneDirection = {}));
	var FocusZoneDirection = exports.FocusZoneDirection;
	


/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var KeyCodes_1 = __webpack_require__(156);
	var _isRTL;
	/**
	 * Gets the rtl state of the page (returns true if in rtl.)
	 */
	function getRTL() {
	    if (_isRTL === undefined) {
	        _isRTL = document.documentElement.getAttribute('dir') === 'rtl';
	    }
	    return _isRTL;
	}
	exports.getRTL = getRTL;
	/**
	 * Sets the rtl state of the page (by adjusting the dir attribute of the html element.)
	 */
	function setRTL(isRTL) {
	    document.documentElement.setAttribute('dir', isRTL ? 'rtl' : 'ltr');
	    _isRTL = isRTL;
	}
	exports.setRTL = setRTL;
	/**
	 * Returns the given key, but flips right/left arrows if necessary.
	 */
	function getRTLSafeKeyCode(key) {
	    if (getRTL()) {
	        if (key === KeyCodes_1.KeyCodes.left) {
	            key = KeyCodes_1.KeyCodes.right;
	        }
	        else if (key === KeyCodes_1.KeyCodes.right) {
	            key = KeyCodes_1.KeyCodes.left;
	        }
	    }
	    return key;
	}
	exports.getRTLSafeKeyCode = getRTLSafeKeyCode;
	


/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(186);
	


/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	var content = __webpack_require__(187);
	var loader = __webpack_require__(77);
	
	if(typeof content === "string") content = [[module.id, content]];
	
	// add the styles to the DOM
	for (var i = 0; i < content.length; i++) loader.loadStyles(content[i][1]);
	
	if(content.locals) module.exports = content.locals;

/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(76)();
	// imports
	
	
	// module
	exports.push([module.id, ".CanvasControlToolbar{position:absolute;top:0;width:32px;z-index:1}[dir=ltr] .CanvasControlToolbar{left:-40px}[dir=rtl] .CanvasControlToolbar{right:-40px}[dir=ltr] .CanvasControlToolbar{padding-right:10px}[dir=rtl] .CanvasControlToolbar{padding-left:10px}", ""]);
	
	// exports


/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var React = __webpack_require__(82);
	var FocusZone_1 = __webpack_require__(180);
	var sp_client_base_1 = __webpack_require__(69);
	var sp_client_base_2 = __webpack_require__(69);
	var odsp_utilities_bundle_1 = __webpack_require__(6);
	var CanvasControlType_1 = __webpack_require__(135);
	var ToolboxGroup_1 = __webpack_require__(189);
	var ToolboxItem_1 = __webpack_require__(193);
	var ToolboxItemClassifier_1 = __webpack_require__(197);
	var CanvasA11y_1 = __webpack_require__(117);
	__webpack_require__(198);
	var CanvasStrings_resx_1 = __webpack_require__(110);
	/**
	 * @todo [VSO:SPPPlat] #231682
	 */
	var NEWSFEED_WEBPART_FLIGHT = 792;
	var NEWSREEL_WEBPART_FLIGHT = 790;
	var NEWSFEED_ID = 'a5df8fdf-b508-4b66-98a6-d83bc2597f63';
	var NEWSREEL_ID = '0ef418ba-5d19-4ade-9db0-b339873291d0';
	var Toolbox = (function (_super) {
	    __extends(Toolbox, _super);
	    function Toolbox(props, context) {
	        _super.call(this, props, context);
	        this._handleKeyDownCapture = this._handleKeyDownCapture.bind(this);
	        this.state = {
	            verticalPosition: props.verticalPosition
	        };
	    }
	    Toolbox.prototype.componentDidMount = function () {
	        this._domNode.addEventListener('keydown', this._handleKeyDownCapture, true);
	    };
	    Toolbox.prototype.componentDidUpdate = function (prevProps) {
	        if (this.props.isOpen !== prevProps.isOpen) {
	            if (this.props.isOpen) {
	                this.context.store.a11yManager.saveState();
	                this.context.store.a11yManager.navigateTo(this._domNode);
	                // This assumes there is one non-webpart item (RTE)
	                var localizedItemCount = odsp_utilities_bundle_1.StringHelper.formatWithLocalizedCountValue(CanvasStrings_resx_1.default.CanvasItems, CanvasStrings_resx_1.default.CanvasItemsInterval, this.props.toolboxItems.length + 1);
	                var message = odsp_utilities_bundle_1.StringHelper.format(CanvasStrings_resx_1.default.ToolboxNavigationArrowKeys, localizedItemCount);
	                this.context.store.a11yManager.ariaAlert(message);
	            }
	            else {
	                this.context.store.a11yManager.clearState();
	            }
	        }
	    };
	    Toolbox.prototype.componentWillReceiveProps = function (nextProps) {
	        if (nextProps.isOpen && this.context.store.scrollableParent) {
	            // Use the scrollableParent as our viewport
	            var _a = this.context.store.scrollableParent.getBoundingClientRect(), top_1 = _a.top, bottom = _a.bottom;
	            var toolboxRowCount = Math.min(Math.ceil(nextProps.toolboxItems.length + 1 / 3), 3);
	            var toolboxHeight = toolboxRowCount * 110;
	            var canvasTop = this.context.store.canvasElement.getBoundingClientRect().top;
	            var hintOffset = 43 - (toolboxRowCount * 5);
	            var verticalPosition = nextProps.verticalPosition;
	            // Render Toolbox above hint if there is no room below the hint and there is room above
	            if ((verticalPosition + toolboxHeight + hintOffset + canvasTop > bottom) &&
	                (verticalPosition - toolboxHeight - hintOffset > top_1)) {
	                verticalPosition -= toolboxHeight + hintOffset;
	            }
	            this.setState({ verticalPosition: verticalPosition });
	        }
	    };
	    Toolbox.prototype.render = function () {
	        var _this = this;
	        var _a = this.props, isOpen = _a.isOpen, onItemClick = _a.onItemClick, toolboxItems = _a.toolboxItems;
	        var classifier = new ToolboxItemClassifier_1.default();
	        for (var _i = 0, toolboxItems_1 = toolboxItems; _i < toolboxItems_1.length; _i++) {
	            var item = toolboxItems_1[_i];
	            /* tslint:disable:no-any */
	            var webPartManifest = item.itemProps.webPartManifest;
	            /* tslint:enable:no-any */
	            /**
	             * Component manifests will be sent to the client regardless of flight status.
	             * Currently checking the newsreel flight on client to hide the web part from the Toolbox
	             * if the flight is not on. @todo [VSO:SPPPlat] #231682
	             */
	            if ((webPartManifest.id === NEWSREEL_ID && !sp_client_base_2.SPFlight.isEnabled(NEWSREEL_WEBPART_FLIGHT)) ||
	                (webPartManifest.id === NEWSFEED_ID && !sp_client_base_2.SPFlight.isEnabled(NEWSFEED_WEBPART_FLIGHT))) {
	                continue;
	            }
	            item.key = webPartManifest.id;
	            item.onClick = onItemClick;
	            item.msIconName = webPartManifest.preconfiguredEntries[0].officeFabricIconFontName;
	            classifier.registerItem(webPartManifest.id, item);
	        }
	        // Construct the featured toolbox group
	        var featuredItemViews = [];
	        // First add the RTE to featured items
	        featuredItemViews.push(React.createElement(ToolboxItem_1.default, {description: CanvasStrings_resx_1.default.TextWebpartDescription, displayName: CanvasStrings_resx_1.default.TextWebPartDisplayName, itemProps: { controlType: CanvasControlType_1.default.RTE, displayMode: sp_client_base_1.DisplayMode.Edit, id: undefined }, msIconName: 'Font', onClick: onItemClick}));
	        // next get the featured items and add them to the toolbox
	        var featuredItemProps = classifier.classify(true);
	        featuredItemProps.forEach(function (item) {
	            featuredItemViews.push(React.createElement(ToolboxItem_1.default, React.__spread({}, item)));
	        });
	        // Add them to the featured group
	        var featuredGroup = React.createElement(ToolboxGroup_1.default, {groupName: CanvasStrings_resx_1.default.ToolboxGroupNameFeatured, key: CanvasStrings_resx_1.default.ToolboxGroupNameFeatured, hasHeader: true}, featuredItemViews);
	        // Construct the non featured toolbox group
	        var nonFeaturedItemViews = [];
	        var nonFeaturedItemProps = classifier.classify(false, function (item1, item2) {
	            return item1.displayName.localeCompare(item2.displayName);
	        });
	        nonFeaturedItemProps.forEach(function (item) {
	            nonFeaturedItemViews.push(React.createElement(ToolboxItem_1.default, React.__spread({}, item)));
	        });
	        // Add them to the non featured group
	        var nonFeaturedGroup = React.createElement(ToolboxGroup_1.default, {groupName: CanvasStrings_resx_1.default.ToolboxGroupNameNonFeatured, key: CanvasStrings_resx_1.default.ToolboxGroupNameNonFeatured, hasHeader: false}, nonFeaturedItemViews);
	        return (React.createElement("div", {role: 'toolbar', className: 'CanvasToolbox', ref: function (ref) { return _this._domNode = ref; }, style: { display: isOpen ? 'block' : 'none', top: this.state.verticalPosition }}, React.createElement(FocusZone_1.FocusZone, {direction: FocusZone_1.FocusZoneDirection.horizontal, isCircularNavigation: true}, featuredGroup, nonFeaturedGroup)));
	    };
	    Toolbox.prototype._handleKeyDownCapture = function (e) {
	        if (CanvasA11y_1.isEscape(e)) {
	            this.context.store.a11yManager.restoreState();
	            this.context.store.closeToolbox();
	            e.stopPropagation();
	            e.preventDefault();
	        }
	        else if (CanvasA11y_1.isTab(e)) {
	            e.stopPropagation();
	            e.preventDefault();
	        }
	    };
	    Toolbox.contextTypes = {
	        store: React.PropTypes.object.isRequired
	    };
	    return Toolbox;
	}(React.Component));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = Toolbox;
	


/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var React = __webpack_require__(82);
	__webpack_require__(190);
	function ToolboxGroup(props) {
	    var banner = props.hasHeader ?
	        React.createElement("header", {className: 'CanvasToolboxItemsGroup-header'}, props.groupName) :
	        React.createElement("hr", {className: 'CanvasToolboxItemsGroup-divider'});
	    return (React.createElement("section", {"aria-label": props.groupName, role: 'group', className: 'CanvasToolboxItemsGroup'}, banner, React.createElement("div", {className: 'CanvasToolboxItemsGroup-items'}, props.children)));
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = ToolboxGroup;
	


/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(191);
	


/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	var content = __webpack_require__(192);
	var loader = __webpack_require__(77);
	
	if(typeof content === "string") content = [[module.id, content]];
	
	// add the styles to the DOM
	for (var i = 0; i < content.length; i++) loader.loadStyles(content[i][1]);
	
	if(content.locals) module.exports = content.locals;

/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(76)();
	// imports
	
	
	// module
	exports.push([module.id, ".CanvasToolboxItemsGroup{clear:both}.CanvasToolboxItemsGroup-header{background-color:\"[theme:neutralLighter, default: #f4f4f4]\";color:\"[theme:neutralPrimary, default: #333333]\";font-family:\"Segoe UI Semibold WestEuropean\",\"Segoe UI Semibold\",\"Segoe WP Semibold\",\"Segoe UI\",\"Segoe WP\",Tahoma,Arial,sans-serif;font-size:12px;height:32px;letter-spacing:1px;line-height:32px;padding:0 12px}.CanvasToolboxItemsGroup-divider{margin:0;border:0;border-top:1px solid \"[theme:neutralLight, default: #eaeaea]\";color:\"[theme:neutralLight, default: #eaeaea]\"}", ""]);
	
	// exports


/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var React = __webpack_require__(82);
	__webpack_require__(194);
	function ToolboxItem(props) {
	    return (React.createElement("button", {role: 'option', className: 'CanvasToolboxItem', title: props.description, onClick: function () { return props.onClick(JSON.parse(JSON.stringify(props.itemProps))); }}, React.createElement("span", {className: "CanvasToolboxItem-icon ms-Icon ms-Icon--" + props.msIconName}), React.createElement("span", {className: 'CanvasToolboxItem-title'}, props.displayName)));
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = ToolboxItem;
	


/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(195);
	


/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	var content = __webpack_require__(196);
	var loader = __webpack_require__(77);
	
	if(typeof content === "string") content = [[module.id, content]];
	
	// add the styles to the DOM
	for (var i = 0; i < content.length; i++) loader.loadStyles(content[i][1]);
	
	if(content.locals) module.exports = content.locals;

/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(76)();
	// imports
	
	
	// module
	exports.push([module.id, ".CanvasToolboxItem{background-color:transparent;border:1px solid transparent;float:left;height:88px;overflow:hidden;padding:0;width:33.333%}.CanvasToolboxItem:hover{background-color:\"[theme:themeLighterAlt, default:#eff6fc]\";cursor:pointer}.CanvasToolboxItem:hover .CanvasToolboxItem-icon,.CanvasToolboxItem:hover .CanvasToolboxItem-title{color:\"[theme:themeDarkAlt, default:#106ebe]\"}.CanvasToolboxItem-icon{color:\"[theme:neutralPrimary, default: #333333]\";display:block;font-size:28px;line-height:48px}.CanvasToolboxItem-title{color:\"[theme:neutralSecondary, default: #666666]\";display:block;font-family:\"Segoe UI Regular WestEuropean\",\"Segoe UI\",\"Segoe WP\",Tahoma,Arial,sans-serif;font-size:13px;padding:0 8px;text-align:center}", ""]);
	
	// exports


/***/ },
/* 197 */
/***/ function(module, exports) {

	/**
	 * @Copyright (c) Microsoft Corporation.  All rights reserved.
	 *
	 * @file Classifies ToolBox items into Featured and NonFeatured items
	 */
	"use strict";
	var FEATURED_ITEM_IDS = [
	    'd1d91016-032f-456d-98a4-721247c305e8',
	    'b7dd04e1-19ce-4b24-9132-b60a1c2b910d',
	    '275c0095-a77e-4f6d-a2a0-6a7626911518',
	    '490d7c76-1824-45b2-9de3-676421c997fa',
	    'daf0b71c-6de8-4ef7-b511-faae7c388708' // Highlighted content
	];
	var GENERIC_ITEM_ID = '00000000-0000-0000-0000-000000000000';
	/**
	 * ToolBoxItemClassifier classifies tool box items into Featured and non-featured
	 */
	var ToolBoxItemClassifier = (function () {
	    /**
	     * Initializes a new instance of the ToolBoxItemClassifier
	     */
	    function ToolBoxItemClassifier() {
	        var _this = this;
	        this._toolBoxItemIdToPropsMap = new Map();
	        FEATURED_ITEM_IDS.forEach(function (id) {
	            _this._toolBoxItemIdToPropsMap.set(id, []);
	        });
	        this._toolBoxItemIdToPropsMap.set(GENERIC_ITEM_ID, []);
	    }
	    /**
	     * Registers a new item with the Classifier
	     * @param itemId represents the item Id
	     * @param itemProps represents the item properties
	     */
	    ToolBoxItemClassifier.prototype.registerItem = function (itemId, itemProps) {
	        var registeredItemProps = this._toolBoxItemIdToPropsMap.get(itemId);
	        if (Array.isArray(registeredItemProps)) {
	            registeredItemProps.push(itemProps);
	        }
	        else {
	            // If not registered, then place item in generic item bucket
	            this._toolBoxItemIdToPropsMap.get(GENERIC_ITEM_ID).push(itemProps);
	        }
	    };
	    /**
	     * Gets items classified by a specific type
	     * @param isFeatured determines the classification type
	     * @param sortPredicate is optional sorting predicate
	     * @returns items classified by a particular type
	     */
	    ToolBoxItemClassifier.prototype.classify = function (isFeatured, sortPredicate) {
	        var toolBoxItemProps = [];
	        if (isFeatured) {
	            this._toolBoxItemIdToPropsMap.forEach(function (items, id) {
	                if (id !== GENERIC_ITEM_ID && items.length > 0) {
	                    toolBoxItemProps.push(items[0]);
	                }
	            });
	        }
	        else {
	            toolBoxItemProps = this._toolBoxItemIdToPropsMap.get(GENERIC_ITEM_ID);
	        }
	        if (Boolean(sortPredicate)) {
	            toolBoxItemProps = toolBoxItemProps.sort(sortPredicate);
	        }
	        return toolBoxItemProps;
	    };
	    return ToolBoxItemClassifier;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = ToolBoxItemClassifier;
	


/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(199);
	


/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	var content = __webpack_require__(200);
	var loader = __webpack_require__(77);
	
	if(typeof content === "string") content = [[module.id, content]];
	
	// add the styles to the DOM
	for (var i = 0; i < content.length; i++) loader.loadStyles(content[i][1]);
	
	if(content.locals) module.exports = content.locals;

/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(76)();
	// imports
	
	
	// module
	exports.push([module.id, ".CanvasToolbox{background:\"[theme:white, default: #ffffff]\";border:1px solid #d6d6d6;box-shadow:0 0 8px 0 rgba(0,0,0,.2);box-sizing:border-box;left:50%;margin-left:-146px;margin-top:26px;max-height:330px;overflow-y:auto;position:absolute;width:292px;z-index:10}.CanvasToolbox .ms-Icon{font-family:sp-MDL2}", ""]);
	
	// exports


/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var sp_client_base_1 = __webpack_require__(69);
	var CanvasWebPartHost_1 = __webpack_require__(202);
	var CanvasControlType_1 = __webpack_require__(135);
	var ClientSideWebPartManager_1 = __webpack_require__(203);
	var PropertyPaneDefinitions_1 = __webpack_require__(3);
	var CanvasStore = (function () {
	    function CanvasStore(serviceScope, render, mode, serializedCanvas, handleCanvasChanged, scrollThreshold) {
	        sp_client_base_1.Validate.isNotNullOrUndefined(serviceScope, 'serviceScope');
	        sp_client_base_1.Validate.isNotNullOrUndefined(render, 'render');
	        sp_client_base_1.Validate.isNotNullOrUndefined(mode, 'mode');
	        this._addReference = this._addReference.bind(this);
	        this._notifyChanged = this._notifyChanged.bind(this);
	        this.addControl = this.addControl.bind(this);
	        this.closeToolbox = this.closeToolbox.bind(this);
	        this.deleteControl = this.deleteControl.bind(this);
	        this.handleConfigureButtonClicked = this.handleConfigureButtonClicked.bind(this);
	        this.handleDeleteButtonClicked = this.handleDeleteButtonClicked.bind(this);
	        this.handleDeleteDialogConfirmation = this.handleDeleteDialogConfirmation.bind(this);
	        this.handleDeleteDialogDismiss = this.handleDeleteDialogDismiss.bind(this);
	        this.handleWindowBlur = this.handleWindowBlur.bind(this);
	        this.reclaimFocus = this.reclaimFocus.bind(this);
	        this.scrollIntoView = this.scrollIntoView.bind(this);
	        this.openToolbox = this.openToolbox.bind(this);
	        this._render = render;
	        this._controls = new Map();
	        this._controlsProps = [];
	        this._displayMode = mode;
	        this._handleCanvasChanged = handleCanvasChanged;
	        this._isDeleteDialogOpen = false;
	        this._pollActiveElement = this._pollActiveElement.bind(this);
	        this._scrollThreshold = scrollThreshold || 0;
	        this._webPartManager = new ClientSideWebPartManager_1.default(new CanvasWebPartHost_1.default(serviceScope, this.scrollIntoView.bind(this, 'full'), handleCanvasChanged, this.reclaimFocus));
	        this._toolboxProps = {
	            isOpen: false,
	            onItemClick: this.addControl.bind(this, 0),
	            row: undefined,
	            toolboxItems: [],
	            verticalPosition: undefined
	        };
	        if (this._displayMode === sp_client_base_1.DisplayMode.Edit) {
	            this.webPartManager.fetchWebParts();
	        }
	    }
	    Object.defineProperty(CanvasStore.prototype, "addReference", {
	        get: function () {
	            return this._addReference;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CanvasStore.prototype, "a11yManager", {
	        get: function () {
	            return this._a11yManager;
	        },
	        set: function (elem) {
	            this._a11yManager = elem;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CanvasStore.prototype, "canvasElement", {
	        get: function () {
	            return this._canvasElement;
	        },
	        set: function (elem) {
	            this._canvasElement = elem;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CanvasStore.prototype, "controlsProps", {
	        get: function () {
	            return this._controlsProps;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CanvasStore.prototype, "deletedRow", {
	        get: function () {
	            return this._deletedRow;
	        },
	        set: function (row) {
	            this._deletedRow = row;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CanvasStore.prototype, "displayMode", {
	        get: function () {
	            return this._displayMode;
	        },
	        set: function (newMode) {
	            if (this._displayMode !== newMode) {
	                this._displayMode = newMode;
	                for (var _i = 0, _a = this.controlsProps; _i < _a.length; _i++) {
	                    var props = _a[_i];
	                    this._controls.get(props.id).setDisplayMode(newMode);
	                }
	                if (this._displayMode === sp_client_base_1.DisplayMode.Read) {
	                    this._selectedControlId = undefined;
	                    this.webPartManager.configureStart(undefined, PropertyPaneDefinitions_1.PropertyPaneState.Close);
	                }
	                if (this._displayMode === sp_client_base_1.DisplayMode.Edit) {
	                    this.webPartManager.fetchWebParts();
	                }
	                this._render();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CanvasStore.prototype, "hoveredControlId", {
	        /**
	         * The hoveredControlId keeps track of which control the pointer is currently over.
	         * It is used as a workaround to track pointer events on web parts that have IFrames.
	         */
	        set: function (id) {
	            this._hoveredControlId = id;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CanvasStore.prototype, "isDeleteDialogOpen", {
	        get: function () {
	            return this._isDeleteDialogOpen;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CanvasStore.prototype, "notifyChanged", {
	        get: function () {
	            return this._notifyChanged;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CanvasStore.prototype, "scrollableParent", {
	        get: function () {
	            return this._scrollableParentElement;
	        },
	        set: function (elem) {
	            this._scrollableParentElement = elem;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CanvasStore.prototype, "scrollThreshold", {
	        get: function () {
	            return this._scrollThreshold;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CanvasStore.prototype, "selectedControlId", {
	        get: function () {
	            return this._selectedControlId;
	        },
	        set: function (id) {
	            if (this._selectedControlId !== id) {
	                this._selectedControlId = id;
	                /**
	                 * If open, change the Property Pane to reflect the new selection. If the new selection is not a web part,
	                 * change the Property Pane to the empty state.
	                 */
	                var control = this._controls.get(id);
	                if (control && control.props.controlType !== CanvasControlType_1.default.WebPartZone) {
	                    this._webPartManager.configureStart(undefined);
	                }
	                else {
	                    this._webPartManager.configureStart(id);
	                }
	                this._render();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CanvasStore.prototype, "toolboxProps", {
	        get: function () {
	            var _this = this;
	            this._toolboxProps.toolboxItems = [];
	            /* tslint:disable:no-any */
	            this._getManifestMap().forEach(function (manifest, cid) {
	                /* tslint:enable:no-any */
	                var itemProps = {
	                    controlType: CanvasControlType_1.default.WebPartZone,
	                    displayMode: sp_client_base_1.DisplayMode.Edit,
	                    id: undefined,
	                    webPartId: cid,
	                    webPartData: undefined,
	                    webPartManifest: manifest
	                };
	                var toolboxItem = {
	                    itemProps: itemProps,
	                    description: manifest.preconfiguredEntries[0].description.default,
	                    displayName: manifest.preconfiguredEntries[0].title.default,
	                    msIconName: manifest.preconfiguredEntries[0].officeFabricIconFontName
	                };
	                _this._toolboxProps.toolboxItems.push(toolboxItem);
	            });
	            return this._toolboxProps;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CanvasStore.prototype, "webPartManager", {
	        get: function () {
	            return this._webPartManager;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    CanvasStore.prototype.addControl = function (row, itemProps) {
	        this._selectedControlId = itemProps.id = sp_client_base_1.Guid.newGuid().toString();
	        this._addControl(row, itemProps);
	        this._render();
	        this._notifyChanged();
	    };
	    CanvasStore.prototype.deleteControl = function (row) {
	        this._deletedRow = row;
	        this._controlsProps.splice(row, 1);
	        if (this._controlsProps.length === 0) {
	            this._webPartManager.configureStart(undefined, PropertyPaneDefinitions_1.PropertyPaneState.Close);
	        }
	        this._render();
	        this._notifyChanged();
	    };
	    CanvasStore.prototype.getControl = function (id) {
	        return this._controls.get(id);
	    };
	    CanvasStore.prototype.openToolbox = function (row, verticalPosition) {
	        if (this._toolboxProps.isOpen) {
	            this.closeToolbox();
	        }
	        this._toolboxProps.isOpen = true;
	        this._toolboxProps.onItemClick = this.addControl.bind(this, row);
	        this._toolboxProps.row = row;
	        this._toolboxProps.verticalPosition = verticalPosition;
	        document.addEventListener('click', this.closeToolbox);
	        this._render();
	    };
	    CanvasStore.prototype.closeToolbox = function () {
	        this._toolboxProps.isOpen = false;
	        this._toolboxProps.row = undefined;
	        document.removeEventListener('click', this.closeToolbox);
	        this._render();
	    };
	    CanvasStore.prototype.handleConfigureButtonClicked = function (id) {
	        var isCurrentlySelected = this.selectedControlId === id;
	        // Only toggle the Property Pane if the currently selected control's configure button is clicked.
	        this._controls.get(id).handleConfigureButtonClicked(isCurrentlySelected);
	        // Set private member so we don't call configureStart twice.
	        this._selectedControlId = id;
	        this._render();
	    };
	    CanvasStore.prototype.handleDeleteButtonClicked = function (row) {
	        this._rowToBeDeleted = row;
	        var control = this._controlsProps[this._rowToBeDeleted];
	        this._selectedControlId = control.id;
	        this._webPartManager.configureStart(control.controlType === CanvasControlType_1.default.WebPartZone ? this._selectedControlId : undefined);
	        this._isDeleteDialogOpen = true;
	        this._render();
	    };
	    CanvasStore.prototype.handleDeleteDialogConfirmation = function () {
	        var controlProps = this._controlsProps[this._rowToBeDeleted];
	        if (controlProps.controlType === CanvasControlType_1.default.WebPartZone) {
	            this._controls.get(controlProps.id).handleDeleteButtonClicked();
	        }
	        this._isDeleteDialogOpen = false;
	        this.deleteControl(this._rowToBeDeleted);
	    };
	    CanvasStore.prototype.handleDeleteDialogDismiss = function () {
	        this._rowToBeDeleted = undefined;
	        this._isDeleteDialogOpen = false;
	        this._render();
	    };
	    /**
	     * IFrame's swallow pointer events, so this is a workaround to detect when focus has shifted to
	     * an IFrame. Additionally, to compensate for IFrame to IFrame interactions we poll for the document.activeElement.
	     * If document.activeElement is not the same as it was in the last poll then the focus has shifted from the IFrame.
	     * If the new document.activeElement is an IFrame continue polling, otherwise we can stop polling because focus
	     * is back inside of the current document.
	     */
	    CanvasStore.prototype.handleWindowBlur = function (e) {
	        if (this._hoveredControlId && document.activeElement.tagName === 'IFRAME') {
	            this.selectedControlId = this._hoveredControlId;
	            this._oldActiveElement = document.activeElement;
	            // Before setting a new interval clear the last one, this prevents more than one poll to be active.
	            window.clearInterval(this._pollId);
	            this._pollId = window.setInterval(this._pollActiveElement, 250);
	        }
	    };
	    CanvasStore.prototype.deserialize = function (serializedCanvas) {
	        this._controlsProps = [];
	        this._controls = new Map();
	        if (serializedCanvas) {
	            var wrapper = document.createElement('div');
	            wrapper.innerHTML = serializedCanvas;
	            var rows = wrapper.querySelectorAll('[data-sp-canvascontrol]');
	            var rowLength = rows.length;
	            for (var i = 0; i < rowLength; ++i) {
	                var row = rows[i];
	                var controlProps = JSON.parse(decodeURI(row.getAttribute('data-sp-controldata')));
	                controlProps.displayMode = this._displayMode;
	                this._addControl(i, controlProps);
	            }
	        }
	    };
	    CanvasStore.prototype.reclaimFocus = function () {
	        this._controls.get(this._selectedControlId).focus();
	    };
	    /**
	     * If needed, scrolls element into view after the element is added to the Canvas.
	     * Note: Javascript scrollIntoView is not consistent cross-browser
	     *
	     * @param type - Specifies whether to scroll if the 'full' web part is visible or a 'partial' part of the web part
	     *   is visible
	     * @param element - A rendered element inside the Canvas to scroll to
	     * @param duration - The length of time the animation should take. Frames are calculated by duration / delta time.
	     * @param margin - Optional. Margin to be scrolled into view. If not provided, margin is not scrolled into view
	     */
	    CanvasStore.prototype.scrollIntoView = function (type, element, duration, margin) {
	        if (margin === void 0) { margin = 0; }
	        if (!this.scrollableParent || !element) {
	            return;
	        }
	        var viewportHeight = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
	        var frameBottom = Math.min(viewportHeight, this.scrollableParent.getBoundingClientRect().bottom);
	        var elementClientRect = element.getBoundingClientRect();
	        // 'partial' checks bottom to see if the element is partially hidden after adding, if it is scroll into view
	        // 'full checks if the entire web part is hidden, if it is scroll into view
	        if ((type === 'partial' ? elementClientRect.bottom : elementClientRect.top) > frameBottom) {
	            this._scrollElementIntoView(frameBottom, element, duration, margin);
	        }
	    };
	    CanvasStore.prototype.serialize = function () {
	        var body = document.createElement('div');
	        var controlRow = document.createElement('div');
	        controlRow.setAttribute('data-sp-canvascontrol', '');
	        var componentIdElement = document.createElement('div');
	        componentIdElement.setAttribute('data-sp-componentId', '');
	        var htmlPropertiesElement = document.createElement('div');
	        htmlPropertiesElement.setAttribute('data-sp-htmlproperties', '');
	        for (var _i = 0, _a = this._controlsProps; _i < _a.length; _i++) {
	            var control = _a[_i];
	            var row = controlRow.cloneNode();
	            var controlData = this._controls.get(control.id).serialize();
	            if (control.controlType === CanvasControlType_1.default.RTE) {
	                row.innerHTML = controlData.innerHTML;
	            }
	            else if (control.controlType === CanvasControlType_1.default.WebPartZone) {
	                var componentId = componentIdElement.cloneNode();
	                componentId.textContent = controlData.webPartId;
	                var htmlProperties = htmlPropertiesElement.cloneNode();
	                htmlProperties.innerHTML = controlData.webPartData.htmlProperties;
	                row.appendChild(componentId);
	                row.appendChild(htmlProperties);
	            }
	            row.setAttribute('data-sp-controldata', encodeURI(JSON.stringify(controlData)));
	            body.appendChild(row);
	        }
	        var wrapper = document.createElement('div');
	        wrapper.appendChild(body);
	        return wrapper.innerHTML;
	    };
	    CanvasStore.prototype.tryGeneratePreviewImageUrl = function () {
	        var webpartIds = [];
	        for (var _i = 0, _a = this._controlsProps; _i < _a.length; _i++) {
	            var control = _a[_i];
	            if (control.controlType === CanvasControlType_1.default.WebPartZone) {
	                webpartIds.push(control.id);
	            }
	        }
	        return this.webPartManager.tryGeneratePreviewImageUrl(webpartIds);
	    };
	    CanvasStore.prototype._addControl = function (row, itemProps) {
	        if (!itemProps.id) {
	            itemProps.id = sp_client_base_1.Guid.newGuid().toString();
	        }
	        if (itemProps.controlType === CanvasControlType_1.default.WebPartZone &&
	            !itemProps.webPartManifest) {
	            var webPartProps = itemProps;
	            webPartProps.webPartManifest = this._getManifestMap().get(webPartProps.webPartId);
	        }
	        this._controlsProps.splice(row, 0, itemProps);
	    };
	    CanvasStore.prototype._addReference = function (ref) {
	        if (ref) {
	            this._controls.set(ref.props.id, ref);
	        }
	    };
	    /**
	     * Calculates the easing number using the quadratic in-out formula
	     */
	    CanvasStore.prototype._calculateEasing = function (time, start, diff, duration) {
	        time /= duration / 2;
	        if (time < 1) {
	            return diff / 2 * time * time + start;
	        }
	        else {
	            --time;
	            return -diff / 2 * (time * (time - 2) - 1) + start;
	        }
	    };
	    /* tslint:disable:no-any */
	    CanvasStore.prototype._getManifestMap = function () {
	        var tempMap = new Map();
	        var manifests = this._webPartManager.getWebParts();
	        /* tslint:enable:no-any */
	        for (var _i = 0, manifests_1 = manifests; _i < manifests_1.length; _i++) {
	            var manifest = manifests_1[_i];
	            tempMap.set(manifest.id, manifest);
	        }
	        return tempMap;
	    };
	    CanvasStore.prototype._pollActiveElement = function () {
	        var activeElement = document.activeElement;
	        if (activeElement.tagName !== 'IFRAME') {
	            window.clearInterval(this._pollId);
	        }
	        else if (this._oldActiveElement !== activeElement && this._hoveredControlId) {
	            this._oldActiveElement = activeElement;
	            this.selectedControlId = this._hoveredControlId;
	        }
	    };
	    CanvasStore.prototype._scroll = function (start, end, duration, time) {
	        var _this = this;
	        if (time === void 0) { time = 0; }
	        var diff = end - start;
	        var deltaTime = 20;
	        if (time < duration) {
	            requestAnimationFrame(function () {
	                time += deltaTime;
	                _this.scrollableParent.scrollTop = _this._calculateEasing(time, start, diff, duration);
	                _this._scroll(start, end, duration, time);
	            });
	        }
	    };
	    CanvasStore.prototype._scrollElementIntoView = function (frameBottom, element, duration, margin) {
	        var elementClientRect = element.getBoundingClientRect();
	        var scrollPosition = elementClientRect.bottom - this.canvasElement.getBoundingClientRect().top;
	        var frameTop = Math.max(0, this.scrollableParent.getBoundingClientRect().top);
	        var offset = frameTop - frameBottom + this._scrollThreshold + margin;
	        var newScrollTop = scrollPosition + offset + this._scrollThreshold;
	        this._scroll(this.scrollableParent.scrollTop, newScrollTop, duration);
	    };
	    CanvasStore.prototype._notifyChanged = function () {
	        if (this._handleCanvasChanged) {
	            this._handleCanvasChanged();
	        }
	    };
	    return CanvasStore;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = CanvasStore;
	


/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @Copyright (c) Microsoft Corporation.  All rights reserved.
	 *
	 * @file Web part host for the SP Canvas.
	 */
	"use strict";
	var sp_client_base_1 = __webpack_require__(69);
	var PropertyPaneDefinitions_1 = __webpack_require__(3);
	/**
	 * CanvasWebPartHost is the IWebPartHost implementation used by the Canvas. Each Canvas
	 * will instantiate their own CanvasWebPartHost, which means the web parts are scoped by
	 * Canvas.
	 */
	var CanvasWebPartHost = (function () {
	    /**
	     * @param handleCanvasChanged - Optional. Callback invoked when web parts are interacted with.
	     */
	    function CanvasWebPartHost(serviceScope, handleResize, handleCanvasChanged, reclaimFocus) {
	        var _this = this;
	        this._handleCanvasChanged = handleCanvasChanged;
	        this._handleResize = handleResize;
	        this._reclaimFocus = reclaimFocus;
	        this._serviceScope = serviceScope;
	        this.webPartConfigurationEventCallback = this.webPartConfigurationEventCallback.bind(this);
	        serviceScope.whenFinished(function () {
	            _this._environment = serviceScope.consume(sp_client_base_1.environmentServiceKey);
	        });
	    }
	    Object.defineProperty(CanvasWebPartHost.prototype, "serviceScope", {
	        /**
	         * @see IWebPartHost
	         */
	        get: function () {
	            return this._serviceScope;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @see IWebPartHost
	     */
	    CanvasWebPartHost.prototype.setDirty = function (wpInstanceId) {
	        if (this._handleCanvasChanged) {
	            this._handleCanvasChanged();
	        }
	    };
	    /**
	     * @see IWebPartHost
	     */
	    CanvasWebPartHost.prototype.webPartConfigurationEventCallback = function (event) {
	        if (event === PropertyPaneDefinitions_1.WebPartConfigurationEvent.OpenComplete) {
	            /*
	             * Scroll web part back into with a 500ms animation and
	             * 44px additional margin (2 * the _VERTICAL_MARGIN property in CanvasZone)
	             */
	            this._handleResize(document.querySelector('.CanvasZone--selected'), 500, 44);
	        }
	        else if (event === PropertyPaneDefinitions_1.WebPartConfigurationEvent.CloseComplete || event === PropertyPaneDefinitions_1.WebPartConfigurationEvent.LostFocus) {
	            this._reclaimFocus();
	        }
	    };
	    return CanvasWebPartHost;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = CanvasWebPartHost;
	


/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @Copyright (c) Microsoft Corporation.  All rights reserved.
	 *
	 * This file contains code for the ClientSideWebPartManager. The webart host is expected to
	 * load and manage webparts through the webpart manager APIs.
	 */
	'use strict';
	var lodash = __webpack_require__(5);
	var sp_module_loader_1 = __webpack_require__(204);
	var sp_client_base_1 = __webpack_require__(69);
	var odsp_utilities_bundle_1 = __webpack_require__(6);
	var BaseClientSideWebPart_1 = __webpack_require__(4);
	var ClientSideWebPartStatusRenderer_1 = __webpack_require__(205);
	var EventAggregator_1 = __webpack_require__(85);
	var Utils_1 = __webpack_require__(206);
	var PropertyPaneDefinitions_1 = __webpack_require__(3);
	var propertyPaneController_1 = __webpack_require__(207);
	var sp_client_base_2 = __webpack_require__(69);
	var Strings_resx_1 = __webpack_require__(71);
	var WebPartContext_1 = __webpack_require__(230);
	/**
	 * The ClientSideWebPartManager is expected to be the external world interface to client side webparts. Each
	 * host is expected to create an instance of this class and manage loading of all webparts in that host
	 * through that one instance. e.g. On one page, if there are multiple Canvas objects, each one could have
	 * one instance of this class. If the page hosts webparts without the Canvas, then the page can have an
	 * instance of this class. Overall this class is expected to provide the following purpose:
	 *
	 *    - Orchestrates loading of one or more webparts in a host.
	 *    - It takes care of loading webpart dependencies asynchronously. Each webpart loads completely
	 *      independently of the other webparts in the host.
	 *    - Keep a reference to all the loaded webparts and help provide bulk operations on the webparts.
	 *    - Help manage memory leak type issues in one place.
	 *    - Integrate the webparts with the PropertyPane and other external entities.
	 *    - Help troubleshoot webparts during escalations.
	 *
	 *     loadWebPart   Load webpart in the provided host container. The host container can be a classic sharepoint page,
	 *                   modern authoring canvas, or a custom sharepoint page.
	 *     setDisplayMode    Switch mode of all webparts
	 *     serialize     Return a serialized context of all webparts
	 *     raiseEvent    Raise an event to the associated event aggregator
	 *
	 */
	var ClientSideWebPartManager = (function () {
	    /**
	     * Initialize the ClientSideWebPartManager.
	     *
	     * @param host - Reference to the host object. The host parameter is expetected to contain external
	     *        world references. e.g. preloadedPageData, eventAggregator, etc...
	     */
	    function ClientSideWebPartManager(host) {
	        /**
	         * Dictionary of all the webparts
	         */
	        this._webparts = new Map();
	        /*
	         * WebPart manager log source
	         */
	        this._logSource = sp_client_base_1._LogSource.create('ClientSideWebPartManager');
	        /**
	         * GUID validation regex
	         */
	        this._guidRegex = new RegExp('^[a-z0-9]{8}(-([0-9a-fA-F]){4}){3}-[a-z0-9]{12}$', 'i');
	        /**
	         * If true, webparts have already been fetched.
	         */
	        this._webpartsHaveBeenFetched = false;
	        /**
	         * Event aggregator instance scoped to this web part manager instance.
	         */
	        this._eventAggregator = new EventAggregator_1.default();
	        /**
	         * Web part status renderer instance scoped to this web part manager instance.
	         */
	        this._statusRenderer = new ClientSideWebPartStatusRenderer_1.default();
	        sp_client_base_1.Validate.isNotNullOrUndefined(host, 'host');
	        this._host = host;
	        this._pageContext = host.serviceScope.consume(sp_client_base_1.pageContextServiceKey);
	        this.configureStart = this.configureStart.bind(this);
	    }
	    /**
	     * Load a webpart in the provided dom element. Does the following steps
	     *
	     *    - Validate params
	     *    - Perform an async import of the bootstrapModule and preLoadModules from the provided manifest
	     *    - Instantiate the webpart
	     *    - Call the render method on the webpart object
	     *
	     * @param context - Web part manager context.
	     */
	    ClientSideWebPartManager.prototype.loadWebPart = function (context) {
	        var _this = this;
	        return new Promise(function (resolve, reject) {
	            _this._validateInput(context);
	            // If manifest is null, we should display an error. This can be a legitimate case when the manifest has
	            // been deleted or webpart removed from the tenant level repository or the webpart is not being shipped
	            // anymore but some page still contains
	            // a reference to an instance of that webpart.
	            if (!_this._validateManifest(context.manifest, context.displayMode)) {
	                _this.renderError(context.domElement, new Error(odsp_utilities_bundle_1.StringHelper.format(Strings_resx_1.default.ManifestNullError, context.instanceId)));
	                return;
	            }
	            /* tslint:disable:no-any */
	            var manifest = context.manifest;
	            /* tslint:enable:no-any */
	            var instanceId = context.instanceId;
	            var domElement = context.domElement;
	            // Performance and QOS markers
	            var performanceTag = _this._createWebPartTag(manifest, instanceId);
	            var qosMonitor = _this._createQosMonitor(manifest);
	            sp_client_base_1._PerformanceLogger.addComponent(performanceTag);
	            sp_client_base_1._PerformanceLogger.startMarkForComponent(performanceTag);
	            // Start the loading indicator
	            _this._statusRenderer.displayLoadingIndicator(domElement, manifest.preconfiguredEntries[0].title.default.toString());
	            /* tslint:disable:no-any */
	            var modulePromise = sp_module_loader_1.default.loadManifestModules(manifest.id);
	            /* tslint:enable:no-any */
	            if (modulePromise) {
	                modulePromise.then(
	                /* tslint:disable:no-any */
	                function (moduleLibrary) {
	                    sp_client_base_1._PerformanceLogger.markComponent(performanceTag, 'modulesLoaded');
	                    /* tslint:enable:no-any */
	                    _this._statusRenderer.clearLoadingIndicator(context.domElement);
	                    sp_client_base_1._TraceLogger.logVerbose(_this._logSource, "Successfully loaded modules for webpart " + manifest.id);
	                    if (!moduleLibrary) {
	                        throw new Error(Strings_resx_1.default.UndefinedModule);
	                    }
	                    try {
	                        /* tslint:disable:no-any */
	                        var wp = moduleLibrary;
	                        /* tslint:enable:no-any */
	                        // If the webpart has a default export, use that.
	                        if (wp && wp.default) {
	                            wp = wp.default;
	                        }
	                        if (!wp) {
	                            var message = odsp_utilities_bundle_1.StringHelper.format(Strings_resx_1.default.ModuleNotLoaded, manifest.id, manifest.id, _this._getLoadedModuleList(moduleLibrary));
	                            throw new Error(message);
	                        }
	                        if (typeof (wp) !== 'function' && wp.default) {
	                            wp = wp.default;
	                        }
	                        if (typeof (wp) !== 'function') {
	                            throw new Error(odsp_utilities_bundle_1.StringHelper.format(Strings_resx_1.default.IncorrectBoostrapModule, manifest.id));
	                        }
	                        var typedWp = wp;
	                        // @todo: add a mechanism to detect webpart DOM node removal such that if the app
	                        // is switching between SPA pages, we can make sure webparts are consistently and
	                        // appropriately disposed. VSO#144986.
	                        var wpi = new typedWp(_this._getWebPartContext(context));
	                        _this._webparts.set(instanceId, wpi);
	                        // Start the dirty bit timer if required
	                        _this._startDirtyBitTimer(context.displayMode);
	                        // If the webpart is derived from the base class, we want to enforce a stricter call flow
	                        // which will lead to simpler webpart code.
	                        if (_this._instanceOfBase(wpi)) {
	                            // internal render will write out specific failures
	                            return wpi._internalFirstTimeRender(context.displayMode, qosMonitor, context.webPartData).then(function () {
	                                qosMonitor.writeSuccess();
	                                sp_client_base_1._PerformanceLogger.endMarkForComponent(performanceTag);
	                                resolve();
	                            });
	                        }
	                        else {
	                            throw new Error(Strings_resx_1.default.NonBaseWebPart);
	                        }
	                    }
	                    catch (ex) {
	                        var wpi_1 = _this._webparts.get(instanceId);
	                        if (wpi_1) {
	                            Utils_1.executeWithoutFailing(function () { _this._statusRenderer.clearLoadingIndicator(domElement); }, _this._logSource);
	                            Utils_1.executeWithoutFailing(function () { wpi_1._internalDispose(); }, _this._logSource);
	                            Utils_1.executeWithoutFailing(function () { _this._webparts.delete(instanceId); }, _this._logSource);
	                        }
	                        Utils_1.executeWithoutFailing(function () {
	                            qosMonitor.writeUnexpectedFailure('UnhandledLoadError', ex, { 'instanceId': instanceId });
	                        }, _this._logSource);
	                        _this.renderError(domElement, ex);
	                        reject();
	                    }
	                }).catch(function (errorMsg) {
	                    var err = new Error(odsp_utilities_bundle_1.StringHelper.format(Strings_resx_1.default.ScriptLoadErrorTemplate, errorMsg));
	                    Utils_1.executeWithoutFailing(function () {
	                        qosMonitor.writeUnexpectedFailure('ScriptLoad', err, { 'instanceId': instanceId });
	                    }, _this._logSource);
	                    _this.renderError(domElement, err);
	                    reject();
	                });
	            }
	            else {
	                var error = new Error("No loader could be found, unable to load webpart " + manifest.id + ".");
	                _this.renderError(domElement, error);
	                reject();
	            }
	        });
	    };
	    /**
	     * This makes a REST call to load the current site's webparts into the module loader.
	     */
	    ClientSideWebPartManager.prototype.fetchWebParts = function () {
	        var _this = this;
	        // If the webServerRelativeUrl is missing, or if webparts have already been fetched
	        //  we don't have anything to do here.
	        if (this._pageContext.web &&
	            this._pageContext.web.serverRelativeUrl &&
	            !this._webpartsHaveBeenFetched) {
	            this._webpartsHaveBeenFetched = true;
	            var requestUrl_1 = this._pageContext.web.serverRelativeUrl + "/_api/web/GetClientSideWebParts";
	            this._host.serviceScope.whenFinished(function () {
	                var httpClient = _this._host.serviceScope.consume(sp_client_base_1.httpClientServiceKey);
	                httpClient.get(requestUrl_1)
	                    .then(function (response) {
	                    return response.json();
	                })
	                    .then(function (value) {
	                    var manifests = value.value.map(function (manifestObject) {
	                        return JSON.parse(manifestObject.Manifest);
	                    });
	                    sp_module_loader_1.default.importManifests(manifests, /* overwriteExisting */ false);
	                })
	                    .catch(function (error) {
	                    console.error("Error loading webparts: " + error);
	                    _this._webpartsHaveBeenFetched = false;
	                });
	            });
	        }
	    };
	    /**
	     * Get list of active webparts
	     *
	     * @return {IClientSideWebPartManifest[]}: returns array of manifests
	     */
	    /* tslint:disable:no-any */
	    ClientSideWebPartManager.prototype.getWebParts = function () {
	        /* tslint:enable:no-any */
	        var manifests = sp_module_loader_1.default.getManifests();
	        /* tslint:disable:no-any */
	        var result = [];
	        /* tslint:enable:no-any */
	        if (manifests) {
	            for (var _i = 0, manifests_1 = manifests; _i < manifests_1.length; _i++) {
	                var manifest = manifests_1[_i];
	                if (manifest &&
	                    manifest.componentType === 'WebPart') {
	                    /* tslint:disable:no-any */
	                    result.push(manifest);
	                }
	            }
	        }
	        return result;
	    };
	    /**
	     * Set the display mode of the specified web part. If no web part id is specified, switch mode of all web parts.
	     * If the display mode passed is same as the current mode, no change is applied.
	     *
	     * @param {DisplayMode} mode: the new DisplayMode
	     * @param {string} id: id of the webpart
	     */
	    ClientSideWebPartManager.prototype.setDisplayMode = function (mode, id) {
	        var cb = function (wp) {
	            if (wp) {
	                wp._internalSetDisplayMode(mode);
	            }
	        };
	        if (id) {
	            var wp = this._webparts.get(id);
	            if (wp) {
	                wp._internalSetDisplayMode(mode);
	            }
	        }
	        else {
	            this._executeForIdsOrAll(undefined, cb);
	        }
	        // Start the dirty bit timer if required
	        this._startDirtyBitTimer(mode);
	    };
	    /**
	     * Serialize the specified webparts. If no webparts are specified, serialize all webparts.
	     *
	     * @param {string[]} ids: Ids of the webparts
	     */
	    ClientSideWebPartManager.prototype.serialize = function (ids) {
	        var sd = new Map();
	        var cb = function (wp, id) {
	            if (wp) {
	                sd.set(id, wp._internalSerialize());
	            }
	        };
	        this._executeForIdsOrAll(ids, cb);
	        return sd;
	    };
	    /**
	     * Dispose the specified webparts. If no webparts are specified, dispose all webparts.
	     *
	     * @param {string[]} ids: Ids of the webparts
	     */
	    ClientSideWebPartManager.prototype.dispose = function (ids) {
	        var _this = this;
	        var cb = function (wp, id) {
	            if (wp) {
	                wp._internalDispose();
	                _this._deleteWebPart(id);
	            }
	        };
	        this._executeForIdsOrAll(ids, cb);
	    };
	    /**
	     * Start the web part configuration process.
	     *
	     * @param id - web part id.
	     * @param propertyPaneState - indicates in what state the PropertyPane should be.
	     */
	    ClientSideWebPartManager.prototype.configureStart = function (id, propertyPaneState) {
	        var _this = this;
	        if (propertyPaneState === void 0) { propertyPaneState = PropertyPaneDefinitions_1.PropertyPaneState.Default; }
	        if (!this._propertyPaneController) {
	            this._propertyPaneController =
	                new propertyPaneController_1.default(function (wpId) {
	                    return _this._webparts.get(wpId);
	                }, this._host.webPartConfigurationEventCallback);
	        }
	        this._propertyPaneController.configureStart(id, propertyPaneState);
	    };
	    /**
	      * Method to handle the webpart delete action.
	      * @param id - id of the webpart which is deleted.
	      */
	    ClientSideWebPartManager.prototype.onWebPartDelete = function (id) {
	        this._deleteWebPart(id);
	    };
	    /**
	     * Raise an event to the associated event aggregator
	     *
	     * @param {string} eventName: Event name, such as 'configure:start'.
	     * @param {Event} eventObject: object containing event properties.
	     */
	    ClientSideWebPartManager.prototype.raiseEvent = function (eventName, event) {
	        this._eventAggregator.raiseEvent(eventName, event);
	    };
	    /**
	     * Render an error message in the web part container div.  Also logs the error message to the IWebPartHost logger.
	     *
	     * @param {domElement} domElement: Container div for the webpart
	     * @param {Error} error: An error object containing the error message to render.
	     * @return {void}
	     */
	    ClientSideWebPartManager.prototype.renderError = function (domElement, error) {
	        var _this = this;
	        Utils_1.executeWithoutFailing(function () {
	            _this._statusRenderer.renderError(domElement, error);
	            sp_client_base_1._TraceLogger.logError(_this._logSource, error);
	        }, this._logSource);
	    };
	    /*
	     * Get the first webpart with preview image url specified
	     *
	     * @param {string[]} ids: Ids of the webparts
	     */
	    ClientSideWebPartManager.prototype.tryGeneratePreviewImageUrl = function (ids) {
	        var previewImageUrl = undefined;
	        var cb = function (wp, id) {
	            // workaround for typescript targeting es5 only support for...of for array and string
	            // also Map does not support some or every
	            // @todo: Bug 222340 when switching to es6, use for...of and return after first match
	            if (!previewImageUrl) {
	                previewImageUrl = wp.previewImageUrl;
	            }
	        };
	        this._executeForIdsOrAll(ids, cb);
	        return previewImageUrl;
	    };
	    /**
	     * Internal method to validate and process input parameters
	     *
	     * @param context - provided webpart context
	     */
	    ClientSideWebPartManager.prototype._validateInput = function (context) {
	        sp_client_base_1.Validate.isNotNullOrUndefined(context, 'webpart manager context');
	        sp_client_base_1.Validate.isNotNullOrUndefined(context.domElement, 'webpart element');
	        sp_client_base_1.Validate.isNotNullOrUndefined(context.instanceId, 'webpart instanceId');
	        sp_client_base_1.Validate.isTrue(!this._webparts.get(context.instanceId), 'Duplicate webpart id not allowed');
	    };
	    /**
	     * Validate the manifest
	     *
	     * @param {IClientSideWebPartManifest} manifest: webpart manifest
	     * @param {DisplayMode} mode: display mode
	     * @return true if the manifest is valid
	     */
	    /* tslint:disable:no-any */
	    ClientSideWebPartManager.prototype._validateManifest = function (manifest, mode) {
	        /* tslint:enable:no-any */
	        // If the manifest is null, then
	        //    In read mode, we throw as the host should never attempt to load the webpart without the manifest.
	        //    In edit mode, we should display an error
	        if (!manifest) {
	            if (mode === sp_client_base_1.DisplayMode.Read) {
	                // Note: not localizing this expception on purpose. This is an internal error that users should never see.
	                throw new Error('Null manifest. Code should never reach here in Read mode. The host should not attempt to ' +
	                    'display the webpart if the manifest is null.');
	            }
	            else {
	                return false;
	            }
	        }
	        // Clone the manifest and then validate the clone. This way we make sure there are no functions and other
	        // non-field based types in the manifest
	        /* tslint:disable:no-any */
	        var cm = lodash.cloneDeep(manifest);
	        /* tslint:enable:no-any */
	        /* tslint:disable:triple-equals */
	        sp_client_base_1.Validate.isTrue(cm.manifestVersion == 1 || cm.manifestVersion == 2, 'Only version 1 manifests are currently supported');
	        /* tslint:enable:triple-equals */
	        sp_client_base_1.Validate.isTrue(!!cm.id, 'webpart id cannot be null or undefined');
	        sp_client_base_1.Validate.isTrue(this._guidRegex.test(cm.id), 'webpart id has to be a GUID');
	        sp_client_base_1.Validate.isTrue(!!cm.version, 'webpart version cannot be null or undefined');
	        return true;
	    };
	    /**
	     * Execute the provided callback for the list of provided webpart ids. If no list if provided,
	     * execute the callback on all webparts.
	     */
	    ClientSideWebPartManager.prototype._executeForIdsOrAll = function (ids, cb) {
	        var _this = this;
	        if (ids) {
	            ids.forEach(function (id) {
	                var wp = _this._webparts.get(id);
	                cb(wp, id);
	            });
	        }
	        else {
	            this._webparts.forEach(function (wp, id) {
	                cb(wp, id);
	            });
	        }
	    };
	    /**
	     * Generate webpart context
	     */
	    ClientSideWebPartManager.prototype._getWebPartContext = function (context) {
	        return new WebPartContext_1.default(context, this._getManifestInstance(context), this._host, this._statusRenderer, this._eventAggregator, this.configureStart, this._createWebPartTag(context.manifest, context.instanceId));
	    };
	    /* tslint:disable:no-any */
	    ClientSideWebPartManager.prototype._instanceOfBase = function (wpi) {
	        /* tslint:enable:no-any */
	        /* tslint:disable:no-string-literal */
	        return wpi instanceof BaseClientSideWebPart_1.default || wpi['__type'] === 'BaseClientSideWebPart';
	        /* tslint:enable:no-string-literal */
	    };
	    ClientSideWebPartManager.prototype._getLoadedModuleList = function (moduleLibrary) {
	        var loadedModulesString = '';
	        for (var m in moduleLibrary) {
	            if (moduleLibrary.hasOwnProperty(m)) {
	                if (loadedModulesString) {
	                    loadedModulesString += ',';
	                }
	                loadedModulesString += "" + m;
	            }
	        }
	        return loadedModulesString;
	    };
	    /**
	     * This is a temporary implementation of updating the host that a webpart has updated properties.
	     * Currently we run a timer that regularly checks for updated properties and raises the dirty bit
	     * handler to the host. @todo (VSO SPPPLAT#200728) tracks fixing this scenario in a better way.
	     */
	    ClientSideWebPartManager.prototype._startDirtyBitTimer = function (mode) {
	        var _this = this;
	        // Clear the timer in read mode
	        if (mode === sp_client_base_1.DisplayMode.Read) {
	            if (this._dirtyBitTimer) {
	                window.clearInterval(this._dirtyBitTimer);
	                this._dirtyBitTimer = undefined;
	            }
	        }
	        else if (!this._dirtyBitTimer) {
	            var cb_1 = function (wp) {
	                if (wp) {
	                    wp._internalSetDirtyBit();
	                }
	            };
	            this._dirtyBitTimer = window.setInterval(function () {
	                _this._executeForIdsOrAll(undefined, cb_1);
	            }, 1000);
	        }
	    };
	    /**
	     * Creates a new QosMonitor with a scenario name specific to the web part type.
	     */
	    /* tslint:disable:no-any */
	    ClientSideWebPartManager.prototype._createQosMonitor = function (manifest) {
	        /* tslint:enable:no-any */
	        return new sp_client_base_2._QosMonitor("WebPart." + manifest.id);
	    };
	    /**
	     * Web part tag is unique per every web part instance.
	     */
	    /* tslint:disable:no-any */
	    ClientSideWebPartManager.prototype._createWebPartTag = function (manifest, instanceId) {
	        /* tslint:enable:no-any */
	        return "WebPart." + manifest.id + "." + instanceId;
	    };
	    ClientSideWebPartManager.prototype._deleteWebPart = function (id) {
	        sp_client_base_1.Validate.isNotNullOrUndefined(id, 'id');
	        // Adding this condition because, this method can be called before instantiating
	        // propertypanecontroller. Instantiation happens only when user clicks 'ConfigureStart'.
	        if (this._propertyPaneController) {
	            this._propertyPaneController.onWebPartDelete(id);
	        }
	        this._webparts.delete(id);
	    };
	    /**
	     * Temporary fix till we have actual support for the multiple pre-configured entries feature.
	     * (SPPPLAT VSO#232724)
	     */
	    /* tslint:disable:no-any */
	    ClientSideWebPartManager.prototype._getManifestInstance = function (context) {
	        var manifest = context.manifest;
	        var manifestClone = lodash.cloneDeep(manifest);
	        delete manifestClone.preconfiguredEntries;
	        var manifestInstance = manifestClone;
	        /* tslint:enable:no-any */
	        lodash.merge(manifestInstance, manifest.preconfiguredEntries[0]);
	        return manifestInstance;
	    };
	    return ClientSideWebPartManager;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = ClientSideWebPartManager;
	


/***/ },
/* 204 */
/***/ function(module, exports) {

	"use strict";
	/* tslint:disable:no-any */
	var importableSpModuleLoader = window.spModuleLoader;
	/* tslint:enable:no-any */
	// Return a dummy module loader if the module loader isn't present on the page. This occurs during unit tests.
	if (!importableSpModuleLoader) {
	    importableSpModuleLoader = {
	        combokeys: undefined,
	        loadScript: function () { return Promise.reject(new Error('Module loader not present')); },
	        loadStandardLibraryModule: function () { return Promise.reject(new Error('Module loader not present')); },
	        loadManifestModules: function () { return Promise.reject(new Error('Module loader not present')); },
	        importManifests: function () { throw new Error('Module loader not present'); },
	        forceLoadDebugManifests: function () { throw new Error('Module loader not present'); },
	        getManifests: function () { return []; },
	        loadCss: function () { throw new Error('Module loader not present'); }
	    };
	}
	exports.combokeys = importableSpModuleLoader ? importableSpModuleLoader.combokeys : undefined;
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = importableSpModuleLoader;
	


/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @Copyright (c) Microsoft Corporation.  All rights reserved.
	 */
	'use strict';
	var odsp_utilities_bundle_1 = __webpack_require__(6);
	var sp_client_base_1 = __webpack_require__(69);
	var Strings_resx_1 = __webpack_require__(71);
	var cswp_base_module_scss_1 = __webpack_require__(73);
	/**
	 * This class provides the default implementation for displaying loading indicator and error messages
	 * for webparts. The webpart host can decide to provide custom implemenation of how webparts display
	 * loading indicators and error messages.
	 */
	var ClientSideWebPartStatusRenderer = (function () {
	    function ClientSideWebPartStatusRenderer() {
	        this._loadingIndicatorId = 'cswp-loading-indicator';
	        this._errorId = 'cswp-error';
	    }
	    /**
	     * Display a loading spinner.
	     * @param domElement - the webpart container div.
	     * @param loadingMessage - the message to be displayed when the loading spinner id displayed.
	     */
	    ClientSideWebPartStatusRenderer.prototype.displayLoadingIndicator = function (domElement, loadingMessage) {
	        sp_client_base_1.Validate.isNotNullOrUndefined(domElement, 'domElement');
	        domElement.classList.add('cswp-loading');
	        if (!this._loadingIndicatorHtml) {
	            var html = ("<div data-sp-id='" + this._loadingIndicatorId + "' class='cswp-loading-spinner'>") +
	                "<div dir='ltr' class='cswp-loading-spinner-container cswp-small-spinner'>" +
	                "<div class='cswp-loading-spinner cswp-loading-spinner-animation'>";
	            for (var i = 0; i < 8; i++) {
	                html += "<div class='cswp-loading-ball cswp-loading-ball-color'></div>";
	            }
	            html +=
	                "</div></div><div class='cswp-spinner-message'>" + odsp_utilities_bundle_1.StringHelper.format(Strings_resx_1.default.LoadingStatus, '') +
	                    "</div><div class='cswp-loading-screenReaderOnly' role='alert' aria-live='polite'>" +
	                    odsp_utilities_bundle_1.StringHelper.format(Strings_resx_1.default.LoadingStatus, loadingMessage) +
	                    "</div></div>";
	            this._loadingIndicatorHtml = html;
	        }
	        domElement.innerHTML = this._loadingIndicatorHtml;
	    };
	    /**
	     * Clear the loading indicator.
	     * @param domElement - the webpart container div.
	     */
	    ClientSideWebPartStatusRenderer.prototype.clearLoadingIndicator = function (domElement) {
	        sp_client_base_1.Validate.isNotNullOrUndefined(domElement, 'domElement');
	        var divMsg = domElement.querySelector("div[data-sp-id='" + this._loadingIndicatorId + "']");
	        if (divMsg) {
	            domElement.removeChild(divMsg);
	        }
	        domElement.classList.remove('cswp-loading');
	        domElement.classList.add('cswp');
	    };
	    /**
	     * Render the provided error message in the webpart container div.
	     * @param domElement - the webpart container div.
	     * @param error - the error message.
	     */
	    ClientSideWebPartStatusRenderer.prototype.renderError = function (domElement, error) {
	        sp_client_base_1.Validate.isNotNullOrUndefined(domElement, 'domElement');
	        sp_client_base_1.Validate.isNotNullOrUndefined(error, 'error');
	        var divErr = domElement.querySelector("div[data-sp-id='" + this._errorId + "']");
	        if (divErr) {
	            divErr.style.display = 'block';
	        }
	        else {
	            if (!this._errorHtml) {
	                this._errorHtml =
	                    ("<div class='" + cswp_base_module_scss_1.default.errorBox + "' role='alert' aria-live='assertive'>") +
	                        ("<span class='" + cswp_base_module_scss_1.default.errorBoxText + "'></span>") +
	                        "</div>";
	            }
	            divErr = document.createElement('div');
	            divErr.setAttribute('data-sp-id', this._errorId);
	            divErr.innerHTML = this._errorHtml;
	            domElement.appendChild(divErr);
	        }
	        var text = divErr.getElementsByTagName('span')[0];
	        text.textContent = ((true) && error.stack)
	            ? error.stack
	            : error.message || error;
	    };
	    /**
	     * Clear the webpart error message.
	     * @param domElement - the webpart container div.
	     */
	    ClientSideWebPartStatusRenderer.prototype.clearError = function (domElement) {
	        sp_client_base_1.Validate.isNotNullOrUndefined(domElement, 'domElement');
	        var divErr = domElement.querySelector("div[data-sp-id='" + this._errorId + "']");
	        if (divErr) {
	            divErr.style.display = 'none';
	        }
	    };
	    return ClientSideWebPartStatusRenderer;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = ClientSideWebPartStatusRenderer;
	


/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @Copyright (c) Microsoft Corporation.  All rights reserved.
	 *
	 * Utility code that does not fit in any other bucket.
	 */
	"use strict";
	var sp_client_base_1 = __webpack_require__(69);
	/**
	 * Execute the passed in delegate with a guarantee that no exception will leak out.
	 * Do not use this normally. Only in error handling scenarios where you would like
	 * to be defesive.
	 * @param {method} method to execute
	 * @apram {logSource} log source
	 */
	/* tslint:disable:export-name */
	function executeWithoutFailing(method, logSource) {
	    /* tslint:enable:export-name */
	    sp_client_base_1.Validate.isNotNullOrUndefined(method, 'method');
	    try {
	        method();
	    }
	    catch (e) {
	        // Defensive code as this method should never ever throw
	        if (logSource) {
	            sp_client_base_1._TraceLogger.logError(logSource, new Error('Error: ' + e));
	        }
	    }
	}
	exports.executeWithoutFailing = executeWithoutFailing;
	


/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @Copyright (c) Microsoft Corporation.  All rights reserved.
	 *
	 * @file  This file contains code to help control the web part PropertyPane
	 */
	'use strict';
	var ReactDOM = __webpack_require__(83);
	var React = __webpack_require__(82);
	var sp_client_base_1 = __webpack_require__(69);
	var PropertyPaneDefinitions_1 = __webpack_require__(3);
	var PropertyPaneController_module_scss_1 = __webpack_require__(208);
	/**
	 * This is to ensure we get the Strings as part of our bundle. As the webpack's require.ensure is not
	 * recognizing the external module, referenced in the Strings. Hence, loading this module in the
	 * base module which will internally load the external module, and make it available before the
	 * require.ensure is called. Potential bug in webpack(VSO# 205556).
	 */
	__webpack_require__(211);
	/**
	 * @todo: (SPPPLAT VSO#186293) After adding require.ensure for creating the PropertyPane async bundle,
	 * this line is required because the PropertyPane depends on office-ui-react-fabric. This is a known
	 * problem and will be investigated as a part of the bug mentioned above.
	 */
	__webpack_require__(112);
	/*
	 * This class helps control the web part configuration PropertyPane. The web part framework comes with an inbuilt
	 * PropertyPane. The web part developer should be able to use this PropertyPane with ease. Alternatively, the web part
	 * developer can also create their own configuration pane if they do not like the functionality provided by the inbuilt
	 * PropertyPane.
	 */
	var PropertyPaneController = (function () {
	    /**
	     * Instantiates the PropertyPaneController object.
	     *
	     * @param webPartGetter - delegate to get the web part.
	     * @param callback - callback to be called when a configuration event happens.
	     */
	    function PropertyPaneController(webPartGetter, callback) {
	        sp_client_base_1.Validate.isNotNullOrUndefined(webPartGetter, 'webPartGetter');
	        this._webPartGetter = webPartGetter;
	        this._configurationEventCallback = callback;
	        // method bindings
	        this._onPropertyChange = this._onPropertyChange.bind(this);
	        this._onPropertyPaneSave = this._onPropertyPaneSave.bind(this);
	        this._onPropertyPaneClose = this._onPropertyPaneClose.bind(this);
	        this._onPropertyPaneLostFocus = this._onPropertyPaneLostFocus.bind(this);
	        this._fireConfigurationCompleteEvent = this._fireConfigurationCompleteEvent.bind(this);
	    }
	    /**
	     * Start configuring a web part. If the web part implements the configureStart API, this implies that the
	     * web part wants to own its configuration experience.  If the web part does not implenent that API,
	     * the inbuilt PropertyPane is used and there are the following conditions:
	     *
	     *   - propertyPaneState is Open and then open the PropertyPane.
	     *   - propertyPaneState is Close and then close the PropertyPane.
	     *   - propertyPaneState is Toggle and the PropertyPane is closed: in this case we open the PropertyPane and
	     *       start the configuration process. This should happen on web part configure button being clicked.
	     *   - propertyPaneState is Toggle and the PropertyPane is opened: in this case, if the web part id
	     *       is that of a different web part than being currently configured, we keep the PropertyPane open
	     *       and change the web part being configured.
	     *   - propertyPaneState is Default and the PropertyPane is closed: do nothing
	     *   - propertyPaneState is Default and the PropertyPane is opened: change the PropertyPane to display the
	     *       settings of the newly selected web part. This should happen when the user navigates between web parts.
	     *
	     * @param id - instance id of the web part.
	     * @param propertyPaneState - indicates in what state the PropertyPane should be.
	     */
	    PropertyPaneController.prototype.configureStart = function (id, propertyPaneState) {
	        if (id !== this._currentlyConfiguredWebPartId && this._isCurrentlyConfiguredPropertyPaneReactive()) {
	            this._fireConfigurationCompleteEvent();
	        }
	        if (propertyPaneState === PropertyPaneDefinitions_1.PropertyPaneState.Close) {
	            if (this._isOpen) {
	                this._toggleProperyPanePosition();
	            }
	        }
	        else {
	            // 'id' can be 'undefined'. It happens when user selects RTE.
	            // When 'id' is 'undefined' then 'wp' will be 'undefined'. In that case we render empty PropertyPane.
	            if (id) {
	                var toBeConfiguredWebPart = this._webPartGetter(id);
	                this._resolvePropertyPaneElements();
	                this._configureStart(toBeConfiguredWebPart, id, propertyPaneState);
	            }
	            else {
	                this._configureStart(undefined, id, propertyPaneState);
	            }
	        }
	        this._currentlyConfiguredWebPartId = id;
	    };
	    /**
	     * Make the PropertyPane disappear when the web part being configured is deleted from the page.
	     *
	     * @param id - Instance id of the web part.
	     */
	    PropertyPaneController.prototype.onWebPartDelete = function (id) {
	        sp_client_base_1.Validate.isNonemptyString(id, 'id');
	        if (id === this._currentlyConfiguredWebPartId) {
	            if (this._isOpen) {
	                this._renderPropertyPane(undefined, true);
	            }
	            this._currentlyConfiguredWebPartId = undefined;
	        }
	    };
	    /**
	     * Method to render the PropertyPane.
	     *
	     * @param currentWebpart - Current web part for which the PropertyPane is to be displayed.
	     * @param shouldRecreatePropertyPaneElement - Indicating whether PropertyPane should be recreated or not.
	     * @param resetPropertyPaneState - Indicating whether PropertyPane state should be reset.
	     */
	    PropertyPaneController.prototype._renderPropertyPane = function (currentWebpart, shouldRecreatePropertyPaneElement, resetPropertyPaneState) {
	        var _this = this;
	        // @todo: (SPPPLAT VSO#188120) Disabling for now due to webpack async loading bugs.
	        // Load the PropertyPane asynchronously in a separate bundle.
	        __webpack_require__.e/* nsure */(3, function (require) {
	            var propertyPane = __webpack_require__(212)['default'];
	            _this._currentPropertyPaneData = currentWebpart ?
	                currentWebpart._internalGetPropertyPaneSettings() : _this._getEmptyPropertyPaneData();
	            // PropertyPane is rendered only when the web part supplies the settings for the
	            // PropertyPane. If there are no settings to be displayed, we empty the PropertyPane
	            // container and toggle back if the pane is already open.
	            // We will re-visit this logic, once the decission is made, as to what to needs to be done.
	            if (_this._currentPropertyPaneData) {
	                // Only if this flag is true, re-insert the PropertyPane element into the DOM.
	                var insertIntoDom = false;
	                if (shouldRecreatePropertyPaneElement) {
	                    // Recreating the PropertyPane. This will enable the PropertyPane to be in a valid state.
	                    if (!_this._propertyPaneElement) {
	                        _this._propertyPaneElement = document.createElement('div');
	                        insertIntoDom = true;
	                    }
	                }
	                if (currentWebpart) {
	                    _this._propertyPaneElement.className = _this._currentPropertyPaneData.webPartId;
	                    _this._currentPropertyPaneData.onPropertyChange = _this._onPropertyChange;
	                    _this._currentPropertyPaneData.onSave = _this._onPropertyPaneSave;
	                    _this._currentPropertyPaneData.onClose = _this._onPropertyPaneClose;
	                    _this._currentPropertyPaneData.onLostFocus = _this._onPropertyPaneLostFocus;
	                    _this._currentPropertyPaneData.render = function () { _this._render(); };
	                    _this._currentPropertyPaneData.shouldResetState = resetPropertyPaneState;
	                }
	                var el = React.createElement(propertyPane, { data: _this._currentPropertyPaneData });
	                ReactDOM.render(el, _this._propertyPaneElement);
	                // If the consumer app provides a container div, the PropertyPane will slide-in/out.
	                // Else, the PropertyPane will be a popup and overlay over the content area.
	                // Further, if not required, do not re-insert the element into dom.
	                if (_this._propertyPaneContainer) {
	                    if (insertIntoDom) {
	                        _this._clearPropertyPaneContainer();
	                        _this._propertyPaneContainer.appendChild(_this._propertyPaneElement);
	                    }
	                    if (!_this._isOpen) {
	                        _this._toggleProperyPanePosition();
	                    }
	                }
	                else {
	                    if (insertIntoDom) {
	                        document.body.insertBefore(_this._propertyPaneElement, document.body.lastChild.nextSibling);
	                    }
	                }
	            }
	        });
	    };
	    /**
	     * Internal configure start.
	     * @param wp - Web part to be configured.
	     * @param id - Instance id of the web part to be configured.
	     * @param propertyPaneState - State of the PropertyPane.
	     */
	    PropertyPaneController.prototype._configureStart = function (wp, id, propertyPaneState) {
	        switch (propertyPaneState) {
	            case PropertyPaneDefinitions_1.PropertyPaneState.Open:
	                this._renderPropertyPane(wp, true, true);
	                break;
	            case PropertyPaneDefinitions_1.PropertyPaneState.Close:
	                if (this._isOpen) {
	                    this._renderPropertyPane(undefined);
	                    this._toggleProperyPanePosition();
	                }
	                break;
	            case PropertyPaneDefinitions_1.PropertyPaneState.Toggle:
	                if (!this._isOpen) {
	                    this._renderPropertyPane(wp, true, true);
	                }
	                else {
	                    this._renderPropertyPane(undefined);
	                    this._toggleProperyPanePosition();
	                }
	                break;
	            case PropertyPaneDefinitions_1.PropertyPaneState.Default:
	                if (this._isOpen) {
	                    this._renderPropertyPane(wp, true, true);
	                }
	                break;
	        }
	    };
	    /**
	     * Allow the PropertyPane to re-render itself. Used when navigating pages.
	     */
	    PropertyPaneController.prototype._render = function () {
	        var wp = this._webPartGetter(this._currentPropertyPaneData.webPartId);
	        if (wp) {
	            this._renderPropertyPane(wp);
	        }
	    };
	    /**
	     * PropertyPane field change event handler.
	     *
	     * @param propertyName - Name of the PropertyPane field changed.
	     * @param newValue - New value.
	     */
	    /* tslint:disable:no-any */
	    PropertyPaneController.prototype._onPropertyChange = function (propertyName, newValue) {
	        /* tslint:enable:no-any */
	        sp_client_base_1.Validate.isNonemptyString(propertyName, 'propertyName');
	        sp_client_base_1.Validate.isNotNullOrUndefined(newValue, 'newValue');
	        if (!this._currentPropertyPaneData.webPartId) {
	            throw new Error('onPropertyChange event is not expected when no web part is being configured');
	        }
	        var wp = this._webPartGetter(this._currentPropertyPaneData.webPartId);
	        if (wp) {
	            /* tslint:disable:no-any */
	            wp.onPropertyChange(propertyName, newValue);
	            /* tslint:enable:no-any */
	            this._renderPropertyPane(wp);
	        }
	        if (this._isCurrentlyConfiguredPropertyPaneReactive()) {
	            this._resetConfigurationCompleteTimeout();
	        }
	    };
	    /**
	     * Method to handle PropertyPane close.
	     */
	    PropertyPaneController.prototype._onPropertyPaneClose = function () {
	        this._toggleProperyPanePosition();
	        if (this._isCurrentlyConfiguredPropertyPaneReactive()) {
	            this._fireConfigurationCompleteEvent();
	        }
	    };
	    PropertyPaneController.prototype._onPropertyPaneLostFocus = function () {
	        if (this._configurationEventCallback) {
	            this._configurationEventCallback(PropertyPaneDefinitions_1.WebPartConfigurationEvent.LostFocus);
	        }
	        if (this._isCurrentlyConfiguredPropertyPaneReactive()) {
	            this._fireConfigurationCompleteEvent();
	        }
	    };
	    /**
	     * Method to handle PropertyPane save.
	     */
	    PropertyPaneController.prototype._onPropertyPaneSave = function () {
	        var wp = this._webPartGetter(this._currentPropertyPaneData.webPartId);
	        if (wp) {
	            // @todo: (SPPPLAT VSO#200681) This is a temporary fix, as we do not have 'intenal' scope identifier.
	            /* tslint:disable:no-any */
	            wp.onPropertyPaneSave();
	            wp.onPropertyConfigurationComplete();
	            /* tslint:enable:no-any */
	            // Firing configurationcompleteevent for host awareness.
	            this._fireConfigurationCompleteEvent();
	        }
	    };
	    /**
	     * Slide-in/out the PropertyPane
	     * @param shouldPaneOpen - indicates whether the proeprty pane should open or not.
	     */
	    PropertyPaneController.prototype._toggleProperyPanePosition = function () {
	        var _this = this;
	        if (this._isOpen) {
	            if (this._pageContentElement) {
	                this._pageContentElement.classList.remove(PropertyPaneController_module_scss_1.default.shrinkContent);
	            }
	            else {
	                /**
	                 * If there is no page content element, then it means that it is classic page. So unmounting
	                 * the PropertyPane node, because for some reason PropertyPane is not respecting PropertyPaneContainer
	                 * styles.
	                 *
	                 *  This is a temporary fix, to unblock public preview. Permanent fix will be checked in soon.
	                 * TODO: (SPPPLAT VSO: Bug 237945:Fix the PropertyPane rendering on the classic page)
	                 */
	                ReactDOM.unmountComponentAtNode(this._propertyPaneElement);
	            }
	            if (this._workbenchCommandBarElement) {
	                this._workbenchCommandBarElement.classList.remove(PropertyPaneController_module_scss_1.default.shrinkContent);
	            }
	            this._propertyPaneContainer.classList.remove(PropertyPaneController_module_scss_1.default.showPane);
	        }
	        else {
	            if (this._pageContentElement) {
	                this._pageContentElement.classList.add(PropertyPaneController_module_scss_1.default.shrinkContent);
	            }
	            else {
	                /**
	                 * If there is no page content element, then it means that it is classic page. So unmounting
	                 * the PropertyPane node, because for some reason PropertyPane is not respecting PropertyPaneContainer
	                 * styles.
	                 *
	                 *  This is a temporary fix, to unblock public preview. Permanent fix will be checked in soon.
	                 * TODO: (SPPPLAT VSO: Bug 237945:Fix the PropertyPane rendering on the classic page)
	                 */
	                this._propertyPaneContainer.style.top = '50px';
	                this._propertyPaneContainer.style.zIndex = '999';
	            }
	            if (this._workbenchCommandBarElement) {
	                this._workbenchCommandBarElement.classList.add(PropertyPaneController_module_scss_1.default.shrinkContent);
	            }
	            this._propertyPaneContainer.classList.add(PropertyPaneController_module_scss_1.default.showPane);
	        }
	        this._isOpen = !this._isOpen;
	        if (this._configurationEventCallback) {
	            // @todo: this is a temporary fix to let the host (e.g. Canvas) know that the PropertyPane has completed
	            // animating. The current PropertyPane animation is 367ms and hence the 400ms timeout. The correct fix is
	            // to hookup to the animation end event.
	            window.setTimeout(function () {
	                _this._configurationEventCallback(_this._isOpen
	                    ? PropertyPaneDefinitions_1.WebPartConfigurationEvent.OpenComplete
	                    : PropertyPaneDefinitions_1.WebPartConfigurationEvent.CloseComplete);
	            }, PropertyPaneController.ANIMATION_TIMEOUT);
	        }
	    };
	    /**
	     * Private method to resolve the elements, which are used in slide in slide out effect.
	     */
	    PropertyPaneController.prototype._resolvePropertyPaneElements = function () {
	        var workbenchElement = document.getElementById('workbenchPageContent');
	        // TODO: (SPPPLAT VSO#222337) - Refactor Workbench page layout
	        if (workbenchElement) {
	            this._pageContentElement = workbenchElement;
	            this._workbenchCommandBarElement = document.getElementById('workbenchCommandBar');
	        }
	        else {
	            this._pageContentElement = document.getElementById('spPageChromeAppDiv');
	        }
	        // All modern apps should have the spPageChromeAppDiv. If not, then we should treat like the Classic page scenario.
	        // i.e.the container div should be hanging off the root node. And we should create it only the first time.
	        if (!this._pageContentElement) {
	            if (!this._propertyPaneContainer) {
	                this._propertyPaneContainer = document.createElement('div');
	                this._propertyPaneContainer.id = PropertyPaneController.PROPERTY_PANE_CONTAINER_ID;
	                this._propertyPaneContainer.className = PropertyPaneController.PROPERTY_PANE_CONTAINER_ID;
	                document.body.appendChild(this._propertyPaneContainer);
	            }
	        }
	        else {
	            this._propertyPaneContainer = document.getElementById(PropertyPaneController.PROPERTY_PANE_CONTAINER_ID);
	        }
	    };
	    /**
	     * Removes all the children of the PropertyPane container.
	     */
	    PropertyPaneController.prototype._clearPropertyPaneContainer = function () {
	        while (this._propertyPaneContainer && this._propertyPaneContainer.firstChild) {
	            this._propertyPaneContainer.removeChild(this._propertyPaneContainer.firstChild);
	        }
	    };
	    /**
	     * Reset configuration completion timeout.
	     */
	    PropertyPaneController.prototype._resetConfigurationCompleteTimeout = function () {
	        this._clearConfigurationCompleteTimeout();
	        this._configurationCompletionTimeout = window.setTimeout(this._fireConfigurationCompleteEvent, PropertyPaneController.CONFIGURATION_COMPLETE_TIMEOUT);
	    };
	    /**
	     * Fire configuration completion timeout.
	     */
	    PropertyPaneController.prototype._fireConfigurationCompleteEvent = function () {
	        this._clearConfigurationCompleteTimeout();
	        // Do this only if there is a web part currently being configured
	        if (this._currentlyConfiguredWebPartId) {
	            // Raise an event to the host with the webpart data. This is required by the Classic page scenario
	            // in order to serialize the configuration data.
	            var wp = this._webPartGetter(this._currentlyConfiguredWebPartId);
	            if (this._configurationEventCallback) {
	                this._configurationEventCallback(PropertyPaneDefinitions_1.WebPartConfigurationEvent.ConfigurationComplete, wp._internalSerialize());
	            }
	            // Raise the configuration complete event to webpart,
	            // If there is a web part already configured.
	            if (this._currentPropertyPaneData && this._currentPropertyPaneData.onConfigurationComplete) {
	                this._currentPropertyPaneData.onConfigurationComplete();
	            }
	        }
	    };
	    /**
	     * Clear configuration completion timeout.
	     */
	    PropertyPaneController.prototype._clearConfigurationCompleteTimeout = function () {
	        if (this._configurationCompletionTimeout) {
	            window.clearTimeout(this._configurationCompletionTimeout);
	            this._configurationCompletionTimeout = undefined;
	        }
	    };
	    /**
	     * Method to check whether the currently configured PropertyPane is reactive or not.
	     */
	    PropertyPaneController.prototype._isCurrentlyConfiguredPropertyPaneReactive = function () {
	        if (this._currentlyConfiguredWebPartId) {
	            var currentlyConfiguredWebPart = this._webPartGetter(this._currentlyConfiguredWebPartId);
	            return currentlyConfiguredWebPart._internalGetPropertyPaneSettings().isReactive;
	        }
	        return false;
	    };
	    /**
	     * Returns the PropertyPane data which has only 'onClose' defined. This is used when we have to display
	     * empty property pane, when there is nothing to configure.
	     */
	    PropertyPaneController.prototype._getEmptyPropertyPaneData = function () {
	        return {
	            webPartId: undefined,
	            title: undefined,
	            shouldResetState: true,
	            onPropertyChange: undefined,
	            onSave: undefined,
	            onClose: this._onPropertyPaneClose,
	            onConfigurationComplete: undefined,
	            onRendered: undefined,
	            onLostFocus: undefined,
	            properties: undefined,
	            settings: undefined
	        };
	    };
	    /**
	     * PropertyPane animation timeout (in milliseconds).
	     */
	    PropertyPaneController.ANIMATION_TIMEOUT = 400;
	    /**
	     * PropertyPane configuration complete timeout for Reactive webparts (in milliseconds).
	     */
	    PropertyPaneController.CONFIGURATION_COMPLETE_TIMEOUT = 5000;
	    /**
	     * PropertyPane container id.
	     */
	    PropertyPaneController.PROPERTY_PANE_CONTAINER_ID = 'spPropertyPaneContainer';
	    return PropertyPaneController;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = PropertyPaneController;
	


/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	__webpack_require__(209);
	/* tslint:disable */
	var styles = {
	    propertyPaneContainer: 'propertyPaneContainer_57da50e4',
	    showPane: 'showPane_03d1433f',
	    shrinkContent: 'shrinkContent_938313ca',
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = styles;
	/* tslint:enable */
	


/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	var content = __webpack_require__(210);
	var loader = __webpack_require__(77);
	
	if(typeof content === "string") content = [[module.id, content]];
	
	// add the styles to the DOM
	for (var i = 0; i < content.length; i++) loader.loadStyles(content[i][1]);
	
	if(content.locals) module.exports = content.locals;

/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(76)();
	// imports
	
	
	// module
	exports.push([module.id, "[id^=spPropertyPaneContainer].propertyPaneContainer_57da50e4{position:absolute;top:50px;bottom:0}html[dir=ltr] [id^=spPropertyPaneContainer].propertyPaneContainer_57da50e4{right:-340px}html[dir=rtl] [id^=spPropertyPaneContainer].propertyPaneContainer_57da50e4{left:-340px}html[dir=ltr] [id^=spPropertyPaneContainer].showPane_03d1433f{right:0}html[dir=rtl] [id^=spPropertyPaneContainer].showPane_03d1433f{left:0}html[dir=ltr] [id^=spPageChromeAppDiv].shrinkContent_938313ca{right:340px}html[dir=rtl] [id^=spPageChromeAppDiv].shrinkContent_938313ca{left:340px}html[dir=ltr] [id^=workbenchPageContent].shrinkContent_938313ca{right:340px}html[dir=rtl] [id^=workbenchPageContent].shrinkContent_938313ca{left:340px}html[dir=ltr] [id^=workbenchCommandBar].shrinkContent_938313ca{padding-right:340px}html[dir=rtl] [id^=workbenchCommandBar].shrinkContent_938313ca{padding-left:340px}", ""]);
	
	// exports


/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	/* This file was generated by a tool. Modifying it will produce unexpected behavior. */
	/* tslint:disable */
	"use strict";
	var strings =  false
	    ? require('../../../../resx-strings/en-us.json')
	    : __webpack_require__(72);
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = strings['_K8RuMFp89V7G6GfKxZQtOg'] || {};
	


/***/ },
/* 212 */,
/* 213 */,
/* 214 */,
/* 215 */,
/* 216 */
/***/ function(module, exports) {

	/**
	 * @Copyright (c) Microsoft Corporation.  All rights reserved.
	 *
	 * @file PropertyPaneField related interfaces.
	 */
	"use strict";
	/**
	 * Enum for all the supported PropertyPane field types.
	 *
	 * Names should be consistent with those in office-ui-fabric-react, be careful to get letter casing correct.
	 */
	(function (IPropertyPaneFieldType) {
	    /**
	     * Custom field.
	     */
	    IPropertyPaneFieldType[IPropertyPaneFieldType["Custom"] = 1] = "Custom";
	    /**
	     * Checkbox field.
	     */
	    IPropertyPaneFieldType[IPropertyPaneFieldType["CheckBox"] = 2] = "CheckBox";
	    /**
	     * TextField field.
	     */
	    IPropertyPaneFieldType[IPropertyPaneFieldType["TextField"] = 3] = "TextField";
	    /**
	     * Toggle field.
	     */
	    IPropertyPaneFieldType[IPropertyPaneFieldType["Toggle"] = 5] = "Toggle";
	    /**
	     * Dropdown field.
	     */
	    IPropertyPaneFieldType[IPropertyPaneFieldType["Dropdown"] = 6] = "Dropdown";
	    /**
	     * Label field.
	     */
	    IPropertyPaneFieldType[IPropertyPaneFieldType["Label"] = 7] = "Label";
	    /**
	     * Slider field.
	     */
	    IPropertyPaneFieldType[IPropertyPaneFieldType["Slider"] = 8] = "Slider";
	    /**
	     * Heading field.
	     */
	    IPropertyPaneFieldType[IPropertyPaneFieldType["Heading"] = 9] = "Heading";
	    /**
	     * Choice Group field.
	     */
	    IPropertyPaneFieldType[IPropertyPaneFieldType["ChoiceGroup"] = 10] = "ChoiceGroup";
	    /**
	     * Button field.
	     */
	    IPropertyPaneFieldType[IPropertyPaneFieldType["Button"] = 11] = "Button";
	    /**
	     * Horizontal Rule field.
	     */
	    IPropertyPaneFieldType[IPropertyPaneFieldType["HorizontalRule"] = 12] = "HorizontalRule";
	    /**
	     * Link field.
	     */
	    IPropertyPaneFieldType[IPropertyPaneFieldType["Link"] = 13] = "Link";
	})(exports.IPropertyPaneFieldType || (exports.IPropertyPaneFieldType = {}));
	var IPropertyPaneFieldType = exports.IPropertyPaneFieldType;
	


/***/ },
/* 217 */,
/* 218 */,
/* 219 */,
/* 220 */,
/* 221 */,
/* 222 */,
/* 223 */,
/* 224 */,
/* 225 */,
/* 226 */,
/* 227 */,
/* 228 */,
/* 229 */,
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @Copyright (c) Microsoft Corporation.  All rights reserved.
	 *
	 * Web part context.
	 */
	'use strict';
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var sp_client_base_1 = __webpack_require__(69);
	var ClientSideComponentContext_1 = __webpack_require__(231);
	/**
	 * Web part context object. This object contains the contextual services available to a web part. e.g.
	 * a contextual instance to the http client.
	 */
	/* tslint:disable:no-any */
	var WebPartContext = (function (_super) {
	    __extends(WebPartContext, _super);
	    function WebPartContext(context, 
	        /* tslint:disable:no-any */
	        manifestInstance, 
	        /* tslint:enable:no-any */
	        host, statusRenderer, eventAggregator, configureStart, webPartTag) {
	        _super.call(this, context.domElement, manifestInstance);
	        this._instanceId = context.instanceId;
	        this._webPartTag = webPartTag;
	        this._host = host;
	        this._serviceScope = this._createWebPartServiceScope(host.serviceScope);
	        this._httpClient = this._serviceScope.consume(sp_client_base_1.httpClientServiceKey);
	        this._basicHttpClient = this._serviceScope.consume(sp_client_base_1.basicHttpClientServiceKey);
	        this._pageContext = this._serviceScope.consume(sp_client_base_1.pageContextServiceKey);
	        this._environment = this._serviceScope.consume(sp_client_base_1.environmentServiceKey);
	        this._statusRenderer = statusRenderer;
	        this._eventAggregator = eventAggregator;
	        this._configureStart = configureStart;
	    }
	    Object.defineProperty(WebPartContext.prototype, "instanceId", {
	        /**
	         * @see IWebPartContext
	         */
	        get: function () { return this._instanceId; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(WebPartContext.prototype, "webPartTag", {
	        /**
	         * @see IWebPartContext
	         */
	        get: function () { return this._webPartTag; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(WebPartContext.prototype, "httpClient", {
	        /**
	         * @see IWebPartContext
	         */
	        get: function () { return this._httpClient; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(WebPartContext.prototype, "basicHttpClient", {
	        /**
	         * @see IWebPartContext
	         */
	        get: function () { return this._basicHttpClient; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(WebPartContext.prototype, "pageContext", {
	        /**
	         * @see IWebPartContext
	         */
	        get: function () { return this._pageContext; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(WebPartContext.prototype, "statusRenderer", {
	        /**
	         * @see IWebPartContext
	         */
	        get: function () { return this._statusRenderer; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(WebPartContext.prototype, "eventAggregator", {
	        /**
	         * @see IWebPartContext
	         */
	        get: function () { return this._eventAggregator; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(WebPartContext.prototype, "configureStart", {
	        /**
	         * @see IWebPartContext
	         */
	        get: function () {
	            return this._configureStart;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(WebPartContext.prototype, "host", {
	        /**
	         * @see IWebPartContext
	         */
	        get: function () { return this._host; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(WebPartContext.prototype, "serviceScope", {
	        /**
	         * @see IWebPartContext
	         */
	        get: function () { return this._serviceScope; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(WebPartContext.prototype, "environment", {
	        /**
	         * @see IWebPartContext
	         */
	        get: function () { return this._environment; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Create a web part specific service scope.
	     *
	     * @param context - Web part manager context
	     */
	    WebPartContext.prototype._createWebPartServiceScope = function (parentScope) {
	        var webPartScope = parentScope.startNewChild();
	        webPartScope.createDefaultAndProvide(sp_client_base_1.basicHttpClientServiceKey);
	        webPartScope.createDefaultAndProvide(sp_client_base_1.httpClientServiceKey);
	        webPartScope.provide(sp_client_base_1._logSourceServiceKey, sp_client_base_1._LogSource.create(this._webPartTag));
	        webPartScope.finish();
	        return webPartScope;
	    };
	    return WebPartContext;
	}(ClientSideComponentContext_1.default));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = WebPartContext;
	


/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @Copyright (c) Microsoft Corporation.  All rights reserved.
	 *
	 * Client side component context.
	 */
	'use strict';
	var sp_client_base_1 = __webpack_require__(69);
	/**
	 * Context for all client side components
	 */
	var ClientSideComponentContext = (function () {
	    /**
	     * @internal
	     */
	    function ClientSideComponentContext(domElement, manifest) {
	        sp_client_base_1.Validate.isNotNullOrUndefined(domElement, 'domElement');
	        sp_client_base_1.Validate.isNotNullOrUndefined(manifest, 'manifest');
	        this._domElement = domElement;
	        this._manifest = manifest;
	    }
	    Object.defineProperty(ClientSideComponentContext.prototype, "domElement", {
	        /**
	         * Reference to the DOM element that hosts this client side component.
	         */
	        get: function () { return this._domElement; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ClientSideComponentContext.prototype, "manifest", {
	        /**
	         * Client side component manifest
	         */
	        get: function () { return this._manifest; },
	        enumerable: true,
	        configurable: true
	    });
	    return ClientSideComponentContext;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = ClientSideComponentContext;
	


/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(233);
	


/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	var content = __webpack_require__(234);
	var loader = __webpack_require__(77);
	
	if(typeof content === "string") content = [[module.id, content]];
	
	// add the styles to the DOM
	for (var i = 0; i < content.length; i++) loader.loadStyles(content[i][1]);
	
	if(content.locals) module.exports = content.locals;

/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(76)();
	// imports
	
	
	// module
	exports.push([module.id, ".Canvas{padding:0 12px;position:relative}@media screen and (min-width:640px){.Canvas{padding:8px 48px}}@media screen and (max-width:640px){.Canvas--edit{padding:8px 48px}}.Canvas-screenReaderOnly{position:absolute;text-indent:-9999px;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;border:0}", ""]);
	
	// exports


/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Shell_1 = __webpack_require__(236);
	// This is the global instance that we export from our NPM package
	var _spShell = Shell_1.default.getInstance();
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = _spShell;
	


/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var sp_client_base_1 = __webpack_require__(69);
	var SuiteNavManager_1 = __webpack_require__(237);
	var SPPageChrome_1 = __webpack_require__(244);
	var PreloadedDataReader_1 = __webpack_require__(250);
	var AppPageContext_1 = __webpack_require__(90);
	/**
	 * RESERVED FOR INTERNAL USAGE.  Applications interact with the shell via
	 * the IShell interface.
	 *
	 * @internal
	 */
	var Shell = (function () {
	    function Shell() {
	    }
	    Shell.getInstance = function () {
	        if (Shell._instance === undefined) {
	            Shell._instance = new Shell();
	        }
	        return Shell._instance;
	    };
	    Object.defineProperty(Shell.prototype, "serviceScope", {
	        get: function () {
	            return this._rootServiceScope;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Shell.prototype, "pageContext", {
	        get: function () {
	            return this._pageContext;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Shell.prototype, "appPageContext", {
	        get: function () {
	            return this._appPageContext;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Shell.prototype, "basicHttpClient", {
	        get: function () {
	            return this._basicHttpClient;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Shell.prototype, "httpClient", {
	        get: function () {
	            return this._httpClient;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Shell.prototype, "suiteNav", {
	        get: function () {
	            return this._suiteNav;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Shell.prototype, "environment", {
	        get: function () {
	            return this._environment;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Shell.prototype.start = function (module, preloadedData) {
	        this._initializePreload(preloadedData);
	        sp_client_base_1._PerformanceLogger.markApplicationStart();
	        this._startApplication(module.default || module);
	    };
	    Shell.prototype._startApplication = function (application) {
	        /* tslint:disable:no-string-literal */
	        if (application['__type'] !== 'ClientSideApplication') {
	            /* tslint:enable:no-string-literal */
	            throw new Error('The application is not a subclass of ClientSideApplication');
	        }
	        this._application = application;
	        this._application.load(this);
	        // Checks if the page is being served by localhost, which doesn't provide SuiteNav Services
	        // @todo Bug 190509 Implement Mock SuiteNav
	        this._suiteNav = new SuiteNavManager_1.default(this._application.suiteNavConfiguration(), this._spPageChrome.suiteNavDiv, this.serviceScope);
	        this._suiteNav.loadSuiteNav();
	        this._application.render(this._spPageChrome.appDiv);
	    };
	    Shell.prototype._initializePreload = function (preloadedData) {
	        // We encountered IE compatibility errors when trying to access the window variable
	        // without using the [] notation
	        /* tslint:disable:no-string-literal */
	        window['_spClientSidePageContext'] = preloadedData;
	        // HACK (VSO#221483): Setting the _spPageContextInfo on the window to workaround Manifest v2 issues
	        window['_spPageContextInfo'] = preloadedData.spPageContextInfo;
	        /* tslint:enable:no-string-literal */
	        sp_client_base_1._TraceLogger.logVerbose(Shell._logSource, 'Starting sp-client-preview');
	        this._rootServiceScope = sp_client_base_1.ServiceScope.startNewRoot();
	        this._environment = this._rootServiceScope
	            .createDefaultAndProvide(sp_client_base_1.environmentServiceKey);
	        this._pageContext = this._rootServiceScope
	            .createDefaultAndProvide(sp_client_base_1.pageContextServiceKey);
	        this._appPageContext = this._rootServiceScope
	            .createDefaultAndProvide(AppPageContext_1.appPageContextServiceKey);
	        this._basicHttpClient = this._rootServiceScope.createAndProvide(sp_client_base_1.basicHttpClientServiceKey, sp_client_base_1.BasicHttpClient);
	        this._httpClient = this._rootServiceScope.createAndProvide(sp_client_base_1.httpClientServiceKey, sp_client_base_1.HttpClient);
	        this._rootServiceScope.finish();
	        this._preloadedDataReader = new PreloadedDataReader_1.default(preloadedData);
	        this._initializeEnvironment(this._environment);
	        this._preloadedDataReader.initializeDigestCache(this._rootServiceScope);
	        this._preloadedDataReader.initializePageContext(this._appPageContext);
	        this._initializePageContextFromAppContext(this._pageContext, this._appPageContext);
	        this._spPageChrome = SPPageChrome_1.default.getInstance(this._rootServiceScope);
	    };
	    /**
	     * Populates the webPart pageContext using the data from the app Page Context. AppPageContext
	     * must be populated already.
	     */
	    Shell.prototype._initializePageContextFromAppContext = function (pageContext, appPageContext) {
	        pageContext.initialize({
	            cultureInfo: {
	                currentCultureName: appPageContext.core.currentCultureName,
	                currentUICultureName: appPageContext.core.currentUICultureName
	            },
	            site: {
	                id: appPageContext.core.siteId
	            },
	            user: {
	                displayName: appPageContext.core.userDisplayName,
	                loginName: appPageContext.core.userLoginName
	            },
	            web: {
	                absoluteUrl: appPageContext.core.webAbsoluteUrl,
	                id: appPageContext.core.webId,
	                serverRelativeUrl: appPageContext.core.webServerRelativeUrl,
	                title: appPageContext.core.webTitle
	            }
	        });
	    };
	    Shell.prototype._initializeEnvironment = function (environment) {
	        var type;
	        /* tslint:disable:no-string-literal */
	        if (window.location.hostname === 'localhost' ||
	            window['ENVIRONMENTTYPE'] &&
	                window['ENVIRONMENTTYPE'] === 'Local') {
	            /* tslint:enable:no-string-literal */
	            type = sp_client_base_1.EnvironmentType.Local;
	        }
	        else {
	            type = sp_client_base_1.EnvironmentType.SharePoint;
	        }
	        environment._initialize(type);
	    };
	    Shell._logSource = sp_client_base_1._LogSource.create('Shell');
	    Shell._instance = undefined;
	    return Shell;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = Shell;
	


/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @Copyright (c) Microsoft Corporation.  All rights reserved.
	 *
	 * @file Data source for the suite nav.
	 */
	"use strict";
	var sp_client_base_1 = __webpack_require__(69);
	var sp_module_loader_1 = __webpack_require__(204);
	var odsp_utilities_bundle_1 = __webpack_require__(6);
	var ISuiteNavDataSource_1 = __webpack_require__(238);
	var SPOSuiteNavDataSource_1 = __webpack_require__(239);
	var OnPremSuiteNavDataSource_1 = __webpack_require__(240);
	var O365ShellWrapper_1 = __webpack_require__(241);
	var SPPageChrome_1 = __webpack_require__(244);
	var SuiteNavManager = (function () {
	    function SuiteNavManager(suiteNavManagerConfiguration, suiteNavDiv, serviceScope) {
	        var _this = this;
	        this._suiteNavManagerConfiguration = suiteNavManagerConfiguration;
	        this._suiteNavDataSource = undefined;
	        this._o365Shell = undefined;
	        this._suiteNavManagerConfiguration.o365ShellRenderSettings.top = suiteNavDiv.id;
	        this._suiteNavDiv = suiteNavDiv;
	        this._serviceScope = serviceScope;
	        serviceScope.whenFinished(function () {
	            _this._httpClient = serviceScope.consume(sp_client_base_1.httpClientServiceKey);
	        });
	        if (!suiteNavManagerConfiguration.isSuiteNavDisabled()) {
	            SPPageChrome_1.default.getInstance(this._serviceScope).changeSuiteNavHeight(SuiteNavManager._defaultSuiteNavHeight);
	        }
	    }
	    SuiteNavManager._updateCache = function (model, service) {
	        SuiteNavManager._cache.setValue(SuiteNavManager.DATA_KEY, model);
	        SuiteNavManager._cache.setValue(SuiteNavManager.DATE_KEY, new Date());
	        SuiteNavManager._cache.setValue(SuiteNavManager.VERSION_KEY, SuiteNavManager.CACHE_VERSION);
	        SuiteNavManager._cache.setValue(SuiteNavManager.SESSION_KEY, true, odsp_utilities_bundle_1.DataStoreCachingType.session);
	        SuiteNavManager._cache.setValue(SuiteNavManager.SERVICE_KEY, service);
	    };
	    SuiteNavManager._clearCache = function () {
	        SuiteNavManager._cache.remove(SuiteNavManager.DATA_KEY);
	        SuiteNavManager._cache.remove(SuiteNavManager.DATE_KEY);
	        SuiteNavManager._cache.remove(SuiteNavManager.VERSION_KEY);
	        SuiteNavManager._cache.remove(SuiteNavManager.SERVICE_KEY);
	    };
	    /**
	     * Sets the SuiteNav to be visible or not.
	     * @param setVisible Set the visibility to be on or off.
	     */
	    SuiteNavManager.prototype.setComponentVisibility = function (setVisible) {
	        var _this = this;
	        this._suiteNavDiv.hidden = !setVisible;
	        if (this._suiteNavModel) {
	            this._suiteNavModel.then(function (model) {
	                SPPageChrome_1.default.getInstance(_this._serviceScope).changeSuiteNavHeight(setVisible ?
	                    model.NavBarData.Dimensions.Top :
	                    '0px');
	            });
	        }
	    };
	    /**
	     * Loads the SuiteNav into the page by obtaining the data, building the model, getting the shell wrapper
	     * and rendering it onto the page.
	     */
	    SuiteNavManager.prototype.loadSuiteNav = function () {
	        var _this = this;
	        if (!this._suiteNavManagerConfiguration.isSuiteNavDisabled()) {
	            this._suiteNavModel = this._getSuiteNavModel();
	            this._suiteNavModel
	                .then(function (suiteNavModel) { return _this._modifySuiteNavModel(suiteNavModel); })
	                .then(function (suiteNavModel) { return _this._getSuiteNavShell(suiteNavModel); })
	                .then(function (o365ShellWrapper) { return _this._renderSuiteNav(o365ShellWrapper); });
	        }
	    };
	    /**
	     * Gets the suite nav data. Tries to grab SPO and OnPrem version in parallel and if SPO fails then
	     * the onPrem version is loaded.
	     * @param webServerRelativeUrl represents the SharePoint web server relative URL
	     * @param cultureName represents the name of the culture (e.g. 'en-us')
	     * @returns a promise that resolves to a string containing the response from the Suite Nav service.
	     */
	    SuiteNavManager.prototype._getSuiteNavModel = function () {
	        if (this._isCacheValid() && !this._isCacheOutdated()) {
	            return this._loadSuiteNavFromCache();
	        }
	        else {
	            SuiteNavManager._clearCache();
	            return this._loadSuiteNavFromServer();
	        }
	    };
	    SuiteNavManager.prototype._loadSuiteNavFromCache = function () {
	        var _this = this;
	        return new Promise(function (complete) {
	            SuiteNavManager._cache.getValue(SuiteNavManager.SERVICE_KEY) ===
	                ISuiteNavDataSource_1.SuiteNavSource.SPO ?
	                _this._suiteNavDataSource = _this._createSPODataSource() :
	                _this._suiteNavDataSource = _this._createOnPremDataSource();
	            complete(SuiteNavManager._cache.getValue(SuiteNavManager.DATA_KEY));
	        });
	    };
	    SuiteNavManager.prototype._loadSuiteNavFromServer = function () {
	        var _this = this;
	        this._suiteNavDataSource = this._createSPODataSource();
	        var onPremDataSource = this._createOnPremDataSource();
	        var onPremSuiteNavResponse = onPremDataSource.loadData();
	        onPremSuiteNavResponse.catch(function () {
	            _this._createSuiteNavErrorLogEntry('loadData', 'Failed to retrieve Hybrid SuiteNavData');
	        });
	        return this._suiteNavDataSource.loadData().then(function (response) {
	            return response;
	        }).catch(function () {
	            _this._createSuiteNavErrorLogEntry('loadData', 'Failed to retrieve SPO SuiteNavData');
	            _this._suiteNavDataSource = onPremDataSource;
	            return onPremSuiteNavResponse;
	        });
	    };
	    /**
	    * Alters the server response with the suite nav data.
	    */
	    SuiteNavManager.prototype._modifySuiteNavModel = function (suiteNavResponse) {
	        suiteNavResponse.NavBarData =
	            this._suiteNavManagerConfiguration.modifySuiteNavData(suiteNavResponse.NavBarData);
	        return suiteNavResponse;
	    };
	    /**
	     * Gets the O365Shell object, once it's loaded. This will also load the shell CSS
	     */
	    SuiteNavManager.prototype._getSuiteNavShell = function (suiteNavModel) {
	        if (!suiteNavModel) {
	            this._createSuiteNavErrorLogEntry('getO365Shell', 'SuiteNavModel is undefined');
	        }
	        // update the cache
	        suiteNavModel.CacheToken = this._suiteNavManagerConfiguration.cacheToken;
	        suiteNavModel.UserIdentifier = this._suiteNavManagerConfiguration.systemUserKey;
	        SuiteNavManager._updateCache(suiteNavModel, this._suiteNavDataSource.suiteNavService);
	        SPPageChrome_1.default.getInstance(this._serviceScope).changeSuiteNavHeight(suiteNavModel.NavBarData.Dimensions.Top);
	        var element = document.createElement('link');
	        element.rel = 'stylesheet';
	        element.type = 'text/css';
	        element.href = suiteNavModel.CssUrl;
	        document.head.appendChild(element);
	        var promise = new Promise(function (complete) {
	            var loadShell = function () {
	                var o365Shell = new O365ShellWrapper_1.default();
	                o365Shell.SetData(suiteNavModel.NavBarData);
	                complete(o365Shell);
	            };
	            if (sp_module_loader_1.default && sp_module_loader_1.default.loadScript) {
	                sp_module_loader_1.default.loadScript(suiteNavModel.JsUrl, '_o365su').then(loadShell);
	            }
	            else if (System && System.config && System.import) {
	                System.config({
	                    map: {
	                        suiteNavJs: suiteNavModel.JsUrl
	                    },
	                    meta: {
	                        suiteNavJs: {
	                            format: 'global',
	                            exports: '_o365su'
	                        }
	                    }
	                });
	                System.import('suiteNavJs').then(loadShell);
	            }
	            else {
	                throw new Error('No loader could be found, unable to load the shell.');
	            }
	        });
	        return promise;
	    };
	    /**
	     * Renders the Suite Nav.
	     * @param o365Shell represents the Suite Nav shell wrapper.
	     * @param suiteNavData repsents the Suite Nav data that will be used for rendering.
	     */
	    SuiteNavManager.prototype._renderSuiteNav = function (o365Shell) {
	        var _this = this;
	        this._o365Shell = o365Shell;
	        this._o365Shell.RenderAsync(this._suiteNavManagerConfiguration.o365ShellRenderSettings, function () {
	            _this._onRender(o365Shell);
	        }, function () {
	            _this._onPostRender();
	        });
	        this._o365Shell.OnHasMember('LoadShellPlus', function () {
	            _this._loadShellPlus(_this._o365Shell);
	        });
	    };
	    SuiteNavManager.prototype._onRender = function (o365Shell) {
	        if (this._suiteNavManagerConfiguration.hamburgerCallback) {
	            if (o365Shell.Navigation.OnHamburgerButtonClick) {
	                o365Shell.Navigation.OnHamburgerButtonClick(this._suiteNavManagerConfiguration.hamburgerCallback);
	            }
	        }
	    };
	    SuiteNavManager.prototype._onPostRender = function () {
	        if (this._suiteNavManagerConfiguration.suiteNavPostRenderCallback) {
	            this._suiteNavManagerConfiguration.suiteNavPostRenderCallback();
	        }
	    };
	    /**
	      * LoadShellPlus will start downloading additional files required for notifications
	      * and such. Once ShellPlus is ready, postRenderActions will be called.
	      */
	    SuiteNavManager.prototype._loadShellPlus = function (o365Shell) {
	        var _this = this;
	        return new Promise(function () {
	            o365Shell.LoadShellPlus();
	        }).catch(function (errorMessage) {
	            _this._createSuiteNavErrorLogEntry('loadShellPlus', errorMessage);
	        });
	    };
	    SuiteNavManager.prototype._isCacheValid = function () {
	        // Cached data is valid (still usable for rendering) if:
	        // - the CSS URL and JS URL are present (if we're trying to load the real suite nav)
	        // - the data is for the same user
	        // - the cache version is the same
	        // - the site client tag is the same (if it's different, the theme has changed)
	        var model = SuiteNavManager._cache.getValue(SuiteNavManager.DATA_KEY);
	        var oldVersion = SuiteNavManager._cache.getValue(SuiteNavManager.VERSION_KEY);
	        return (model && model.NavBarData &&
	            ((model.JsUrl && model.CssUrl)) &&
	            oldVersion === SuiteNavManager.CACHE_VERSION &&
	            model.UserIdentifier &&
	            model.UserIdentifier === this._suiteNavManagerConfiguration.systemUserKey &&
	            model.CacheToken === this._suiteNavManagerConfiguration.cacheToken);
	    };
	    SuiteNavManager.prototype._isCacheOutdated = function () {
	        // "Outdated" means:
	        // - it's more than 24 hours old
	        // - it was not cached in the current browsing session (only applies if sessionStorage available)
	        var cacheDate = Date.parse(SuiteNavManager._cache.getValue(SuiteNavManager.DATE_KEY));
	        var currentDate = new Date();
	        var cachedThisSession = SuiteNavManager._cache.getValue(SuiteNavManager.SESSION_KEY, odsp_utilities_bundle_1.DataStoreCachingType.session);
	        return (isNaN(cacheDate) ||
	            currentDate.getTime() - cacheDate > 24 * 60 * 60 * 1000 ||
	            (odsp_utilities_bundle_1.DataStore.hasStorageType(odsp_utilities_bundle_1.DataStoreCachingType.session) && !cachedThisSession));
	    };
	    SuiteNavManager.prototype._createSPODataSource = function () {
	        return new SPOSuiteNavDataSource_1.default(this._httpClient, this._suiteNavManagerConfiguration.currentUICultureName, this._suiteNavManagerConfiguration.webServerRelativeUrl);
	    };
	    SuiteNavManager.prototype._createOnPremDataSource = function () {
	        return new OnPremSuiteNavDataSource_1.default(this._httpClient, this._suiteNavManagerConfiguration.currentUICultureName, this._suiteNavManagerConfiguration.webServerRelativeUrl);
	    };
	    /**
	    * Create a log entry for logging
	    * @param moduleName represents the module that the logger was called in
	    * @param errorMessage represents the error string that occured
	    */
	    SuiteNavManager.prototype._createSuiteNavErrorLogEntry = function (moduleName, errorMessage) {
	        sp_client_base_1._TraceLogger.logVerbose(SuiteNavManager._logSource, 'SuiteNavManager ' + moduleName + ' ' + errorMessage);
	    };
	    SuiteNavManager._defaultSuiteNavHeight = '50px';
	    SuiteNavManager.CACHE_PREFIX = 'SPPPLATSuiteNav';
	    SuiteNavManager.SERVICE_KEY = 'SuiteNavService';
	    SuiteNavManager.DATA_KEY = 'Data';
	    SuiteNavManager.DATE_KEY = 'CacheDate';
	    SuiteNavManager.VERSION_KEY = 'CacheVersion';
	    SuiteNavManager.SESSION_KEY = 'CachedThisSession';
	    // This constant can be used to invalidate the cache if we make incompatible changes
	    SuiteNavManager.CACHE_VERSION = 1;
	    SuiteNavManager._cache = new odsp_utilities_bundle_1.DataStore(SuiteNavManager.CACHE_PREFIX, odsp_utilities_bundle_1.DataStoreCachingType.local);
	    SuiteNavManager._logSource = sp_client_base_1._LogSource.create('SuiteNavManager');
	    return SuiteNavManager;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = SuiteNavManager;
	


/***/ },
/* 238 */
/***/ function(module, exports) {

	"use strict";
	(function (SuiteNavSource) {
	    SuiteNavSource[SuiteNavSource["SPO"] = 0] = "SPO";
	    SuiteNavSource[SuiteNavSource["OnPrem"] = 1] = "OnPrem";
	})(exports.SuiteNavSource || (exports.SuiteNavSource = {}));
	var SuiteNavSource = exports.SuiteNavSource;
	


/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file SPOSuiteNavDataSource.ts
	 * @Copyright (c) Microsoft Corporation.  All rights reserved.
	 */
	"use strict";
	var ISuiteNavDataSource_1 = __webpack_require__(238);
	var sp_client_base_1 = __webpack_require__(69);
	var SPOSuiteNavDataSource = (function () {
	    /**
	     * Initializes a new instance of the SPO
	     * @TODO Task 161973 Add PageContext and set the
	     * webPermissionMask/suiteNavData.UserDisplayName/webServerRelativeUrl/currentUICultureName
	     */
	    function SPOSuiteNavDataSource(httpClient, currentUICultureName, webServerRelativeUrl) {
	        this.suiteNavService = ISuiteNavDataSource_1.SuiteNavSource.SPO;
	        this._currentUICultureName = currentUICultureName;
	        this._httpClient = httpClient;
	        this._siteRelUrl = webServerRelativeUrl === '/' ? '' : webServerRelativeUrl;
	    }
	    // Downloads the SPO version of the SuiteNavData
	    SPOSuiteNavDataSource.prototype.loadData = function () {
	        var url = this._siteRelUrl
	            + '/_layouts/15/online/handlers/SpoSuiteLinks.ashx?Locale='
	            + this._currentUICultureName
	            + '&v=2&mobilereq=0&msajax=1';
	        return this._httpClient.post(url, {})
	            .then(function (response) {
	            if (response.status !== 200 || response.headers.get('SharePointError')) {
	                sp_client_base_1._TraceLogger.logVerbose(SPOSuiteNavDataSource._logSource, 'Failed to retrieve SPO SuiteNavData');
	                return Promise.reject('Failed to retrieve SPO SuiteNavData');
	            }
	            return response.json().then(function (jsonResponse) {
	                return jsonResponse;
	            });
	        });
	    };
	    // @TODO Bug 169685 change to readonly
	    SPOSuiteNavDataSource._logSource = sp_client_base_1._LogSource.create('SPOSuiteNavDataSource');
	    return SPOSuiteNavDataSource;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = SPOSuiteNavDataSource;
	


/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var SuiteNavManager_1 = __webpack_require__(237);
	var ISuiteNavDataSource_1 = __webpack_require__(238);
	var sp_client_base_1 = __webpack_require__(69);
	var OnPremSuiteNavDataSource = (function () {
	    /**
	     * Initializes a new instance of the SuiteNavManagerConfiguration
	     * @TODO Task 161973 Add PageContext and set the
	     * webPermissionMask/suiteNavData.UserDisplayName/webServerRelativeUrl/currentUICultureName
	     */
	    function OnPremSuiteNavDataSource(httpClient, currentUICultureName, webServerRelativeUrl) {
	        this.suiteNavService = ISuiteNavDataSource_1.SuiteNavSource.OnPrem;
	        this._currentUICultureName = currentUICultureName;
	        this._httpClient = httpClient;
	        this._siteRelUrl = webServerRelativeUrl === '/' ? '' : webServerRelativeUrl;
	    }
	    // Downloads the OnPrem version of the SuiteNavData
	    OnPremSuiteNavDataSource.prototype.loadData = function () {
	        var _this = this;
	        var url = this._siteRelUrl
	            + '/_api/Microsoft.SharePoint.Portal.SuiteNavData.GetSuiteNavData?v=2&Locale='
	            + this._currentUICultureName;
	        return this._httpClient.get(url)
	            .then(function (response) {
	            if (response.status !== 200) {
	                _this._logAndThrowSuiteNavLoadingError();
	            }
	            return response.json().then(function (jsonString) {
	                if (jsonString.value === '') {
	                    _this._logAndThrowSuiteNavLoadingError();
	                }
	                else {
	                    var suiteNavResponse = JSON.parse(jsonString.value);
	                    // If the height of the suiteNav is not provided, assume that it is 50px
	                    if (!suiteNavResponse.NavBarData.Dimensions) {
	                        suiteNavResponse.NavBarData.Dimensions = { Top: SuiteNavManager_1.default._defaultSuiteNavHeight };
	                    }
	                    return suiteNavResponse;
	                }
	            });
	        });
	    };
	    OnPremSuiteNavDataSource.prototype._logAndThrowSuiteNavLoadingError = function () {
	        sp_client_base_1._TraceLogger.logVerbose(OnPremSuiteNavDataSource._logSource, 'Failed to retrieve Hybrid SuiteNavData');
	        throw new Error('Failed to retrieve Hybrid SuiteNavData');
	    };
	    // @TODO Bug 169685 change to readonly
	    OnPremSuiteNavDataSource._logSource = sp_client_base_1._LogSource.create('OnPremSuiteNavDataSource');
	    return OnPremSuiteNavDataSource;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = OnPremSuiteNavDataSource;
	


/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @Copyright (c) Microsoft Corporation.  All rights reserved.
	 *
	 * @file Wrapper around the O365Shell global, preventing other files from needing to access the global
	 */
	"use strict";
	var FlexPaneWrapper_1 = __webpack_require__(242);
	var NavigationWrapper_1 = __webpack_require__(243);
	var O365ShellWrapper = (function () {
	    function O365ShellWrapper() {
	        this._postRenderSignal = new Promise(function () {
	            return;
	        });
	        this.FlexPane = new FlexPaneWrapper_1.default();
	        this.Navigation = new NavigationWrapper_1.default();
	    }
	    /**
	     * Sets the data to be consumed by the O365Shell
	     */
	    O365ShellWrapper.prototype.SetData = function (shellData) {
	        O365Shell.SetData(shellData);
	    };
	    /**
	     * Instructs the 0365 shell to render
	     */
	    O365ShellWrapper.prototype.Render = function (renderSettings, postRendercallback) {
	        O365Shell.Render(renderSettings, postRendercallback);
	    };
	    /**
	     * Instructs the 0365 shell to render async
	     */
	    O365ShellWrapper.prototype.RenderAsync = function (renderSettings, renderCallback, postRenderCallback) {
	        O365Shell.RenderAsync(renderSettings, renderCallback, postRenderCallback);
	    };
	    /**
	     * Load shell plus (extra features like notifications). Only functions properly on SPO.
	     */
	    O365ShellWrapper.prototype.LoadShellPlus = function () {
	        O365Shell.LoadShellPlus();
	    };
	    /**
	     * Not provided by O365Shell. Tells whether the O365Shell global exists.
	     */
	    O365ShellWrapper.prototype.DoesShellExist = function () {
	        return typeof O365Shell !== 'undefined';
	    };
	    /**
	     * This is not provided by O365Shell. It invokes a given callback when a member/function
	     * name is defined. This is useful when a component is trying to access a O365Shell
	     * member but is not in charge of loading it.
	     *
	     * @params member name to be checked for avaliability
	     * @parmas callback function to be called if the member is avaliable
	     */
	    O365ShellWrapper.prototype.OnHasMember = function (memberName, callback) {
	        var _this = this;
	        if (this._hasMember(memberName)) {
	            callback();
	        }
	        else {
	            /** Wait for the next render completition and call this method recursively to check if the member
	             * is now available.
	             */
	            this._postRenderSignal.then(function () { return _this.OnHasMember(memberName, callback); });
	        }
	    };
	    /**
	    * This is not provided by O365Shell. It just checks if a given member/function name
	    * is defined on the global shell object, as an alternative to if (O365Shell.Whatever) { ... }.
	    */
	    O365ShellWrapper.prototype._hasMember = function (memberName) {
	        return this.DoesShellExist() && Boolean(O365Shell[memberName]);
	    };
	    return O365ShellWrapper;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = O365ShellWrapper;
	


/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @Copyright (c) Microsoft Corporation.  All rights reserved.
	 *
	 * @file Wrapper around the O365Shell.FlexPane global, preventing other files
	 * from needing to access the global
	 */
	"use strict";
	var sp_client_base_1 = __webpack_require__(69);
	var FlexPaneWrapper = (function () {
	    function FlexPaneWrapper() {
	    }
	    /* tslint:disable:no-any */
	    FlexPaneWrapper.prototype.OnFlexPaneVisibilityChanged = function (callback) {
	        /* tslint:enable:no-any */
	        try {
	            return O365Shell.FlexPane.OnFlexPaneVisibilityChanged(callback);
	        }
	        catch (e) {
	            this._createFlexPaneWrapperErrorLogEntry('OnFlexPaneVisibilityChanged', e);
	        }
	    };
	    FlexPaneWrapper.prototype.OpenFlexPaneForProvider = function (provider) {
	        try {
	            O365Shell.FlexPane.OpenFlexPaneForProvider(provider);
	        }
	        catch (e) {
	            this._createFlexPaneWrapperErrorLogEntry('OpenFlexPaneForProvider', e);
	        }
	    };
	    /**
	     * Create a log entry for logging
	     * @param moduleName represents the module that the logger was called in
	     * @param errorMessage represents the error string that occured
	     * @returns a SuiteNav Error Log Entry
	     */
	    FlexPaneWrapper.prototype._createFlexPaneWrapperErrorLogEntry = function (moduleName, errorMessage) {
	        sp_client_base_1._TraceLogger.logVerbose(FlexPaneWrapper.logSource, 'FlexPaneWrapper ' + moduleName + ' ' + errorMessage);
	    };
	    FlexPaneWrapper.logSource = sp_client_base_1._LogSource.create('FlexPaneWrapper');
	    return FlexPaneWrapper;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = FlexPaneWrapper;
	


/***/ },
/* 243 */
/***/ function(module, exports) {

	/**
	 * @Copyright (c) Microsoft Corporation.  All rights reserved.
	 *
	 * @file Wrapper around the O365Shell.Navigation global, preventing other
	 * files from needing to access the global
	 */
	"use strict";
	var NavigationWrapper = (function () {
	    function NavigationWrapper() {
	    }
	    NavigationWrapper.prototype.OnLinkClick = function (callback) {
	        return O365Shell.Navigation.OnLinkClick(callback);
	    };
	    NavigationWrapper.prototype.OnHamburgerButtonClick = function (callback) {
	        return O365Shell.Navigation.OnHamburgerButtonClick(callback);
	    };
	    return NavigationWrapper;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = NavigationWrapper;
	


/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	__webpack_require__(112);
	var SPThemeProvider_1 = __webpack_require__(245);
	var sp_client_base_1 = __webpack_require__(69);
	__webpack_require__(247);
	var SPPageChrome = (function () {
	    function SPPageChrome(serviceScope) {
	        this._createPageChrome();
	        if (!sp_client_base_1.SPKillSwitch.isActivated(sp_client_base_1.Guid.tryParse('48CB5A9D-4E94-40F0-B51F-24480C28E565'), '7/13/2016', 'EnableTheming')) {
	            this._spThemeProvider = new SPThemeProvider_1.default(serviceScope);
	            this._spThemeProvider.loadThemedStyles();
	        }
	    }
	    SPPageChrome.getInstance = function (serviceScope) {
	        if (SPPageChrome._instance === undefined) {
	            SPPageChrome._instance = new SPPageChrome(serviceScope);
	        }
	        return SPPageChrome._instance;
	    };
	    SPPageChrome.prototype.changeSuiteNavHeight = function (pixels) {
	        var top = parseInt(pixels, 10) + 'px';
	        this.appDiv.style.top = top;
	        this.appDiv.style.height = "calc(100% - " + top + ")";
	        this.propertyPaneContainerDiv.style.top = top;
	        this.suiteNavDiv.style.height = top;
	    };
	    /**
	     * Creates div elements that are used to render the Standard Page Chrome for
	     * Client Side Applications. The structure of the Page Chrome is:
	     *
	     * SPPageChrome - Parent Div for Client Side Applications
	     * -SuiteNav - O365 SuiteNav
	     * --App - Div Element where the application will be rendered.
	     */
	    SPPageChrome.prototype._createPageChrome = function () {
	        document.body.className = 'ms-font-m';
	        var pageChromeDiv = document.createElement('div');
	        pageChromeDiv.setAttribute('class', 'SPPageChrome');
	        this.suiteNavDiv = document.createElement('div');
	        this.suiteNavDiv.setAttribute('id', 'SuiteNavPlaceHolder');
	        this.appDiv = document.createElement('div');
	        this.appDiv.setAttribute('class', 'SPPageChrome-app spPageContentTransition');
	        this.appDiv.setAttribute('id', 'spPageChromeAppDiv');
	        this.propertyPaneContainerDiv = document.createElement('div');
	        this.propertyPaneContainerDiv.setAttribute('class', 'spPropertyPaneContainer spPageContentTransition');
	        this.propertyPaneContainerDiv.setAttribute('id', 'spPropertyPaneContainer');
	        pageChromeDiv.appendChild(this.suiteNavDiv);
	        pageChromeDiv.appendChild(this.appDiv);
	        pageChromeDiv.appendChild(this.propertyPaneContainerDiv);
	        document.body.appendChild(pageChromeDiv);
	    };
	    return SPPageChrome;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = SPPageChrome;
	


/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	// TODO (Bug 223178) Move Theming engine from odsp-utilities to sp-client\platform\sp-client-shared
	var odsp_utilities_bundle_1 = __webpack_require__(6);
	var odsp_utilities_bundle_2 = __webpack_require__(6);
	var odsp_utilities_bundle_3 = __webpack_require__(6);
	var sp_client_base_1 = __webpack_require__(69);
	var AppPageContext_1 = __webpack_require__(90);
	var SPWebTemplateIds_1 = __webpack_require__(246);
	var load_themed_styles_1 = __webpack_require__(77);
	/**
	 * The class controls applying a theme to the current Page.
	 * The theme is a web level setting, if a theme is applied this class with call loadtheme
	 * which will update the styles that are registered with load-themed-styles.
	 *
	 * The loadData method is called by the ThemeProvider class when it needs to get the IThemeData.
	 * Once it has theme data it will cache it in local storage using the themedCssFolderUrl as the cache key.
	 */
	var SPThemeProvider = (function () {
	    function SPThemeProvider(serviceScope) {
	        var _this = this;
	        serviceScope.whenFinished(function () {
	            _this._pageContext = serviceScope.consume(AppPageContext_1.appPageContextServiceKey);
	            _this._httpClient = serviceScope.consume(sp_client_base_1.httpClientServiceKey);
	            _this._themeProvider = new odsp_utilities_bundle_3.ThemeProvider(_this.loadData.bind(_this));
	            // Check for a theme override from the URL (as in the theme preview page).
	            try {
	                var contextUri = new odsp_utilities_bundle_3.Uri(window.location.href);
	                _this._themeOverride = contextUri.getQueryParameter('ThemeOverride');
	            }
	            catch (ignoredUrlException) {
	            }
	        });
	    }
	    SPThemeProvider.prototype.loadThemedStyles = function () {
	        var cacheToken = this.getCacheToken();
	        this._themeProvider.loadThemeTokenMap(cacheToken)
	            .then(function (palette) {
	            load_themed_styles_1.loadTheme(palette);
	        });
	    };
	    SPThemeProvider.prototype.loadData = function () {
	        var _this = this;
	        var tagName = 'SPThemeProvider.loadData';
	        var qosMonitor = new sp_client_base_1._QosMonitor(tagName);
	        if (this._pageContext.core.webTemplate) {
	            if (this._pageContext.core.webTemplate === SPWebTemplateIds_1.default.teamSite ||
	                this._pageContext.core.webTemplate === SPWebTemplateIds_1.default.groupSite) {
	                // check if the site has a theme applied
	                if (this._pageContext.core.themedCssFolderUrl) {
	                    // Fetch Theme Data from SharePoint
	                    var getThemeDataUrl_1 = odsp_utilities_bundle_3.WebTheme.makeWebThemeRestUrl(this._pageContext.core.siteServerRelativeUrl, this._pageContext.core.currentUICultureName, this._themeOverride);
	                    return new odsp_utilities_bundle_1.Promise(function (resolve, reject) {
	                        _this._httpClient.get(getThemeDataUrl_1)
	                            .then(function (response) {
	                            if (response.status === 200) {
	                                return response.json()
	                                    .then(function (json) {
	                                    /* tslint:enable:no-any */
	                                    var themeDataRaw = JSON.parse(json.value);
	                                    if (themeDataRaw) {
	                                        var themeData = odsp_utilities_bundle_3.WebTheme.processRawThemeData(themeDataRaw);
	                                        themeData.cacheToken = _this._pageContext.core.themedCssFolderUrl;
	                                        qosMonitor.writeSuccess();
	                                        resolve(themeData);
	                                    }
	                                    else {
	                                        // ThemeProvider will handle undefined themeData as an error
	                                        qosMonitor.writeUnexpectedFailure();
	                                        resolve(undefined);
	                                    }
	                                });
	                            }
	                            else {
	                                // ThemeProvider will handle undefined themeData as an error
	                                qosMonitor.writeUnexpectedFailure(tagName, new Error(response.statusText));
	                                resolve(undefined);
	                            }
	                        });
	                    });
	                }
	                else if (this._pageContext.core.groupColor) {
	                    // Generate a Fabric theme from the site color
	                    var htmlThemeColor = this._pageContext.core.groupColor;
	                    var rgbaThemeColor = odsp_utilities_bundle_2.RgbaColor.fromHtmlColor(htmlThemeColor);
	                    if (rgbaThemeColor) {
	                        var fabTheme = {
	                            backgroundImageUri: undefined,
	                            cacheToken: this.getCacheToken(),
	                            isDefault: false,
	                            isInverted: false,
	                            palette: odsp_utilities_bundle_2.FabricTheming.generateFabricColors(rgbaThemeColor),
	                            version: '1'
	                        };
	                        return odsp_utilities_bundle_1.Promise.wrap(fabTheme);
	                    }
	                    else {
	                        // Return no theme to indicate default theme values should be used.
	                        return odsp_utilities_bundle_1.Promise.wrap();
	                    }
	                }
	                else {
	                    // Use Default SharePoint Color Palette
	                    qosMonitor.writeSuccess();
	                    return odsp_utilities_bundle_1.Promise.wrap(this.createDefaultTheme());
	                }
	            }
	            else {
	                // Unknown Web Template, Use Default
	                qosMonitor.writeExpectedFailure("Unsuppted WebTemplate: " + this._pageContext.core.webTemplate);
	                return odsp_utilities_bundle_1.Promise.wrap(this.createDefaultTheme());
	            }
	        }
	        else {
	            qosMonitor.writeUnexpectedFailure("pageContext.core.webTemplate is undefined");
	            return odsp_utilities_bundle_1.Promise.wrap(this.createDefaultTheme());
	        }
	    };
	    SPThemeProvider.prototype.createDefaultTheme = function () {
	        var themeData = {
	            backgroundImageUri: undefined,
	            cacheToken: undefined,
	            isDefault: undefined,
	            isInverted: false,
	            palette: undefined,
	            version: '1.0'
	        };
	        return themeData;
	    };
	    SPThemeProvider.prototype.getCacheToken = function () {
	        var webTemplate = String(this._pageContext.core.webTemplate);
	        var groupColor = webTemplate === SPWebTemplateIds_1.default.teamSite ||
	            webTemplate === SPWebTemplateIds_1.default.groupSite ? this._pageContext.core.groupColor : undefined;
	        var groupColorToken = groupColor && (groupColor + ';web#' + webTemplate);
	        return this._themeOverride || this._pageContext.core.themedCssFolderUrl || groupColorToken;
	    };
	    return SPThemeProvider;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = SPThemeProvider;
	


/***/ },
/* 246 */
/***/ function(module, exports) {

	"use strict";
	/**
	 * Represents the Web Template Ids
	 * https://msdn.microsoft.com/en-us/library/microsoft.sharepoint.spweb.webtemplateid.aspx
	 */
	var SPWebTemplateIds = (function () {
	    function SPWebTemplateIds() {
	    }
	    SPWebTemplateIds.teamSite = '1';
	    SPWebTemplateIds.groupSite = '64';
	    return SPWebTemplateIds;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = SPWebTemplateIds;
	


/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(248);
	


/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	var content = __webpack_require__(249);
	var loader = __webpack_require__(77);
	
	if(typeof content === "string") content = [[module.id, content]];
	
	// add the styles to the DOM
	for (var i = 0; i < content.length; i++) loader.loadStyles(content[i][1]);
	
	if(content.locals) module.exports = content.locals;

/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(76)();
	// imports
	
	
	// module
	exports.push([module.id, "body{overflow:hidden}#SuiteNavPlaceHolder{background-color:#333;position:absolute;width:100%;z-index:5}.SPPageChrome-app{position:absolute;right:0;bottom:0;left:0;overflow:visible}.spPropertyPaneContainer{position:fixed;right:-340px;bottom:0}.spPageContentTransition{transition:right 367ms cubic-bezier(.1,.9,.2,1);-webkit-transition:right 367ms cubic-bezier(.1,.9,.2,1)}", ""]);
	
	// exports


/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var sp_client_base_1 = __webpack_require__(69);
	var GuidHelpers_1 = __webpack_require__(93);
	var SPNavigationNode_1 = __webpack_require__(102);
	var PreloadedDataReader = (function () {
	    function PreloadedDataReader(preloadedData) {
	        this._preloadedData = preloadedData;
	        this._isValid = false;
	        if (this._preloadedData === undefined ||
	            !GuidHelpers_1.default.isValid(this._preloadedData.clientSideApplicationId)) {
	            console.log('Warning: PreloadedDataReader: No preloaded data was found');
	        }
	        else {
	            this._isValid = true;
	            if (this._preloadedData.spPageContextInfo) {
	                sp_client_base_1.SPFlight.initialize(this._preloadedData.spPageContextInfo.ExpFeatures);
	                sp_client_base_1.SPKillSwitch.initialize(this._preloadedData.spPageContextInfo.killSwitches);
	            }
	        }
	    }
	    PreloadedDataReader._toNavNodes = function (srcNodes, pageContext) {
	        var items = new Array();
	        if (srcNodes) {
	            for (var i = 0; i < srcNodes.length; i++) {
	                var srcItem = srcNodes[i];
	                var item = new SPNavigationNode_1.default(pageContext);
	                item.load({ id: srcItem.Id });
	                item.updateOdataObject(srcItem);
	                items.push(item);
	            }
	        }
	        return items;
	    };
	    PreloadedDataReader.prototype.initializeDigestCache = function (serviceScope) {
	        var _this = this;
	        if (this._isValid) {
	            // @todo: (VSO task #163923) This will need to be updated when PreloadedDataReader
	            // is wired up to the final version of HttpClient from sp-client-base.
	            if (this._preloadedData.contextWebInfo
	                && this._preloadedData.spPageContextInfo
	                && this._preloadedData.spPageContextInfo.webServerRelativeUrl) {
	                serviceScope.whenFinished(function () {
	                    var digestCache = serviceScope.consume(sp_client_base_1.digestCacheServiceKey);
	                    console.log('PreloadedDataReader: Added preloaded FormDigestValue to cache');
	                    var expirationTimestamp = performance.now()
	                        + 1000 * _this._preloadedData.contextWebInfo.FormDigestTimeoutSeconds;
	                    digestCache.addDigestToCache(_this._preloadedData.spPageContextInfo.webServerRelativeUrl, _this._preloadedData.contextWebInfo.FormDigestValue, expirationTimestamp);
	                });
	            }
	        }
	    };
	    PreloadedDataReader.prototype.initializePageContext = function (pageContext) {
	        if (this._isValid) {
	            pageContext.application.load({
	                clientSideApplicationId: this._preloadedData.clientSideApplicationId,
	                hostedByClassicPage: false
	            });
	            pageContext.web.updateOdataObject(undefined);
	            pageContext.list.updateOdataObject(undefined);
	            pageContext.listItem.updateOdataObject(undefined);
	            pageContext.core.updateOdataObject(undefined);
	            var web = this._preloadedData.web;
	            if (web) {
	                pageContext.web.load({
	                    id: GuidHelpers_1.default.getNormalized(web.Id),
	                    serverRelativeUrl: web.ServerRelativeUrl,
	                    title: web.Title
	                });
	                pageContext.web.updateOdataObject(web);
	            }
	            var list = this._preloadedData.list;
	            if (list) {
	                pageContext.list.load({
	                    id: GuidHelpers_1.default.getNormalized(list.Id),
	                    title: list.Title,
	                    description: list.Description
	                });
	                pageContext.list.updateOdataObject(list);
	            }
	            var listItem = this._preloadedData.item;
	            if (listItem) {
	                pageContext.listItem.load({
	                    id: listItem.ID
	                });
	                pageContext.listItem.updateOdataObject(listItem);
	            }
	            var user = this._preloadedData.user;
	            if (user) {
	                pageContext.user.load({
	                    id: user.Id
	                });
	                pageContext.user.updateOdataObject(user);
	            }
	            var spPageContextInfo = this._preloadedData.spPageContextInfo;
	            if (spPageContextInfo) {
	                pageContext.core.load({
	                    MenuData: spPageContextInfo.MenuData,
	                    currentCultureName: spPageContextInfo.currentCultureName,
	                    currentUICultureName: spPageContextInfo.currentUICultureName,
	                    correlationId: spPageContextInfo.CorrelationId,
	                    spoEnvironment: spPageContextInfo.env,
	                    farmLabel: spPageContextInfo.farmLabel,
	                    groupColor: spPageContextInfo.groupColor,
	                    hasManageWebPermission: spPageContextInfo.hasManageWebPermission,
	                    layoutsUrl: spPageContextInfo.layoutsUrl,
	                    listPermsMask: spPageContextInfo.listPermsMask,
	                    siteAbsoluteUrl: spPageContextInfo.siteAbsoluteUrl,
	                    siteClientTag: spPageContextInfo.siteClientTag,
	                    siteId: spPageContextInfo.siteId,
	                    siteServerRelativeUrl: spPageContextInfo.siteServerRelativeUrl,
	                    siteSubscriptionId: spPageContextInfo.siteSubscriptionId,
	                    systemUserKey: spPageContextInfo.systemUserKey,
	                    themedCssFolderUrl: spPageContextInfo.themedCssFolderUrl,
	                    userDisplayName: spPageContextInfo.userDisplayName,
	                    userLoginName: spPageContextInfo.userLoginName,
	                    webAbsoluteUrl: spPageContextInfo.webAbsoluteUrl,
	                    webId: spPageContextInfo.webId,
	                    webLogoUrl: spPageContextInfo.webLogoUrl,
	                    webServerRelativeUrl: spPageContextInfo.webServerRelativeUrl,
	                    webTitle: spPageContextInfo.webTitle,
	                    webTemplate: spPageContextInfo.webTemplate,
	                    webPermMasks: spPageContextInfo.webPermMasks
	                });
	                pageContext.core.updateOdataObject(spPageContextInfo);
	            }
	            if (this._preloadedData.publicCdnOrigin) {
	                sp_client_base_1.SPCdnUrlProvider.initialize(this._preloadedData.publicCdnOrigin);
	            }
	        }
	        else if (window['_spPageContextInfo'] !== undefined) {
	            // Fallback for classic pages
	            pageContext.application.load({
	                clientSideApplicationId: '00000000-0000-0000-0000-000000000000',
	                hostedByClassicPage: true
	            });
	            pageContext.web.load({
	                id: '00000000-0000-0000-0000-000000000000',
	                serverRelativeUrl: _spPageContextInfo.webServerRelativeUrl,
	                title: _spPageContextInfo.webTitle
	            });
	            if (_spPageContextInfo.pageListId) {
	                pageContext.list.load({
	                    id: GuidHelpers_1.default.getNormalized(_spPageContextInfo.pageListId),
	                    title: '',
	                    description: ''
	                });
	                if (_spPageContextInfo.pageItemId) {
	                    pageContext.listItem.load({
	                        id: _spPageContextInfo.pageItemId
	                    });
	                }
	            }
	        }
	        else {
	        }
	        if (this._preloadedData.spPageContextInfo && this._preloadedData.spPageContextInfo.navigationInfo) {
	            this._initNav(pageContext.quickLaunch, this._preloadedData.spPageContextInfo.navigationInfo.quickLaunch, pageContext);
	            this._initNav(pageContext.topNav, this._preloadedData.spPageContextInfo.navigationInfo.topNav, pageContext);
	        }
	    };
	    PreloadedDataReader.prototype._initNav = function (target, source, pageContext) {
	        if (!target || !source) {
	            return;
	        }
	        target.updateOdataObject(source);
	        var items = PreloadedDataReader._toNavNodes(source, pageContext);
	        target.items = items;
	    };
	    return PreloadedDataReader;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = PreloadedDataReader;
	


/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @Copyright (c) Microsoft Corporation.  All rights reserved.
	 *
	 * @file PropertyPaneCustomField.
	 */
	"use strict";
	var IPropertyPaneField_1 = __webpack_require__(216);
	/**
	 * Helper method to create a Choice Group on the PropertyPane.
	 * @param targetProperty - Target property the choice group is associated to.
	 * @param properties - Strongly typed Choice Group properties.
	 */
	function PropertyPaneCustomField(targetProperty, properties) {
	    return {
	        type: IPropertyPaneField_1.IPropertyPaneFieldType.Custom,
	        targetProperty: undefined,
	        properties: properties
	    };
	}
	exports.PropertyPaneCustomField = PropertyPaneCustomField;
	


/***/ },
/* 252 */
/***/ function(module, exports) {

	/**
	 * @Copyright (c) Microsoft Corporation.  All rights reserved.
	 *
	 * @file PropertyPaneButton related interfaces.
	 */
	"use strict";
	/**
	 * Enum for all the supported button types.
	 */
	(function (PropertyPaneButtonType) {
	    /**
	     * Optional completion action.
	     * Typically used at the end of a form or task when paired with the Primary button OR
	     * as a standalone button to undo an action.
	     * Examples: "Done" button which closes a container but doesn't make a server call or
	     * an "Undo" button when a user is uploading a file in OneDrive.
	     */
	    PropertyPaneButtonType[PropertyPaneButtonType["Normal"] = 0] = "Normal";
	    /**
	     * Preferred completion action when paired with a Standard button.
	     * Typically used at the end of a task or form.
	     * Examples: "Create", "Save", "Send" which makes a server call.
	     */
	    PropertyPaneButtonType[PropertyPaneButtonType["Primary"] = 1] = "Primary";
	    /**
	     * Hero button.
	     */
	    PropertyPaneButtonType[PropertyPaneButtonType["Hero"] = 2] = "Hero";
	    /**
	     * Always used as a set with both Standard and Primary compound buttons.
	     * Typically used in a confirmation dialog.
	     * Examples: A confirmation dialog when a user discards a form or task with a possible
	     * significant time investment such as an email or a complex form
	     */
	    PropertyPaneButtonType[PropertyPaneButtonType["Compound"] = 3] = "Compound";
	    /**
	     * Optional actions.
	     * Typically used in a command bar at the top of a view, panel and inside an inline command bar.
	     * Examples: Command bar at the top of OneDrive, Outlook, SharePoint. Inline command bar on the
	     * top of SharePoint web parts.
	     */
	    PropertyPaneButtonType[PropertyPaneButtonType["Command"] = 4] = "Command";
	    /**
	     * Same usage as Command button, when real estate does not allow for icons + labels or as secondary
	     * actions within the command bar.
	     * Typically used in Command bar in small and medium responsive web breakpoints. Also used on objects.
	     * Examples: OneDrive small and medium responsive web breakpoint Command Bars and view icons within the
	     * Command Bar. In SharePoint and OneDrive, Cards with social actions and images which allow users to
	     * access the image picker. In SharePoint, formatting experiences such as formatting a story within the
	     * Authoring experience. In Calendar, in the bottom of an event creation Callout when clicking inside
	     * an empty time range.
	     */
	    PropertyPaneButtonType[PropertyPaneButtonType["Icon"] = 5] = "Icon";
	})(exports.PropertyPaneButtonType || (exports.PropertyPaneButtonType = {}));
	var PropertyPaneButtonType = exports.PropertyPaneButtonType;
	


/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @Copyright (c) Microsoft Corporation.  All rights reserved.
	 *
	 * @file PropertyPaneButton.
	 */
	"use strict";
	var IPropertyPaneField_1 = __webpack_require__(216);
	/**
	 * Helper method to create a Button on the PropertyPane.
	 * @param targetProperty - Target property the Button is associated to.
	 * @param properties - Strongly typed Button properties.
	 */
	function PropertyPaneButton(targetProperty, properties) {
	    return {
	        type: IPropertyPaneField_1.IPropertyPaneFieldType.Button,
	        targetProperty: targetProperty,
	        properties: properties
	    };
	}
	exports.PropertyPaneButton = PropertyPaneButton;
	


/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @Copyright (c) Microsoft Corporation.  All rights reserved.
	 *
	 * @file PropertyPaneCheckbox.
	 */
	"use strict";
	var IPropertyPaneField_1 = __webpack_require__(216);
	/**
	 * Helper method to create a Checkbox on the PropertyPane.
	 * @param targetProperty - Target property the checkbox is associated to.
	 * @param properties - Strongly typed Checkbox properties.
	 */
	function PropertyPaneCheckbox(targetProperty, properties) {
	    return {
	        type: IPropertyPaneField_1.IPropertyPaneFieldType.CheckBox,
	        targetProperty: targetProperty,
	        properties: properties
	    };
	}
	exports.PropertyPaneCheckbox = PropertyPaneCheckbox;
	


/***/ },
/* 255 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @Copyright (c) Microsoft Corporation.  All rights reserved.
	 *
	 * @file PropertyPaneChiceGroup.
	 */
	"use strict";
	var IPropertyPaneField_1 = __webpack_require__(216);
	/**
	 * Helper method to create a Choice Group on the PropertyPane.
	 * @param targetProperty - Target property the choice group is associated to.
	 * @param properties - Strongly typed Choice Group properties.
	 */
	function PropertyPaneChoiceGroup(targetProperty, properties) {
	    return {
	        type: IPropertyPaneField_1.IPropertyPaneFieldType.ChoiceGroup,
	        targetProperty: targetProperty,
	        properties: properties
	    };
	}
	exports.PropertyPaneChoiceGroup = PropertyPaneChoiceGroup;
	


/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @Copyright (c) Microsoft Corporation.  All rights reserved.
	 *
	 * @file PropertyPaneDropdown.
	 */
	"use strict";
	var IPropertyPaneField_1 = __webpack_require__(216);
	/**
	 * Helper method to create a Dropdown on the PropertyPane.
	 * @param targetProperty - Target property the dropdown is associated to.
	 * @param properties - Strongly typed Dropdown properties.
	 */
	function PropertyPaneDropdown(targetProperty, properties) {
	    return {
	        type: IPropertyPaneField_1.IPropertyPaneFieldType.Dropdown,
	        targetProperty: targetProperty,
	        properties: properties
	    };
	}
	exports.PropertyPaneDropdown = PropertyPaneDropdown;
	


/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @Copyright (c) Microsoft Corporation.  All rights reserved.
	 *
	 * @file PropertyPaneHorizontalRule.
	 */
	"use strict";
	var IPropertyPaneField_1 = __webpack_require__(216);
	/**
	 * Helper method to create a Horizontal Rule on the PropertyPane.
	 * @param properties - Strongly typed Horizontal Rule properties.
	 */
	function PropertyPaneHorizontalRule() {
	    return {
	        type: IPropertyPaneField_1.IPropertyPaneFieldType.HorizontalRule,
	        targetProperty: undefined,
	        properties: undefined
	    };
	}
	exports.PropertyPaneHorizontalRule = PropertyPaneHorizontalRule;
	


/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @Copyright (c) Microsoft Corporation.  All rights reserved.
	 *
	 * @file PropertyPaneLabel.
	 */
	"use strict";
	var IPropertyPaneField_1 = __webpack_require__(216);
	/**
	 * Helper method to create a Label on the PropertyPane.
	 * @param targetProperty - Target property the label is associated to.
	 * @param properties - Strongly typed Label properties.
	 */
	function PropertyPaneLabel(targetProperty, properties) {
	    return {
	        type: IPropertyPaneField_1.IPropertyPaneFieldType.Label,
	        targetProperty: targetProperty,
	        properties: properties
	    };
	}
	exports.PropertyPaneLabel = PropertyPaneLabel;
	


/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @Copyright (c) Microsoft Corporation.  All rights reserved.
	 *
	 * @file PropertyPaneLink.
	 */
	"use strict";
	var IPropertyPaneField_1 = __webpack_require__(216);
	/**
	 * Helper method to create a Link on the PropertyPane.
	 * @param targetProperty - Target property the Link is associated to.
	 * @param properties - Strongly typed Link properties.
	 */
	function PropertyPaneLink(targetProperty, properties) {
	    return {
	        type: IPropertyPaneField_1.IPropertyPaneFieldType.Link,
	        targetProperty: undefined,
	        properties: properties
	    };
	}
	exports.PropertyPaneLink = PropertyPaneLink;
	


/***/ },
/* 260 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @Copyright (c) Microsoft Corporation.  All rights reserved.
	 *
	 * @file PropertyPaneSlider.
	 */
	"use strict";
	var IPropertyPaneField_1 = __webpack_require__(216);
	/**
	 * Helper method to create a Slider on the PropertyPane.
	 * @param targetProperty - Target property the slider is associated to.
	 * @param properties - Strongly typed Slider properties.
	 */
	function PropertyPaneSlider(targetProperty, properties) {
	    return {
	        type: IPropertyPaneField_1.IPropertyPaneFieldType.Slider,
	        targetProperty: targetProperty,
	        properties: properties
	    };
	}
	exports.PropertyPaneSlider = PropertyPaneSlider;
	


/***/ },
/* 261 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @Copyright (c) Microsoft Corporation.  All rights reserved.
	 *
	 * @file PropertyPaneTextField.
	 */
	"use strict";
	var IPropertyPaneField_1 = __webpack_require__(216);
	/**
	 * Helper method to create a TextField on the PropertyPane.
	 * @param targetProperty - Target property the textfield is associated to.
	 * @param properties - Strongly typed TextField properties.
	 */
	function PropertyPaneTextField(targetProperty, properties) {
	    return {
	        type: IPropertyPaneField_1.IPropertyPaneFieldType.TextField,
	        targetProperty: targetProperty,
	        properties: properties
	    };
	}
	exports.PropertyPaneTextField = PropertyPaneTextField;
	


/***/ },
/* 262 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @Copyright (c) Microsoft Corporation.  All rights reserved.
	 *
	 * @file PropertyPaneToggle.
	 */
	"use strict";
	var IPropertyPaneField_1 = __webpack_require__(216);
	/**
	 * Helper method to create a Toggle on the PropertyPane.
	 * @param targetProperty - Target property the toggle is associated to.
	 * @param properties - Strongly typed Toggle properties.
	 */
	function PropertyPaneToggle(targetProperty, properties) {
	    return {
	        type: IPropertyPaneField_1.IPropertyPaneFieldType.Toggle,
	        targetProperty: targetProperty,
	        properties: properties
	    };
	}
	exports.PropertyPaneToggle = PropertyPaneToggle;
	


/***/ },
/* 263 */
/***/ function(module, exports, __webpack_require__) {

	/**
	* @Copyright (c) Microsoft Corporation.  All rights reserved.
	*
	* Code to help boostrap client side web parts on classic pages.
	*/
	"use strict";
	var sp_client_base_1 = __webpack_require__(69);
	var ClassicPageHost_1 = __webpack_require__(264);
	var ClientSideWebPartManager_1 = __webpack_require__(203);
	var PropertyPaneDefinitions_1 = __webpack_require__(3);
	/**
	 * This class helps bootstrap client side web parts onto classic SharePoint pages.
	 * Ideally client side web parts should be bootstrapped similar to the modern pages.
	 * @todo (SPPPLAT VSO#228547) tracks fixing that.
	 *
	 * @internal
	 */
	var ClassicPageBootstrapper = (function () {
	    function ClassicPageBootstrapper() {
	        this._initialized = false;
	        this._manager = undefined;
	        this._logSource = sp_client_base_1._LogSource.create('ClientSideWebPart:ClassicPageBootstrapper');
	    }
	    /**
	     * Load client side web part on a classic page
	     *
	     * @param instanceId - Instance id of the webpart.
	     * @param manifest - The webp art manifest.
	     * @param data - Instance data for the control.
	     * @param mode - DisplayMode for the web part.
	     */
	    /* tslint:disable:no-any */
	    ClassicPageBootstrapper.prototype.loadClientSideWebPart = function (instanceId, manifest, data, mode) {
	        if (mode === void 0) { mode = sp_client_base_1.DisplayMode.Read; }
	        /* tslint:enable:no-any */
	        this._initialize();
	        var context = {
	            domElement: this._findWebPartContainer(instanceId),
	            instanceId: instanceId,
	            manifest: manifest,
	            webPartData: data,
	            displayMode: mode
	        };
	        sp_client_base_1._TraceLogger.logVerbose(this._logSource, "Loading the web part. manager context = '" + JSON.stringify(context) + "'.");
	        this._manager.loadWebPart(context);
	    };
	    /**
	     * Log an error in case of loading failure.
	     *
	     * @param instanceId - Instance id of the webpart e.g. a GUID.
	     * @param error - The error string.
	     */
	    ClassicPageBootstrapper.prototype.logClientSideWebPartLoadError = function (instanceId, error) {
	        this._initialize();
	        this._manager.renderError(this._findWebPartContainer(instanceId), new Error(error));
	    };
	    ;
	    /**
	     * Global method called by the webpart configure button in the classic page
	     *
	     * @param instanceId - Instance id of the webpart e.g. a GUID.
	     * @param title - The title of the webpart.
	     */
	    ClassicPageBootstrapper.prototype.configureStart = function (instanceId, title) {
	        this._initialize();
	        sp_client_base_1._TraceLogger.logVerbose(this._logSource, "Start configuring web part " + title + " with id " + instanceId + ".");
	        this._manager.configureStart(instanceId, PropertyPaneDefinitions_1.PropertyPaneState.Toggle);
	    };
	    ;
	    /**
	     * Initialize the classic page bootstrapper.
	     */
	    ClassicPageBootstrapper.prototype._initialize = function () {
	        if (!this._initialized) {
	            this._manager = new ClientSideWebPartManager_1.default(ClassicPageHost_1.default.getInstance());
	            this._initialized = true;
	            sp_client_base_1._TraceLogger.logVerbose(this._logSource, "Classic page bootstrapper initialized.");
	        }
	    };
	    /**
	     * Find the web part container DOM element.
	     *
	     * @param instanceId - Instance id of the webpart e.g. a GUID.
	     */
	    ClassicPageBootstrapper.prototype._findWebPartContainer = function (instanceId) {
	        var element = document.querySelector('[data-sp-cs-webpartid=' + instanceId + ']');
	        if (!element) {
	            sp_client_base_1._TraceLogger.logError(this._logSource, new Error("Unable to find the container DOM element for the web part instanceId " + instanceId + "."));
	        }
	        return element;
	    };
	    return ClassicPageBootstrapper;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = ClassicPageBootstrapper;
	// Kickoff the initialization
	/* tslint:disable:no-any */
	if (!window.g_cswp) {
	    window.g_cswp = new ClassicPageBootstrapper();
	}
	


/***/ },
/* 264 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @Copyright (c) Microsoft Corporation.  All rights reserved.
	 *
	 * @file Web part host for classic SharePoint pages.
	 */
	"use strict";
	var sp_client_base_1 = __webpack_require__(69);
	var PropertyPaneDefinitions_1 = __webpack_require__(3);
	/**
	 * This class represents the host for client side web parts on classic SharePoint pages.
	 * @see IWebPartHost for more details on the role of a web part host.
	 */
	var ClassicPageHost = (function () {
	    /**
	     * constructor
	     */
	    function ClassicPageHost() {
	        this.setDirty = this.setDirty.bind(this);
	        this.webPartConfigurationEventCallback = this.webPartConfigurationEventCallback.bind(this);
	    }
	    ClassicPageHost.getInstance = function () {
	        if (ClassicPageHost._instance === undefined) {
	            ClassicPageHost._instance = new ClassicPageHost();
	        }
	        return ClassicPageHost._instance;
	    };
	    Object.defineProperty(ClassicPageHost.prototype, "serviceScope", {
	        /**
	         * @see IWebPartHost
	         */
	        get: function () {
	            this._ensureInitialized();
	            return this._serviceScope;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /* tslint:disable:no-any */
	    ClassicPageHost.prototype.setDirty = function (instanceId, data) {
	        /* tslint:enable:no-any */
	        this._setData(data);
	    };
	    /**
	     * @see IWebPartHost.ts
	     */
	    ClassicPageHost.prototype.webPartConfigurationEventCallback = function (event, data) {
	        if (event === PropertyPaneDefinitions_1.WebPartConfigurationEvent.ConfigurationComplete) {
	            this._setData(data);
	        }
	    };
	    /* tslint:disable:no-any */
	    ClassicPageHost.prototype._setData = function (data) {
	        /* tslint:enable:no-any */
	        if (data) {
	            var dataField = document.querySelector('#ClientSideToolPartData');
	            var idField = document.querySelector('#ClientSideToolPartId');
	            var webPartBeingConfiguredId = idField.getAttribute('value');
	            if (dataField && webPartBeingConfiguredId === data.id) {
	                dataField.setAttribute('value', sp_client_base_1.JsonUtilities.encode(JSON.stringify(data)));
	            }
	        }
	    };
	    ClassicPageHost.prototype._ensureInitialized = function () {
	        var serviceScope = sp_client_base_1.ServiceScope.startNewRoot();
	        // This bootstrapping code should be reconciled with how applications are loaded by the shell.
	        // Task 228547 should remove this code
	        var pageContext = serviceScope.createDefaultAndProvide(sp_client_base_1.pageContextServiceKey);
	        var pageContextInfoName = '_spPageContextInfo';
	        pageContext.initialize({
	            cultureInfo: {
	                currentCultureName: window[pageContextInfoName].currentCultureName,
	                currentUICultureName: window[pageContextInfoName].currentUICultureName
	            },
	            web: {
	                absoluteUrl: window[pageContextInfoName].webAbsoluteUrl,
	                id: window[pageContextInfoName].webId,
	                serverRelativeUrl: window[pageContextInfoName].webServerRelativeUrl,
	                title: window[pageContextInfoName].webTitle
	            },
	            site: {
	                id: window[pageContextInfoName].siteId
	            },
	            user: {
	                displayName: window[pageContextInfoName].userDisplayName,
	                loginName: window[pageContextInfoName].userLoginName
	            }
	        });
	        serviceScope.finish();
	        this._serviceScope = serviceScope;
	    };
	    return ClassicPageHost;
	}());
	exports.ClassicPageHost = ClassicPageHost;
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = ClassicPageHost;
	/* tslint:enable:export-name */
	


/***/ },
/* 265 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	/**
	 * @Copyright (c) Microsoft Corporation.  All rights reserved.
	 *
	 * A collection of helper methods related to url parsing.
	 */
	var lodash = __webpack_require__(5);
	/**
	 * Get's the path name from an absolute url.
	 *
	 */
	function getPathNameFromAbsoluteUrl(url) {
	    var anchorElement = document.createElement('a');
	    anchorElement.href = url;
	    var pathName = anchorElement.pathname;
	    // IE Fix where pathname doesn't return first slash
	    if (pathName.charAt(0) !== '/') {
	        pathName = '/' + pathName;
	    }
	    return pathName;
	}
	exports.getPathNameFromAbsoluteUrl = getPathNameFromAbsoluteUrl;
	/**
	 * Combines any number of URL paths.
	 */
	function combineURLPaths() {
	    var url = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        url[_i - 0] = arguments[_i];
	    }
	    var fullURLPath = '';
	    for (var i = 0; i < url.length; i++) {
	        fullURLPath += lodash.trimEnd(url[i], '/');
	    }
	    return fullURLPath;
	}
	exports.combineURLPaths = combineURLPaths;
	


/***/ }
/******/ ])});;
//# sourceMappingURL=sp-client-preview.js.map
(function(){
if (!window.__setWebpackPublicPathLoaderSrcRegistry__) window.__setWebpackPublicPathLoaderSrcRegistry__={};
var scripts = document.getElementsByTagName('script');
if (scripts && scripts.length) {
  for (var i = 0; i < scripts.length; i++) {
    if (!scripts[i]) continue;
    var path = scripts[i].getAttribute('src');
    if (path) window.__setWebpackPublicPathLoaderSrcRegistry__[path]=true;
  }
}
})();