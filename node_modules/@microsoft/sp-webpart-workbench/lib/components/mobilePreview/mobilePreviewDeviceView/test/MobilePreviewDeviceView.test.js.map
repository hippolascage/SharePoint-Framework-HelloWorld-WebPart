{"version":3,"sources":["components/mobilePreview/mobilePreviewDeviceView/test/MobilePreviewDeviceView.test.ts"],"names":[],"mappings":";AAAA,qBAA+B,MAAM,CAAC,CAAA;AACtC,IAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAC/B,uBAAoC,QAAQ,CAAC,CAAA;AAE7C,8BAMO,mCAAmC,CAAC,CAAA;AAC3C,wCAEO,uDAAuD,CAAC,CAAA;AAC/D,oCAAgC,+CAA+C,CAAC,CAAA;AAEhF,QAAQ,CAAC,mCAAmC,EAAE;IAC5C,IAAI,aAAqE,CAAC;IAC1E,IAAI,UAA6D,CAAC;IAClE,IAAM,UAAU,GAAgB;QAC9B,MAAM,EAAE;YACN,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE;YAC5C,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE;YAC5C,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE;SAC3C;QACD,OAAO,EAAE,EAAE;QACX,QAAQ,EAAE,EAAE;KACb,CAAC;IAEF,UAAU,CAAC;QACT,aAAa,GAAG,cAAK,CACnB,KAAK,CAAC,aAAa,CAAC,uBAAa,EAAE;YACjC,UAAU,EAAE,0BAAU,CAAC,KAAK;YAC5B,OAAO,EAAE,UAAU;SACpB,CAAC,CACH,CAAC;QACF,UAAU,GAAG,aAAa,CAAC,IAAI,CAAC,iCAAuB,CAAC,CAAC;IAC3D,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC;QACR,aAAa,CAAC,OAAO,EAAE,CAAC;IAC1B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wCAAwC,EAAE;QAC3C,2BAA2B;QAC3B,IAAM,SAAS,GAA4C,UAAU,CAAC,IAAI,CAAC,iCAAuB,CAAC,CAAC;QACpG,0BAA0B;QAE1B,yFAAyF;QACzF,aAAM,CAAC,KAAK,CAAC,aAAa,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,IAAI,EAAE,SAAS,EAAE,sCAAsC,CAAC,CAAC;QAE3G,oDAAoD;QACpD,aAAM,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;QACjD,aAAM,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;IACpD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qDAAqD,EAAE;QACxD,aAAa,CAAC,IAAI,CAAC,6BAAmB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAEpE,aAAM,CAAC,KAAK,CAAC,aAAa,CAAC,KAAK,CAAC,oBAAoB,CAAC,EAAE,iCAAiB,CAAC,SAAS,EACjF,wCAAwC,CAAC,CAAC;QAE5C,2BAA2B;QAC3B,IAAM,SAAS,GAA4C,UAAU,CAAC,IAAI,CAAC,iCAAuB,CAAC,CAAC;QACpG,0BAA0B;QAE1B,oDAAoD;QACpD,aAAM,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;QACjD,aAAM,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;IACpD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mCAAmC,EAAE;QACtC,IAAM,GAAG,GAAW,aAAa,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAE/C,aAAM,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IACvD,CAAC,CAAC,CAAC;AAEL,CAAC,CAAC,CAAC","file":"components/mobilePreview/mobilePreviewDeviceView/test/MobilePreviewDeviceView.test.js","sourcesContent":["import { expect, assert } from 'chai';\r\nimport * as React from 'react';\r\nimport { mount, ReactWrapper } from 'enzyme';\r\n\r\nimport MobilePreview, {\r\n  DeviceType,\r\n  DeviceOrientation,\r\n  IMobilePreviewProps,\r\n  IMobilePreviewState,\r\n  IDeviceList\r\n} from '../../mobilePreview/MobilePreview';\r\nimport MobilePreviewDeviceView, {\r\n  IMobilePreviewDeviceViewProps\r\n} from '../../mobilePreviewDeviceView/MobilePreviewDeviceView';\r\nimport MobilePreviewRotate from '../../mobilePreviewRotate/MobilePreviewRotate';\r\n\r\ndescribe('Testing MobilePreview device view', () => {\r\n  let mobilePreview: ReactWrapper<IMobilePreviewProps, IMobilePreviewState>;\r\n  let deviceView: ReactWrapper<IMobilePreviewDeviceViewProps, void>;\r\n  const deviceList: IDeviceList = {\r\n    phones: [\r\n      { name: 'Phone 1', width: 100, height: 100 },\r\n      { name: 'Phone 2', width: 200, height: 200 },\r\n      { name: 'Phone 3', width: 50, height: 80 }\r\n    ],\r\n    tablets: [],\r\n    desktops: []\r\n  };\r\n\r\n  beforeEach(() => {\r\n    mobilePreview = mount<IMobilePreviewProps, IMobilePreviewState>(\r\n      React.createElement(MobilePreview, {\r\n        deviceType: DeviceType.Phone,\r\n        devices: deviceList\r\n      })\r\n    );\r\n    deviceView = mobilePreview.find(MobilePreviewDeviceView);\r\n  });\r\n\r\n  afterEach(() => {\r\n    mobilePreview.unmount();\r\n  });\r\n\r\n  it('renders the width and height correctly', () => {\r\n    /* tslint:disable:no-any */\r\n    const deviceDiv: ReactWrapper<React.HTMLAttributes, any> = deviceView.find(MobilePreviewDeviceView);\r\n    /* tslint:enable:no-any */\r\n\r\n    // Current device is smallest device as per sorting, and smallest phone as per test setup\r\n    assert.equal(mobilePreview.state('currentDevice').name, 'Phone 3', 'The current device is smallest phone');\r\n\r\n    // Check that the styling matches the current device\r\n    expect(deviceDiv.html()).to.match(/width: ?50/i);\r\n    expect(deviceDiv.html()).to.match(/height: ?80/i);\r\n  });\r\n\r\n  it('renders the width and height correctly after rotate', () => {\r\n    mobilePreview.find(MobilePreviewRotate).find('a').simulate('click');\r\n\r\n    assert.equal(mobilePreview.state('currentOrientation'), DeviceOrientation.Landscape,\r\n      'device orientation should be landscape');\r\n\r\n    /* tslint:disable:no-any */\r\n    const deviceDiv: ReactWrapper<React.HTMLAttributes, any> = deviceView.find(MobilePreviewDeviceView);\r\n    /* tslint:enable:no-any */\r\n\r\n    // Check that the styling matches the current device\r\n    expect(deviceDiv.html()).to.match(/width: ?80/i);\r\n    expect(deviceDiv.html()).to.match(/height: ?50/i);\r\n  });\r\n\r\n  it('has the correct URL in the iframe', () => {\r\n    const url: string = mobilePreview.state('url');\r\n\r\n    expect(deviceView.find('iframe').html()).string(url);\r\n  });\r\n\r\n});"],"sourceRoot":"/src"}