/**
 * @copyright Microsoft Corporation. All rights reserved.
 *
 * @file MobilePreview
 * Shows a view of the user's page in a mobile device-sized iframe.
 * The frame size is configurable through click stops set to the size of popular device
 * forms, X and Y dimension input boxes, and options to rotate the device and switch
 * between mobile, tablet and desktop sizes. There is also an option to view an alternate
 * URL of the user's input in the frame.
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var React = require('react');
var office_ui_fabric_react_1 = require('office-ui-fabric-react');
var MobilePreview_module_scss_1 = require('./MobilePreview.module.scss');
var MobilePreviewDevices_1 = require('../MobilePreviewDevices');
var MobilePreviewClickStopBar_1 = require('../mobilePreviewClickStopBar/MobilePreviewClickStopBar');
var MobilePreviewHeaderBar_1 = require('../mobilePreviewHeaderBar/MobilePreviewHeaderBar');
var MobilePreviewDeviceView_1 = require('../mobilePreviewDeviceView/MobilePreviewDeviceView');
var MobilePreviewDimensionInput_1 = require('../mobilePreviewDimensionInput/MobilePreviewDimensionInput');
var MobilePreviewRotate_1 = require('../mobilePreviewRotate/MobilePreviewRotate');
(function (DeviceType) {
    DeviceType[DeviceType["Phone"] = 0] = "Phone";
    DeviceType[DeviceType["Tablet"] = 1] = "Tablet";
})(exports.DeviceType || (exports.DeviceType = {}));
var DeviceType = exports.DeviceType;
(function (DeviceOrientation) {
    DeviceOrientation[DeviceOrientation["Portrait"] = 0] = "Portrait";
    DeviceOrientation[DeviceOrientation["Landscape"] = 1] = "Landscape";
})(exports.DeviceOrientation || (exports.DeviceOrientation = {}));
var DeviceOrientation = exports.DeviceOrientation;
var MobilePreview = (function (_super) {
    __extends(MobilePreview, _super);
    function MobilePreview(props) {
        _super.call(this, props);
        // Store string from url textfield outside of state so we don't change the iframe URL until the user clicks submit
        this.inProgressURL = '';
        if (!this.props.devices) {
            this.devices = MobilePreviewDevices_1.mobilePreviewDevices;
        }
        else {
            this.devices = this.props.devices;
        }
        var deviceType = this.props.deviceType || DeviceType.Phone;
        /**
         * Pick a default device for now, which will be changed later
         * A current device is needed before sorting can happen
        */
        this.defaultPhone = this.devices.phones[this.devices.phones.length - 1];
        this.defaultTablet = this.devices.tablets[this.devices.tablets.length - 1];
        this.state = {
            currentOrientation: deviceType === DeviceType.Phone ?
                DeviceOrientation.Portrait : DeviceOrientation.Landscape,
            currentDevice: deviceType === DeviceType.Phone ? this.defaultPhone : this.defaultTablet,
            deviceType: deviceType,
            url: window.location.href
        };
        this._onClickstopChangeForm = this._onClickstopChangeForm.bind(this);
        this._onClickRotate = this._onClickRotate.bind(this);
        this._onClickChangeDeviceType = this._onClickChangeDeviceType.bind(this);
        this._onChangedX = this._onChangedX.bind(this);
        this._onChangedY = this._onChangedY.bind(this);
        this._onChangedURLField = this._onChangedURLField.bind(this);
        this._onClickURL = this._onClickURL.bind(this);
        this._sortDevices = this._sortDevices.bind(this);
        this._comparePhones = this._comparePhones.bind(this);
        this._compareTablets = this._compareTablets.bind(this);
        this._sortDevices();
        this.state.currentDevice = props.deviceType === DeviceType.Phone ? this.defaultPhone : this.defaultTablet;
    }
    MobilePreview.prototype.render = function () {
        this._sortDevices();
        var mobilePreviewClickStopBar = React.createElement(MobilePreviewClickStopBar_1.default, {currentDevice: this.state.currentDevice, currentOrientation: this.state.currentOrientation, devices: this.state.deviceType === DeviceType.Phone ? this.devices.phones : this.devices.tablets, deviceType: this.state.deviceType, onSelectClickStop: this._onClickstopChangeForm});
        var mobilePreviewHeaderBar = React.createElement(MobilePreviewHeaderBar_1.default, {onChangeURL: this._onChangedURLField, onExit: this.props.onExit, onClickURLSubmit: this._onClickURL, onChangeDeviceType: this._onClickChangeDeviceType});
        var mobilePreviewDeviceView = React.createElement(MobilePreviewDeviceView_1.default, {currentDevice: this.state.currentDevice, currentOrientation: this.state.currentOrientation, deviceType: this.state.deviceType, url: this.state.url});
        var mobilePreviewDimensionInput = React.createElement(MobilePreviewDimensionInput_1.default, {currentDevice: this.state.currentDevice, onChangedX: this._onChangedX, onChangedY: this._onChangedY});
        var mobilePreviewRotate = React.createElement(MobilePreviewRotate_1.default, {onRotate: this._onClickRotate, currentOrientation: this.state.currentOrientation});
        var containerClass = office_ui_fabric_react_1.css(MobilePreview_module_scss_1.default.mobilePreviewContainer, 'ms-Grid');
        return (React.createElement("div", {className: containerClass}, mobilePreviewHeaderBar, mobilePreviewClickStopBar, React.createElement("div", {className: MobilePreview_module_scss_1.default.mobilePreviewDeviceContainer}, mobilePreviewDimensionInput, mobilePreviewRotate, mobilePreviewDeviceView)));
    };
    MobilePreview.prototype._onClickstopChangeForm = function (device) {
        this.setState({
            currentDevice: device,
            currentOrientation: this.state.currentOrientation,
            deviceType: this.state.deviceType,
            url: this.state.url
        });
    };
    MobilePreview.prototype._onClickRotate = function (orientation) {
        this.setState({
            currentDevice: this.state.currentDevice,
            currentOrientation: orientation,
            deviceType: this.state.deviceType,
            url: this.state.url
        });
    };
    MobilePreview.prototype._onClickChangeDeviceType = function (type) {
        this.setState({
            currentDevice: type === DeviceType.Phone ? this.defaultPhone : this.defaultTablet,
            currentOrientation: type === DeviceType.Phone ? DeviceOrientation.Portrait : DeviceOrientation.Landscape,
            deviceType: type,
            url: this.state.url
        });
    };
    MobilePreview.prototype._onChangedX = function (event) {
        var heightTarget = event.target;
        var customDevice = {
            name: 'Custom Device',
            width: +heightTarget.value,
            height: this.state.currentDevice.height
        };
        this.setState({
            currentDevice: customDevice,
            currentOrientation: this.state.currentOrientation,
            deviceType: this.state.deviceType,
            url: this.state.url
        });
    };
    MobilePreview.prototype._onChangedY = function (event) {
        var heightTarget = event.target;
        var customDevice = {
            name: 'Custom Device',
            height: +heightTarget.value,
            width: this.state.currentDevice.width
        };
        this.setState({
            currentDevice: customDevice,
            currentOrientation: this.state.currentOrientation,
            deviceType: this.state.deviceType,
            url: this.state.url
        });
    };
    MobilePreview.prototype._onChangedURLField = function (value) {
        this.inProgressURL = value;
    };
    MobilePreview.prototype._onClickURL = function () {
        if (this.inProgressURL === '' || this.inProgressURL === undefined) {
            return;
        }
        this.setState({
            currentDevice: this.state.currentDevice,
            currentOrientation: this.state.currentOrientation,
            deviceType: this.state.deviceType,
            url: this.inProgressURL
        });
    };
    /**
     * Used to sort devices by either height or width depending on the orientation of the device. This is necessary
     * because the clickstops will only show up/function properly if they are rendered in order from greatest to
     * smallest length.
     */
    MobilePreview.prototype._sortDevices = function () {
        if (this.state.deviceType === DeviceType.Phone) {
            this.devices.phones.sort(this._comparePhones);
            this.defaultPhone = this.devices.phones[this.devices.phones.length - 1];
        }
        else {
            this.devices.tablets.sort(this._compareTablets);
            this.defaultTablet = this.devices.tablets[this.devices.tablets.length - 1];
        }
    };
    MobilePreview.prototype._comparePhones = function (deviceA, deviceB) {
        var aMeasure = deviceA.width;
        var bMeasure = deviceB.width;
        if (this.state.currentOrientation === DeviceOrientation.Landscape) {
            aMeasure = deviceA.height;
            bMeasure = deviceB.height;
        }
        return bMeasure - aMeasure;
    };
    MobilePreview.prototype._compareTablets = function (deviceA, deviceB) {
        var aMeasure = deviceA.height;
        var bMeasure = deviceB.height;
        if (this.state.currentOrientation === DeviceOrientation.Landscape) {
            aMeasure = deviceA.width;
            bMeasure = deviceB.width;
        }
        return bMeasure - aMeasure;
    };
    return MobilePreview;
}(React.Component));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = MobilePreview;

//# sourceMappingURL=MobilePreview.js.map
