{"version":3,"sources":["components/mobilePreview/mobilePreview/test/MobilePreview.test.ts"],"names":[],"mappings":"AAAA;;GAEG;;AAEH,qBAA+B,MAAM,CAAC,CAAA;AACtC,IAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAC/B,uBAAoC,QAAQ,CAAC,CAAA;AAE7C,8BAKO,kBAAkB,CAAC,CAAA;AAC1B,0CAAsC,2DAA2D,CAAC,CAAA;AAClG,wCAAoC,uDAAuD,CAAC,CAAA;AAC5F,oCAAgC,+CAA+C,CAAC,CAAA;AAChF,uCAAmC,qDAAqD,CAAC,CAAA;AACzF,4CAAwC,+DAA+D,CAAC,CAAA;AAExG,QAAQ,CAAC,gCAAgC,EAAE;IACzC,IAAI,aAAqE,CAAC;IAE1E,QAAQ,CAAC,YAAY,EAAE;QACrB,EAAE,CAAC,cAAc,EAAE;YACjB,aAAM,CAAC,uBAAa,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC;QACjC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,2BAA2B,EAAE;QACpC,UAAU,CAAC;YACT,aAAa,GAAG,cAAK,CACnB,KAAK,CAAC,aAAa,CAAC,uBAAa,EAAE,EAAE,UAAU,EAAE,0BAAU,CAAC,KAAK,EAAE,CAAC,CACrE,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,SAAS,CAAC;YACR,aAAa,CAAC,OAAO,EAAE,CAAC;QAC1B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8BAA8B,EAAE;YACjC,aAAM,CAAC,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,mCAAyB,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,wBAAwB,CAAC,CAAC;YAChG,aAAM,CAAC,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,gCAAsB,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,qBAAqB,CAAC,CAAC;YAC1F,aAAM,CAAC,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,iCAAuB,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,sBAAsB,CAAC,CAAC;YAC5F,aAAM,CAAC,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,qCAA2B,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,0BAA0B,CAAC,CAAC;YACpG,aAAM,CAAC,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,6BAAmB,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,wBAAwB,CAAC,CAAC;QAC5F,CAAC,CAAC,CAAC;IAEL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gEAAgE,EAAE;QACzE,UAAU,CAAC;YACT,aAAa,GAAG,cAAK,CACnB,KAAK,CAAC,aAAa,CAAC,uBAAa,CAAC,CACnC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,SAAS,CAAC;YACR,aAAa,CAAC,OAAO,EAAE,CAAC;QAC1B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2BAA2B,EAAE;YAC9B,aAAM,CAAC,KAAK,CAAC,aAAa,CAAC,KAAK,CAAC,YAAY,CAAC,EAAE,0BAAU,CAAC,KAAK,CAAC,CAAC;QACpE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2BAA2B,EAAE;YAC9B,aAAM,CAAC,SAAS,CAAC,aAAa,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kCAAkC,EAAE;YACrC,aAAM,CAAC,KAAK,CAAC,aAAa,CAAC,KAAK,CAAC,oBAAoB,CAAC,EAAE,iCAAiB,CAAC,QAAQ,CAAC,CAAC;QACtF,CAAC,CAAC,CAAC;IAEL,CAAC,CAAC,CAAC;AAEL,CAAC,CAAC,CAAC","file":"components/mobilePreview/mobilePreview/test/MobilePreview.test.js","sourcesContent":["/**\r\n * More specific/detailed tests are handled within each subcomponent.\r\n */\r\n\r\nimport { expect, assert } from 'chai';\r\nimport * as React from 'react';\r\nimport { mount, ReactWrapper } from 'enzyme';\r\n\r\nimport MobilePreview, {\r\n  IMobilePreviewProps,\r\n  IMobilePreviewState,\r\n  DeviceOrientation,\r\n  DeviceType\r\n} from '../MobilePreview';\r\nimport MobilePreviewClickStopBar from '../../mobilePreviewClickStopBar/MobilePreviewClickStopBar';\r\nimport MobilePreviewDeviceView from '../../mobilePreviewDeviceView/MobilePreviewDeviceView';\r\nimport MobilePreviewRotate from '../../mobilePreviewRotate/MobilePreviewRotate';\r\nimport MobilePreviewHeaderBar from '../../mobilePreviewHeaderBar/MobilePreviewHeaderBar';\r\nimport MobilePreviewDimensionInput from '../../mobilePreviewDimensionInput/MobilePreviewDimensionInput';\r\n\r\ndescribe('Mobile preview creation MPFile', () => {\r\n  let mobilePreview: ReactWrapper<IMobilePreviewProps, IMobilePreviewState>;\r\n\r\n  describe('Basic test', () => {\r\n    it('should exist', () => {\r\n      expect(MobilePreview).to.exist;\r\n    });\r\n  });\r\n\r\n  describe('Check if components exist', () => {\r\n    beforeEach(() => {\r\n      mobilePreview = mount<IMobilePreviewProps, IMobilePreviewState>(\r\n        React.createElement(MobilePreview, { deviceType: DeviceType.Phone })\r\n      );\r\n    });\r\n\r\n    afterEach(() => {\r\n      mobilePreview.unmount();\r\n    });\r\n\r\n    it('Renders the right components', () => {\r\n      assert.equal(mobilePreview.find(MobilePreviewClickStopBar).length, 1, 'contains clickstop bar');\r\n      assert.equal(mobilePreview.find(MobilePreviewHeaderBar).length, 1, 'contains header bar');\r\n      assert.equal(mobilePreview.find(MobilePreviewDeviceView).length, 1, 'contains device view');\r\n      assert.equal(mobilePreview.find(MobilePreviewDimensionInput).length, 1, 'contains dimension input');\r\n      assert.equal(mobilePreview.find(MobilePreviewRotate).length, 1, 'contains rotate button');\r\n    });\r\n\r\n  });\r\n\r\n  describe('Check that default values are set properly if no props are set', () => {\r\n    beforeEach(() => {\r\n      mobilePreview = mount<IMobilePreviewProps, IMobilePreviewState>(\r\n        React.createElement(MobilePreview)\r\n      );\r\n    });\r\n\r\n    afterEach(() => {\r\n      mobilePreview.unmount();\r\n    });\r\n\r\n    it('sets deviceType to Mobile', () => {\r\n      assert.equal(mobilePreview.state('deviceType'), DeviceType.Phone);\r\n    });\r\n\r\n    it('finds some devices to use', () => {\r\n      assert.isNotNull(mobilePreview.state('currentDevice'));\r\n    });\r\n\r\n    it('sets the orientation to portrait', () => {\r\n      assert.equal(mobilePreview.state('currentOrientation'), DeviceOrientation.Portrait);\r\n    });\r\n\r\n  });\r\n\r\n});\r\n"],"sourceRoot":"/src"}