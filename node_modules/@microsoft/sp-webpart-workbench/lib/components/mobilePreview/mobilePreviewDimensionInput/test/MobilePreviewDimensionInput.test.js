"use strict";
var chai_1 = require('chai');
var React = require('react');
var enzyme_1 = require('enzyme');
var MobilePreview_1 = require('../../mobilePreview/MobilePreview');
var MobilePreviewDimensionInput_1 = require('../../mobilePreviewDimensionInput/MobilePreviewDimensionInput');
describe('Testing MobilePreview dimension input', function () {
    var mobilePreview;
    /* tslint:disable:no-any */
    var dimensions;
    /* tslint:enable:no-any */
    var deviceList = {
        phones: [
            { name: 'Phone', width: 50, height: 80 }
        ],
        tablets: [],
        desktops: []
    };
    beforeEach(function () {
        mobilePreview = enzyme_1.mount(React.createElement(MobilePreview_1.default, {
            deviceType: MobilePreview_1.DeviceType.Phone,
            devices: deviceList
        }));
        dimensions = mobilePreview.find(MobilePreviewDimensionInput_1.default);
    });
    afterEach(function () {
        mobilePreview.unmount();
    });
    it('reflects dimensions of the current device', function () {
        chai_1.assert.equal(dimensions.prop('currentDevice').width, 50, 'current width prop is correct');
        chai_1.assert.equal(dimensions.prop('currentDevice').height, 80, 'current height prop is correct');
        // Check that the right values are in the HTML
        chai_1.expect(dimensions.html()).to.have.string('value="50"');
        chai_1.expect(dimensions.html()).to.have.string('value="80"');
    });
    it('changes dimensions on user input', function () {
        // Get the first input box (X dimension) and change the value
        /* tslint:disable:no-any */
        var input = dimensions.find('input').first();
        /* tslint:enable:no-any */
        input.simulate('change', { target: { value: 60 } });
        input = dimensions.find('input').last();
        input.simulate('change', { target: { value: 90 } });
        chai_1.assert.equal(dimensions.prop('currentDevice').width, 60, 'current width prop is correct');
        chai_1.assert.equal(dimensions.prop('currentDevice').height, 90, 'current height prop is correct');
    });
});

//# sourceMappingURL=MobilePreviewDimensionInput.test.js.map
