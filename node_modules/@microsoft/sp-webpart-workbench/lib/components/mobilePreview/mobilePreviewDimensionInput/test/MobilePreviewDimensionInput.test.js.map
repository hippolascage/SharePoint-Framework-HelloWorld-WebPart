{"version":3,"sources":["components/mobilePreview/mobilePreviewDimensionInput/test/MobilePreviewDimensionInput.test.ts"],"names":[],"mappings":";AAAA,qBAA+B,MAAM,CAAC,CAAA;AACtC,IAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAC/B,uBAAoC,QAAQ,CAAC,CAAA;AAE7C,8BAKO,mCAAmC,CAAC,CAAA;AAC3C,4CAEO,+DAA+D,CAAC,CAAA;AAEvE,QAAQ,CAAC,uCAAuC,EAAE;IAChD,IAAI,aAAqE,CAAC;IAC1E,2BAA2B;IAC3B,IAAI,UAAgE,CAAC;IACrE,0BAA0B;IAE1B,IAAM,UAAU,GAAgB;QAC9B,MAAM,EAAE;YACN,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE;SACzC;QACD,OAAO,EAAE,EAAE;QACX,QAAQ,EAAE,EAAE;KACb,CAAC;IAEF,UAAU,CAAC;QACT,aAAa,GAAG,cAAK,CACnB,KAAK,CAAC,aAAa,CAAC,uBAAa,EAAE;YACjC,UAAU,EAAE,0BAAU,CAAC,KAAK;YAC5B,OAAO,EAAE,UAAU;SACpB,CAAC,CACH,CAAC;QACF,UAAU,GAAG,aAAa,CAAC,IAAI,CAAC,qCAA2B,CAAC,CAAC;IAC/D,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC;QACR,aAAa,CAAC,OAAO,EAAE,CAAC;IAC1B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2CAA2C,EAAE;QAC9C,aAAM,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,KAAK,EAAE,EAAE,EAAE,+BAA+B,CAAC,CAAC;QAC1F,aAAM,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,MAAM,EAAE,EAAE,EAAE,gCAAgC,CAAC,CAAC;QAE5F,8CAA8C;QAC9C,aAAM,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QACvD,aAAM,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;IACzD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE;QACrC,6DAA6D;QAC7D,2BAA2B;QAC3B,IAAI,KAAK,GAA4C,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,CAAC;QACtF,0BAA0B;QAC1B,KAAK,CAAC,QAAQ,CAAC,QAAQ,EAAE,EAAC,MAAM,EAAE,EAAC,KAAK,EAAE,EAAE,EAAC,EAAC,CAAC,CAAC;QAEhD,KAAK,GAAG,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC;QACxC,KAAK,CAAC,QAAQ,CAAC,QAAQ,EAAE,EAAC,MAAM,EAAE,EAAC,KAAK,EAAE,EAAE,EAAC,EAAC,CAAC,CAAC;QAEhD,aAAM,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,KAAK,EAAE,EAAE,EAAE,+BAA+B,CAAC,CAAC;QAC1F,aAAM,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,MAAM,EAAE,EAAE,EAAE,gCAAgC,CAAC,CAAC;IAC9F,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"components/mobilePreview/mobilePreviewDimensionInput/test/MobilePreviewDimensionInput.test.js","sourcesContent":["import { expect, assert } from 'chai';\r\nimport * as React from 'react';\r\nimport { mount, ReactWrapper } from 'enzyme';\r\n\r\nimport MobilePreview, {\r\n  IMobilePreviewProps,\r\n  IMobilePreviewState,\r\n  DeviceType,\r\n  IDeviceList\r\n} from '../../mobilePreview/MobilePreview';\r\nimport MobilePreviewDimensionInput, {\r\n  IMobilePreviewDimensionInputProps\r\n} from '../../mobilePreviewDimensionInput/MobilePreviewDimensionInput';\r\n\r\ndescribe('Testing MobilePreview dimension input', () => {\r\n  let mobilePreview: ReactWrapper<IMobilePreviewProps, IMobilePreviewState>;\r\n  /* tslint:disable:no-any */\r\n  let dimensions: ReactWrapper<IMobilePreviewDimensionInputProps, any>;\r\n  /* tslint:enable:no-any */\r\n\r\n  const deviceList: IDeviceList = {\r\n    phones: [\r\n      { name: 'Phone', width: 50, height: 80 }\r\n    ],\r\n    tablets: [],\r\n    desktops: []\r\n  };\r\n\r\n  beforeEach(() => {\r\n    mobilePreview = mount<IMobilePreviewProps, IMobilePreviewState>(\r\n      React.createElement(MobilePreview, {\r\n        deviceType: DeviceType.Phone,\r\n        devices: deviceList\r\n      })\r\n    );\r\n    dimensions = mobilePreview.find(MobilePreviewDimensionInput);\r\n  });\r\n\r\n  afterEach(() => {\r\n    mobilePreview.unmount();\r\n  });\r\n\r\n  it('reflects dimensions of the current device', () => {\r\n    assert.equal(dimensions.prop('currentDevice').width, 50, 'current width prop is correct');\r\n    assert.equal(dimensions.prop('currentDevice').height, 80, 'current height prop is correct');\r\n\r\n    // Check that the right values are in the HTML\r\n    expect(dimensions.html()).to.have.string('value=\"50\"');\r\n    expect(dimensions.html()).to.have.string('value=\"80\"');\r\n  });\r\n\r\n  it('changes dimensions on user input', () => {\r\n    // Get the first input box (X dimension) and change the value\r\n    /* tslint:disable:no-any */\r\n    let input: ReactWrapper<React.HTMLAttributes, any> = dimensions.find('input').first();\r\n    /* tslint:enable:no-any */\r\n    input.simulate('change', {target: {value: 60}});\r\n\r\n    input = dimensions.find('input').last();\r\n    input.simulate('change', {target: {value: 90}});\r\n\r\n    assert.equal(dimensions.prop('currentDevice').width, 60, 'current width prop is correct');\r\n    assert.equal(dimensions.prop('currentDevice').height, 90, 'current height prop is correct');\r\n  });\r\n});"],"sourceRoot":"/src"}