"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var React = require('react');
var office_ui_fabric_react_1 = require('office-ui-fabric-react');
var MobilePreviewURLEntry_module_scss_1 = require('./MobilePreviewURLEntry.module.scss');
var MobilePreviewURLEntry = (function (_super) {
    __extends(MobilePreviewURLEntry, _super);
    function MobilePreviewURLEntry(props) {
        _super.call(this, props);
        this._validateAndCompleteURL = this._validateAndCompleteURL.bind(this);
    }
    MobilePreviewURLEntry.prototype.render = function () {
        return (React.createElement("div", {className: MobilePreviewURLEntry_module_scss_1.default.mobilePreviewURLbar}, React.createElement(office_ui_fabric_react_1.TextField, {className: MobilePreviewURLEntry_module_scss_1.default.mobilePreviewTextfield, placeholder: 'Enter a URL to view in Mobile Preview', onChanged: this._validateAndCompleteURL}), React.createElement(office_ui_fabric_react_1.Button, {className: MobilePreviewURLEntry_module_scss_1.default.mobilePreviewURLbutton, onClick: this.props.onClickURLSubmit}, "View Preview")));
    };
    /**
     * If the URL is not valid, an error page displays as it would in the browser. As such, no additional validation is
     * conducted here aside from not allowing a blank entry.
     */
    MobilePreviewURLEntry.prototype._validateAndCompleteURL = function (value) {
        if (!value || value === '') {
            return;
        }
        var regex = /https?:\/\//;
        if (!regex.test(value)) {
            value = 'http://' + value;
        }
        this.props.onChangeURL(value);
    };
    return MobilePreviewURLEntry;
}(React.Component));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = MobilePreviewURLEntry;

//# sourceMappingURL=MobilePreviewURLEntry.js.map
