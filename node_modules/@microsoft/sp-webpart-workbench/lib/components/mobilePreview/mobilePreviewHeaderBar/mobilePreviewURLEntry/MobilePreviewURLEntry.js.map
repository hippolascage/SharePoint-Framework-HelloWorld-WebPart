{"version":3,"sources":["components/mobilePreview/mobilePreviewHeaderBar/mobilePreviewURLEntry/MobilePreviewURLEntry.tsx"],"names":[],"mappings":";;;;;;AAAA,IAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAC/B,uCAGO,wBAAwB,CAAC,CAAA;AAChC,kDAAmB,qCAAqC,CAAC,CAAA;AAOzD;IAAmD,yCAAkD;IACnG,+BAAY,KAAkC;QAC5C,kBAAM,KAAK,CAAC,CAAC;QAEb,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACzE,CAAC;IAEM,sCAAM,GAAb;QACE,MAAM,CAAA,CACN,qBAAC,GAAG,IAAC,SAAS,EAAG,2CAAM,CAAC,mBAAqB,GAC3C,oBAAC,kCAAS,GAAC,SAAS,EAAG,2CAAM,CAAC,sBAAwB,EAClD,WAAW,EAAC,uCAAuC,EAAC,SAAS,EAAG,IAAI,CAAC,uBAAyB,EAAE,EACpG,oBAAC,+BAAM,GAAC,SAAS,EAAG,2CAAM,CAAC,sBAAwB,EAAC,OAAO,EAAG,IAAI,CAAC,KAAK,CAAC,gBAAkB,kBAAsB,CAC7G,CACL,CAAC;IACJ,CAAC;IAED;;;OAGG;IACK,uDAAuB,GAA/B,UAAgC,KAAa;QAC3C,EAAE,CAAC,CAAC,CAAC,KAAK,IAAI,KAAK,KAAK,EAAE,CAAC,CAAC,CAAC;YAC3B,MAAM,CAAC;QACT,CAAC;QACD,IAAM,KAAK,GAAW,aAAa,CAAC;QACpC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACvB,KAAK,GAAG,SAAS,GAAG,KAAK,CAAC;QAC5B,CAAC;QACD,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;IAChC,CAAC;IACH,4BAAC;AAAD,CA/BA,AA+BC,CA/BkD,KAAK,CAAC,SAAS,GA+BjE;AA/BD;uCA+BC,CAAA","file":"components/mobilePreview/mobilePreviewHeaderBar/mobilePreviewURLEntry/MobilePreviewURLEntry.js","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  TextField,\r\n  Button\r\n} from 'office-ui-fabric-react';\r\nimport styles from './MobilePreviewURLEntry.module.scss';\r\n\r\nexport interface IMobilePreviewURLEntryProps {\r\n  onChangeURL: (value: string) => void;\r\n  onClickURLSubmit: () => void;\r\n}\r\n\r\nexport default class MobilePreviewURLEntry extends React.Component<IMobilePreviewURLEntryProps, void> {\r\n  constructor(props: IMobilePreviewURLEntryProps) {\r\n    super(props);\r\n\r\n    this._validateAndCompleteURL = this._validateAndCompleteURL.bind(this);\r\n  }\r\n\r\n  public render(): React.ReactElement<{}> {\r\n    return(\r\n    <div className={ styles.mobilePreviewURLbar }>\r\n      <TextField className={ styles.mobilePreviewTextfield }\r\n          placeholder='Enter a URL to view in Mobile Preview' onChanged={ this._validateAndCompleteURL }/>\r\n      <Button className={ styles.mobilePreviewURLbutton } onClick={ this.props.onClickURLSubmit }>View Preview</Button>\r\n    </div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * If the URL is not valid, an error page displays as it would in the browser. As such, no additional validation is\r\n   * conducted here aside from not allowing a blank entry.\r\n   */\r\n  private _validateAndCompleteURL(value: string): void {\r\n    if (!value || value === '') {\r\n      return;\r\n    }\r\n    const regex: RegExp = /https?:\\/\\//;\r\n    if (!regex.test(value)) {\r\n      value = 'http://' + value;\r\n    }\r\n    this.props.onChangeURL(value);\r\n  }\r\n}"],"sourceRoot":"/src"}