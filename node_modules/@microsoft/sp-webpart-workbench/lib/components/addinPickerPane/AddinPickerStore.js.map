{"version":3,"sources":["components/addinPickerPane/AddinPickerStore.ts"],"names":[],"mappings":";;;;;;;AAAA,4BAA2B,aAAa,CAAC,CAAA;AAUzC;IAUE,2BAAY,YAA2B;QACrC,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC;QAC5B,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;QACrB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,YAAY,GAAG,SAAS,CAAC;QAC9B,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,IAAI,CAAC,UAAU,GAAG,YAAY,CAAC;IACjC,CAAC;IAGW,sBAAW,oCAAK;QAD5B,2BAA2B;aACf;YACV,IAAM,aAAa,GAAsC,EAAE,CAAC;YAC9D,0BAA0B;YACxB,IAAM,UAAU,GAAW,CAAC,IAAI,CAAC,UAAU,IAAI,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC;YAEjE,GAAG,CAAC,CAAC,IAAM,MAAM,IAAI,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;gBAC3C,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;oBAClC,2BAA2B;oBAC3B,IAAM,YAAY,GAAoC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;oBACpF,0BAA0B;oBAE1B,EAAE,CAAC,CAAC,CAAC,UAAU,IAAI,YAAY,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;wBAC7G,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;oBACnC,CAAC;gBACH,CAAC;YACH,CAAC;YAED,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC;gBAC7B,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO;oBACvC,CAAC,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;YAC/G,CAAC,CAAC,CAAC;QACL,CAAC;;;OAAA;IAEM,kCAAM,GAAb,UAAc,UAAkB;QAC9B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IAC/B,CAAC;IAxCD;QAAC,wBAAU;yDAAA;IACX;QAAC,wBAAU;wDAAA;IAcX;QAAC,wBAAU;kDAAA;IA0Bb,wBAAC;AAAD,CA9CA,AA8CC,IAAA;AA9CD;mCA8CC,CAAA","file":"components/addinPickerPane/AddinPickerStore.js","sourcesContent":["import { observable } from 'mobservable';\r\n\r\nimport { IClientSideWebPartManifest } from '@microsoft/sp-module-interfaces';\r\n\r\nexport interface IWebPartStore {\r\n  /* tslint:disable:no-any */\r\n  parts: { [key: string]: IClientSideWebPartManifest<any> };\r\n  /* tslint:enable:no-any */\r\n}\r\n\r\nexport default class AddinsPickerStore {\r\n  public searchLabel: string;\r\n  public searchText: string;\r\n  public errorMessage: string;\r\n\r\n  @observable public filterText: string;\r\n  @observable public isLoading: boolean;\r\n\r\n  private _partStore: IWebPartStore;\r\n\r\n  constructor(webPartStore: IWebPartStore) {\r\n    this.searchLabel = 'Search';\r\n    this.searchText = '';\r\n    this.isLoading = false;\r\n    this.errorMessage = undefined;\r\n    this.filterText = undefined;\r\n    this._partStore = webPartStore;\r\n  }\r\n\r\n  /* tslint:disable:no-any */\r\n  @observable public get parts(): IClientSideWebPartManifest<any>[] {\r\n    const filteredParts: IClientSideWebPartManifest<any>[] = [];\r\n  /* tslint:enable:no-any */\r\n    const filterText: string = (this.filterText || '').toLowerCase();\r\n\r\n    for (const partId in this._partStore.parts) {\r\n      if (this._partStore.parts[partId]) {\r\n        /* tslint:disable:no-any */\r\n        const partManifest: IClientSideWebPartManifest<any> = this._partStore.parts[partId];\r\n        /* tslint:enable:no-any */\r\n\r\n        if (!filterText || partManifest.preconfiguredEntries[0].title.default.toLowerCase().indexOf(filterText) > -1) {\r\n          filteredParts.push(partManifest);\r\n        }\r\n      }\r\n    }\r\n\r\n    return filteredParts.sort((a, b) => {\r\n      return (a && a.preconfiguredEntries[0].title.default &&\r\n                   a.preconfiguredEntries[0].title.default.localeCompare(b.preconfiguredEntries[0].title.default));\r\n    });\r\n  }\r\n\r\n  public filter(filterText: string): void {\r\n    this.filterText = filterText;\r\n  }\r\n}\r\n"],"sourceRoot":"/src"}