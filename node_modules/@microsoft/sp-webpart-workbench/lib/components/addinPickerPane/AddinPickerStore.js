"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var mobservable_1 = require('mobservable');
var AddinsPickerStore = (function () {
    function AddinsPickerStore(webPartStore) {
        this.searchLabel = 'Search';
        this.searchText = '';
        this.isLoading = false;
        this.errorMessage = undefined;
        this.filterText = undefined;
        this._partStore = webPartStore;
    }
    Object.defineProperty(AddinsPickerStore.prototype, "parts", {
        /* tslint:disable:no-any */
        get: function () {
            var filteredParts = [];
            /* tslint:enable:no-any */
            var filterText = (this.filterText || '').toLowerCase();
            for (var partId in this._partStore.parts) {
                if (this._partStore.parts[partId]) {
                    /* tslint:disable:no-any */
                    var partManifest = this._partStore.parts[partId];
                    /* tslint:enable:no-any */
                    if (!filterText || partManifest.preconfiguredEntries[0].title.default.toLowerCase().indexOf(filterText) > -1) {
                        filteredParts.push(partManifest);
                    }
                }
            }
            return filteredParts.sort(function (a, b) {
                return (a && a.preconfiguredEntries[0].title.default &&
                    a.preconfiguredEntries[0].title.default.localeCompare(b.preconfiguredEntries[0].title.default));
            });
        },
        enumerable: true,
        configurable: true
    });
    AddinsPickerStore.prototype.filter = function (filterText) {
        this.filterText = filterText;
    };
    __decorate([
        mobservable_1.observable
    ], AddinsPickerStore.prototype, "filterText", void 0);
    __decorate([
        mobservable_1.observable
    ], AddinsPickerStore.prototype, "isLoading", void 0);
    __decorate([
        mobservable_1.observable
    ], AddinsPickerStore.prototype, "parts", null);
    return AddinsPickerStore;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = AddinsPickerStore;

//# sourceMappingURL=AddinPickerStore.js.map
