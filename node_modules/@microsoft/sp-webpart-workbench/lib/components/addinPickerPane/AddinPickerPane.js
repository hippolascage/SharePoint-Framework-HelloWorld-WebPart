"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var React = require('react');
var SearchBox_1 = require('../searchBox/SearchBox');
require('./AddinPickerPane.scss');
var mobservable_react_1 = require('mobservable-react');
var AddinPickerPane = (function (_super) {
    __extends(AddinPickerPane, _super);
    function AddinPickerPane() {
        _super.call(this);
    }
    AddinPickerPane.prototype.render = function () {
        var store = this.props.store;
        var itemElements = store.parts ?
            store.parts.map(function (addin) { return (React.createElement("div", {className: 'List-cell', key: addin.id}, React.createElement("div", {className: 'Item', draggable: true}, React.createElement("div", {className: 'Item-image ms-Icon ms-Icon--' + addin.iconFontName}), React.createElement("div", {className: 'Item-title ms-font-l'}, addin.displayName), React.createElement("div", {className: 'Item-description ms-font-s'}, addin.description)))); })
            : null;
        /* tslint:enable:no-null-keyword */
        return (React.createElement("div", {className: 'AddinPickerPane'}, React.createElement(SearchBox_1.default, {label: 'Search', onChange: this._onFilter.bind(this)}), !store.isLoading && store.filterText && !store.parts.length ?
            React.createElement("div", {className: 'AddinPickerPane-message'}, "No results")
            :
                React.createElement("div", {className: 'List'}, store.isLoading ?
                    React.createElement("div", {className: 'AddinPickerPane-message'}, "Loading...")
                    : itemElements, store.errorMessage
                    ? React.createElement("div", {className: 'AddinPickerPane-error'}, store.errorMessage)
                    : null, "/* tslint:enable:no-null-keyword */")));
    };
    AddinPickerPane.prototype._onFilter = function (filterText) {
        this.props.store.filter(filterText);
    };
    AddinPickerPane = __decorate([
        mobservable_react_1.observer
    ], AddinPickerPane);
    return AddinPickerPane;
}(React.Component));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = AddinPickerPane;

//# sourceMappingURL=AddinPickerPane.js.map
