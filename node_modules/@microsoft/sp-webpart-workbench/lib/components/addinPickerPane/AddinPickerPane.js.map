{"version":3,"sources":["components/addinPickerPane/AddinPickerPane.tsx"],"names":[],"mappings":";;;;;;;;;;;;AAAA,IAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAC/B,0BAAsB,wBAAwB,CAAC,CAAA;AAC/C,QAAO,wBAAwB,CAAC,CAAA;AAChC,kCAAyB,mBAAmB,CAAC,CAAA;AAgB7C;IAA6C,mCAA4C;IACvF;QACE,iBAAO,CAAC;IACV,CAAC;IAEM,gCAAM,GAAb;QACU,4BAAK,CAAuC;QAEpD,IAAM,YAAY,GAA6B,KAAK,CAAC,KAAK;YAC1D,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,CACvB,qBAAC,GAAG,IAAC,SAAS,EAAC,WAAW,EAAC,GAAG,EAAG,KAAK,CAAC,EAAI,GACzC,qBAAC,GAAG,IAAC,SAAS,EAAC,MAAM,EAAC,SAAS,EAAG,IAAM,GACtC,qBAAC,GAAG,IAAC,SAAS,EAAE,8BAA8B,GAAG,KAAK,CAAC,YAAa,EAAO,EAC3E,qBAAC,GAAG,IAAC,SAAS,EAAC,sBAAsB,GAAG,KAAK,CAAC,WAAa,CAAM,EACjE,qBAAC,GAAG,IAAC,SAAS,EAAC,4BAA4B,GAAG,KAAK,CAAC,WAAa,CAAM,CACnE,CACF,CACP,EARwB,CAQxB,CAAC;cAEA,IAAI,CAAC;QACP,mCAAmC;QAEnC,MAAM,CAAC,CACL,qBAAC,GAAG,IAAC,SAAS,EAAC,iBAAiB,GAC9B,oBAAC,mBAAS,GAAC,KAAK,EAAC,QAAQ,EAAC,QAAQ,EAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAG,EAAE,EAEhE,CAAC,KAAK,CAAC,SAAS,IAAI,KAAK,CAAC,UAAU,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM;YAC7D,qBAAC,GAAG,IAAC,SAAS,EAAC,yBAAyB,gBAAiB;;gBAEzD,qBAAC,GAAG,IAAC,SAAS,EAAC,MAAM,GACjB,KAAK,CAAC,SAAS;oBACjB,qBAAC,GAAG,IAAC,SAAS,EAAC,yBAAyB,gBAAiB;sBACvD,YAAc,EAEd,KAAK,CAAC,YAAY;sBAChB,qBAAC,GAAG,IAAC,SAAS,EAAC,uBAAuB,GAAG,KAAK,CAAC,YAAc,CAAM;sBAEnE,IAAM,wCAGX,CACG,CACP,CAAC;IACJ,CAAC;IAEO,mCAAS,GAAjB,UAAkB,UAAkB;QAClC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;IAhDH;QAAC,4BAAQ;uBAAA;IAiDT,sBAAC;AAAD,CAhDA,AAgDC,CAhD4C,KAAK,CAAC,SAAS,GAgD3D;AAhDD;iCAgDC,CAAA","file":"components/addinPickerPane/AddinPickerPane.js","sourcesContent":["import * as React from 'react';\r\nimport SearchBox from '../searchBox/SearchBox';\r\nimport './AddinPickerPane.scss';\r\nimport { observer } from 'mobservable-react';\r\n\r\nexport interface IAddinPickerPaneProps {\r\n  store?: {\r\n    filterText: string;\r\n    isLoading?: boolean;\r\n    errorMessage?: string;\r\n    /* tslint:disable:no-any */\r\n    parts: any[];\r\n    /* tslint:enable:no-any */\r\n\r\n    filter: (filterText?: string) => void;\r\n  };\r\n}\r\n\r\n@observer\r\nexport default class AddinPickerPane extends React.Component<IAddinPickerPaneProps, void> {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  public render(): React.ReactElement<IAddinPickerPaneProps> {\r\n    const { store }: IAddinPickerPaneProps = this.props;\r\n\r\n    const itemElements: React.ReactElement<{}>[] = store.parts ?\r\n    store.parts.map(addin => (\r\n      <div className='List-cell' key={ addin.id }>\r\n        <div className='Item' draggable={ true }>\r\n          <div className={'Item-image ms-Icon ms-Icon--' + addin.iconFontName}></div>\r\n          <div className='Item-title ms-font-l'>{ addin.displayName }</div>\r\n          <div className='Item-description ms-font-s'>{ addin.description }</div>\r\n        </div>\r\n      </div>\r\n    ))\r\n    /* tslint:disable:no-null-keyword */\r\n    : null;\r\n    /* tslint:enable:no-null-keyword */\r\n\r\n    return (\r\n      <div className='AddinPickerPane'>\r\n        <SearchBox label='Search' onChange={ this._onFilter.bind(this) }/>\r\n\r\n        { !store.isLoading && store.filterText && !store.parts.length ?\r\n        <div className='AddinPickerPane-message'>No results</div>\r\n        :\r\n        <div className='List'>\r\n          { store.isLoading ?\r\n          <div className='AddinPickerPane-message'>Loading...</div>\r\n          : itemElements }\r\n\r\n          { store.errorMessage\r\n            ? <div className='AddinPickerPane-error'>{ store.errorMessage }</div>\r\n            /* tslint:disable:no-null-keyword */\r\n            : null }\r\n            /* tslint:enable:no-null-keyword */\r\n        </div>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _onFilter(filterText: string): void {\r\n    this.props.store.filter(filterText);\r\n  }\r\n}\r\n"],"sourceRoot":"/src"}