{"version":3,"sources":["components/page/PageStore.ts"],"names":[],"mappings":";;;;;;;AAAA,4BAA2B,aAAa,CAAC,CAAA;AAEzC,IAAY,MAAM,WAAM,6BAA6B,CAAC,CAAA;AAoBtD;IAaE,mBAAY,YAA0B;QAbxC,iBAqFC;QAhFS,mBAAc,GAAW,4BAA4B,CAAC;QAItD,sBAAiB,GAAkB,IAAI,OAAO,CAAO,UAAC,OAAmB;YAC/E,KAAI,CAAC,iBAAiB,GAAG,OAAO,CAAC;QACnC,CAAC,CAAC,CAAC;QAGD,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QAElC,IAAI,CAAC,cAAc,GAAG;YACpB,iBAAiB,EAAE,YAAY;YAC/B,eAAe,EAAE,KAAK;YACtB,UAAU,EAAE,KAAK;YACjB,aAAa,EAAE,KAAK;YACpB,cAAc,EAAE,IAAI;SACrB,CAAC;QAEF,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QAEtB,uGAAuG;QACvG,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACnB,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC;QAC9D,CAAC;IACH,CAAC;IAED,sBAAW,mCAAY;aAAvB;YACE,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC;QAC5B,CAAC;;;OAAA;IAEM,wCAAoB,GAA3B,UAA4B,QAAsB;QAChD,IAAI,CAAC,cAAc,GAAG,QAAQ,CAAC;IACjC,CAAC;IAEM,8CAA0B,GAAjC,UAAkC,QAAgC;QAChE,sCAAsC;QACtC,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACjB,MAAM,CAAC,IAAI,CAAC,CAAC,sBAAsB,GAAG,QAAQ,CAAC;QAEjD,CAAC;IACH,CAAC;IAEM,oCAAgB,GAAvB,UAAwB,QAAoB;QAC1C,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC;IAC7B,CAAC;IAEM,0BAAM,GAAb,UAAc,OAAwB;QACpC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;IAC7C,CAAC;IAEM,iCAAa,GAApB;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;YAC1C,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC;QACrE,CAAC;IACH,CAAC;IAEM,kCAAc,GAArB;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACnB,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QACjD,CAAC;QAED,IAAI,CAAC,UAAU,EAAE,CAAC;IACpB,CAAC;IAEM,gCAAY,GAAnB;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACnB,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QACrD,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC,SAAS,CAAC;QACnB,CAAC;IACH,CAAC;IAEM,uCAAmB,GAA1B;QACE,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC;IAChC,CAAC;IAEM,gCAAY,GAAnB;QACE,IAAI,CAAC,iBAAiB,EAAE,CAAC;IAC3B,CAAC;IAlFD;QAAC,wBAAU;qDAAA;IAmFb,gBAAC;AAAD,CArFA,AAqFC,IAAA;AArFY,iBAAS,YAqFrB,CAAA","file":"components/page/PageStore.js","sourcesContent":["import { observable } from 'mobservable';\r\nimport { ServiceScope, IServiceScopeProvider } from '@microsoft/sp-client-base';\r\nimport * as lodash from '@microsoft/sp-lodash-subset';\r\n\r\nexport interface IPageDefinition {\r\n  officeHeaderTitle: string;\r\n  hasOfficeHeader: boolean;\r\n  hasCommandBar: boolean;\r\n  hasNavPane: boolean;\r\n  hasDetailsPane: boolean;\r\n}\r\n\r\nexport interface IPageStore extends IServiceScopeProvider {\r\n  pageDefinition: IPageDefinition;\r\n  setSerializeCallback: (callback: () => string) => void;\r\n  logSerializedStateCallback: (callback: (b: boolean) => string) => void;\r\n  setClearCallback: (callback: () => void) => void;\r\n  getPageState: () => string;\r\n  clearPageState: () => void;\r\n  getPageReadyPromise(): Promise<void>;\r\n}\r\n\r\nexport class PageStore implements IPageStore {\r\n  public _clearPage: () =>  void;\r\n  @observable public pageDefinition: IPageDefinition;\r\n\r\n  private _serviceScope: ServiceScope;\r\n  private _PAGE_DATA_KEY: string = 'sp_webpart_workbench_state';\r\n  private _autoSave: boolean;\r\n  private _serializePage: () => string;\r\n  private _resolvePageReady: () => void;\r\n  private _pageReadyPromise: Promise<void> = new Promise<void>((resolve: () => void) => {\r\n    this._resolvePageReady = resolve;\r\n  });\r\n\r\n  constructor(serviceScope: ServiceScope) {\r\n    this._serviceScope = serviceScope;\r\n\r\n    this.pageDefinition = {\r\n      officeHeaderTitle: 'Office 365',\r\n      hasOfficeHeader: false,\r\n      hasNavPane: false,\r\n      hasCommandBar: false,\r\n      hasDetailsPane: true\r\n    };\r\n\r\n    this._autoSave = true;\r\n\r\n    // @todo: temporary solution to unblock Mike Wheaton. Will change this to depend on Canvas dirty state.\r\n    if (this._autoSave) {\r\n      window.setInterval(this.savePageState.bind(this), 3 * 1000);\r\n    }\r\n  }\r\n\r\n  public get serviceScope(): ServiceScope {\r\n    return this._serviceScope;\r\n  }\r\n\r\n  public setSerializeCallback(callback: () => string): void {\r\n    this._serializePage = callback;\r\n  }\r\n\r\n  public logSerializedStateCallback(callback: (b: boolean) => string): void {\r\n    /* tslint:disable:no-string-literal */\r\n    if (window['SP']) {\r\n      window['SP'].logSerializedPageState = callback;\r\n    /* tslint:enable:no-string-literal */\r\n    }\r\n  }\r\n\r\n  public setClearCallback(callback: () => void): void {\r\n    this._clearPage = callback;\r\n  }\r\n\r\n  public update(options: IPageDefinition): void {\r\n    lodash.merge(this.pageDefinition, options);\r\n  }\r\n\r\n  public savePageState(): void {\r\n    if (this._autoSave && this._serializePage) {\r\n      sessionStorage.setItem(this._PAGE_DATA_KEY, this._serializePage());\r\n    }\r\n  }\r\n\r\n  public clearPageState(): void {\r\n    if (this._autoSave) {\r\n      sessionStorage.removeItem(this._PAGE_DATA_KEY);\r\n    }\r\n\r\n    this._clearPage();\r\n  }\r\n\r\n  public getPageState(): string {\r\n    if (this._autoSave) {\r\n      return sessionStorage.getItem(this._PAGE_DATA_KEY);\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  public getPageReadyPromise(): Promise<void> {\r\n    return this._pageReadyPromise;\r\n  }\r\n\r\n  public setPageReady(): void {\r\n    this._resolvePageReady();\r\n  }\r\n}\r\n"],"sourceRoot":"/src"}