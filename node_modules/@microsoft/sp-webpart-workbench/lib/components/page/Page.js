"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var React = require('react');
var mobservable_react_1 = require('mobservable-react');
var NavPane_1 = require('../navPane/NavPane');
var sp_client_preview_1 = require('@microsoft/sp-client-preview');
/* tslint:disable:max-line-length */
var PropertyPaneController_module_scss_1 = require('@microsoft/sp-client-preview/lib/local/clientSideWebParts/propertyPane/propertyPaneController/PropertyPaneController.module.scss');
/* tslint:enable:max-line-length */
require('./Page.scss');
var Page = (function (_super) {
    __extends(Page, _super);
    function Page() {
        _super.call(this);
    }
    Page.prototype.componentDidMount = function () {
        var _this = this;
        this._canvas = new sp_client_preview_1.Canvas(
        // @todo (SPPPlat VSO bug #189028) This is a workaround for a TypeScript compiler bug
        // that we reported.  After the compiler is fixed, we will remove the typecast.
        /* tslint:disable:no-any */
        this.props.store.serviceScope, 
        /* tslint:disable:no-any */
        document.querySelector('#Canvas'), this.props.appStore.displayMode);
        // Don't render webparts until the page is ready
        this.props.store.getPageReadyPromise().then(function () {
            _this._canvas.render(_this.props.store.getPageState());
            // @todo: the canvas has a bug and needs any empty array in order to render. Ideally render() should
            // render an empty canvas.
            _this.props.store.setClearCallback(_this._clearPage.bind(_this));
            _this.props.store.setSerializeCallback(function () { return _this._canvas.serialize(); });
            _this.props.store.logSerializedStateCallback(function () {
                return _this._canvas.serialize();
            });
        });
    };
    Page.prototype.componentWillReceiveProps = function (props) {
        if (this._canvas) {
            this._canvas.displayMode = this.props.appStore.displayMode;
        }
    };
    Page.prototype.render = function () {
        var _a = this.props.store.pageDefinition, hasOfficeHeader = _a.hasOfficeHeader, hasNavPane = _a.hasNavPane, hasCommandBar = _a.hasCommandBar, hasDetailsPane = _a.hasDetailsPane;
        var rootClass = _getClassName('Page', {
            'Page--hasHeader': hasOfficeHeader,
            'Page--hasNavPane': hasNavPane,
            'Page--hasCommandBar': hasCommandBar,
            'Page--hasDetailsPane': hasDetailsPane
        });
        return (React.createElement("div", {className: rootClass}, React.createElement("div", {className: 'Page-belowHeader'}, hasNavPane
            ? React.createElement(NavPane_1.default, null)
            : null, React.createElement("div", {id: 'pageContent', className: 'Page-content'}, React.createElement("div", {id: 'Canvas'})))));
    };
    Page.prototype._clearPage = function () {
        this._canvas.render();
        // Removing the property pane with slide effect, when discard is clicked.
        var propertyPaneContainer = document.getElementById('propertyPaneContainer');
        if (propertyPaneContainer) {
            propertyPaneContainer.classList.remove(PropertyPaneController_module_scss_1.default.showPane);
            // This is to see the slide effect of the property pane and then empty the container.
            window.setTimeout(function () {
                while (propertyPaneContainer.firstChild) {
                    propertyPaneContainer.removeChild(propertyPaneContainer.firstChild);
                }
            }, 1000);
        }
    };
    Page = __decorate([
        mobservable_react_1.observer
    ], Page);
    return Page;
}(React.Component));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Page;
function _getClassName(baseClass, map) {
    var className = baseClass;
    for (var flag in map) {
        if (map.hasOwnProperty(flag) && map[flag]) {
            className += ' ' + flag;
        }
    }
    return className;
}

//# sourceMappingURL=Page.js.map
