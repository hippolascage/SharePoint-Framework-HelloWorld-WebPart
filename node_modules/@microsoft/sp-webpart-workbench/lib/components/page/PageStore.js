"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var mobservable_1 = require('mobservable');
var lodash = require('@microsoft/sp-lodash-subset');
var PageStore = (function () {
    function PageStore(serviceScope) {
        var _this = this;
        this._PAGE_DATA_KEY = 'sp_webpart_workbench_state';
        this._pageReadyPromise = new Promise(function (resolve) {
            _this._resolvePageReady = resolve;
        });
        this._serviceScope = serviceScope;
        this.pageDefinition = {
            officeHeaderTitle: 'Office 365',
            hasOfficeHeader: false,
            hasNavPane: false,
            hasCommandBar: false,
            hasDetailsPane: true
        };
        this._autoSave = true;
        // @todo: temporary solution to unblock Mike Wheaton. Will change this to depend on Canvas dirty state.
        if (this._autoSave) {
            window.setInterval(this.savePageState.bind(this), 3 * 1000);
        }
    }
    Object.defineProperty(PageStore.prototype, "serviceScope", {
        get: function () {
            return this._serviceScope;
        },
        enumerable: true,
        configurable: true
    });
    PageStore.prototype.setSerializeCallback = function (callback) {
        this._serializePage = callback;
    };
    PageStore.prototype.logSerializedStateCallback = function (callback) {
        /* tslint:disable:no-string-literal */
        if (window['SP']) {
            window['SP'].logSerializedPageState = callback;
        }
    };
    PageStore.prototype.setClearCallback = function (callback) {
        this._clearPage = callback;
    };
    PageStore.prototype.update = function (options) {
        lodash.merge(this.pageDefinition, options);
    };
    PageStore.prototype.savePageState = function () {
        if (this._autoSave && this._serializePage) {
            sessionStorage.setItem(this._PAGE_DATA_KEY, this._serializePage());
        }
    };
    PageStore.prototype.clearPageState = function () {
        if (this._autoSave) {
            sessionStorage.removeItem(this._PAGE_DATA_KEY);
        }
        this._clearPage();
    };
    PageStore.prototype.getPageState = function () {
        if (this._autoSave) {
            return sessionStorage.getItem(this._PAGE_DATA_KEY);
        }
        else {
            return undefined;
        }
    };
    PageStore.prototype.getPageReadyPromise = function () {
        return this._pageReadyPromise;
    };
    PageStore.prototype.setPageReady = function () {
        this._resolvePageReady();
    };
    __decorate([
        mobservable_1.observable
    ], PageStore.prototype, "pageDefinition", void 0);
    return PageStore;
}());
exports.PageStore = PageStore;

//# sourceMappingURL=PageStore.js.map
