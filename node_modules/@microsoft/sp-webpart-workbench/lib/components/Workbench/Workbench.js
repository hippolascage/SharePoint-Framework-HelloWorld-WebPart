/**
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * @file Workbench.tsx
 * The top level file for the Workbench. The Workbench is a tool that SharePoint
 * developers use to test their Web Parts. It is designed to make development
 * efficient by providing a production-like evironment for the developer to
 * test their Web Part and quickly make changes.
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var React = require('react');
var ZoneHost_1 = require('../zoneHost/ZoneHost');
var CommandBar_1 = require('../commandBar/CommandBar');
var DetailsPane_1 = require('../detailsPane/DetailsPane');
var Page_1 = require('../page/Page');
var mobservable_react_1 = require('mobservable-react');
var WebPartStore_1 = require('../../stores/WebPartStore');
var MobilePreview_1 = require('../mobilePreview/mobilePreview/MobilePreview');
require('./WorkBench.scss');
var WorkBench = (function (_super) {
    __extends(WorkBench, _super);
    function WorkBench() {
        _super.call(this);
        this._webPartStore = new WebPartStore_1.default();
        this.state = {
            displayMobilePreview: false,
            mobilePreviewDeviceType: MobilePreview_1.DeviceType.Phone
        };
        this._onClickMobileView = this._onClickMobileView.bind(this);
        this._onClickTabletView = this._onClickTabletView.bind(this);
        this._closeMobilePreview = this._closeMobilePreview.bind(this);
        this._setSuiteNavZIndex = this._setSuiteNavZIndex.bind(this);
    }
    // React magically finds this function by looking for the specific function name.
    // https://facebook.github.io/react/docs/context.html
    WorkBench.prototype.getChildContext = function () {
        return {
            pageStore: this.props.pageStore,
            webPartStore: this._webPartStore
        };
    };
    WorkBench.prototype.render = function () {
        var zones = [];
        var mobilePreview = undefined;
        var _a = this.props.store, addinType = _a.addinType, isEditing = _a.isEditing, isDetailsPaneVisible = _a.isDetailsPaneVisible;
        var rootClass = 'WorkBench ms-font-m' +
            (isEditing ? ' is-editing' : '') +
            (isDetailsPaneVisible ? ' has-pane' : '');
        var pageStore = this.props.pageStore;
        if (addinType) {
            zones.push(React.createElement(ZoneHost_1.default, {addinType: addinType}));
        }
        if (this.state.displayMobilePreview) {
            mobilePreview = React.createElement(MobilePreview_1.default, {onExit: this._closeMobilePreview, deviceType: this.state.mobilePreviewDeviceType});
        }
        return (React.createElement("div", {className: rootClass}, React.createElement("div", {className: 'WorkBench-header'}, React.createElement("div", {className: 'WorkBench-headerMenu'}, React.createElement("i", {className: 'ms-Icon ms-Icon--waffle'})), React.createElement("div", {className: 'WorkBench-headerTitle ms-font-xl'}, React.createElement("em", null, "Office 365"), " SharePoint Workbench"), React.createElement("div", {className: 'WorkBench-headerPerson'}, React.createElement("i", {className: 'ms-Icon ms-Icon--person'}))), React.createElement("div", null, React.createElement("div", {id: 'workbenchCommandBar', className: 'WorkBench-commandBar'}, React.createElement(CommandBar_1.default, {store: pageStore, appStore: this.props.store, onClickMobileView: this._onClickMobileView, onClickTabletView: this._onClickTabletView, closeMobilePreview: this._closeMobilePreview})), React.createElement("div", {id: 'workbenchPageContent', className: 'WorkBench-pageContent'}, React.createElement(Page_1.default, {store: pageStore, appStore: this.props.store}), React.createElement(DetailsPane_1.default, null))), zones, mobilePreview));
    };
    WorkBench.prototype._onClickMobileView = function () {
        this.setState({
            displayMobilePreview: true,
            mobilePreviewDeviceType: MobilePreview_1.DeviceType.Phone
        });
        this._setSuiteNavZIndex('0');
    };
    WorkBench.prototype._onClickTabletView = function () {
        this.setState({
            displayMobilePreview: true,
            mobilePreviewDeviceType: MobilePreview_1.DeviceType.Tablet
        });
        this._setSuiteNavZIndex('0');
    };
    WorkBench.prototype._closeMobilePreview = function () {
        this.setState({
            displayMobilePreview: false,
            mobilePreviewDeviceType: MobilePreview_1.DeviceType.Phone
        });
        this._setSuiteNavZIndex('5');
    };
    /**
     * Sets the z-index of the suite nav.
     * Purpose of this is so that the suite nav doesn't cover up the mobile preview header.
     * Should find a better way to achieve this.
     */
    WorkBench.prototype._setSuiteNavZIndex = function (value) {
        var suiteNav = document.getElementById('SuiteNavPlaceHolder');
        if (suiteNav) {
            suiteNav.style.zIndex = value;
        }
    };
    /* tslint:disable:no-any */
    WorkBench.childContextTypes = {
        /* tslint:enable:no-any */
        pageStore: React.PropTypes.object,
        webPartStore: React.PropTypes.object
    };
    WorkBench = __decorate([
        mobservable_react_1.observer
    ], WorkBench);
    return WorkBench;
}(React.Component));
exports.WorkBench = WorkBench;

//# sourceMappingURL=Workbench.js.map
