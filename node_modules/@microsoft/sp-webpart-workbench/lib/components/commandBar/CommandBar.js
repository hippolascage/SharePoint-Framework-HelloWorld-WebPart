"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var React = require('react');
require('./CommandBar.scss');
var CommandBar_resx_1 = require('./CommandBar.resx');
var CommandBar = (function (_super) {
    __extends(CommandBar, _super);
    function CommandBar(props) {
        _super.call(this, props);
        this._pageStore = props.store;
        this._onClickClear = this._onClickClear.bind(this);
        this._onClickReadEdit = this._onClickReadEdit.bind(this);
    }
    CommandBar.prototype.render = function () {
        if (this.props.appStore.isEditing) {
            return (React.createElement("div", {className: 'ms-CommandBar'}, React.createElement("div", {className: 'ms-CommandBar-sideCommands'}, React.createElement("div", {className: 'ms-CommandBarItem'}, React.createElement("div", {className: 'ms-CommandBarItem-linkWrapper'}, React.createElement("a", {className: 'ms-CommandBarItem-link', onClick: this.props.onClickMobileView}, React.createElement("span", {className: 'ms-CommandBarItem-icon ms-Icon ms-Icon--mobile'}), React.createElement("span", {className: 'ms-CommandBarItem-commandText ms-font-m ms-font-weight-regular'}, CommandBar_resx_1.default.Mobile)))), React.createElement("div", {className: 'ms-CommandBarItem'}, React.createElement("div", {className: 'ms-CommandBarItem-linkWrapper'}, React.createElement("a", {className: 'ms-CommandBarItem-link', onClick: this.props.onClickTabletView}, React.createElement("span", {className: 'ms-CommandBarItem-icon ms-Icon ms-Icon--tablet'}), React.createElement("span", {className: 'ms-CommandBarItem-commandText ms-font-m ms-font-weight-regular'}, CommandBar_resx_1.default.Tablet)))), React.createElement("div", {className: 'ms-CommandBarItem'}, React.createElement("div", {className: 'ms-CommandBarItem-linkWrapper'}, React.createElement("a", {className: 'ms-CommandBarItem-link', onClick: this._onClickReadEdit.bind(this)}, React.createElement("span", {className: 'ms-CommandBarItem-icon ms-Icon ms-Icon--eye'}), React.createElement("span", {className: 'ms-CommandBarItem-commandText ms-font-m ms-font-weight-regular'}, "Preview"))))), React.createElement("div", {className: 'ms-CommandBar-mainArea'}, React.createElement("div", {className: 'ms-CommandBarItem'}, React.createElement("div", {className: 'ms-CommandBarItem-linkWrapper'}, React.createElement("a", {className: 'ms-CommandBarItem-link'}, React.createElement("span", {className: 'ms-CommandBarItem-icon ms-Icon ms-Icon--save'}), React.createElement("span", {className: 'ms-CommandBarItem-commandText ms-font-m ms-font-weight-regular'}, "Save")))), React.createElement("div", {className: 'ms-CommandBarItem'}, React.createElement("div", {className: 'ms-CommandBarItem-linkWrapper'}, React.createElement("a", {className: 'ms-CommandBarItem-link', onClick: this._onClickClear.bind(this)}, React.createElement("span", {className: 'ms-CommandBarItem-icon ms-Icon ms-Icon--reactivate'}), React.createElement("span", {className: 'ms-CommandBarItem-commandText ms-font-m ms-font-weight-regular'}, "Discard")))))));
        }
        else {
            return (React.createElement("div", {className: 'ms-CommandBar'}, React.createElement("div", {className: 'ms-CommandBar-sideCommands'}, React.createElement("div", {className: 'ms-CommandBarItem'}, React.createElement("div", {className: 'ms-CommandBarItem-linkWrapper'}, React.createElement("a", {className: 'ms-CommandBarItem-link', onClick: this._onClickReadEdit.bind(this)}, React.createElement("span", {className: 'ms-CommandBarItem-icon ms-Icon ms-Icon--pencil'}), React.createElement("span", {className: 'ms-CommandBarItem-commandText ms-font-m ms-font-weight-regular'}, "Edit")))))));
        }
    };
    CommandBar.prototype._onClickClear = function () {
        this._pageStore.clearPageState();
    };
    CommandBar.prototype._onClickReadEdit = function () {
        this.props.appStore.toggleEdit();
    };
    return CommandBar;
}(React.Component));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = CommandBar;

//# sourceMappingURL=CommandBar.js.map
