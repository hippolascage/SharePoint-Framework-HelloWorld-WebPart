"use strict";
var path = require('path');
var os = require('os');
var fs = require('fs');
var Resolve_1 = require('@microsoft/sp-build-core-tasks/lib/utilities/Resolve');
// Set up some base constants
var projectRootPath = process.cwd();
var workbenchRootPath = Resolve_1.resolvePackage('@microsoft/sp-webpart-workbench', projectRootPath);
var hostname = os.hostname();
// Get the running project's serve.json
var serveConfig;
try {
    serveConfig = require(path.join(projectRootPath, 'config', 'serve.json'));
}
catch (e) {
    // Could not load serve config, setting defaults.
    serveConfig = {
        port: 4321,
        initialPage: ''
    };
}
// Generate a favicon URL. Chrome will request one if we don't give a URL, so in order to avoid an error in the
// console we'll give a URL.
var faviconUrl = getUrlForPath(path.join(workbenchRootPath, 'dist', 'assets', 'server-icon.png'));
// Find the module loader.
var moduleLoaderPackageName = '@microsoft/sp-module-loader';
var moduleLoaderUrl;
try {
    var moduleLoaderPoackagePath = Resolve_1.resolvePackage(moduleLoaderPackageName, workbenchRootPath);
    var moduleLoaderPath = path.join(moduleLoaderPoackagePath, 'dist', 'sp-module-loader.js');
    moduleLoaderUrl = getUrlForPath(moduleLoaderPath);
}
catch (e) {
}
// Get the manifests.js URL.
var tempDirPath = path.join(projectRootPath, 'temp');
var manifestsJsPath = path.join(tempDirPath, 'manifests.js');
var manifestJsUrl = getUrlForPath(manifestsJsPath);
function getUrlForPath(filePath) {
    var relativePath = path.relative(projectRootPath, filePath);
    return "http://" + hostname + ":" + serveConfig.port + "/" + relativePath.replace(/\\/g, '/');
}
function generateWorkbenchPageContent() {
    var head;
    var body;
    if (!moduleLoaderUrl) {
        body = getErrorBody('Module loader could not be resolved. Unable to load workbench');
    }
    else {
        head = "\n  <script type=\"text/javascript\" src=\"" + manifestJsUrl + "\"></script>\n  <script type=\"text/javascript\" src=\"" + moduleLoaderUrl + "\"></script>\n  <script type=\"text/javascript\">\n    window.DEBUG = true;\n    window.ENVIRONMENTTYPE = 'Local';\n    window.SP = {};\n    // This is a hack to work around a react-redux issue.\n    window.process = { env: { NODE_ENV: 'production' } };\n\n    window.preloadedData = {\n      'clientSideApplicationId': '8be81a5c-af38-4bb2-af97-afa3b64dfbed',\n      manifests: debugManifests.getManifests(),\n      spPageContextInfo: {\n        'currentCultureName': 'en-us',\n        'siteId': '00000000-0000-4000-0000-111111111111',\n        'userDisplayName': 'User 1',\n        'userLoginName': 'user1@contoso.com',\n        'webAbsoluteUrl': 'https://wwww.contoso.com/sites/workbench',\n        'webId': '00000000-0000-4000-0000-222222222222',\n        'webPermMasks': { High: 0x7FFFFFFF, Low: 0xFFFFFFFF },\n        'webServerRelativeUrl': '/sites/workbench',\n        'webTitle': 'Local Workbench'\n      }\n    };\n\n  </script>";
        body = "\n  <script type=\"text/javascript\">\n    window.spModuleLoader.start(window.preloadedData);\n  </script>";
    }
    return getPageWithBodyAndHead(body, head);
}
exports.generateWorkbenchPageContent = generateWorkbenchPageContent;
function getErrorBody(serrorMessage) {
    return "\n  <span style=\"font-weight:bold;color:red;font-size:20px;\">\n    " + serrorMessage + "\n  </span>";
}
function getPageWithBodyAndHead(body, head) {
    return "<!doctype html>\n<html dir=\"ltr\">\n<head>\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n\n  <title>SharePoint Web Part Workbench</title>\n\n  <link rel=\"shortcut icon\" href=\"" + faviconUrl + "\" />\n  <link rel=\"stylesheet\" href=\"https://appsforoffice.microsoft.com/fabric/2.0.1/fabric.components.min.css\">\n" + (head || '') + "\n</head>\n<body>\n" + body + "\n</body>\n</html>\n";
}
var workbenchFilePath = path.join(tempDirPath, 'workbench.html');
fs.writeFileSync(workbenchFilePath, generateWorkbenchPageContent());
var redirectPath = getUrlForPath(workbenchFilePath);
/* tslint:disable:no-any */
function workbenchPage(request, response) {
    /* tslint:enable:no-any */
    response.redirect(redirectPath);
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = workbenchPage;

//# sourceMappingURL=workbenchPage.js.map
