{"version":3,"sources":["RemoveTripleSlashReferenceTask.ts"],"names":[],"mappings":"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","file":"RemoveTripleSlashReferenceTask.js","sourcesContent":["import gulp = require('gulp');\nimport gulpUtil = require('gulp-util');\nimport md5 = require('md5');\nimport * as path from 'path';\nimport through2 = require('through2');\n/* tslint:disable:typedef */\nconst cached = require('gulp-cache');\n/* tslint:enable:typedef */\n\nimport {\n  GulpTask\n} from 'gulp-core-build';\n\nexport interface IRemoveTripleSlashReferenceTaskConfig {\n}\n\nexport class RemoveTripleSlashReferenceTask extends GulpTask<IRemoveTripleSlashReferenceTaskConfig> {\n  public name: string = 'ts-npm-lint';\n\n  public taskConfig: IRemoveTripleSlashReferenceTaskConfig = {\n  };\n\n  public executeTask(gulp: gulp.Gulp): void {\n    const taskScope: RemoveTripleSlashReferenceTask = this;\n\n    const filePattern: string = path.join(taskScope.buildConfig.libFolder, '**', '*.d.ts');\n\n    /**\n     * Matches:\n     *  /// <reference path=\"../../typings.d.ts\" />\n     *  /// <reference path='../../typings.d.ts' />\n     *  ///<reference path='../../typings.d.ts' />\n     *  ///<reference foo=\"bar\" path='../../typings.d.ts'/>\n     *  /// <reference path='../../typings.d.ts' bar=\"foo\" />\n     */\n    const referencePathRegex: RegExp = /^\\/\\/\\/[ ]+<reference.*path=['\"]([^'\"]*)['\"][^>]+>/gm;\n    return gulp.src(filePattern)\n      .pipe(cached(\n        /* tslint:disable:no-function-expression */\n        through2.obj(function(file: gulpUtil.File, encoding: string,\n          callback: (encoding?: string, file?: gulpUtil.File) => void): void {\n          /* tslint:enable:no-function-expression */\n\n          try {\n            const rawContents: string = file.contents.toString(encoding);\n            const relativePathToCurrentFile: string = path.relative(taskScope.buildConfig.rootPath, file.path);\n            taskScope.logVerbose(relativePathToCurrentFile);\n\n            file[taskScope.name] = {\n              failureCount: 0\n            };\n\n            const newContents: string = rawContents.replace(referencePathRegex,\n              (_: string, tsdFile: string) => {\n                file[taskScope.name].failureCount++;\n                taskScope.log(`Removed reference to '${tsdFile}' in ${relativePathToCurrentFile}`);\n                return `// [${taskScope.name}] removed reference to '${tsdFile}'`;\n              }\n            );\n\n            file.contents = new Buffer(newContents);\n            this.push(file);\n            callback();\n          } catch (e) {\n            taskScope.logError(e);\n            callback(e);\n          }\n        }),\n        {\n          name: md5(taskScope.name + taskScope.buildConfig.rootPath),\n          // What on the result indicates it was successful\n          success: (jshintedFile: gulpUtil.File): boolean => {\n            /* tslint:disable:no-string-literal */\n            return jshintedFile[taskScope.name].failureCount === 0;\n            /* tslint:enable:no-string-literal */\n          },\n          // By default, the cache attempts to store the value of the objects in the stream\n          // For this task, this is over-engineering since we never need to store anything extra.\n          value: (file: gulpUtil.File): Object => {\n            return {\n              path: file.path\n            };\n          }\n        }\n      ))\n      .pipe(gulp.dest(taskScope.buildConfig.libFolder));\n  }\n}\n"],"sourceRoot":"/source/"}