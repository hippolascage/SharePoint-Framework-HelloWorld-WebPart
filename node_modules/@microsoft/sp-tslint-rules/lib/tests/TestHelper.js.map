{"version":3,"sources":["tests/TestHelper.ts"],"names":[],"mappings":"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","file":"tests/TestHelper.js","sourcesContent":["/**\r\n * This file is copy-pasted from https://github.com/Microsoft/tslint-microsoft-contrib/blob/master/tests/TestHelper.ts\r\n * Should remove this and import from tslint-microsoft-contrib package once it exports this file.\r\n * Tracking github issue link: https://github.com/Microsoft/tslint-microsoft-contrib/issues/184\r\n */\r\n\r\n// tslint:disable\r\nimport * as Lint from 'tslint/lib/lint';\r\nimport * as fs from 'fs';\r\nimport * as chai from 'chai';\r\n\r\n/**\r\n * Test Utilities.\r\n */\r\nexport module TestHelper {\r\n\r\n    export interface FailurePosition {\r\n        character: number;\r\n        line: number;\r\n        position?: number;\r\n    }\r\n    export interface ExpectedFailure {\r\n        ruleName: string;\r\n        name: string;\r\n        failure: string;\r\n        endPosition?: FailurePosition;\r\n        startPosition: FailurePosition;\r\n    }\r\n    interface RuleConfiguration {\r\n        rules: {\r\n            [key: string]: boolean | any[];\r\n        };\r\n    }\r\n\r\n    export function assertNoViolation(ruleName: string,\r\n                                      inputFileOrScript: string) {\r\n        runRuleAndEnforceAssertions(ruleName, null, inputFileOrScript, []);\r\n    }\r\n    export function assertNoViolationWithOptions(ruleName: string,\r\n                                                 options: any[],\r\n                                                 inputFileOrScript: string) {\r\n        runRuleAndEnforceAssertions(ruleName, options, inputFileOrScript, []);\r\n    }\r\n    export function assertViolationsWithOptions(ruleName: string,\r\n                                                options: any[],\r\n                                                inputFileOrScript: string,\r\n                                                expectedFailures: ExpectedFailure[]) {\r\n        runRuleAndEnforceAssertions(ruleName, options, inputFileOrScript, expectedFailures);\r\n    }\r\n    export function assertViolations(ruleName: string,\r\n                                     inputFileOrScript: string,\r\n                                     expectedFailures: ExpectedFailure[]) {\r\n        runRuleAndEnforceAssertions(ruleName, null, inputFileOrScript, expectedFailures);\r\n    }\r\n\r\n    export function runRule(ruleName : string, userOptions: string[], inputFileOrScript : string): Lint.LintResult {\r\n        const configuration: RuleConfiguration = {\r\n            rules: {}\r\n        };\r\n        if (userOptions != null && userOptions.length > 0) {\r\n            //options like `[4, 'something', false]` were passed, so prepend `true` to make the array like `[true, 4, 'something', false]`\r\n            configuration.rules[ruleName] = (<any[]>[true]).concat(userOptions);\r\n        } else {\r\n            configuration.rules[ruleName] = true;\r\n        }\r\n\r\n        const options : Lint.ILinterOptions = {\r\n            formatter: 'json',\r\n            configuration: configuration,\r\n            rulesDirectory: 'lib/rules/',\r\n            formattersDirectory: 'lib/formatters/'\r\n        };\r\n\r\n\t\tlet result: Lint.LintResult;\r\n        if (inputFileOrScript.match(/.*\\.ts(x)?$/)) {\r\n            const contents = fs.readFileSync(inputFileOrScript, 'utf8');\r\n            const linter = new Lint.Linter(inputFileOrScript, contents, options);\r\n            result = linter.lint();\r\n        } else {\r\n            const linter = new Lint.Linter('file.ts', inputFileOrScript, options);\r\n            result = linter.lint();\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function runRuleAndEnforceAssertions(ruleName : string, userOptions: string[], inputFileOrScript : string,\r\n                                         expectedFailures : ExpectedFailure[]) {\r\n\r\n        const lintResult: Lint.LintResult = runRule(ruleName, userOptions, inputFileOrScript);\r\n        const actualFailures: ExpectedFailure[] = JSON.parse(lintResult.output);\r\n\r\n        // All the information we need is line and character of start position. For JSON comparison\r\n        // to work, we will delete the information that we are not interested in from both actual and\r\n        // expected failures.\r\n        actualFailures.forEach((actual: ExpectedFailure): void => {\r\n            delete actual.startPosition.position;\r\n            delete actual.endPosition;\r\n            // Editors start counting lines and characters from 1, but tslint does it from 0.\r\n            // To make thing easier to debug, align to editor values.\r\n            actual.startPosition.line = actual.startPosition.line + 1;\r\n            actual.startPosition.character = actual.startPosition.character + 1;\r\n        });\r\n        expectedFailures.forEach((expected: ExpectedFailure): void => {\r\n            delete expected.startPosition.position;\r\n            delete expected.endPosition;\r\n        });\r\n\r\n        const errorMessage = `Wrong # of failures: \\n${JSON.stringify(actualFailures, null, 2)}`;\r\n        chai.assert.equal(expectedFailures.length, actualFailures.length, errorMessage);\r\n\r\n        expectedFailures.forEach((expected: ExpectedFailure, index: number): void => {\r\n            const actual = actualFailures[index];\r\n            chai.assert.deepEqual(actual, expected);\r\n        });\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}