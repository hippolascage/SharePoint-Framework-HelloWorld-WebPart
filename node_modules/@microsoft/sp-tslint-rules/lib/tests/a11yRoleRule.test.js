"use strict";
var TestHelper_1 = require('./TestHelper');
var a11yRoleRule_1 = require('../rules/a11yRoleRule');
/**
 * Unit tests for a11y-role
 */
// tslint:disable:no-empty
describe('a11yRoleRule', function () {
    var ruleName = 'a11y-role';
    describe('should pass', function () {
        it('when the role name is correct', function () {
            var fileName = 'test-data/a11yRole/CorrectNamePassingTestInput.tsx';
            TestHelper_1.TestHelper.assertNoViolation(ruleName, fileName);
        });
        it('when the attribute name is not role', function () {
            var fileName = 'test-data/a11yRole/AttributeNotRolePassingTestInput.tsx';
            TestHelper_1.TestHelper.assertNoViolation(ruleName, fileName);
        });
        it('when the role name is not string literal', function () {
            var fileName = 'test-data/a11yRole/RoleNameNotStringPassingTestInput.tsx';
            TestHelper_1.TestHelper.assertNoViolation(ruleName, fileName);
        });
        it('for multiple correct role names', function () {
            var fileName = 'test-data/a11yRole/MultipleCorrectRolePassingTestInput.tsx';
            TestHelper_1.TestHelper.assertNoViolation(ruleName, fileName);
        });
    });
    describe('should fail', function () {
        it('for role name not existant', function () {
            var fileName = 'test-data/a11yRole/WrongNameFailingTestInput.tsx';
            TestHelper_1.TestHelper.assertViolations(ruleName, fileName, [
                {
                    name: fileName,
                    ruleName: ruleName,
                    startPosition: { character: 6, line: 1 },
                    failure: a11yRoleRule_1.getFailureStringInvalidRole('myRoleName')
                },
                {
                    name: fileName,
                    ruleName: ruleName,
                    startPosition: { character: 6, line: 2 },
                    failure: a11yRoleRule_1.getFailureStringInvalidRole('wrong')
                },
                {
                    name: fileName,
                    ruleName: ruleName,
                    startPosition: { character: 6, line: 3 },
                    failure: a11yRoleRule_1.getFailureStringInvalidRole('role')
                }
            ]);
        });
        it('for role name that is abstract', function () {
            var fileName = 'test-data/a11yRole/NonAbstractFailingTestInput.tsx';
            TestHelper_1.TestHelper.assertViolations(ruleName, fileName, [
                {
                    name: fileName,
                    ruleName: ruleName,
                    startPosition: { character: 6, line: 1 },
                    failure: a11yRoleRule_1.getFailureStringInvalidRole('input')
                },
                {
                    name: fileName,
                    ruleName: ruleName,
                    startPosition: { character: 6, line: 2 },
                    failure: a11yRoleRule_1.getFailureStringInvalidRole('landmark')
                },
                {
                    name: fileName,
                    ruleName: ruleName,
                    startPosition: { character: 6, line: 3 },
                    failure: a11yRoleRule_1.getFailureStringInvalidRole('structure')
                }
            ]);
        });
        it('when the role name is not defined', function () {
            var fileName = 'test-data/a11yRole/RoleNameUndefinedFailingTestInput.tsx';
            TestHelper_1.TestHelper.assertViolations(ruleName, fileName, [
                {
                    name: fileName,
                    ruleName: ruleName,
                    startPosition: { character: 6, line: 4 },
                    failure: a11yRoleRule_1.getFailureStringUndefinedRole()
                },
                {
                    name: fileName,
                    ruleName: ruleName,
                    startPosition: { character: 6, line: 5 },
                    failure: a11yRoleRule_1.getFailureStringUndefinedRole()
                },
                {
                    name: fileName,
                    ruleName: ruleName,
                    startPosition: { character: 6, line: 6 },
                    failure: a11yRoleRule_1.getFailureStringUndefinedRole()
                }
            ]);
        });
    });
});

//# sourceMappingURL=a11yRoleRule.test.js.map
