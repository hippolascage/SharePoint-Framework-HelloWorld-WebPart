"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var gulp_core_build_1 = require('gulp-core-build');
var ServeTask = (function (_super) {
    __extends(ServeTask, _super);
    function ServeTask() {
        _super.apply(this, arguments);
        this.name = 'serve';
        this.taskConfig = {
            api: undefined,
            initialPage: '/index.html',
            port: 4321
        };
    }
    ServeTask.prototype.executeTask = function (gulp, completeCallback) {
        /* tslint:disable:typedef */
        var gulpConnect = require('gulp-connect');
        var open = require('gulp-open');
        /* tslint:enable:typedef */
        var gutil = require('gulp-util');
        var path = require('path');
        var openBrowser = (process.argv.indexOf('--nobrowser') === -1);
        var portArgumentIndex = process.argv.indexOf('--port');
        var _a = this.taskConfig, port = _a.port, initialPage = _a.initialPage, api = _a.api;
        var rootPath = this.buildConfig.rootPath;
        if (portArgumentIndex >= 0 && process.argv.length > (portArgumentIndex + 1)) {
            port = Number(process.argv[portArgumentIndex + 1]);
        }
        // Spin up the connect server
        gulpConnect.server({
            livereload: true,
            middleware: function () { return [logRequestsMiddleware, enableCorsMiddleware]; },
            port: port,
            root: rootPath
        });
        // If an api is provided, spin it up.
        if (api) {
            var apiMap = void 0;
            try {
                apiMap = require(path.join(rootPath, api.entryPath));
                if (apiMap && apiMap.default) {
                    apiMap = apiMap.default;
                }
            }
            catch (e) {
                this.logError("The api entry could not be loaded: " + api.entryPath);
            }
            if (apiMap) {
                console.log("Starting api server on port " + api.port + ".");
                var express = require('express');
                var app = express();
                app.use(logRequestsMiddleware);
                app.use(enableCorsMiddleware);
                app.use(setJSONResponseContentTypeMiddleware);
                // Load the apis.
                for (var apiMapEntry in apiMap) {
                    if (apiMap.hasOwnProperty(apiMapEntry)) {
                        console.log("Registring api: " + gutil.colors.green(apiMapEntry));
                        app.get(apiMapEntry, apiMap[apiMapEntry]);
                    }
                }
                app.listen(api.port || 5432);
            }
        }
        // Spin up the browser.
        if (openBrowser) {
            var uri = initialPage;
            if (!initialPage.match(/^https?:\/\//)) {
                if (!initialPage.match(/^\//)) {
                    initialPage = "/" + initialPage;
                }
                uri = "http://localhost:" + port + initialPage;
            }
            gulp.src('')
                .pipe(open({
                uri: uri
            }));
        }
        completeCallback();
    };
    return ServeTask;
}(gulp_core_build_1.GulpTask));
exports.ServeTask = ServeTask;
function logRequestsMiddleware(req, res, next) {
    var colors = require('gulp-util').colors;
    /* tslint:disable:no-any */
    var ipAddress = req.ip;
    /* tslint:enable:no-any */
    var resourceColor = colors.cyan;
    if (req && req.url) {
        if (req.url.indexOf('.bundle.js') >= 0) {
            resourceColor = colors.green;
        }
        else if (req.url.indexOf('.js') >= 0) {
            resourceColor = colors.magenta;
        }
        console.log([
            "  Request: ",
            ("" + (ipAddress ? "[" + colors.cyan(ipAddress) + "] " : "")),
            ("'" + resourceColor(req.url) + "'")
        ].join(''));
    }
    next();
}
function enableCorsMiddleware(req, res, next) {
    res.setHeader('Access-Control-Allow-Origin', '*');
    next();
}
function setJSONResponseContentTypeMiddleware(req, res, next) {
    res.setHeader('content-type', 'application/json');
    next();
}

//# sourceMappingURL=ServeTask.js.map
