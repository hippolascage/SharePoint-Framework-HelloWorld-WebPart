{"version":3,"sources":["ServeTask.ts"],"names":[],"mappings":"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","file":"ServeTask.js","sourcesContent":["import { GulpTask } from 'gulp-core-build';\nimport { IBuildConfig } from 'gulp-core-build/lib/IBuildConfig';\nimport gulp = require('gulp');\nimport http = require('http');\nimport * as pathType from 'path';\nimport * as gUtilType from 'gulp-util';\nimport * as expressType from 'express';\n\nexport interface IServeTaskConfig {\n  api?: {\n    port: number,\n    entryPath: string\n  };\n  initialPage: string;\n  port: number;\n}\n\ninterface IApiMap {\n  [ route: string ]: Function;\n}\n\nexport class ServeTask extends GulpTask<IServeTaskConfig> {\n  public name: string = 'serve';\n\n  public taskConfig: IServeTaskConfig = {\n    api: undefined,\n    initialPage: '/index.html',\n    port: 4321\n  };\n\n  public executeTask(gulp: gulp.Gulp, completeCallback?: (error?: string) => void): void {\n    /* tslint:disable:typedef */\n    const gulpConnect = require('gulp-connect');\n    const open = require('gulp-open');\n    /* tslint:enable:typedef */\n    const gutil: typeof gUtilType = require('gulp-util');\n    const path: typeof pathType = require('path');\n    const openBrowser: boolean = (process.argv.indexOf('--nobrowser') === -1);\n    const portArgumentIndex: number = process.argv.indexOf('--port');\n    let { port, initialPage, api }: IServeTaskConfig = this.taskConfig;\n    const { rootPath }: IBuildConfig = this.buildConfig;\n\n    if (portArgumentIndex >= 0 && process.argv.length > (portArgumentIndex + 1)) {\n      port = Number(process.argv[portArgumentIndex + 1]);\n    }\n\n    // Spin up the connect server\n    gulpConnect.server({\n      livereload: true,\n      middleware: (): Function[] => [logRequestsMiddleware, enableCorsMiddleware],\n      port: port,\n      root: rootPath\n    });\n\n    // If an api is provided, spin it up.\n    if (api) {\n      let apiMap: IApiMap | { default: IApiMap };\n\n      try {\n        apiMap = require(path.join(rootPath, api.entryPath));\n\n        if (apiMap && (apiMap as { default: IApiMap }).default) {\n          apiMap = (apiMap as { default: IApiMap }).default;\n        }\n      } catch (e) {\n        this.logError(`The api entry could not be loaded: ${api.entryPath}`);\n      }\n\n      if (apiMap) {\n        console.log(`Starting api server on port ${api.port}.`);\n\n        const express: typeof expressType = require('express');\n        const app: expressType.Express = express();\n\n        app.use(logRequestsMiddleware);\n        app.use(enableCorsMiddleware);\n        app.use(setJSONResponseContentTypeMiddleware);\n\n        // Load the apis.\n        for (const apiMapEntry in apiMap) {\n          if (apiMap.hasOwnProperty(apiMapEntry)) {\n            console.log(`Registring api: ${ gutil.colors.green(apiMapEntry) }`);\n            app.get(apiMapEntry, apiMap[apiMapEntry]);\n          }\n        }\n        app.listen(api.port || 5432);\n      }\n    }\n\n    // Spin up the browser.\n    if (openBrowser) {\n      let uri: string = initialPage;\n      if (!initialPage.match(/^https?:\\/\\//)) {\n        if (!initialPage.match(/^\\//)) {\n          initialPage = `/${initialPage}`;\n        }\n\n        uri = `http://localhost:${port}${initialPage}`;\n      }\n\n      gulp.src('')\n        .pipe(open({\n          uri: uri\n        }));\n    }\n\n    completeCallback();\n  }\n}\n\nfunction logRequestsMiddleware(req: http.IncomingMessage, res: http.ServerResponse, next?: () => void): void {\n  const { colors }: typeof gUtilType = require('gulp-util');\n  /* tslint:disable:no-any */\n  const ipAddress: string = (req as any).ip;\n  /* tslint:enable:no-any */\n  let resourceColor: Chalk.ChalkChain = colors.cyan;\n\n  if (req && req.url) {\n    if (req.url.indexOf('.bundle.js') >= 0) {\n      resourceColor = colors.green;\n    } else if (req.url.indexOf('.js') >= 0) {\n      resourceColor = colors.magenta;\n    }\n\n    console.log(\n      [\n        `  Request: `,\n        `${ ipAddress ? `[${ colors.cyan(ipAddress) }] ` : `` }`,\n        `'${ resourceColor(req.url) }'`\n      ].join(''));\n  }\n\n  next();\n}\n\nfunction enableCorsMiddleware(req: http.IncomingMessage, res: http.ServerResponse, next?: () => void): void {\n  res.setHeader('Access-Control-Allow-Origin', '*');\n  next();\n}\n\nfunction setJSONResponseContentTypeMiddleware(req: http.IncomingMessage,\n                                              res: http.ServerResponse,\n                                              next?: () => void): void {\n  res.setHeader('content-type', 'application/json');\n  next();\n}\n"],"sourceRoot":"/source/"}